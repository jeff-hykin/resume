// https://deno.land/x/good@1.13.2.0/flattened/empty_generator_object.js
var emptyGeneratorObject = function* () {
}();
emptyGeneratorObject.length = 0;

// https://deno.land/x/good@1.13.2.0/flattened/make_iterator.js
var makeIterator = (value) => {
  if (typeof value?.next == "function") {
    return value;
  } else if (value == null) {
    return emptyGeneratorObject;
  } else if (typeof value[Symbol.iterator] == "function") {
    const iterator = value[Symbol.iterator]();
    if (!Number.isFinite(iterator?.length)) {
      if (Number.isFinite(value?.length)) {
        iterator.length = value.length;
      } else if (Number.isFinite(value?.size)) {
        iterator.length = value.size;
      }
    }
    return iterator;
  } else if (typeof value[Symbol.asyncIterator] == "function") {
    const iterator = value[Symbol.asyncIterator]();
    if (!Number.isFinite(iterator?.length)) {
      if (Number.isFinite(value?.length)) {
        iterator.length = value.length;
      } else if (Number.isFinite(value?.size)) {
        iterator.length = value.size;
      }
    }
    return iterator;
  } else if (typeof value == "function") {
    return value();
  } else if (Object.getPrototypeOf(value).constructor == Object) {
    const entries = Object.entries(value);
    const output = entries[Symbol.iterator]();
    output.length = entries.length;
    return output;
  }
  return emptyGeneratorObject;
};

// https://deno.land/x/good@1.13.2.0/flattened/iter_zip_long_sync.js
var innerIterZipLongSync = function* (...iterables) {
  const iterators = iterables.map(makeIterator);
  while (true) {
    const nexts = iterators.map((each) => each.next());
    if (nexts.every((each) => each.done)) {
      break;
    }
    yield nexts.map((each) => each.value);
  }
};
var iterZipLongSync = function(...iterables) {
  const generatorObject = innerIterZipLongSync(...iterables);
  const finalLength = Math.max(...iterables.map((each) => typeof each != "function" && (typeof each?.length == "number" ? each?.length : each.size)));
  if (finalLength == finalLength) {
    generatorObject.length = finalLength;
  }
  return generatorObject;
};

// https://deno.land/x/good@1.13.2.0/flattened/indent.js
var indent = ({ string: string2, by = "    ", noLead = false }) => (noLead ? "" : by) + string2.replace(/\n/g, "\n" + by);

// https://deno.land/x/good@1.13.2.0/flattened/typed_array__class.js
var TypedArray = typeof globalThis?.Uint8Array != "function" ? class {
} : Object.getPrototypeOf(Uint8Array.prototype).constructor;

// https://deno.land/x/good@1.13.2.0/flattened/typed_array_classes.js
var typedArrayClasses = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array
];
if (globalThis.BigInt64Array) {
  typedArrayClasses.push(globalThis.BigInt64Array);
}
if (globalThis.BigUint64Array) {
  typedArrayClasses.push(globalThis.BigUint64Array);
}

// https://deno.land/x/good@1.13.2.0/flattened/all_keys.js
var allKeys = function(obj) {
  const listOfKeys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    listOfKeys.push(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return [...new Set(listOfKeys.flat(1))];
};

// https://deno.land/x/good@1.13.2.0/flattened/is_valid_identifier.js
var regexIdentifier = /^(?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D])(?:[\$0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF])*$/;
var regexIdentifierES5 = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|null|this|true|void|with|break|catch|class|const|false|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)(?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC])(?:[\$0-9A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC])*$/;
var regexES6ReservedWord = /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|await|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/;
function isValidIdentifier(value) {
  if (typeof value != "string") {
    return false;
  }
  const tmp = value.replace(/\\u([a-fA-F0-9]{4})|\\u\{([0-9a-fA-F]{1,})\}/g, function($0, $1, $22) {
    var codePoint = parseInt($22 || $1, 16);
    if (codePoint >= 55296 && codePoint <= 57343) {
      return "\0";
    }
    return String.fromCodePoint(codePoint);
  });
  const es5Warning = !regexIdentifierES5.test(
    // Only Unicode escapes are allowed in ES5 identifiers.
    value.replace(/\\u([a-fA-F0-9]{4})/g, function($0, $1) {
      return String.fromCodePoint(parseInt($1, 16));
    })
  );
  var isReserved;
  if ((isReserved = regexES6ReservedWord.test(tmp)) || !regexIdentifier.test(tmp)) {
    return false;
  } else {
    return true;
  }
}

// https://deno.land/x/good@1.13.2.0/flattened/is_valid_key_literal.js
function isValidKeyLiteral(value) {
  if (typeof value != "string") {
    return false;
  }
  if (value.match(/^[a-zA-Z_$][a-zA-Z0-9_$]*$/)) {
    return true;
  }
  return isValidIdentifier(value);
}

// https://deno.land/x/good@1.13.2.0/flattened/to_representation.js
var reprSymbol = Symbol.for("representation");
var denoInspectSymbol = Symbol.for("Deno.customInspect");
var RegExpPrototype = RegExp.prototype;
var BigIntPrototype = BigInt.prototype;
var DatePrototype = Date.prototype;
var ArrayPrototype = Array.prototype;
var SetPrototype = Set.prototype;
var MapPrototype = Map.prototype;
var ObjectPrototype = Object.prototype;
var ErrorPrototype = Error.prototype;
var PromisePrototype = Promise.prototype;
var UrlPrototype = globalThis.URL?.prototype;
var isProbablyAPrototype = (item) => typeof item?.constructor == "function" && item.constructor?.prototype == item && isValidIdentifier(item.constructor?.name);
var representSymbol = (item) => {
  if (!item.description) {
    return "Symbol()";
  } else {
    const description = item.description;
    let globalVersion = Symbol.for(description);
    if (globalVersion == item) {
      return `Symbol.for(${JSON.stringify(description)})`;
    } else if (description.startsWith("Symbol.") && Symbol[description.slice(7)]) {
      return description;
    } else {
      return `Symbol(${JSON.stringify(description)})`;
    }
  }
};
var reprKey = (key2) => {
  if (typeof key2 == "symbol") {
    return `[${representSymbol(key2)}]`;
  } else if (isValidKeyLiteral(key2)) {
    return key2;
  } else {
    return JSON.stringify(key2);
  }
};
var allGlobalKeysAtInit = Object.freeze(allKeys(globalThis));
var toRepresentation = (item, { alreadySeen = /* @__PURE__ */ new Map(), debug = false, simplified, indent: indent3 = "    ", globalValues } = {}) => {
  if (Number.isFinite(indent3)) {
    indent3 = " ".repeat(indent3);
  }
  const options = { alreadySeen, debug, simplified, indent: indent3 };
  const recursionWrapper = (item2, options2) => {
    let groupIsOn = false;
    try {
      if (item2 === void 0) {
        return "undefined";
      } else if (item2 === null) {
        return "null";
      }
      const { alreadySeen: alreadySeen2, simplified: simplified2, indent: indent4 } = options2;
      if (item2 instanceof Object) {
        if (alreadySeen2.has(item2)) {
          const output2 = alreadySeen2.get(item2);
          if (output2 != null) {
            return output2;
          } else {
            return `${String(item2)} /*Self Reference*/`;
          }
        } else {
          alreadySeen2.set(item2, null);
        }
      }
      const prototype = Object.getPrototypeOf(item2);
      if (typeof item2[reprSymbol] == "function") {
        try {
          const output2 = item2[reprSymbol](options2);
          alreadySeen2.set(item2, output2);
          return output2;
        } catch (error) {
          if (debug) {
            console.error(`calling Symbol.for("representation") method failed (skipping)
Error was: ${error?.stack || error}`);
          }
        }
      }
      if (typeof item2[denoInspectSymbol] == "function") {
        try {
          const output2 = item2[denoInspectSymbol](options2);
          alreadySeen2.set(item2, output2);
          return output2;
        } catch (error) {
          if (debug) {
            console.error(`calling Symbol.for("Deno.customInspect") method failed (skipping)
Error was: ${error?.stack || error}`);
          }
        }
      }
      if (debug) {
        console.group();
        groupIsOn = true;
      }
      let output;
      if (typeof item2 == "number" || typeof item2 == "boolean" || prototype == RegExpPrototype) {
        output = String(item2);
      } else if (typeof item2 == "string") {
        output = JSON.stringify(item2);
      } else if (typeof item2 == "symbol") {
        output = representSymbol(item2);
      } else if (prototype == BigIntPrototype) {
        output = `BigInt(${item2.toString()})`;
      } else if (prototype == DatePrototype) {
        output = `new Date(${item2.getTime()})`;
      } else if (prototype == ArrayPrototype) {
        output = arrayLikeRepr(item2, options2);
        let nonIndexKeys;
        try {
          nonIndexKeys = Object.keys(item2).filter((each) => !(Number.isInteger(each - 0) && each >= 0));
        } catch (error) {
          if (debug) {
            console.error(`[toRepresentation] error checking nonIndexKeys
${error?.stack || error}`);
          }
        }
        if (nonIndexKeys.length > 0) {
          let extraKeys = {};
          for (const each of nonIndexKeys) {
            try {
              extraKeys[each] = item2[each];
            } catch (error) {
            }
          }
          if (Object.keys(extraKeys).length > 0) {
            output = `Object.assign(${output}, ${pureObjectRepr(extraKeys)})`;
          }
        }
      } else if (prototype == SetPrototype) {
        output = `new Set(${arrayLikeRepr(item2, options2)})`;
      } else if (prototype == MapPrototype) {
        output = `new Map(${mapLikeObject(item2.entries(), options2)})`;
      } else if (prototype == PromisePrototype) {
        output = `Promise.resolve(/*unknown*/)`;
      } else if (prototype == UrlPrototype) {
        output = `new URL(${JSON.stringify(item2?.href)})`;
      } else if (isGlobalValue(item2)) {
        const key2 = globalValueMap.get(item2);
        if (isValidIdentifier(key2) || key2 == "eval") {
          output = key2;
        } else {
          if (typeof key2 == "symbol") {
            output = `globalThis[${representSymbol(key2)}]`;
          } else if (isValidKeyLiteral(key2)) {
            output = `globalThis.${key2}`;
          } else {
            output = `globalThis[${JSON.stringify(key2)}]`;
          }
        }
      } else if (isProbablyAPrototype(item2)) {
        const name2 = item2.constructor.name;
        let isPrototypeOfGlobal;
        try {
          isPrototypeOfGlobal = globalThis[name2]?.prototype == item2;
        } catch (error) {
        }
        if (isPrototypeOfGlobal) {
          output = `${name2}.prototype`;
        } else {
          if (simplified2) {
            output = `${name2}.prototype /*${name2} is local*/`;
          } else {
            output = `/*prototype of ${name2}*/ ${customObjectRepr(item2, options2)}`;
          }
        }
      } else if (prototype == ErrorPrototype && item2?.constructor != globalThis.DOMException) {
        try {
          output = `new Error(${JSON.stringify(item2?.message)})`;
        } catch (error) {
          output = `new Error(${JSON.stringify(item2)})`;
        }
      } else if (typeof item2 == "function") {
        let isNativeCode;
        let asString;
        let isClass;
        const getAsString = () => {
          if (asString != null) {
            return asString;
          }
          try {
            asString = Function.prototype.toString.call(item2);
          } catch (error) {
          }
          return asString;
        };
        const getIsNativeCode = () => {
          if (isNativeCode != null) {
            return isNativeCode;
          }
          try {
            isNativeCode = !!getAsString().match(/{\s*\[native code\]\s*}$/);
          } catch (error) {
          }
          return isNativeCode;
        };
        const getIsClass = () => {
          if (isClass != null) {
            return isClass;
          }
          try {
            isClass = item2.name && getAsString().match(/^class\b/);
          } catch (error) {
          }
          return isClass;
        };
        const name2 = item2.name;
        if (isValidIdentifier(name2)) {
          if (getIsNativeCode()) {
            output = `${name2} /*native function*/`;
          } else if (getIsClass()) {
            if (simplified2) {
              output = `${name2} /*class*/`;
            } else {
              output = getAsString();
            }
          } else {
            if (simplified2) {
              output = `${item2.name} /*function*/`;
            } else {
              output = `(${getAsString()})`;
            }
          }
        } else if (getIsClass()) {
          if (typeof name2 == "string") {
            output = `/*name: ${JSON.stringify(name2)}*/ class { /*...*/ }`;
          } else if (simplified2) {
            output = `class { /*...*/ }`;
          } else {
            output = getAsString();
          }
        } else if (typeof name2 == "string" && getAsString().match(/^(function )?(g|s)et\b/)) {
          const realName = name2.slice(4);
          if (name2[0] == "g") {
            output = `Object.getOwnPropertyDescriptor({/*unknown obj*/},${JSON.stringify(realName)}).get`;
          } else {
            output = `Object.getOwnPropertyDescriptor({/*unknown obj*/},${JSON.stringify(realName)}).set`;
          }
        } else if (name2) {
          if (simplified2) {
            if (getIsNativeCode()) {
              if (name2.startsWith("get ")) {
                const realName = name2.slice(4);
                if (Object.getOwnPropertyDescriptor(globalThis, realName)?.get == item2) {
                  output = `Object.getOwnPropertyDescriptor(globalThis, ${JSON.stringify(realName)}).get /*native getter*/`;
                } else {
                  output = `Object.getOwnPropertyDescriptor({/*unknown obj*/}, ${JSON.stringify(realName)}).get`;
                }
              } else if (name2.startsWith("set ")) {
                const realName = name2.slice(4);
                if (Object.getOwnPropertyDescriptor(globalThis, realName)?.set == item2) {
                  output = `Object.getOwnPropertyDescriptor(globalThis, ${JSON.stringify(realName)}).set /*native setter*/`;
                } else {
                  output = `Object.getOwnPropertyDescriptor({/*unknown obj*/}, ${JSON.stringify(realName)}).set`;
                }
              } else {
                output = `(function(){/*name: ${recursionWrapper(name2, options2)}, native function*/}})`;
              }
            } else {
              output = `(function(){/*name: ${recursionWrapper(name2, options2)}*/}})`;
            }
          } else {
            output = `/*name: ${recursionWrapper(name2, options2)}*/ (${getAsString()})`;
          }
        } else {
          if (simplified2) {
            if (getIsNativeCode()) {
              output = `(function(){/*native function*/}})`;
            } else {
              output = `(function(){/*...*/}})`;
            }
          } else {
            output = `(${getAsString()})`;
          }
        }
      } else {
        output = customObjectRepr(item2, options2);
      }
      if (groupIsOn) {
        console.groupEnd();
      }
      alreadySeen2.set(item2, output);
      return output;
    } catch (error) {
      if (groupIsOn) {
        console.groupEnd();
      }
      if (debug) {
        console.debug(`[toRepresentation] error is: ${error}`, error?.stack || error);
      }
      try {
        return String(item2);
      } catch (error2) {
        return "{} /*error: catestrophic representation failure*/";
      }
    }
  };
  let globalValueMap;
  const isGlobalValue = (item2) => {
    if (globalValueMap == null) {
      globalValueMap = globalValueMap || new Map(allGlobalKeysAtInit.filter((each) => {
        try {
          globalThis[each];
        } catch (error) {
          return false;
        }
        return true;
      }).map((each) => [globalThis[each], each]));
      for (const [key2, value] of Object.entries(globalValues || {})) {
        globalValueMap.set(key2, value);
      }
    }
    return globalValueMap.has(item2);
  };
  const pureObjectRepr = (item2) => {
    if (options.simplified == null) {
      options.simplified = true;
    }
    let string2 = "{";
    let propertyDescriptors;
    try {
      propertyDescriptors = Object.entries(Object.getOwnPropertyDescriptors(item2));
    } catch (error) {
      if (debug) {
        console.error(`[toRepresentation] error getting Object.propertyDescriptor
${error?.stack || error}`);
      }
      try {
        return String(item2);
      } catch (error2) {
        return "undefined /*error: catestrophic representation failure*/";
      }
    }
    for (const [key2, { value, writable, enumerable, configurable, get, set }] of propertyDescriptors) {
      const stringKey = reprKey(key2);
      if (get) {
        string2 += `
${indent3}get ${stringKey}(){/*contents*/}`;
      } else {
        string2 += `
${indent3}${stringKey}: ${indent({ string: recursionWrapper(value, options), by: options.indent, noLead: true })},`;
      }
    }
    if (propertyDescriptors.length == 0) {
      string2 += "}";
    } else {
      string2 += "\n}";
    }
    return string2;
  };
  const arrayLikeRepr = (item2, options2) => {
    if (options2.simplified == null) {
      options2.simplified = true;
    }
    const chunks = [];
    let oneHasNewLine = false;
    for (const each of item2) {
      const repr = recursionWrapper(each, options2);
      chunks.push(repr);
      if (!oneHasNewLine && repr.includes("\n")) {
        oneHasNewLine = true;
      }
    }
    if (!oneHasNewLine) {
      return `[${chunks.join(",")}]`;
    } else {
      return `[
${chunks.map((each) => indent({ string: each, by: options2.indent, noLead: false })).join(",\n")}
]`;
    }
  };
  const mapLikeObject = (entries, options2) => {
    let string2 = "";
    for (const [key2, value] of entries) {
      if (options2.simplified == null) {
        options2.simplified = true;
      }
      const stringKey = recursionWrapper(key2, options2);
      const stringValue = recursionWrapper(value, options2);
      if (!stringKey.includes("\n")) {
        const formattedValue = stringValue.includes("\n") ? indent({ string: stringValue, by: options2.indent, noLead: true }) : indent({ string: stringValue, by: options2.indent, noLead: true });
        string2 += `
${options2.indent}[${stringKey}, ${formattedValue}],`;
      } else {
        const doubleIndent = options2.indent + options2.indent;
        string2 += `
${options2.indent}[
${indent({ string: stringKey, by: doubleIndent, noLead: false })},
${indent({ string: stringValue, by: doubleIndent, noLead: false })}
${options2.indent}],`;
      }
    }
    if (string2.length == 0) {
      return "";
    } else {
      return `[${string2}
]`;
    }
  };
  const customObjectRepr = (item2, options2) => {
    const prototype = Object.getPrototypeOf(item2);
    if (prototype == ObjectPrototype) {
      return pureObjectRepr(item2);
    }
    let className = prototype.constructor?.name;
    let output;
    if (typeof className != "string" || className == "Object" || className == "Function") {
      className = null;
    }
    const vanillaCustomObjRepr = () => {
      if (className) {
        if (options2.simplified) {
          return `new ${className}(/*...*/)`;
        } else {
          return `new ${className}(${pureObjectRepr(item2)})`;
        }
      } else {
        return pureObjectRepr(item2);
      }
    };
    if (item2 instanceof Array || item2 instanceof TypedArray || item2 instanceof Set) {
      let isAllIndexKeys;
      try {
        isAllIndexKeys = Object.keys(item2).every((each) => Number.isInteger(each - 0) && each >= 0);
      } catch (error) {
        if (debug) {
          console.error(`[toRepresentation] error checking isAllIndexKeys
${error?.stack || error}`);
        }
      }
      let arrayLikeReprString;
      if (isAllIndexKeys) {
        try {
          arrayLikeReprString = arrayLikeRepr(item2, options2);
        } catch (error) {
          isAllIndexKeys = false;
        }
      }
      if (isAllIndexKeys) {
        if (className) {
          output = `new ${className}(${arrayLikeReprString})`;
        } else {
          if (item2 instanceof Array) {
            output = arrayLikeReprString;
          } else if (item2 instanceof TypedArray) {
            for (const each of typedArrayClasses) {
              if (item2 instanceof each) {
                output = `new ${each.name}(${arrayLikeReprString})`;
                break;
              }
            }
          } else if (item2 instanceof Set) {
            output = `new Set(${arrayLikeReprString})`;
          }
        }
      } else {
        output = vanillaCustomObjRepr(item2);
      }
    } else if (item2 instanceof Map) {
      if (className && options2.simplified) {
        output = `new ${className}(/*...*/)`;
      } else {
        let entries = [];
        try {
          entries = Map.prototype.entries.call(item2);
        } catch (error) {
          if (debug) {
            console.error(`[toRepresentation] error getting Map.prototype.entries
${error?.stack || error}`);
          }
        }
        const core = mapLikeObject(entries, options2);
        if (className) {
          output = `new ${className}(${core})`;
        } else {
          output = `new Map(${core})`;
        }
      }
    } else {
      try {
        output = vanillaCustomObjRepr(item2);
      } catch (error) {
        try {
          output = pureObjectRepr(item2);
        } catch (error2) {
          try {
            output = item2.toString();
          } catch (error3) {
            return "undefined /*error: catestrophic representation failure*/";
          }
        }
      }
    }
    return output;
  };
  try {
    const output = recursionWrapper(item, options);
    return output;
  } catch (error) {
    if (debug) {
      console.debug(`[toRepresentation] error is:`, error);
    }
    return String(item);
  }
};

// https://deno.land/x/good@1.13.2.0/flattened/to_string.js
var toString = (value) => {
  if (typeof value == "symbol") {
    return toRepresentation(value);
  } else if (!(value instanceof Object)) {
    return value != null ? value.toString() : `${value}`;
  } else {
    return toRepresentation(value);
  }
};

// https://deno.land/x/good@1.13.2.0/flattened/escape_regex_match.js
var reservedCharMap = {
  "&": "\\x26",
  "!": "\\x21",
  "#": "\\x23",
  "$": "\\$",
  "%": "\\x25",
  "*": "\\*",
  "+": "\\+",
  ",": "\\x2c",
  ".": "\\.",
  ":": "\\x3a",
  ";": "\\x3b",
  "<": "\\x3c",
  "=": "\\x3d",
  ">": "\\x3e",
  "?": "\\?",
  "@": "\\x40",
  "^": "\\^",
  "`": "\\x60",
  "~": "\\x7e",
  "(": "\\(",
  ")": "\\)",
  "[": "\\[",
  "]": "\\]",
  "{": "\\{",
  "}": "\\}",
  "/": "\\/",
  "-": "\\x2d",
  "\\": "\\\\",
  "|": "\\|"
};
var RX_REGEXP_ESCAPE = new RegExp(
  `[${Object.values(reservedCharMap).join("")}]`,
  "gu"
);
function escapeRegexMatch(str) {
  return str.replaceAll(
    RX_REGEXP_ESCAPE,
    (m10) => reservedCharMap[m10]
  );
}

// https://deno.land/x/good@1.13.2.0/flattened/regex.js
var regexpProxy = Symbol("regexpProxy");
var realExec = RegExp.prototype.exec;
RegExp.prototype.exec = function(...args2) {
  if (this[regexpProxy]) {
    return realExec.apply(this[regexpProxy], args2);
  }
  return realExec.apply(this, args2);
};
var proxyRegExp;
var regexProxyOptions = Object.freeze({
  get(original, key2) {
    if (typeof key2 == "string" && key2.match(/^[igmusyv]+$/)) {
      return proxyRegExp(original, key2);
    }
    if (key2 == regexpProxy) {
      return original;
    }
    return original[key2];
  },
  set(original, key2, value) {
    original[key2] = value;
    return true;
  }
});
proxyRegExp = (parent, flags) => {
  const regex3 = new RegExp(parent, flags);
  const output = new Proxy(regex3, regexProxyOptions);
  Object.setPrototypeOf(output, Object.getPrototypeOf(regex3));
  return output;
};
function regexWithStripWarning(shouldStrip) {
  return (strings, ...values) => {
    let newRegexString = "";
    for (const [string2, value] of iterZipLongSync(strings, values)) {
      newRegexString += string2;
      if (value instanceof RegExp) {
        if (!shouldStrip && value.flags.replace(/g/, "").length > 0) {
          console.warn(`Warning: flags inside of regex:
    The RegExp trigging this warning is: ${value}
    When calling the regex interpolater (e.g. regex\`something\${stuff}\`)
    one of the \${} values (the one above) was a RegExp with a flag enabled
    e.g. /stuff/i  <- i = ignoreCase flag enabled
    When the /stuff/i gets interpolated, its going to loose its flags
    (thats what I'm warning you about)
    
    To disable/ignore this warning do:
        regex.stripFlags\`something\${/stuff/i}\`
    If you want to add flags to the output of regex\`something\${stuff}\` do:
        regex\`something\${stuff}\`.i   // ignoreCase
        regex\`something\${stuff}\`.ig  // ignoreCase and global
        regex\`something\${stuff}\`.gi  // functionally equivlent
`);
        }
        newRegexString += `(?:${value.source})`;
      } else if (value != null) {
        newRegexString += escapeRegexMatch(toString(value));
      }
    }
    return proxyRegExp(newRegexString, "");
  };
}
var regex2 = regexWithStripWarning(false);
regex2.stripFlags = regexWithStripWarning(true);

// https://deno.land/x/good@1.13.2.0/flattened/utf8_bytes_to_string.js
var textDecoder = new TextDecoder("utf-8");
var utf8BytesToString = textDecoder.decode.bind(textDecoder);

// https://deno.land/x/good@1.13.2.0/flattened/string_to_utf8_bytes.js
var textEncoder = new TextEncoder("utf-8");
var stringToUtf8Bytes = textEncoder.encode.bind(textEncoder);

// https://deno.land/x/good@1.13.2.0/flattened/built_in_copyable_primitive_classes.js
var builtInCopyablePrimitiveClasses = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses, globalThis.ArrayBuffer, globalThis.DataView]);

// https://deno.land/x/good@1.13.2.0/flattened/sync_iterator_prototype.js
var syncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));

// https://deno.land/x/good@1.13.2.0/flattened/array_iterator__class.js
var ArrayIterator = Object.getPrototypeOf([][Symbol.iterator]);

// https://deno.land/x/good@1.13.2.0/flattened/map_iterator__class.js
var MapIterator = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);

// https://deno.land/x/good@1.13.2.0/flattened/set_iterator__class.js
var SetIterator = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);

// https://deno.land/x/good@1.13.2.0/flattened/async_function__class.js
var AsyncFunction = class {
};
try {
  AsyncFunction = eval("(async function(){}).constructor");
} catch (err3) {
}

// https://deno.land/x/good@1.13.2.0/flattened/sync_generator_function__class.js
var SyncGeneratorFunction = class {
};
try {
  SyncGeneratorFunction = eval("(function*(){}).constructor");
} catch (err3) {
}

// https://deno.land/x/good@1.13.2.0/flattened/async_generator_function__class.js
var AsyncGeneratorFunction = class {
};
try {
  AsyncGeneratorFunction = eval("(async function*(){}).constructor");
} catch (err3) {
}

// https://deno.land/x/good@1.13.2.0/flattened/sync_generator_object__class.js
var SyncGeneratorObject = class {
};
try {
  SyncGeneratorObject = eval("((function*(){})()).constructor");
} catch (err3) {
}

// https://deno.land/x/good@1.13.2.0/flattened/async_generator_object__class.js
var AsyncGeneratorObject = class {
};
try {
  AsyncGeneratorObject = eval("((async function*(){})()).constructor");
} catch (err3) {
}

// https://deno.land/x/good@1.13.2.0/flattened/is_built_in_sync_iterator.js
var isBuiltInSyncIterator = syncIteratorPrototype.isPrototypeOf.bind(syncIteratorPrototype);

// https://deno.land/x/good@1.13.2.0/flattened/deep_copy_symbol.js
var deepCopySymbol = Symbol.for("deepCopy");

// https://deno.land/x/good@1.13.2.0/flattened/deep_copy.js
var clonedFromSymbol = Symbol();
var getThis = Symbol();
Object.getPrototypeOf(function() {
})[getThis] = function() {
  return this;
};

// https://deno.land/x/good@1.13.2.0/flattened/all_key_descriptions.js
var allKeyDescriptions = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/elementalist@0.6.3/main/deno.js?code
var FIELD = "";
var QUOTES = "";
function htm(statics) {
  let h6 = this, prev3 = 0, current = [null], field = 0, args2, name2, value, quotes = [], quote = 0, last, level = 0, pre = false;
  const evaluate = (str2, parts = [], raw) => {
    let i3 = 0;
    str2 = !raw && str2 === QUOTES ? quotes[quote++].slice(1, -1) : str2.replace(/\ue001/g, (m10) => quotes[quote++]);
    if (!str2) return str2;
    str2.replace(/\ue000/g, (match3, idx) => {
      if (idx) parts.push(str2.slice(i3, idx));
      i3 = idx + 1;
      return parts.push(arguments[++field]);
    });
    if (i3 < str2.length) parts.push(str2.slice(i3));
    return parts.length > 1 ? parts : parts[0];
  };
  const up = () => {
    ;
    [current, last, ...args2] = current;
    current.push(h6(last, ...args2));
    if (pre === level--) pre = false;
  };
  let str = statics.join(FIELD).replace(/<!--[^]*?-->/g, "").replace(/<!\[CDATA\[[^]*\]\]>/g, "").replace(/('|")[^\1]*?\1/g, (match3) => (quotes.push(match3), QUOTES));
  str.replace(/(?:^|>)((?:[^<]|<[^\w\ue000\/?!>])*)(?:$|<)/g, (match3, text, idx, str2) => {
    let tag, close3;
    if (idx) {
      str2.slice(prev3, idx).replace(/(\S)\/$/, "$1 /").split(/\s+/).map((part, i3) => {
        if (part[0] === "/") {
          part = part.slice(1);
          if (EMPTY[part]) return;
          close3 = tag || part || 1;
        } else if (!i3) {
          tag = evaluate(part);
          if (typeof tag === "string") {
            while (CLOSE[current[1] + tag]) up();
          }
          current = [current, tag, null];
          level++;
          if (!pre && PRE[tag]) pre = level;
          if (EMPTY[tag]) close3 = tag;
        } else if (part) {
          let props = current[2] || (current[2] = {});
          if (part.slice(0, 3) === "...") {
            Object.assign(props, arguments[++field]);
          } else {
            ;
            [name2, value] = part.split("=");
            Array.isArray(value = props[evaluate(name2)] = value ? evaluate(value) : true) && // if prop value is array - make sure it serializes as string without csv
            (value.toString = value.join.bind(value, ""));
          }
        }
      });
    }
    if (close3) {
      if (!current[0]) err(`Wrong close tag \`${close3}\``);
      up();
      while (last !== close3 && CLOSE[last]) up();
    }
    prev3 = idx + match3.length;
    if (!pre) text = text.replace(/\s*\n\s*/g, "").replace(/\s+/g, " ");
    if (text) evaluate((last = 0, text), current, true);
  });
  if (current[0] && CLOSE[current[1]]) up();
  if (level) err(`Unclosed \`${current[1]}\`.`);
  return current.length < 3 ? current[1] : (current.shift(), current);
}
var err = (msg) => {
  throw SyntaxError(msg);
};
var EMPTY = htm.empty = {};
var CLOSE = htm.close = {};
var PRE = htm.pre = {};
"area base basefont bgsound br col command embed frame hr image img input keygen link meta param source track wbr ! !doctype ? ?xml".split(" ").map((v6) => htm.empty[v6] = true);
var close = {
  li: "",
  dt: "dd",
  dd: "dt",
  p: "address article aside blockquote details div dl fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol pre section table",
  rt: "rp",
  rp: "rt",
  optgroup: "",
  option: "optgroup",
  caption: "tbody thead tfoot tr colgroup",
  colgroup: "thead tbody tfoot tr caption",
  thead: "tbody tfoot caption",
  tbody: "tfoot caption",
  tfoot: "caption",
  tr: "tbody tfoot",
  td: "th tr",
  th: "td tr tbody"
};
for (let tag in close) {
  for (let closer of [...close[tag].split(" "), tag]) htm.close[tag] = htm.close[tag + closer] = true;
}
"pre textarea".split(" ").map((v6) => htm.pre[v6] = true);
var xhtm = htm;
var validStyleAttribute = Object.freeze(/* @__PURE__ */ new Set(["accent-color", "align-content", "align-items", "align-self", "align-tracks", "all", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timeline", "animation-timing-function", "appearance", "ascent-override", "aspect-ratio", "backdrop-filter", "backface-visibility", "background", "background-attachment", "background-blend-mode", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-position-x", "background-position-y", "background-repeat", "background-size", "bleed", "block-overflow", "block-size", "border", "border-block", "border-block-color", "border-block-end", "border-block-end-color", "border-block-end-style", "border-block-end-width", "border-block-start", "border-block-start-color", "border-block-start-style", "border-block-start-width", "border-block-style", "border-block-width", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-end-end-radius", "border-end-start-radius", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-inline", "border-inline-color", "border-inline-end", "border-inline-end-color", "border-inline-end-style", "border-inline-end-width", "border-inline-start", "border-inline-start-color", "border-inline-start-style", "border-inline-start-width", "border-inline-style", "border-inline-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-start-end-radius", "border-start-start-radius", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing", "break-after", "break-before", "break-inside", "caption-side", "caret-color", "clear", "clip", "clip-path", "color", "color-scheme", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "contain", "content", "content-visibility", "counter-increment", "counter-reset", "counter-set", "cursor", "length", "angle", "descent-override", "direction", "display", "resolution", "empty-cells", "fallback", "filter", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "flex_value", "float", "font", "font-display", "font-family", "font-feature-settings", "font-kerning", "font-language-override", "font-optical-sizing", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant", "font-variant-alternates", "font-variant-caps", "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric", "font-variant-position", "font-variation-settings", "font-weight", "forced-color-adjust", "gap", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-rows", "grid-column", "grid-column-end", "grid-column-start", "grid-row", "grid-row-end", "grid-row-start", "grid-template", "grid-template-areas", "grid-template-columns", "grid-template-rows", "frequency", "hanging-punctuation", "height", "hyphenate-character", "hyphens", "image-orientation", "image-rendering", "image-resolution", "inherit", "inherits", "initial", "initial-letter", "initial-letter-align", "initial-value", "inline-size", "input-security", "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline", "inset-inline-end", "inset-inline-start", "isolation", "justify-content", "justify-items", "justify-self", "justify-tracks", "left", "letter-spacing", "line-break", "line-clamp", "line-gap-override", "line-height", "line-height-step", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-block", "margin-block-end", "margin-block-start", "margin-bottom", "margin-inline", "margin-inline-end", "margin-inline-start", "margin-left", "margin-right", "margin-top", "margin-trim", "marks", "mask", "mask-border", "mask-border-mode", "mask-border-outset", "mask-border-repeat", "mask-border-slice", "mask-border-source", "mask-border-width", "mask-clip", "mask-composite", "mask-image", "mask-mode", "mask-origin", "mask-position", "mask-repeat", "mask-size", "mask-type", "masonry-auto-flow", "math-style", "max-block-size", "max-height", "max-inline-size", "max-lines", "max-width", "max-zoom", "min-block-size", "min-height", "min-inline-size", "min-width", "min-zoom", "mix-blend-mode", "time", "negative", "object-fit", "object-position", "offset", "offset-anchor", "offset-distance", "offset-path", "offset-position", "offset-rotate", "opacity", "order", "orientation", "orphans", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-anchor", "overflow-block", "overflow-clip-margin", "overflow-inline", "overflow-wrap", "overflow-x", "overflow-y", "overscroll-behavior", "overscroll-behavior-block", "overscroll-behavior-inline", "overscroll-behavior-x", "overscroll-behavior-y", "Pseudo-classes", "Pseudo-elements", "pad", "padding", "padding-block", "padding-block-end", "padding-block-start", "padding-bottom", "padding-inline", "padding-inline-end", "padding-inline-start", "padding-left", "padding-right", "padding-top", "page-break-after", "page-break-before", "page-break-inside", "paint-order", "perspective", "perspective-origin", "place-content", "place-items", "place-self", "pointer-events", "position", "prefix", "print-color-adjust", "quotes", "range", "resize", "revert", "right", "rotate", "row-gap", "ruby-align", "ruby-merge", "ruby-position", "scale", "scroll-behavior", "scroll-margin", "scroll-margin-block", "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom", "scroll-margin-inline", "scroll-margin-inline-end", "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right", "scroll-margin-top", "scroll-padding", "scroll-padding-block", "scroll-padding-block-end", "scroll-padding-block-start", "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end", "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right", "scroll-padding-top", "scroll-snap-align", "scroll-snap-stop", "scroll-snap-type", "scrollbar-color", "scrollbar-gutter", "scrollbar-width", "shape-image-threshold", "shape-margin", "shape-outside", "size", "size-adjust", "speak-as", "src", "suffix", "symbols", "syntax", "system", "tab-size", "table-layout", "text-align", "text-align-last", "text-combine-upright", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-skip", "text-decoration-skip-ink", "text-decoration-style", "text-decoration-thickness", "text-emphasis", "text-emphasis-color", "text-emphasis-position", "text-emphasis-style", "text-indent", "text-justify", "text-orientation", "text-overflow", "text-rendering", "text-shadow", "text-size-adjust", "text-transform", "text-underline-offset", "text-underline-position", "top", "touch-action", "transform", "transform-box", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "translate", "unicode-bidi", "unicode-range", "unset", "user-select", "user-zoom", "vertical-align", "viewport-fit", "visibility", "white-space", "widows", "width", "will-change", "word-break", "word-spacing", "word-wrap", "writing-mode", "z-index", "zoom"]));
var validNonCallbackHtmlAttributes = Object.freeze(/* @__PURE__ */ new Set(["class", "style", "value", "id", "contenteditable", "href", "hidden", "autofocus", "src", "name", "accept", "accesskey", "action", "align", "alt", "async", "autocomplete", "autoplay", "border", "charset", "checked", "cite", "cols", "colspan", "content", "controls", "coords", "data", "datetime", "default", "defer", "dir", "dirname", "disabled", "download", "draggable", "enctype", "for", "form", "formaction", "headers", "high", "hreflang", "http", "ismap", "kind", "label", "lang", "list", "loop", "low", "max", "maxlength", "media", "method", "min", "multiple", "muted", "novalidate", "open", "optimum", "pattern", "placeholder", "poster", "preload", "readonly", "rel", "required", "reversed", "rows", "rowspan", "sandbox", "scope", "selected", "shape", "size", "sizes", "span", "spellcheck", "srcdoc", "srclang", "srcset", "start", "step", "tabindex", "target", "title", "translate", "type", "usemap", "wrap", "bgcolor", "width", "color", "height"]));
var isValidStyleAttribute = (key2) => key2.startsWith("-") || validStyleAttribute.has(key2);
var kebabCase = (string2) => string2.replace(/[a-z]([A-Z])(?=[a-z])/g, (each) => `${each[0]}-${each.slice(1).toLowerCase()}`);
var isConstructor = (obj) => !!obj.prototype && !!obj.prototype.constructor.name;
var attachProperties = (source, target) => {
  const attributes = allKeyDescriptions(source);
  const propertiesDefition = {};
  for (const [key2, value] of Object.entries(attributes)) {
    if (["constructor", "prototype", "length"].includes(key2)) {
      continue;
    }
    propertiesDefition[key2] = {
      get: () => source[key2]
    };
  }
  Object.defineProperties(target, propertiesDefition);
  return target;
};
var toHtmlElement = Symbol.for("toHtmlElement");
var ElementalClass = class _ElementalClass2 {
  constructor(components2 = {}, options = {}) {
    const { middleware: middleware3, errorComponentFactory, defaultPlaceholderFactory } = options || {};
    this.components = components2 || {};
    this.middleware = middleware3 || {};
    this.defaultPlaceholderFactory = defaultPlaceholderFactory || (() => document.createElement("div"));
    this.errorComponentFactory = errorComponentFactory || defaultErrorComponentFactory;
    this.html = this.createElement.bind(this);
    this.xhtm = xhtm.bind((...args2) => this.createElement(...args2));
  }
  static debug = false;
  static allTags = Symbol.for("allTags");
  static exclusivelySvgElements = /* @__PURE__ */ new Set(["svg", "animate", "animateMotion", "animateTransform", "circle", "clipPath", "defs", "desc", "discard", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "foreignObject", "g", "hatch", "hatchpath", "image", "line", "linearGradient", "marker", "mask", "mesh", "meshgradient", "meshpatch", "meshrow", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "set", "stop", "switch", "symbol", "text", "textPath", "tspan", "unknown", "use", "view"]);
  static randomId = (name2) => `${name2}${Math.random()}`.replace(".", "");
  static makeHtmlElement = function(element2) {
    if (element2 instanceof Node || element2 instanceof Element || element2 instanceof HTMLDocument) {
      return element2;
    } else {
      if (element2 == null) {
        return new window.Text("");
      } else if (typeof element2 == "string") {
        return new window.Text(element2);
      } else if (typeof element2 == "symbol") {
        return new window.Text(element2.toString());
      } else if (!(element2 instanceof Object)) {
        return new window.Text(`${element2}`);
      } else if (element2[toHtmlElement] != null) {
        return _ElementalClass2.makeHtmlElement(element2[toHtmlElement]);
      } else {
        let className;
        try {
          className = Object.getPrototypeOf(element2).constructor.name;
          className = className && `class ${JSON.stringify(className)}`;
        } catch (error) {
        }
        throw Error(`Cannot coerce ${className || element2} into an html element
`, element2);
      }
    }
  };
  static appendChildren = function(element2, ...children) {
    const { element: altElement, insertBefore } = element2;
    let primitiveAppend = (child) => element2.appendChild(child);
    if (insertBefore && !(insertBefore instanceof Function)) {
      element2 = altElement;
      primitiveAppend = (child) => element2.insertBefore(insertBefore, child);
    }
    for (const each of children) {
      if (each instanceof Array) {
        _ElementalClass2.appendChildren(element2, ...each);
      } else if (each instanceof Function) {
        _ElementalClass2.appendChildren(element2, each());
      } else if (each instanceof Promise) {
        const elementPromise = each;
        const placeholder = elementPromise.placeholder || document.createElement("div");
        primitiveAppend(placeholder);
        setTimeout(async () => {
          try {
            const result = await elementPromise;
            if (!(result instanceof Array)) {
              const htmlElement = _ElementalClass2.makeHtmlElement(result);
              placeholder.replaceWith(htmlElement);
            } else {
              let parentElement = placeholder.parentElement;
              if (!parentElement) {
                parentElement = await new Promise((resolve, reject) => {
                  let intervalId = setInterval(() => {
                    if (placeholder.parentElement) {
                      resolve(placeholder.parentElement);
                      clearInterval(intervalId);
                    }
                  }, 70);
                });
              }
              for (const each2 of result) {
                try {
                  _ElementalClass2.appendChildren({
                    element: parentElement,
                    insertBefore: placeholder
                  }, each2);
                } catch (error) {
                  parentElement.insertBefore(placeholder, createErrorElement(`When async component ${toString(element2)} resolved, it created an array. One of those elements in the array caused an error when it tried to be added as a child:
 ${toString(error)}`));
                }
              }
            }
          } catch (error) {
            placeholder.replaceWith(
              defaultErrorComponentFactory({ ...properties, children }, key, error)
            );
          }
        }, 0);
      } else {
        primitiveAppend(_ElementalClass2.makeHtmlElement(each));
      }
    }
    return element2;
  };
  static css = function(first, ...args2) {
    if (typeof first == "string") {
      return first;
    } else if (first == null) {
      return "";
    } else if (first instanceof Array) {
      const strings = first;
      const values = args2;
      let finalString = "";
      for (const each of strings) {
        finalString += each;
        if (values.length > 0) {
          const value = values.shift();
          if (value instanceof Object) {
            finalString += Elemental.css(value);
          } else {
            finalString += `${value}`;
          }
        }
      }
      return finalString;
    } else if (first instanceof Object) {
      let finalString = "";
      for (const [key2, value] of Object.entries(first)) {
        if (value != null) {
          finalString += `${kebabCase(key2)}: ${value};`;
        }
      }
      return finalString;
    } else {
      return first;
    }
  };
  static combineClasses = (...classes) => {
    classes = classes.filter((each) => each != null);
    let classesFinalList = [];
    for (let eachEntry of classes) {
      if (typeof eachEntry == "string") {
        eachEntry = eachEntry.split(" ");
      }
      if (eachEntry instanceof Array) {
        eachEntry = eachEntry.flat(Infinity);
        for (let eachName of eachEntry) {
          classesFinalList.push(eachName);
        }
      } else if (eachEntry instanceof Object) {
        for (const [className, enabled] of Object.entries(eachEntry)) {
          if (enabled) {
            classesFinalList.push(className);
          }
        }
      }
    }
    return classesFinalList;
  };
  createElement(...args2) {
    if (args2[0] instanceof Array) {
      return this.xhtm(...args2);
    } else {
      _ElementalClass2.debug && console.debug(`args is:`, args2);
      for (const middleware3 of (this.middleware[_ElementalClass2.allTags] || []).concat(this.middleware[args2[0]] || [])) {
        try {
          args2 = eachMiddleWare(args2);
        } catch (error) {
          console.error("[ElementalClass] one of the middleware functions failed:", eachMiddleWare, args2);
        }
      }
      let [key2, properties2, ...children] = args2;
      _ElementalClass2.debug && console.debug(`key, properties, children is:`, key2, properties2, children);
      if (this.components[key2] instanceof Function) {
        key2 = this.components[key2];
      }
      if (key2 instanceof Function) {
        let output;
        try {
          output = isConstructor(key2) ? new key2({ ...properties2, children }) : key2({ ...properties2, children });
        } catch (error) {
          return this.errorComponentFactory({ ...properties2, children }, key2, error);
        }
        if (output instanceof Promise) {
          const elementPromise = output;
          const placeholder = elementPromise.placeholder || this.defaultPlaceholderFactory(output);
          setTimeout(async () => {
            try {
              const result = await elementPromise;
              if (!(result instanceof Array)) {
                const htmlElement = _ElementalClass2.makeHtmlElement(result);
                placeholder.replaceWith(htmlElement);
              } else {
                let parentElement = placeholder.parentElement;
                if (!parentElement) {
                  parentElement = await new Promise((resolve, reject) => {
                    let intervalId = setInterval(() => {
                      if (placeholder.parentElement) {
                        resolve(placeholder.parentElement);
                        clearInterval(intervalId);
                      }
                    }, 70);
                  });
                }
                for (const each of result) {
                  try {
                    _ElementalClass2.appendChildren({
                      element: parentElement,
                      insertBefore: placeholder
                    }, each);
                  } catch (error) {
                    parentElement.insertBefore(placeholder, createErrorElement(`Something returned a promise, which resolved to an array, and then something tried to append those to an element (this element: ${element2}). One of the items in the array ${each} caused an error when it tried to be added as a child:
 ${toString(error)}`));
                  }
                }
              }
            } catch (error) {
              placeholder.replaceWith(
                this.errorComponentFactory({ ...properties2, children }, key2, error)
              );
            }
          }, 0);
          return placeholder;
        } else {
          return output;
        }
      }
      const isSvg = _ElementalClass2.exclusivelySvgElements.has(key2);
      let element2;
      if (key2 == "iframe" && properties2.src) {
        const helper = document.createElement("div");
        helper.innerHTML = `<iframe src=${JSON.stringify(properties2.src)}></iframe>`;
        element2 = helper.children[0];
        delete properties2.src;
      } else if (isSvg) {
        element2 = document.createElementNS("http://www.w3.org/2000/svg", key2);
      } else {
        element2 = document.createElement(key2);
      }
      let styleString = "";
      if (properties2 instanceof Object) {
        for (let [key3, value] of Object.entries(properties2)) {
          if (key3 == "style") {
            styleString += _ElementalClass2.css(value);
            continue;
          }
          if (key3.slice(0, 2) == "on" && key3.slice(2, 3).toLowerCase() !== key3.slice(2, 3) && value instanceof Function) {
            element2.addEventListener(key3.slice(2).toLowerCase(), value);
          }
          if (key3 == "class") {
            if (value instanceof Array) {
              value = value.join(" ");
            } else if (value instanceof Object) {
              let newValue = "";
              for (const [classString, enable] of Object.entries(value)) {
                if (enable) {
                  newValue += classString;
                }
              }
              value = newValue;
            }
          }
          if (isSvg) {
            if (value instanceof Array) {
              value = value.join(" ");
            }
            element2.setAttribute(kebabCase(key3), value);
            continue;
          }
          if (value != null && !(value instanceof Object) && validNonCallbackHtmlAttributes.has(key3)) {
            element2.setAttribute(key3, value);
          }
          try {
            element2[key3] = value;
          } catch (error) {
          }
          if (isValidStyleAttribute(key3)) {
            styleString += `;${key3}: ${value};`;
          }
        }
      }
      if (styleString) {
        element2.setAttribute("style", styleString);
      }
      return _ElementalClass2.appendChildren(element2, ...children);
    }
  }
  extend(additionalComponents = {}, options = {}) {
    const { middleware: middleware3, ...other } = options || {};
    return Elemental(
      { ...this.components, ...additionalComponents },
      {
        middleware: { ...this.middleware, ...middleware3 },
        ...other
      }
    );
  }
};
var Elemental = (...args2) => {
  const elementalObject = new ElementalClass(...args2);
  const createElementFunction = elementalObject.createElement.bind(elementalObject);
  attachProperties(ElementalClass, createElementFunction);
  attachProperties(elementalObject, createElementFunction);
  return createElementFunction;
};
attachProperties(ElementalClass, Elemental);
function createErrorElement(error) {
  const element2 = document.createElement("div");
  element2.setAttribute("style", `
        all:              unset;
        display:          flex;
        flex-direction:   column;
        padding:          1.5rem;
        background-color: #f5a5a8;
        color:            white;
        font-family:      -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
        font-size:        18px;
        font-weight:      400;
        overflow:         auto;
    `);
  element2.innerHTML = `I'm sorry, there was an error when loading this part of the page 🙁.<br>Here's the error message: ${Option(toString(error != null && error.message || error)).innerHTML}`;
}
function defaultErrorComponentFactory({ children, ...properties2 }, key2, error) {
  const element2 = document.createElement("div");
  const errorDetails = document.createElement("div");
  const childContainer = document.createElement("div");
  element2.setAttribute("style", `
        all:              unset;
        display:          flex;
        flex-direction:   column;
        padding:          1.5rem;
        background-color: #f5a5a8;
        color:            white;
        font-family:      -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
        font-size:        18px;
        font-weight:      400;
        overflow:         auto;
    `);
  element2.innerHTML = `I'm sorry, there was an error when loading this part of the page 🙁 `;
  let errorElementPart;
  if (typeof key2 == "string") {
    errorElementPart = `&lt;${key2} />`;
  } else {
    try {
      errorElementPart = `&lt;${key2.prototype.constructor.name} />`;
    } catch (error2) {
      try {
        errorElementPart = `&lt;${key2.name} />`;
      } catch (error3) {
        errorElementPart = `&lt;${key2} />`;
      }
    }
  }
  let errorJsonObject = {};
  for (const [key3, value] of Object.entries(properties2)) {
    try {
      errorJsonObject[key3] = JSON.parse(JSON.stringify(value));
    } catch (error2) {
      if (typeof value == "symbol") {
        errorJsonObject[key3] = value.toString();
      } else {
        errorJsonObject[key3] = `${value}`;
      }
    }
  }
  errorDetails.innerHTML = `<span>error: ${`${error}`.replace(/\n/, "<br>")}<br>location:<br>${indent({ string: error.stack, by: "    " }).replace(/\n/, "<br>")}</span><br><span>tag: ${errorElementPart}</span><br><div>properties:<br><code style="max-height: 12rem; overflow: auto;">${JSON.stringify(errorJsonObject, 0, 4)}</code></div>`;
  errorDetails.setAttribute("style", `
        padding: 1rem;
        background-color: #161b22;
        color: #789896;
        white-space: pre;
        max-width: 85vw;
        overflow: auto;
    `);
  element2.appendChild(errorDetails);
  childContainer.setAttribute("style", `
        all: unset
        display: flex
        flex-direction: column
        margin-top: 1.3rem
    `);
  for (const each of children || []) {
    try {
      ElementalClass.appendChildren(childContainer, [each]);
    } catch (error2) {
    }
  }
  element2.appendChild(childContainer);
  return element2;
}
try {
  const originalHead = document.head;
  Object.defineProperty(document, "head", {
    set: (element2) => ElementalClass.appendChildren(originalHead, ...element2.childNodes),
    get: () => originalHead,
    writable: true
  });
} catch (error) {
}
var passAlongProps = (element2, properties2, { isSvg = false } = {}) => {
  let styleString = "";
  if (properties2 instanceof Object) {
    for (let [key2, value] of Object.entries(properties2)) {
      if (key2 == "style") {
        styleString += ElementalClass.css(value);
        continue;
      }
      if (key2.slice(0, 2) == "on" && key2.slice(2, 3).toLowerCase() !== key2.slice(2, 3) && value instanceof Function) {
        element2.addEventListener(key2.slice(2).toLowerCase(), value);
      }
      if (key2 == "class") {
        if (value instanceof Array) {
          value = value.join(" ");
        } else if (value instanceof Object) {
          let newValue = "";
          for (const [classString, enable] of Object.entries(value)) {
            if (enable) {
              newValue += classString;
            }
          }
          value = newValue;
        }
      }
      if (isSvg) {
        if (value instanceof Array) {
          value = value.join(" ");
        }
        element2.setAttribute(kebabCase(key2), value);
        continue;
      }
      if (value != null && !(value instanceof Object) && validNonCallbackHtmlAttributes.has(key2)) {
        element2.setAttribute(key2, value);
      }
      try {
        element2[key2] = value;
      } catch (error) {
      }
      if (isValidStyleAttribute(key2)) {
        styleString += `;${key2}: ${value};`;
      }
    }
  }
  if (styleString) {
    element2.setAttribute("style", styleString);
  }
  if (properties2.children) {
    ElementalClass.appendChildren(element2, ...properties2.children);
  }
  return element2;
};
var combineClasses = ElementalClass.combineClasses;
var html = Elemental();
var css = ElementalClass.css;
var allTags = ElementalClass.allTags;

// https://deno.land/x/good_component@0.2.12/elements.js
var typedArrayClasses2 = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each) => each);
var copyableClasses = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses2, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator2 = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator2 = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator2 = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction2 = class {
};
var GeneratorFunction = class {
};
var AsyncGeneratorFunction2 = class {
};
var SyncGenerator = class {
};
var AsyncGenerator = class {
};
try {
  AsyncFunction2 = eval("(async function(){}).constructor");
  GeneratorFunction = eval("(function*(){}).constructor");
  AsyncGeneratorFunction2 = eval("(async function*(){}).constructor");
  SyncGenerator = eval("((function*(){})()).constructor");
  AsyncGenerator = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive2 = (value) => !(value instanceof Object);
var isPureObject2 = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive2 = (value) => isPrimitive2(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator = (value) => IteratorPrototype.isPrototypeOf(value);
var isGeneratorType = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator || constructor == AsyncGenerator;
  }
  return false;
};
var isAsyncIterable2 = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable2 = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isIterableObjectOrContainer2 = function(value) {
  return value instanceof Object && (typeof value[Symbol.iterator] == "function" || typeof value[Symbol.asyncIterator] === "function");
};
var isTechnicallyIterable = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer2 = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol2 = Symbol.for("deepCopy");
var clonedFromSymbol2 = Symbol();
var getThis2 = Symbol();
Object.getPrototypeOf(function() {
})[getThis2] = function() {
  return this;
};
function deepCopyInner(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol2] instanceof Function) {
    const clonedValue = value[deepCopySymbol2](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each) => `${each},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis2]();
    object = value.bind(theThis);
  } else if (copyableClasses.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key2, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key2] = {
        ...options,
        get: get ? function(...args2) {
          return get.apply(output2, args2);
        } : void 0,
        set: set ? function(...args2) {
          return set.apply(output2, args2);
        } : void 0
      };
    } else {
      if (key2 == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key2] = {
        ...options,
        value: deepCopyInner(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy2 = (value) => deepCopyInner(value);
var shallowSortObject2 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key2) => {
      newObj[key2] = obj[key2];
      return newObj;
    },
    {}
  );
};
var deepSortObject3 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each of obj) {
        sortedChildren.push(deepSortObject3(each, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject3(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify2 = (value, ...args2) => {
  return JSON.stringify(deepSortObject3(value), ...args2);
};
var allKeys2 = function(obj) {
  let keys2 = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys2 = keys2.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys2;
};
var ownKeyDescriptions2 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions2 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};
var objectPrototype = Object.getPrototypeOf({});
var emptyIterator = /* @__PURE__ */ function* () {
}();
var makeIterable = (object) => {
  if (object == null) {
    return emptyIterator;
  }
  if (object[Symbol.iterator] instanceof Function || object[Symbol.asyncIterator] instanceof Function) {
    return object;
  }
  if (Object.getPrototypeOf(object).constructor == Object) {
    return Object.entries(object);
  }
  return emptyIterator;
};
var Stop = Symbol("iterationStop");
var iter = (object) => {
  const iterable = makeIterable(object);
  if (iterable[Symbol.asyncIterator]) {
    return iterable[Symbol.asyncIterator]();
  } else {
    return iterable[Symbol.iterator]();
  }
};
async function asyncIteratorToList(asyncIterator) {
  const results = [];
  for await (const each of asyncIterator) {
    results.push(each);
  }
  return results;
}
var zip = function* (...iterables) {
  iterables = iterables.map((each) => iter(each));
  while (true) {
    const nexts = iterables.map((each) => each.next());
    if (nexts.every((each) => each.done)) {
      break;
    }
    yield nexts.map((each) => each.value);
  }
};
var ERROR_WHILE_MAPPING_MESSAGE = "Threw while mapping.";
function concurrentlyTransform({ iterator, transformFunction, poolLimit = null, awaitAll = false }) {
  poolLimit = poolLimit || concurrentlyTransform.defaultPoolLimit;
  const res = new TransformStream({
    async transform(p8, controller) {
      try {
        const s66 = await p8;
        controller.enqueue(s66);
      } catch (e) {
        if (e instanceof AggregateError && e.message == ERROR_WHILE_MAPPING_MESSAGE) {
          controller.error(e);
        }
      }
    }
  });
  const mainPromise = (async () => {
    const writer = res.writable.getWriter();
    const executing = [];
    try {
      let index = 0;
      for await (const item of iterator) {
        const p8 = Promise.resolve().then(() => transformFunction(item, index));
        index++;
        writer.write(p8);
        const e = p8.then(() => executing.splice(executing.indexOf(e), 1));
        executing.push(e);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors = [];
      for (const result of await Promise.allSettled(executing)) {
        if (result.status == "rejected") {
          errors.push(result.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors, ERROR_WHILE_MAPPING_MESSAGE)
      )).catch(() => {
      });
    }
  })();
  const asyncIterator = res.readable[Symbol.asyncIterator]();
  if (!awaitAll) {
    return asyncIterator;
  } else {
    return mainPromise.then(() => asyncIteratorToList(asyncIterator));
  }
}
concurrentlyTransform.defaultPoolLimit = 40;
var indent2 = ({ string: string2, by = "    ", noLead = false }) => (noLead ? "" : by) + string2.replace(/\n/g, "\n" + by);
var toString2 = (value) => {
  if (typeof value == "symbol") {
    return toRepresentation2(value);
  } else if (!(value instanceof Object)) {
    return value != null ? value.toString() : `${value}`;
  } else {
    return toRepresentation2(value);
  }
};
var reprSymbol2 = Symbol.for("representation");
var denoInspectSymbol2 = Symbol.for("Deno.customInspect");
var toRepresentation2 = (item) => {
  const alreadySeen = /* @__PURE__ */ new Set();
  const recursionWrapper = (item2) => {
    if (item2 instanceof Object) {
      if (alreadySeen.has(item2)) {
        return `[Self Reference]`;
      } else {
        alreadySeen.add(item2);
      }
    }
    let output2;
    if (item2 === void 0) {
      output2 = "undefined";
    } else if (item2 === null) {
      output2 = "null";
    } else if (typeof item2 == "string") {
      output2 = JSON.stringify(item2);
    } else if (typeof item2 == "symbol") {
      if (!item2.description) {
        output2 = "Symbol()";
      } else {
        const globalVersion = Symbol.for(item2.description);
        if (globalVersion == item2) {
          output2 = `Symbol.for(${JSON.stringify(item2.description)})`;
        } else {
          output2 = `Symbol(${JSON.stringify(item2.description)})`;
        }
      }
    } else if (item2 instanceof Date) {
      output2 = `new Date(${item2.getTime()})`;
    } else if (item2 instanceof Array) {
      output2 = `[${item2.map((each) => recursionWrapper(each)).join(",")}]`;
    } else if (item2 instanceof Set) {
      output2 = `new Set(${[...item2].map((each) => recursionWrapper(each)).join(",")})`;
    } else if (item2 instanceof Object && item2.constructor == Object) {
      output2 = pureObjectRepr(item2);
    } else if (item2 instanceof Map) {
      let string2 = "new Map(";
      for (const [key2, value] of item2.entries()) {
        const stringKey = recursionWrapper(key2);
        const stringValue = recursionWrapper(value);
        if (!stringKey.match(/\n/g)) {
          string2 += `
  [${stringKey}, ${indent2({ string: stringValue, by: "  ", noLead: true })}],`;
        } else {
          string2 += `
  [${indent2({ string: stringKey, by: "  ", noLead: true })},
  ${indent2({ string: stringValue, by: "    ", noLead: true })}],`;
        }
      }
      string2 += "\n)";
      output2 = string2;
    } else {
      if (item2[reprSymbol2] instanceof Function) {
        try {
          output2 = item2[reprSymbol2]();
          return output2;
        } catch (error) {
        }
      }
      if (item2[denoInspectSymbol2] instanceof Function) {
        try {
          output2 = item2[denoInspectSymbol2]();
          return output2;
        } catch (error) {
        }
      }
      try {
        output2 = item2.toString();
        if (output2 !== "[object Object]") {
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && item2.prototype && typeof item2.name == "string") {
          output2 = `class ${item2.name} { /*...*/ }`;
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && typeof item2.constructor.name == "string") {
          output2 = `new ${item2.constructor.name}(${pureObjectRepr(item2)})`;
          return output2;
        }
      } catch (error) {
      }
      return pureObjectRepr(item2);
    }
    return output2;
  };
  const pureObjectRepr = (item2) => {
    let string2 = "{";
    for (const [key2, value] of Object.entries(item2)) {
      const stringKey = recursionWrapper(key2);
      const stringValue = recursionWrapper(value);
      string2 += `
  ${stringKey}: ${indent2({ string: stringValue, by: "  ", noLead: true })},`;
    }
    string2 += "\n}";
    return string2;
  };
  return recursionWrapper(item);
};
var reservedCharMap2 = {
  "&": "\\x26",
  "!": "\\x21",
  "#": "\\x23",
  "$": "\\$",
  "%": "\\x25",
  "*": "\\*",
  "+": "\\+",
  ",": "\\x2c",
  ".": "\\.",
  ":": "\\x3a",
  ";": "\\x3b",
  "<": "\\x3c",
  "=": "\\x3d",
  ">": "\\x3e",
  "?": "\\?",
  "@": "\\x40",
  "^": "\\^",
  "`": "\\x60",
  "~": "\\x7e",
  "(": "\\(",
  ")": "\\)",
  "[": "\\[",
  "]": "\\]",
  "{": "\\{",
  "}": "\\}",
  "/": "\\/",
  "-": "\\x2d",
  "\\": "\\\\",
  "|": "\\|"
};
var RX_REGEXP_ESCAPE2 = new RegExp(
  `[${Object.values(reservedCharMap2).join("")}]`,
  "gu"
);
function escapeRegexMatch2(str) {
  return str.replaceAll(
    RX_REGEXP_ESCAPE2,
    (m10) => reservedCharMap2[m10]
  );
}
var regexpProxy2 = Symbol("regexpProxy");
var realExec2 = RegExp.prototype.exec;
RegExp.prototype.exec = function(...args2) {
  if (this[regexpProxy2]) {
    return realExec2.apply(this[regexpProxy2], args2);
  }
  return realExec2.apply(this, args2);
};
var proxyRegExp2;
var regexProxyOptions2 = Object.freeze({
  get(original, key2) {
    if (typeof key2 == "string" && key2.match(/^[igmusyv]+$/)) {
      return proxyRegExp2(original, key2);
    }
    if (key2 == regexpProxy2) {
      return original;
    }
    return original[key2];
  },
  set(original, key2, value) {
    original[key2] = value;
    return true;
  }
});
proxyRegExp2 = (parent, flags) => {
  const regex3 = new RegExp(parent, flags);
  const output2 = new Proxy(regex3, regexProxyOptions2);
  Object.setPrototypeOf(output2, Object.getPrototypeOf(regex3));
  return output2;
};
function regexWithStripWarning2(shouldStrip) {
  return (strings, ...values) => {
    let newRegexString = "";
    for (const [string2, value] of zip(strings, values)) {
      newRegexString += string2;
      if (value instanceof RegExp) {
        if (!shouldStrip && value.flags.replace(/g/, "").length > 0) {
          console.warn(`Warning: flags inside of regex:
    The RegExp trigging this warning is: ${value}
    When calling the regex interpolater (e.g. regex\`something\${stuff}\`)
    one of the \${} values (the one above) was a RegExp with a flag enabled
    e.g. /stuff/i  <- i = ignoreCase flag enabled
    When the /stuff/i gets interpolated, its going to loose its flags
    (thats what I'm warning you about)
    
    To disable/ignore this warning do:
        regex.stripFlags\`something\${/stuff/i}\`
    If you want to add flags to the output of regex\`something\${stuff}\` do:
        regex\`something\${stuff}\`.i   // ignoreCase
        regex\`something\${stuff}\`.ig  // ignoreCase and global
        regex\`something\${stuff}\`.gi  // functionally equivlent
`);
        }
        newRegexString += `(?:${value.source})`;
      } else if (value != null) {
        newRegexString += escapeRegexMatch2(toString2(value));
      }
    }
    return proxyRegExp2(newRegexString, "");
  };
}
var regex22 = regexWithStripWarning2(false);
regex22.stripFlags = regexWithStripWarning2(true);
var textDecoder2 = new TextDecoder("utf-8");
var textEncoder2 = new TextEncoder("utf-8");
var utf8BytesToString2 = textDecoder2.decode.bind(textDecoder2);
var stringToUtf8Bytes2 = textEncoder2.encode.bind(textEncoder2);
var primitiveArrayClasses = [Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray, Int16Array, Int32Array, Int8Array, Float32Array, Float64Array, globalThis.BigInt64Array, globalThis.BigUint64Array].filter((each) => each);
var allKeys22 = function(obj) {
  let keys2 = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys2 = keys2.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys2;
};
var ownKeyDescriptions22 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions22 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};
var MapIterator22 = Object.getPrototypeOf((/* @__PURE__ */ new Map()).keys());
var SetIterator22 = Object.getPrototypeOf((/* @__PURE__ */ new Set()).keys());
var GeneratorFunction2 = class {
};
var AsyncGeneratorFunction22 = class {
};
try {
  GeneratorFunction2 = eval("((function*(){})()).constructor");
  AsyncGeneratorFunction22 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isGeneratorType2 = (value) => {
  if (value instanceof Object) {
    const prototype = Object.getPrototypeOf(value);
    if (prototype == MapIterator22 || prototype == SetIterator22) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == GeneratorFunction2 || constructor == AsyncGeneratorFunction22;
  }
  return false;
};
var deepCopySymbol22 = Symbol.for("deepCopy");
var clonedFromSymbol22 = Symbol();
var getThis22 = Symbol();
Object.getPrototypeOf(function() {
})[getThis22] = function() {
  return this;
};
function deepCopyInner2(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol22] instanceof Function) {
    const clonedValue = value[deepCopySymbol22]();
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType2(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each) => `${each},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof Function) {
    theThis = value[getThis22]();
    object = function(...args2) {
      return value.apply(thisCopy, args2);
    };
  } else if (primitiveArrayClasses.includes(value.constructor)) {
    object = new value.constructor([...value]);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner2(theThis, valueChain, originalToCopyMap);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key2, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key2] = {
        ...options,
        get: get ? function(...args2) {
          return get.apply(output2, args2);
        } : void 0,
        set: set ? function(...args2) {
          return set.apply(output2, args2);
        } : void 0
      };
    } else {
      if (key2 == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key2] = {
        ...options,
        value: deepCopyInner2(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy22 = (value) => deepCopyInner2(value);
var shallowSortObject22 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key2) => {
      newObj[key2] = obj[key2];
      return newObj;
    },
    {}
  );
};
var deepSortObject22 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each of obj) {
        sortedChildren.push(deepSortObject22(each, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject22(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify22 = (value, ...args2) => {
  return JSON.stringify(deepSortObject22(value), ...args2);
};
var FIELD2 = "";
var QUOTES2 = "";
function htm2(statics) {
  let h6 = this, prev22 = 0, current = [null], field = 0, args2, name2, value, quotes = [], quote = 0, last, level = 0, pre = false;
  const evaluate = (str2, parts = [], raw) => {
    let i3 = 0;
    str2 = !raw && str2 === QUOTES2 ? quotes[quote++].slice(1, -1) : str2.replace(/\ue001/g, (m10) => quotes[quote++]);
    if (!str2)
      return str2;
    str2.replace(/\ue000/g, (match22, idx) => {
      if (idx)
        parts.push(str2.slice(i3, idx));
      i3 = idx + 1;
      return parts.push(arguments[++field]);
    });
    if (i3 < str2.length)
      parts.push(str2.slice(i3));
    return parts.length > 1 ? parts : parts[0];
  };
  const up = () => {
    ;
    [current, last, ...args2] = current;
    current.push(h6(last, ...args2));
    if (pre === level--)
      pre = false;
  };
  let str = statics.join(FIELD2).replace(/<!--[^]*?-->/g, "").replace(/<!\[CDATA\[[^]*\]\]>/g, "").replace(/('|")[^\1]*?\1/g, (match22) => (quotes.push(match22), QUOTES2));
  str.replace(/(?:^|>)((?:[^<]|<[^\w\ue000\/?!>])*)(?:$|<)/g, (match22, text, idx, str2) => {
    let tag, close22;
    if (idx) {
      str2.slice(prev22, idx).replace(/(\S)\/$/, "$1 /").split(/\s+/).map((part, i3) => {
        if (part[0] === "/") {
          part = part.slice(1);
          if (EMPTY2[part])
            return;
          close22 = tag || part || 1;
        } else if (!i3) {
          tag = evaluate(part);
          if (typeof tag === "string") {
            while (CLOSE2[current[1] + tag])
              up();
          }
          current = [current, tag, null];
          level++;
          if (!pre && PRE2[tag])
            pre = level;
          if (EMPTY2[tag])
            close22 = tag;
        } else if (part) {
          let props = current[2] || (current[2] = {});
          if (part.slice(0, 3) === "...") {
            Object.assign(props, arguments[++field]);
          } else {
            ;
            [name2, value] = part.split("=");
            Array.isArray(value = props[evaluate(name2)] = value ? evaluate(value) : true) && // if prop value is array - make sure it serializes as string without csv
            (value.toString = value.join.bind(value, ""));
          }
        }
      });
    }
    if (close22) {
      if (!current[0])
        err2(`Wrong close tag \`${close22}\``);
      up();
      while (last !== close22 && CLOSE2[last])
        up();
    }
    prev22 = idx + match22.length;
    if (!pre)
      text = text.replace(/\s*\n\s*/g, "").replace(/\s+/g, " ");
    if (text)
      evaluate((last = 0, text), current, true);
  });
  if (current[0] && CLOSE2[current[1]])
    up();
  if (level)
    err2(`Unclosed \`${current[1]}\`.`);
  return current.length < 3 ? current[1] : (current.shift(), current);
}
var err2 = (msg) => {
  throw SyntaxError(msg);
};
var EMPTY2 = htm2.empty = {};
var CLOSE2 = htm2.close = {};
var PRE2 = htm2.pre = {};
"area base basefont bgsound br col command embed frame hr image img input keygen link meta param source track wbr ! !doctype ? ?xml".split(" ").map((v6) => htm2.empty[v6] = true);
var close2 = {
  li: "",
  dt: "dd",
  dd: "dt",
  p: "address article aside blockquote details div dl fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol pre section table",
  rt: "rp",
  rp: "rt",
  optgroup: "",
  option: "optgroup",
  caption: "tbody thead tfoot tr colgroup",
  colgroup: "thead tbody tfoot tr caption",
  thead: "tbody tfoot caption",
  tbody: "tfoot caption",
  tfoot: "caption",
  tr: "tbody tfoot",
  td: "th tr",
  th: "td tr tbody"
};
for (let tag in close2) {
  for (let closer of [...close2[tag].split(" "), tag])
    htm2.close[tag] = htm2.close[tag + closer] = true;
}
"pre textarea".split(" ").map((v6) => htm2.pre[v6] = true);
var xhtm2 = htm2;
var validStyleAttribute2 = Object.freeze(/* @__PURE__ */ new Set(["accent-color", "align-content", "align-items", "align-self", "align-tracks", "all", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timeline", "animation-timing-function", "appearance", "ascent-override", "aspect-ratio", "backdrop-filter", "backface-visibility", "background", "background-attachment", "background-blend-mode", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-position-x", "background-position-y", "background-repeat", "background-size", "bleed", "block-overflow", "block-size", "border", "border-block", "border-block-color", "border-block-end", "border-block-end-color", "border-block-end-style", "border-block-end-width", "border-block-start", "border-block-start-color", "border-block-start-style", "border-block-start-width", "border-block-style", "border-block-width", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-end-end-radius", "border-end-start-radius", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-inline", "border-inline-color", "border-inline-end", "border-inline-end-color", "border-inline-end-style", "border-inline-end-width", "border-inline-start", "border-inline-start-color", "border-inline-start-style", "border-inline-start-width", "border-inline-style", "border-inline-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-start-end-radius", "border-start-start-radius", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing", "break-after", "break-before", "break-inside", "caption-side", "caret-color", "clear", "clip", "clip-path", "color", "color-scheme", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "contain", "content", "content-visibility", "counter-increment", "counter-reset", "counter-set", "cursor", "length", "angle", "descent-override", "direction", "display", "resolution", "empty-cells", "fallback", "filter", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "flex_value", "float", "font", "font-display", "font-family", "font-feature-settings", "font-kerning", "font-language-override", "font-optical-sizing", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant", "font-variant-alternates", "font-variant-caps", "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric", "font-variant-position", "font-variation-settings", "font-weight", "forced-color-adjust", "gap", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-rows", "grid-column", "grid-column-end", "grid-column-start", "grid-row", "grid-row-end", "grid-row-start", "grid-template", "grid-template-areas", "grid-template-columns", "grid-template-rows", "frequency", "hanging-punctuation", "height", "hyphenate-character", "hyphens", "image-orientation", "image-rendering", "image-resolution", "inherit", "inherits", "initial", "initial-letter", "initial-letter-align", "initial-value", "inline-size", "input-security", "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline", "inset-inline-end", "inset-inline-start", "isolation", "justify-content", "justify-items", "justify-self", "justify-tracks", "left", "letter-spacing", "line-break", "line-clamp", "line-gap-override", "line-height", "line-height-step", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-block", "margin-block-end", "margin-block-start", "margin-bottom", "margin-inline", "margin-inline-end", "margin-inline-start", "margin-left", "margin-right", "margin-top", "margin-trim", "marks", "mask", "mask-border", "mask-border-mode", "mask-border-outset", "mask-border-repeat", "mask-border-slice", "mask-border-source", "mask-border-width", "mask-clip", "mask-composite", "mask-image", "mask-mode", "mask-origin", "mask-position", "mask-repeat", "mask-size", "mask-type", "masonry-auto-flow", "math-style", "max-block-size", "max-height", "max-inline-size", "max-lines", "max-width", "max-zoom", "min-block-size", "min-height", "min-inline-size", "min-width", "min-zoom", "mix-blend-mode", "time", "negative", "object-fit", "object-position", "offset", "offset-anchor", "offset-distance", "offset-path", "offset-position", "offset-rotate", "opacity", "order", "orientation", "orphans", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-anchor", "overflow-block", "overflow-clip-margin", "overflow-inline", "overflow-wrap", "overflow-x", "overflow-y", "overscroll-behavior", "overscroll-behavior-block", "overscroll-behavior-inline", "overscroll-behavior-x", "overscroll-behavior-y", "Pseudo-classes", "Pseudo-elements", "pad", "padding", "padding-block", "padding-block-end", "padding-block-start", "padding-bottom", "padding-inline", "padding-inline-end", "padding-inline-start", "padding-left", "padding-right", "padding-top", "page-break-after", "page-break-before", "page-break-inside", "paint-order", "perspective", "perspective-origin", "place-content", "place-items", "place-self", "pointer-events", "position", "prefix", "print-color-adjust", "quotes", "range", "resize", "revert", "right", "rotate", "row-gap", "ruby-align", "ruby-merge", "ruby-position", "scale", "scroll-behavior", "scroll-margin", "scroll-margin-block", "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom", "scroll-margin-inline", "scroll-margin-inline-end", "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right", "scroll-margin-top", "scroll-padding", "scroll-padding-block", "scroll-padding-block-end", "scroll-padding-block-start", "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end", "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right", "scroll-padding-top", "scroll-snap-align", "scroll-snap-stop", "scroll-snap-type", "scrollbar-color", "scrollbar-gutter", "scrollbar-width", "shape-image-threshold", "shape-margin", "shape-outside", "size", "size-adjust", "speak-as", "src", "suffix", "symbols", "syntax", "system", "tab-size", "table-layout", "text-align", "text-align-last", "text-combine-upright", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-skip", "text-decoration-skip-ink", "text-decoration-style", "text-decoration-thickness", "text-emphasis", "text-emphasis-color", "text-emphasis-position", "text-emphasis-style", "text-indent", "text-justify", "text-orientation", "text-overflow", "text-rendering", "text-shadow", "text-size-adjust", "text-transform", "text-underline-offset", "text-underline-position", "top", "touch-action", "transform", "transform-box", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "translate", "unicode-bidi", "unicode-range", "unset", "user-select", "user-zoom", "vertical-align", "viewport-fit", "visibility", "white-space", "widows", "width", "will-change", "word-break", "word-spacing", "word-wrap", "writing-mode", "z-index", "zoom"]));
var validNonCallbackHtmlAttributes2 = Object.freeze(/* @__PURE__ */ new Set(["class", "style", "value", "id", "contenteditable", "href", "hidden", "autofocus", "src", "name", "accept", "accesskey", "action", "align", "alt", "async", "autocomplete", "autoplay", "border", "charset", "checked", "cite", "cols", "colspan", "content", "controls", "coords", "data", "datetime", "default", "defer", "dir", "dirname", "disabled", "download", "draggable", "enctype", "for", "form", "formaction", "headers", "high", "hreflang", "http", "ismap", "kind", "label", "lang", "list", "loop", "low", "max", "maxlength", "media", "method", "min", "multiple", "muted", "novalidate", "open", "optimum", "pattern", "placeholder", "poster", "preload", "readonly", "rel", "required", "reversed", "rows", "rowspan", "sandbox", "scope", "selected", "shape", "size", "sizes", "span", "spellcheck", "srcdoc", "srclang", "srcset", "start", "step", "tabindex", "target", "title", "translate", "type", "usemap", "wrap", "bgcolor", "width", "color", "height"]));
var isValidStyleAttribute2 = (key2) => key2.startsWith("-") || validStyleAttribute2.has(key2);
var kebabCase2 = (string2) => string2.replace(/[a-z]([A-Z])(?=[a-z])/g, (each) => `${each[0]}-${each.slice(1).toLowerCase()}`);
var isConstructor2 = (obj) => !!obj.prototype && !!obj.prototype.constructor.name;
var attachProperties2 = (source, target) => {
  const attributes = allKeyDescriptions22(source);
  const propertiesDefition = {};
  for (const [key2, value] of Object.entries(attributes)) {
    if (["constructor", "prototype", "length"].includes(key2)) {
      continue;
    }
    propertiesDefition[key2] = {
      get: () => source[key2]
    };
  }
  Object.defineProperties(target, propertiesDefition);
  return target;
};
var toHtmlElement2 = Symbol.for("toHtmlElement");
var ElementalClass2 = class _ElementalClass {
  constructor(components2 = {}, options = {}) {
    const { middleware: middleware22, errorComponentFactory, defaultPlaceholderFactory } = options || {};
    this.components = components2 || {};
    this.middleware = middleware22 || {};
    this.defaultPlaceholderFactory = defaultPlaceholderFactory || (() => document.createElement("div"));
    this.errorComponentFactory = errorComponentFactory || defaultErrorComponentFactory2;
    this.html = this.createElement.bind(this);
    this.xhtm = xhtm2.bind((...args2) => this.createElement(...args2));
  }
  static debug = false;
  static allTags = Symbol.for("allTags");
  static exclusivelySvgElements = /* @__PURE__ */ new Set(["svg", "animate", "animateMotion", "animateTransform", "circle", "clipPath", "defs", "desc", "discard", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "foreignObject", "g", "hatch", "hatchpath", "image", "line", "linearGradient", "marker", "mask", "mesh", "meshgradient", "meshpatch", "meshrow", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "set", "stop", "switch", "symbol", "text", "textPath", "tspan", "unknown", "use", "view"]);
  static randomId = (name2) => `${name2}${Math.random()}`.replace(".", "");
  static makeHtmlElement = function(element2) {
    if (element2 instanceof Node || element2 instanceof Element || element2 instanceof HTMLDocument) {
      return element2;
    } else {
      if (element2 == null) {
        return new window.Text("");
      } else if (typeof element2 == "string") {
        return new window.Text(element2);
      } else if (typeof element2 == "symbol") {
        return new window.Text(element2.toString());
      } else if (!(element2 instanceof Object)) {
        return new window.Text(`${element2}`);
      } else if (element2[toHtmlElement2] != null) {
        return _ElementalClass.makeHtmlElement(element2[toHtmlElement2]);
      } else {
        throw Error(`Cannot coerce ${element2} into an html element`);
      }
    }
  };
  static appendChildren = function(element2, ...children) {
    const { element: altElement, insertBefore } = element2;
    let primitiveAppend = (child) => element2.appendChild(child);
    if (insertBefore && !(insertBefore instanceof Function)) {
      element2 = altElement;
      primitiveAppend = (child) => element2.insertBefore(insertBefore, child);
    }
    for (const each of children) {
      if (each instanceof Array) {
        _ElementalClass.appendChildren(element2, ...each);
      } else if (each instanceof Function) {
        _ElementalClass.appendChildren(element2, each());
      } else if (each instanceof Promise) {
        const elementPromise = each;
        const placeholder = elementPromise.placeholder || document.createElement("div");
        primitiveAppend(placeholder);
        setTimeout(async () => {
          try {
            const result = await elementPromise;
            if (!(result instanceof Array)) {
              const htmlElement = _ElementalClass.makeHtmlElement(result);
              placeholder.replaceWith(htmlElement);
            } else {
              let parentElement = placeholder.parentElement;
              if (!parentElement) {
                parentElement = await new Promise((resolve, reject) => {
                  let intervalId = setInterval(() => {
                    if (placeholder.parentElement) {
                      resolve(placeholder.parentElement);
                      clearInterval(intervalId);
                    }
                  }, 70);
                });
              }
              for (const each2 of result) {
                try {
                  _ElementalClass.appendChildren({
                    element: parentElement,
                    insertBefore: placeholder
                  }, each2);
                } catch (error) {
                  parentElement.insertBefore(placeholder, createErrorElement2(`When async component ${toString2(element2)} resolved, it created an array. One of those elements in the array caused an error when it tried to be added as a child:
 ${toString2(error)}`));
                }
              }
            }
          } catch (error) {
            placeholder.replaceWith(
              defaultErrorComponentFactory2({ ...properties, children }, key, error)
            );
          }
        }, 0);
      } else {
        primitiveAppend(_ElementalClass.makeHtmlElement(each));
      }
    }
    return element2;
  };
  static css = function(first, ...args2) {
    if (typeof first == "string") {
      return first;
    } else if (first == null) {
      return "";
    } else if (first instanceof Array) {
      const strings = first;
      const values = args2;
      let finalString = "";
      for (const each of strings) {
        finalString += each;
        if (values.length > 0) {
          const value = values.shift();
          if (value instanceof Object) {
            finalString += Elemental2.css(value);
          } else {
            finalString += `${value}`;
          }
        }
      }
      return finalString;
    } else if (first instanceof Object) {
      let finalString = "";
      for (const [key2, value] of Object.entries(first)) {
        if (value != null) {
          finalString += `${kebabCase2(key2)}: ${value};`;
        }
      }
      return finalString;
    } else {
      return first;
    }
  };
  static combineClasses = (...classes) => {
    classes = classes.filter((each) => each != null);
    let classesFinalList = [];
    for (let eachEntry of classes) {
      if (typeof eachEntry == "string") {
        eachEntry = eachEntry.split(" ");
      }
      if (eachEntry instanceof Array) {
        eachEntry = eachEntry.flat(Infinity);
        for (let eachName of eachEntry) {
          classesFinalList.push(eachName);
        }
      } else if (eachEntry instanceof Object) {
        for (const [className, enabled] of Object.entries(eachEntry)) {
          if (enabled) {
            classesFinalList.push(className);
          }
        }
      }
    }
    return classesFinalList;
  };
  createElement(...args2) {
    if (args2[0] instanceof Array) {
      return this.xhtm(...args2);
    } else {
      _ElementalClass.debug && console.debug(`args is:`, args2);
      for (const middleware22 of (this.middleware[_ElementalClass.allTags] || []).concat(this.middleware[args2[0]] || [])) {
        try {
          args2 = eachMiddleWare(args2);
        } catch (error) {
          console.error("[ElementalClass] one of the middleware functions failed:", eachMiddleWare, args2);
        }
      }
      let [key2, properties2, ...children] = args2;
      _ElementalClass.debug && console.debug(`key, properties, children is:`, key2, properties2, children);
      if (this.components[key2] instanceof Function) {
        key2 = this.components[key2];
      }
      if (key2 instanceof Function) {
        let output2;
        try {
          output2 = isConstructor2(key2) ? new key2({ ...properties2, children }) : key2({ ...properties2, children });
        } catch (error) {
          return this.errorComponentFactory({ ...properties2, children }, key2, error);
        }
        if (output2 instanceof Promise) {
          const elementPromise = output2;
          const placeholder = elementPromise.placeholder || this.defaultPlaceholderFactory(output2);
          setTimeout(async () => {
            try {
              const result = await elementPromise;
              if (!(result instanceof Array)) {
                const htmlElement = _ElementalClass.makeHtmlElement(result);
                placeholder.replaceWith(htmlElement);
              } else {
                let parentElement = placeholder.parentElement;
                if (!parentElement) {
                  parentElement = await new Promise((resolve, reject) => {
                    let intervalId = setInterval(() => {
                      if (placeholder.parentElement) {
                        resolve(placeholder.parentElement);
                        clearInterval(intervalId);
                      }
                    }, 70);
                  });
                }
                for (const each of result) {
                  try {
                    _ElementalClass.appendChildren({
                      element: parentElement,
                      insertBefore: placeholder
                    }, each);
                  } catch (error) {
                    parentElement.insertBefore(placeholder, createErrorElement2(`Something returned a promise, which resolved to an array, and then something tried to append those to an element (this element: ${element2}). One of the items in the array ${each} caused an error when it tried to be added as a child:
 ${toString2(error)}`));
                  }
                }
              }
            } catch (error) {
              placeholder.replaceWith(
                this.errorComponentFactory({ ...properties2, children }, key2, error)
              );
            }
          }, 0);
          return placeholder;
        } else {
          return output2;
        }
      }
      const isSvg = _ElementalClass.exclusivelySvgElements.has(key2);
      let element2;
      if (key2 == "iframe" && properties2.src) {
        const helper = document.createElement("div");
        helper.innerHTML = `<iframe src=${JSON.stringify(properties2.src)}></iframe>`;
        element2 = helper.children[0];
        delete properties2.src;
      } else if (isSvg) {
        element2 = document.createElementNS("http://www.w3.org/2000/svg", key2);
      } else {
        element2 = document.createElement(key2);
      }
      let styleString = "";
      if (properties2 instanceof Object) {
        for (let [key3, value] of Object.entries(properties2)) {
          if (key3 == "style") {
            styleString += _ElementalClass.css(value);
            continue;
          }
          if (key3.slice(0, 2) == "on" && key3.slice(2, 3).toLowerCase() !== key3.slice(2, 3) && value instanceof Function) {
            element2.addEventListener(key3.slice(2).toLowerCase(), value);
          }
          if (key3 == "class") {
            if (value instanceof Array) {
              value = value.join(" ");
            } else if (value instanceof Object) {
              let newValue = "";
              for (const [classString, enable] of Object.entries(value)) {
                if (enable) {
                  newValue += classString;
                }
              }
              value = newValue;
            }
          }
          if (isSvg) {
            if (value instanceof Array) {
              value = value.join(" ");
            }
            element2.setAttribute(kebabCase2(key3), value);
            continue;
          }
          if (value != null && !(value instanceof Object) && validNonCallbackHtmlAttributes2.has(key3)) {
            element2.setAttribute(key3, value);
          }
          try {
            element2[key3] = value;
          } catch (error) {
          }
          if (isValidStyleAttribute2(key3)) {
            styleString += `;${key3}: ${value};`;
          }
        }
      }
      if (styleString) {
        element2.setAttribute("style", styleString);
      }
      return _ElementalClass.appendChildren(element2, ...children);
    }
  }
  extend(additionalComponents = {}, options = {}) {
    const { middleware: middleware22, ...other } = options || {};
    return Elemental2(
      { ...this.components, ...additionalComponents },
      {
        middleware: { ...this.middleware, ...middleware22 },
        ...other
      }
    );
  }
};
var Elemental2 = (...args2) => {
  const elementalObject = new ElementalClass2(...args2);
  const createElementFunction = elementalObject.createElement.bind(elementalObject);
  attachProperties2(ElementalClass2, createElementFunction);
  attachProperties2(elementalObject, createElementFunction);
  return createElementFunction;
};
attachProperties2(ElementalClass2, Elemental2);
function createErrorElement2(error) {
  const element2 = document.createElement("div");
  element2.setAttribute("style", `
        all:              unset;
        display:          flex;
        flex-direction:   column;
        padding:          1.5rem;
        background-color: #f5a5a8;
        color:            white;
        font-family:      -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
        font-size:        18px;
        font-weight:      400;
        overflow:         auto;
    `);
  element2.innerHTML = `I'm sorry, there was an error when loading this part of the page 🙁.<br>Here's the error message: ${Option(toString2(error != null && error.message || error)).innerHTML}`;
}
function defaultErrorComponentFactory2({ children, ...properties2 }, key2, error) {
  const element2 = document.createElement("div");
  const errorDetails = document.createElement("div");
  const childContainer = document.createElement("div");
  element2.setAttribute("style", `
        all:              unset;
        display:          flex;
        flex-direction:   column;
        padding:          1.5rem;
        background-color: #f5a5a8;
        color:            white;
        font-family:      -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
        font-size:        18px;
        font-weight:      400;
        overflow:         auto;
    `);
  element2.innerHTML = `I'm sorry, there was an error when loading this part of the page 🙁 `;
  let errorElementPart;
  if (typeof key2 == "string") {
    errorElementPart = `<${key2} />`;
  } else {
    try {
      errorElementPart = `<${key2.prototype.constructor.name} />`;
    } catch (error2) {
      try {
        errorElementPart = `<${key2.name} />`;
      } catch (error3) {
        errorElementPart = `<${key2} />`;
      }
    }
  }
  let errorJsonObject = {};
  for (const [key3, value] of Object.entries(properties2)) {
    try {
      errorJsonObject[key3] = JSON.parse(JSON.stringify(value));
    } catch (error2) {
      if (typeof value == "symbol") {
        errorJsonObject[key3] = value.toString();
      } else {
        errorJsonObject[key3] = `${value}`;
      }
    }
  }
  errorDetails.innerHTML = `
        <span>
            tag: ${errorElementPart}
        </span>
        <div>
            properties:
            <code style="max-height: 12rem; overflow: auto;">
                ${JSON.stringify(errorJsonObject, 0, 4)}
            </code>
        </div>
        <span>
            error: ${error.stack.replace(/\n/, "<br>")}
        </span>
    `;
  errorDetails.setAttribute("style", `
        padding: 1rem;
        background-color: #161b22;
        color: #789896;
        white-space: pre;
        max-width: 85vw;
        overflow: auto;
    `);
  element2.appendChild(errorDetails);
  childContainer.setAttribute("style", `
        all: unset
        display: flex
        flex-direction: column
        margin-top: 1.3rem
    `);
  ElementalClass2.appendChildren(childContainer, children);
  element2.appendChild(childContainer);
  return element2;
}
try {
  const originalHead = document.head;
  Object.defineProperty(document, "head", {
    set: (element2) => ElementalClass2.appendChildren(originalHead, ...element2.childNodes),
    get: () => originalHead,
    writable: true
  });
} catch (error) {
}
var combineClasses2 = ElementalClass2.combineClasses;
var html2 = Elemental2();
var css2 = ElementalClass2.css;
var allTags2 = ElementalClass2.allTags;
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
function createCommonjsModule(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfNotNamed(n3) {
  return n3 && Object.prototype.hasOwnProperty.call(n3, "default") && Object.keys(n3).length === 1 ? n3["default"] : n3;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var cache_exports = {};
__export(cache_exports, {
  default: () => cache_default
});
var sheet_exports = {};
__export(sheet_exports, {
  StyleSheet: () => StyleSheet,
  __moduleExports: () => emotionSheet_cjs,
  default: () => sheet_default
});
function createCommonjsModule2(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire2(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire2() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionSheet_cjs_prod = createCommonjsModule2(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i3 = 0; i3 < document.styleSheets.length; i3++) {
      if (document.styleSheets[i3].ownerNode === tag) {
        return document.styleSheets[i3];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet22 = /* @__PURE__ */ function() {
    function StyleSheet3(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? true : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet3.prototype;
    _proto.hydrate = function hydrate22(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert2(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (this.isSpeedy) {
        var sheet32 = sheetForTag(tag);
        try {
          sheet32.insertRule(rule, sheet32.cssRules.length);
        } catch (e) {
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush22() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
    };
    return StyleSheet3;
  }();
  exports.StyleSheet = StyleSheet22;
});
var emotionSheet_cjs = createCommonjsModule2(function(module) {
  {
    module.exports = emotionSheet_cjs_prod;
  }
});
var StyleSheet = emotionSheet_cjs.StyleSheet;
var sheet_default = emotionSheet_cjs;
var stylis_exports = {};
__export(stylis_exports, {
  CHARSET: () => CHARSET,
  COMMENT: () => COMMENT,
  COUNTER_STYLE: () => COUNTER_STYLE,
  DECLARATION: () => DECLARATION,
  DOCUMENT: () => DOCUMENT,
  FONT_FACE: () => FONT_FACE,
  FONT_FEATURE_VALUES: () => FONT_FEATURE_VALUES,
  IMPORT: () => IMPORT,
  KEYFRAMES: () => KEYFRAMES,
  MEDIA: () => MEDIA,
  MOZ: () => MOZ,
  MS: () => MS,
  NAMESPACE: () => NAMESPACE,
  PAGE: () => PAGE,
  RULESET: () => RULESET,
  SUPPORTS: () => SUPPORTS,
  VIEWPORT: () => VIEWPORT,
  WEBKIT: () => WEBKIT,
  abs: () => abs,
  alloc: () => alloc,
  append: () => append,
  assign: () => assign,
  caret: () => caret,
  char: () => char,
  character: () => character,
  characters: () => characters,
  charat: () => charat,
  column: () => column,
  combine: () => combine,
  comment: () => comment,
  commenter: () => commenter,
  compile: () => compile,
  copy: () => copy,
  dealloc: () => dealloc,
  declaration: () => declaration,
  default: () => stylis_default,
  delimit: () => delimit,
  delimiter: () => delimiter,
  escaping: () => escaping,
  from: () => from,
  hash: () => hash,
  identifier: () => identifier,
  indexof: () => indexof,
  length: () => length,
  line: () => line,
  match: () => match,
  middleware: () => middleware,
  namespace: () => namespace,
  next: () => next,
  node: () => node,
  parse: () => parse,
  peek: () => peek,
  position: () => position,
  prefix: () => prefix,
  prefixer: () => prefixer,
  prev: () => prev,
  replace: () => replace,
  ruleset: () => ruleset,
  rulesheet: () => rulesheet,
  serialize: () => serialize,
  sizeof: () => sizeof,
  slice: () => slice,
  stringify: () => stringify,
  strlen: () => strlen,
  substr: () => substr,
  token: () => token,
  tokenize: () => tokenize,
  tokenizer: () => tokenizer,
  trim: () => trim,
  whitespace: () => whitespace
});
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var PAGE = "@page";
var MEDIA = "@media";
var IMPORT = "@import";
var CHARSET = "@charset";
var VIEWPORT = "@viewport";
var SUPPORTS = "@supports";
var DOCUMENT = "@document";
var NAMESPACE = "@namespace";
var KEYFRAMES = "@keyframes";
var FONT_FACE = "@font-face";
var COUNTER_STYLE = "@counter-style";
var FONT_FEATURE_VALUES = "@font-feature-values";
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash(value, length22) {
  return charat(value, 0) ^ 45 ? (((length22 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index) {
  return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type, props, children, length22) {
  return { value, root, parent, type, props, children, line, column, length: length22, return: "" };
}
function copy(root, props) {
  return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function tokenize(value) {
  return dealloc(tokenizer(alloc(value)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function tokenizer(children) {
  while (next())
    switch (token(character)) {
      case 0:
        append(identifier(position - 1), children);
        break;
      case 2:
        append(delimit(character), children);
        break;
      default:
        append(from(character), children);
    }
  return children;
}
function escaping(index, count3) {
  while (--count3 && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index, caret() + (count3 < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index) {
  while (!token(peek()))
    next();
  return slice(index, position);
}
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length22 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character22 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters22 = type;
  while (scanning)
    switch (previous = character22, character22 = next()) {
      case 40:
        if (previous != 108 && charat(characters22, length22 - 1) == 58) {
          if (indexof(characters22 += replace(delimit(character22), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters22 += delimit(character22);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters22 += whitespace(previous);
        break;
      case 92:
        characters22 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters22 += "/";
        }
        break;
      case 123 * variable:
        points[index++] = strlen(characters22) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character22) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (property > 0 && strlen(characters22) - length22)
              append(property > 32 ? declaration(characters22 + ";", rule, parent, length22 - 1) : declaration(replace(characters22, " ", "") + ";", rule, parent, length22 - 2), declarations);
            break;
          case 59:
            characters22 += ";";
          default:
            append(reference = ruleset(characters22, root, parent, index, offset, rules, points, type, props = [], children = [], length22), rulesets);
            if (character22 === 123)
              if (offset === 0)
                parse(characters22, root, reference, reference, props, rulesets, length22, points, children);
              else
                switch (atrule === 99 && charat(characters22, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length22), children), rules, children, length22, points, rule ? props : children);
                    break;
                  default:
                    parse(characters22, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type = characters22 = "", length22 = pseudo;
        break;
      case 58:
        length22 = 1 + strlen(characters22), property = previous;
      default:
        if (variable < 1) {
          if (character22 == 123)
            --variable;
          else if (character22 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters22 += from(character22), character22 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters22 += "\f", -1);
            break;
          case 44:
            points[index++] = (strlen(characters22) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters22 += delimit(next());
            atrule = peek(), offset = length22 = strlen(type = characters22 += identifier(caret())), character22++;
            break;
          case 45:
            if (previous === 45 && strlen(characters22) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length22) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i3 = 0, j11 = 0, k5 = 0; i3 < index; ++i3)
    for (var x7 = 0, y9 = substr(value, post + 1, post = abs(j11 = points[i3])), z9 = value; x7 < size; ++x7)
      if (z9 = trim(j11 > 0 ? rule[x7] + " " + y9 : replace(y9, /&\f/g, rule[x7])))
        props[k5++] = z9;
  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length22);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length22) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length22), substr(value, length22 + 1, -1), length22);
}
function prefix(value, length22, children) {
  switch (hash(value, length22)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 4789:
      return MOZ + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 5936:
      switch (charat(value, length22 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
    case 6828:
    case 4268:
    case 2903:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/g, "") + (!match(value, /flex-|baseline/) ? MS + "grid-row-" + replace(value, /flex-|-self/g, "") : "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/g, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4200:
      if (!match(value, /flex-|baseline/))
        return MS + "grid-column-align" + substr(value, length22) + value;
      break;
    case 2592:
    case 3360:
      return MS + replace(value, "template-", "") + value;
    case 4384:
    case 3616:
      if (children && children.some(function(element2, index) {
        return length22 = index, match(element2.props, /grid-\w+-end/);
      })) {
        return ~indexof(value + (children = children[length22].value), "span") ? value : MS + replace(value, "-start", "") + value + MS + "grid-row-span:" + (~indexof(children, "span") ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ";";
      }
      return MS + replace(value, "-start", "") + value;
    case 4896:
    case 4128:
      return children && children.some(function(element2) {
        return match(element2.props, /grid-\w+-start/);
      }) ? value : MS + replace(replace(value, "-end", "-span"), "span ", "") + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length22 > 6)
        switch (charat(value, length22 + 1)) {
          case 109:
            if (charat(value, length22 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length22 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length22, children) + value : value;
        }
      break;
    case 5152:
    case 5920:
      return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_7, a7, b8, c2, d5, e, f4) {
        return MS + a7 + ":" + b8 + f4 + (c2 ? MS + a7 + "-span:" + (d5 ? e : +e - +b8) + f4 : "") + value;
      });
    case 4949:
      if (charat(value, length22 + 6) === 121)
        return replace(value, ":", ":" + WEBKIT) + value;
      break;
    case 6444:
      switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
        case 120:
          return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        case 100:
          return replace(value, ":", ":" + MS) + value;
      }
      break;
    case 5719:
    case 2647:
    case 2135:
    case 3927:
    case 2391:
      return replace(value, "scroll-", "scroll-snap-") + value;
  }
  return value;
}
function serialize(children, callback) {
  var output2 = "";
  var length22 = sizeof(children);
  for (var i3 = 0; i3 < length22; i3++)
    output2 += callback(children[i3], i3, children, callback) || "";
  return output2;
}
function stringify(element2, index, children, callback) {
  switch (element2.type) {
    case IMPORT:
    case DECLARATION:
      return element2.return = element2.return || element2.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element2.return = element2.value + "{" + serialize(element2.children, callback) + "}";
    case RULESET:
      element2.value = element2.props.join(",");
  }
  return strlen(children = serialize(element2.children, callback)) ? element2.return = element2.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length22 = sizeof(collection);
  return function(element2, index, children, callback) {
    var output2 = "";
    for (var i3 = 0; i3 < length22; i3++)
      output2 += collection[i3](element2, index, children, callback) || "";
    return output2;
  };
}
function rulesheet(callback) {
  return function(element2) {
    if (!element2.root) {
      if (element2 = element2.return)
        callback(element2);
    }
  };
}
function prefixer(element2, index, children, callback) {
  if (element2.length > -1) {
    if (!element2.return)
      switch (element2.type) {
        case DECLARATION:
          element2.return = prefix(element2.value, element2.length, children);
          return;
        case KEYFRAMES:
          return serialize([copy(element2, { value: replace(element2.value, "@", "@" + WEBKIT) })], callback);
        case RULESET:
          if (element2.length)
            return combine(element2.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy(element2, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                case "::placeholder":
                  return serialize([
                    copy(element2, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                    copy(element2, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                    copy(element2, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                  ], callback);
              }
              return "";
            });
      }
  }
}
function namespace(element2) {
  switch (element2.type) {
    case RULESET:
      element2.props = element2.props.map(function(value) {
        return combine(tokenize(value), function(value2, index, children) {
          switch (charat(value2, 0)) {
            case 12:
              return substr(value2, 1, strlen(value2));
            case 0:
            case 40:
            case 43:
            case 62:
            case 126:
              return value2;
            case 58:
              if (children[++index] === "global")
                children[index] = "", children[++index] = "\f" + substr(children[index], index = 1, -1);
            case 32:
              return index === 1 ? "" : value2;
            default:
              switch (index) {
                case 0:
                  element2 = value2;
                  return sizeof(children) > 1 ? "" : value2;
                case (index = sizeof(children) - 1):
                case 2:
                  return index === 2 ? value2 + element2 + element2 : value2 + element2;
                default:
                  return value2;
              }
          }
        });
      });
  }
}
var stylis_default = null;
var weak_memoize_exports = {};
__export(weak_memoize_exports, {
  default: () => weak_memoize_default
});
function createCommonjsModule3(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire3(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire3() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionWeakMemoize_cjs_prod = createCommonjsModule3(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var weakMemoize22 = function weakMemoize222(func) {
    var cache3 = /* @__PURE__ */ new WeakMap();
    return function(arg) {
      if (cache3.has(arg)) {
        return cache3.get(arg);
      }
      var ret = func(arg);
      cache3.set(arg, ret);
      return ret;
    };
  };
  exports.default = weakMemoize22;
});
var emotionWeakMemoize_cjs = createCommonjsModule3(function(module) {
  {
    module.exports = emotionWeakMemoize_cjs_prod;
  }
});
var weak_memoize_default = emotionWeakMemoize_cjs;
var memoize_exports = {};
__export(memoize_exports, {
  default: () => memoize_default
});
function createCommonjsModule4(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire4(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire4() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionMemoize_cjs_prod = createCommonjsModule4(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function memoize32(fn2) {
    var cache3 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache3[arg] === void 0)
        cache3[arg] = fn2(arg);
      return cache3[arg];
    };
  }
  exports.default = memoize32;
});
var emotionMemoize_cjs = createCommonjsModule4(function(module) {
  {
    module.exports = emotionMemoize_cjs_prod;
  }
});
var memoize_default = emotionMemoize_cjs;
function createCommonjsModule5(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire5(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfNotNamed2(n3) {
  return n3 && Object.prototype.hasOwnProperty.call(n3, "default") && Object.keys(n3).length === 1 ? n3["default"] : n3;
}
function commonjsRequire5() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var sheet = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed2(sheet_exports);
var stylis = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed2(stylis_exports);
var weakMemoize = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed2(weak_memoize_exports);
var memoize = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed2(memoize_exports);
var emotionCache_cjs_prod = createCommonjsModule5(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function _interopDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
  var memoize__default = /* @__PURE__ */ _interopDefault(memoize);
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character22 = 0;
    while (true) {
      previous = character22;
      character22 = stylis.peek();
      if (previous === 38 && character22 === 12) {
        points[index] = 1;
      }
      if (stylis.token(character22)) {
        break;
      }
      stylis.next();
    }
    return stylis.slice(begin, stylis.position);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character22 = 44;
    do {
      switch (stylis.token(character22)) {
        case 0:
          if (character22 === 38 && stylis.peek() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(stylis.position - 1, points, index);
          break;
        case 2:
          parsed[index] += stylis.delimit(character22);
          break;
        case 4:
          if (character22 === 44) {
            parsed[++index] = stylis.peek() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        default:
          parsed[index] += stylis.from(character22);
      }
    } while (character22 = stylis.next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return stylis.dealloc(toRules(stylis.alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element2) {
    if (element2.type !== "rule" || !element2.parent || element2.length < 1) {
      return;
    }
    var value = element2.value, parent = element2.parent;
    var isImplicitRule = element2.column === parent.column && element2.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element2.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element2, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i3 = 0, k5 = 0; i3 < rules.length; i3++) {
      for (var j11 = 0; j11 < parentRules.length; j11++, k5++) {
        element2.props[k5] = points[i3] ? rules[i3].replace(/&\f/g, parentRules[j11]) : parentRules[j11] + " " + rules[i3];
      }
    }
  };
  var removeLabel = function removeLabel2(element2) {
    if (element2.type === "decl") {
      var value = element2.value;
      if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
        element2["return"] = "";
        element2.value = "";
      }
    }
  };
  function prefix22(value, length22) {
    switch (stylis.hash(value, length22)) {
      case 5103:
        return stylis.WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return stylis.WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return stylis.WEBKIT + value + stylis.MOZ + value + stylis.MS + value + value;
      case 6828:
      case 4268:
        return stylis.WEBKIT + value + stylis.MS + value + value;
      case 6165:
        return stylis.WEBKIT + value + stylis.MS + "flex-" + value + value;
      case 5187:
        return stylis.WEBKIT + value + stylis.replace(value, /(\w+).+(:[^]+)/, stylis.WEBKIT + "box-$1$2" + stylis.MS + "flex-$1$2") + value;
      case 5443:
        return stylis.WEBKIT + value + stylis.MS + "flex-item-" + stylis.replace(value, /flex-|-self/, "") + value;
      case 4675:
        return stylis.WEBKIT + value + stylis.MS + "flex-line-pack" + stylis.replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, "shrink", "negative") + value;
      case 5292:
        return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, "basis", "preferred-size") + value;
      case 6060:
        return stylis.WEBKIT + "box-" + stylis.replace(value, "-grow", "") + stylis.WEBKIT + value + stylis.MS + stylis.replace(value, "grow", "positive") + value;
      case 4554:
        return stylis.WEBKIT + stylis.replace(value, /([^-])(transform)/g, "$1" + stylis.WEBKIT + "$2") + value;
      case 6187:
        return stylis.replace(stylis.replace(stylis.replace(value, /(zoom-|grab)/, stylis.WEBKIT + "$1"), /(image-set)/, stylis.WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return stylis.replace(value, /(image-set\([^]*)/, stylis.WEBKIT + "$1$`$1");
      case 4968:
        return stylis.replace(stylis.replace(value, /(.+:)(flex-)?(.*)/, stylis.WEBKIT + "box-pack:$3" + stylis.MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + stylis.WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return stylis.replace(value, /(.+)-inline(.+)/, stylis.WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (stylis.strlen(value) - 1 - length22 > 6)
          switch (stylis.charat(value, length22 + 1)) {
            case 109:
              if (stylis.charat(value, length22 + 4) !== 45)
                break;
            case 102:
              return stylis.replace(value, /(.+:)(.+)-([^]+)/, "$1" + stylis.WEBKIT + "$2-$3$1" + stylis.MOZ + (stylis.charat(value, length22 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~stylis.indexof(value, "stretch") ? prefix22(stylis.replace(value, "stretch", "fill-available"), length22) + value : value;
          }
        break;
      case 4949:
        if (stylis.charat(value, length22 + 1) !== 115)
          break;
      case 6444:
        switch (stylis.charat(value, stylis.strlen(value) - 3 - (~stylis.indexof(value, "!important") && 10))) {
          case 107:
            return stylis.replace(value, ":", ":" + stylis.WEBKIT) + value;
          case 101:
            return stylis.replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + stylis.WEBKIT + (stylis.charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + stylis.WEBKIT + "$2$3$1" + stylis.MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (stylis.charat(value, length22 + 11)) {
          case 114:
            return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return stylis.WEBKIT + value + stylis.MS + value + value;
    }
    return value;
  }
  var prefixer22 = function prefixer222(element2, index, children, callback) {
    if (element2.length > -1) {
      if (!element2["return"])
        switch (element2.type) {
          case stylis.DECLARATION:
            element2["return"] = prefix22(element2.value, element2.length);
            break;
          case stylis.KEYFRAMES:
            return stylis.serialize([stylis.copy(element2, {
              value: stylis.replace(element2.value, "@", "@" + stylis.WEBKIT)
            })], callback);
          case stylis.RULESET:
            if (element2.length)
              return stylis.combine(element2.props, function(value) {
                switch (stylis.match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return stylis.serialize([stylis.copy(element2, {
                      props: [stylis.replace(value, /:(read-\w+)/, ":" + stylis.MOZ + "$1")]
                    })], callback);
                  case "::placeholder":
                    return stylis.serialize([stylis.copy(element2, {
                      props: [stylis.replace(value, /:(plac\w+)/, ":" + stylis.WEBKIT + "input-$1")]
                    }), stylis.copy(element2, {
                      props: [stylis.replace(value, /:(plac\w+)/, ":" + stylis.MOZ + "$1")]
                    }), stylis.copy(element2, {
                      props: [stylis.replace(value, /:(plac\w+)/, stylis.MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
        }
    }
  };
  var isBrowser = typeof document !== "undefined";
  var getServerStylisCache = isBrowser ? void 0 : weakMemoize__default["default"](function() {
    return memoize__default["default"](function() {
      var cache3 = {};
      return function(name2) {
        return cache3[name2];
      };
    });
  });
  var defaultStylisPlugins = [prefixer22];
  var createCache22 = function createCache222(options) {
    var key2 = options.key;
    if (isBrowser && key2 === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node22) {
        var dataEmotionAttribute = node22.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node22);
        node22.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    if (isBrowser) {
      container = options.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key2 + ' "]'), function(node22) {
        var attrib = node22.getAttribute("data-emotion").split(" ");
        for (var i3 = 1; i3 < attrib.length; i3++) {
          inserted[attrib[i3]] = true;
        }
        nodesToHydrate.push(node22);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (isBrowser) {
      var currentSheet;
      var finalizingPlugins = [stylis.stringify, stylis.rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis$12 = function stylis$13(styles) {
        return stylis.serialize(stylis.compile(styles), serializer);
      };
      _insert = function insert2(selector, serialized, sheet222, shouldCache) {
        currentSheet = sheet222;
        stylis$12(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache3.inserted[serialized.name] = true;
        }
      };
    } else {
      var _finalizingPlugins = [stylis.stringify];
      var _serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
      var _stylis = function _stylis2(styles) {
        return stylis.serialize(stylis.compile(styles), _serializer);
      };
      var serverStylisCache = getServerStylisCache(stylisPlugins)(key2);
      var getRules2 = function getRules3(selector, serialized) {
        var name2 = serialized.name;
        if (serverStylisCache[name2] === void 0) {
          serverStylisCache[name2] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        }
        return serverStylisCache[name2];
      };
      _insert = function _insert2(selector, serialized, sheet222, shouldCache) {
        var name2 = serialized.name;
        var rules = getRules2(selector, serialized);
        if (cache3.compat === void 0) {
          if (shouldCache) {
            cache3.inserted[name2] = true;
          }
          return rules;
        } else {
          if (shouldCache) {
            cache3.inserted[name2] = rules;
          } else {
            return rules;
          }
        }
      };
    }
    var cache3 = {
      key: key2,
      sheet: new sheet.StyleSheet({
        key: key2,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache3.sheet.hydrate(nodesToHydrate);
    return cache3;
  };
  exports.default = createCache22;
});
var emotionCache_cjs = createCommonjsModule5(function(module) {
  {
    module.exports = emotionCache_cjs_prod;
  }
});
var cache_default = emotionCache_cjs;
var serialize_exports = {};
__export(serialize_exports, {
  __moduleExports: () => emotionSerialize_cjs,
  default: () => serialize_default,
  serializeStyles: () => serializeStyles
});
var hash_exports = {};
__export(hash_exports, {
  default: () => hash_default
});
function createCommonjsModule6(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire6(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire6() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionHash_cjs_prod = createCommonjsModule6(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function murmur2(str) {
    var h6 = 0;
    var k5, i3 = 0, len = str.length;
    for (; len >= 4; ++i3, len -= 4) {
      k5 = str.charCodeAt(i3) & 255 | (str.charCodeAt(++i3) & 255) << 8 | (str.charCodeAt(++i3) & 255) << 16 | (str.charCodeAt(++i3) & 255) << 24;
      k5 = (k5 & 65535) * 1540483477 + ((k5 >>> 16) * 59797 << 16);
      k5 ^= k5 >>> 24;
      h6 = (k5 & 65535) * 1540483477 + ((k5 >>> 16) * 59797 << 16) ^ (h6 & 65535) * 1540483477 + ((h6 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h6 ^= (str.charCodeAt(i3 + 2) & 255) << 16;
      case 2:
        h6 ^= (str.charCodeAt(i3 + 1) & 255) << 8;
      case 1:
        h6 ^= str.charCodeAt(i3) & 255;
        h6 = (h6 & 65535) * 1540483477 + ((h6 >>> 16) * 59797 << 16);
    }
    h6 ^= h6 >>> 13;
    h6 = (h6 & 65535) * 1540483477 + ((h6 >>> 16) * 59797 << 16);
    return ((h6 ^ h6 >>> 15) >>> 0).toString(36);
  }
  exports.default = murmur2;
});
var emotionHash_cjs = createCommonjsModule6(function(module) {
  {
    module.exports = emotionHash_cjs_prod;
  }
});
var hash_default = emotionHash_cjs;
var unitless_exports = {};
__export(unitless_exports, {
  default: () => unitless_default
});
function createCommonjsModule7(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire7(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire7() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionUnitless_cjs_prod = createCommonjsModule7(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  exports.default = unitlessKeys;
});
var emotionUnitless_cjs = createCommonjsModule7(function(module) {
  {
    module.exports = emotionUnitless_cjs_prod;
  }
});
var unitless_default = emotionUnitless_cjs;
function createCommonjsModule8(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire8(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfNotNamed3(n3) {
  return n3 && Object.prototype.hasOwnProperty.call(n3, "default") && Object.keys(n3).length === 1 ? n3["default"] : n3;
}
function commonjsRequire8() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var hashString = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed3(hash_exports);
var unitless = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed3(unitless_exports);
var memoize2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed3(memoize_exports);
var emotionSerialize_cjs_prod = createCommonjsModule8(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function _interopDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var hashString__default = /* @__PURE__ */ _interopDefault(hashString);
  var unitless__default = /* @__PURE__ */ _interopDefault(unitless);
  var memoize__default = /* @__PURE__ */ _interopDefault(memoize2);
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ memoize__default["default"](function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key2, value) {
    switch (key2) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match22, p1, p22) {
            cursor = {
              name: p1,
              styles: p22,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitless__default["default"][key2] !== 1 && !isCustomProperty(key2) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next22 = interpolation.next;
          if (next22 !== void 0) {
            while (next22 !== void 0) {
              cursor = {
                name: next22.name,
                styles: next22.styles,
                next: cursor
              };
              next22 = next22.next;
            }
          }
          var styles = interpolation.styles + ";";
          return styles;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string2 = "";
    if (Array.isArray(obj)) {
      for (var i3 = 0; i3 < obj.length; i3++) {
        string2 += handleInterpolation(mergedProps, registered, obj[i3]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string2 += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string2 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && false) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i2 = 0; _i2 < value.length; _i2++) {
              if (isProcessableValue(value[_i2])) {
                string2 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i2]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string2 += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                string2 += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string2;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var cursor;
  var serializeStyles22 = function serializeStyles3(args2, registered, mergedProps) {
    if (args2.length === 1 && typeof args2[0] === "object" && args2[0] !== null && args2[0].styles !== void 0) {
      return args2[0];
    }
    var stringMode = true;
    var styles = "";
    cursor = void 0;
    var strings = args2[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles += handleInterpolation(mergedProps, registered, strings);
    } else {
      styles += strings[0];
    }
    for (var i3 = 1; i3 < args2.length; i3++) {
      styles += handleInterpolation(mergedProps, registered, args2[i3]);
      if (stringMode) {
        styles += strings[i3];
      }
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match22;
    while ((match22 = labelPattern.exec(styles)) !== null) {
      identifierName += "-" + match22[1];
    }
    var name2 = hashString__default["default"](styles) + identifierName;
    return {
      name: name2,
      styles,
      next: cursor
    };
  };
  exports.serializeStyles = serializeStyles22;
});
var emotionSerialize_cjs = createCommonjsModule8(function(module) {
  {
    module.exports = emotionSerialize_cjs_prod;
  }
});
var serialize_default = emotionSerialize_cjs;
var serializeStyles = emotionSerialize_cjs.serializeStyles;
var utils_exports = {};
__export(utils_exports, {
  __moduleExports: () => emotionUtils_cjs,
  default: () => utils_default,
  getRegisteredStyles: () => getRegisteredStyles,
  insertStyles: () => insertStyles,
  registerStyles: () => registerStyles
});
function createCommonjsModule9(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire9(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire9() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionUtils_cjs_prod = createCommonjsModule9(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var isBrowser = typeof document !== "undefined";
  function getRegisteredStyles222(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles22 = function registerStyles3(cache3, serialized, isStringTag) {
    var className = cache3.key + "-" + serialized.name;
    if ((isStringTag === false || isBrowser === false && cache3.compat !== void 0) && cache3.registered[className] === void 0) {
      cache3.registered[className] = serialized.styles;
    }
  };
  var insertStyles22 = function insertStyles3(cache3, serialized, isStringTag) {
    registerStyles22(cache3, serialized, isStringTag);
    var className = cache3.key + "-" + serialized.name;
    if (cache3.inserted[serialized.name] === void 0) {
      var stylesForSSR = "";
      var current = serialized;
      do {
        var maybeStyles = cache3.insert(serialized === current ? "." + className : "", current, cache3.sheet, true);
        if (!isBrowser && maybeStyles !== void 0) {
          stylesForSSR += maybeStyles;
        }
        current = current.next;
      } while (current !== void 0);
      if (!isBrowser && stylesForSSR.length !== 0) {
        return stylesForSSR;
      }
    }
  };
  exports.getRegisteredStyles = getRegisteredStyles222;
  exports.insertStyles = insertStyles22;
  exports.registerStyles = registerStyles22;
});
var emotionUtils_cjs = createCommonjsModule9(function(module) {
  {
    module.exports = emotionUtils_cjs_prod;
  }
});
var utils_default = emotionUtils_cjs;
var getRegisteredStyles = emotionUtils_cjs.getRegisteredStyles;
var insertStyles = emotionUtils_cjs.insertStyles;
var registerStyles = emotionUtils_cjs.registerStyles;
var createCache = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed(cache_exports);
var serialize2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed(serialize_exports);
var utils = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed(utils_exports);
var emotionCssCreateInstance_cjs_prod = createCommonjsModule(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function _interopDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var createCache__default = /* @__PURE__ */ _interopDefault(createCache);
  function insertWithoutScoping(cache222, serialized) {
    if (cache222.inserted[serialized.name] === void 0) {
      return cache222.insert("", serialized, cache222.sheet, true);
    }
  }
  function merge22(registered, css222, className) {
    var registeredStyles = [];
    var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css222(registeredStyles);
  }
  var createEmotion = function createEmotion2(options) {
    var cache222 = createCache__default["default"](options);
    cache222.sheet.speedy = function(value) {
      this.isSpeedy = value;
    };
    cache222.compat = true;
    var css222 = function css2222() {
      for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
        args2[_key] = arguments[_key];
      }
      var serialized = serialize2.serializeStyles(args2, cache222.registered, void 0);
      utils.insertStyles(cache222, serialized, false);
      return cache222.key + "-" + serialized.name;
    };
    var keyframes22 = function keyframes222() {
      for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args2[_key2] = arguments[_key2];
      }
      var serialized = serialize2.serializeStyles(args2, cache222.registered);
      var animation = "animation-" + serialized.name;
      insertWithoutScoping(cache222, {
        name: serialized.name,
        styles: "@keyframes " + animation + "{" + serialized.styles + "}"
      });
      return animation;
    };
    var injectGlobal22 = function injectGlobal222() {
      for (var _len3 = arguments.length, args2 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args2[_key3] = arguments[_key3];
      }
      var serialized = serialize2.serializeStyles(args2, cache222.registered);
      insertWithoutScoping(cache222, serialized);
    };
    var cx22 = function cx222() {
      for (var _len4 = arguments.length, args2 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args2[_key4] = arguments[_key4];
      }
      return merge22(cache222.registered, css222, classnames(args2));
    };
    return {
      css: css222,
      cx: cx22,
      injectGlobal: injectGlobal22,
      keyframes: keyframes22,
      hydrate: function hydrate22(ids) {
        ids.forEach(function(key2) {
          cache222.inserted[key2] = true;
        });
      },
      flush: function flush22() {
        cache222.registered = {};
        cache222.inserted = {};
        cache222.sheet.flush();
      },
      sheet: cache222.sheet,
      cache: cache222,
      getRegisteredStyles: utils.getRegisteredStyles.bind(null, cache222.registered),
      merge: merge22.bind(null, cache222.registered, css222)
    };
  };
  var classnames = function classnames2(args2) {
    var cls = "";
    for (var i3 = 0; i3 < args2.length; i3++) {
      var arg = args2[i3];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            toAdd = "";
            for (var k5 in arg) {
              if (arg[k5] && k5) {
                toAdd && (toAdd += " ");
                toAdd += k5;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  exports.default = createEmotion;
});
var emotionCss_cjs_prod = createCommonjsModule(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var _createEmotion = emotionCssCreateInstance_cjs_prod["default"]({
    key: "css"
  }), flush22 = _createEmotion.flush, hydrate22 = _createEmotion.hydrate, cx22 = _createEmotion.cx, merge22 = _createEmotion.merge, getRegisteredStyles222 = _createEmotion.getRegisteredStyles, injectGlobal22 = _createEmotion.injectGlobal, keyframes22 = _createEmotion.keyframes, css222 = _createEmotion.css, sheet222 = _createEmotion.sheet, cache3 = _createEmotion.cache;
  exports.cache = cache3;
  exports.css = css222;
  exports.cx = cx22;
  exports.flush = flush22;
  exports.getRegisteredStyles = getRegisteredStyles222;
  exports.hydrate = hydrate22;
  exports.injectGlobal = injectGlobal22;
  exports.keyframes = keyframes22;
  exports.merge = merge22;
  exports.sheet = sheet222;
});
var emotionCss_cjs = createCommonjsModule(function(module) {
  {
    module.exports = emotionCss_cjs_prod;
  }
});
var cache2 = emotionCss_cjs.cache;
var css22 = emotionCss_cjs.css;
var cx = emotionCss_cjs.cx;
var flush = emotionCss_cjs.flush;
var getRegisteredStyles2 = emotionCss_cjs.getRegisteredStyles;
var hydrate = emotionCss_cjs.hydrate;
var injectGlobal = emotionCss_cjs.injectGlobal;
var keyframes = emotionCss_cjs.keyframes;
var merge = emotionCss_cjs.merge;
var sheet2 = emotionCss_cjs.sheet;
var setupStyles = (arg, styles) => {
  if (arg.styles) {
    arg.styles = `${styles};${css22(arg.styles)};`;
  } else {
    arg.styles = styles;
  }
  return arg;
};
var setup_styles_default = setupStyles;
function getLengths(b64) {
  const len = b64.length;
  let validLen = b64.indexOf("=");
  if (validLen === -1) {
    validLen = len;
  }
  const placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function init(lookup32, revLookup32, urlsafe = false) {
  function _byteLength(validLen, placeHoldersLen) {
    return Math.floor((validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen);
  }
  function tripletToBase64(num) {
    return lookup32[num >> 18 & 63] + lookup32[num >> 12 & 63] + lookup32[num >> 6 & 63] + lookup32[num & 63];
  }
  function encodeChunk(buf, start, end) {
    const out = new Array((end - start) / 3);
    for (let i3 = start, curTriplet = 0; i3 < end; i3 += 3) {
      out[curTriplet++] = tripletToBase64(
        (buf[i3] << 16) + (buf[i3 + 1] << 8) + buf[i3 + 2]
      );
    }
    return out.join("");
  }
  return {
    // base64 is 4/3 + up to two characters of the original data
    byteLength(b64) {
      return _byteLength.apply(null, getLengths(b64));
    },
    toUint8Array(b64) {
      const [validLen, placeHoldersLen] = getLengths(b64);
      const buf = new Uint8Array(_byteLength(validLen, placeHoldersLen));
      const len = placeHoldersLen ? validLen - 4 : validLen;
      let tmp;
      let curByte = 0;
      let i3;
      for (i3 = 0; i3 < len; i3 += 4) {
        tmp = revLookup32[b64.charCodeAt(i3)] << 18 | revLookup32[b64.charCodeAt(i3 + 1)] << 12 | revLookup32[b64.charCodeAt(i3 + 2)] << 6 | revLookup32[b64.charCodeAt(i3 + 3)];
        buf[curByte++] = tmp >> 16 & 255;
        buf[curByte++] = tmp >> 8 & 255;
        buf[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup32[b64.charCodeAt(i3)] << 2 | revLookup32[b64.charCodeAt(i3 + 1)] >> 4;
        buf[curByte++] = tmp & 255;
      } else if (placeHoldersLen === 1) {
        tmp = revLookup32[b64.charCodeAt(i3)] << 10 | revLookup32[b64.charCodeAt(i3 + 1)] << 4 | revLookup32[b64.charCodeAt(i3 + 2)] >> 2;
        buf[curByte++] = tmp >> 8 & 255;
        buf[curByte++] = tmp & 255;
      }
      return buf;
    },
    fromUint8Array(buf) {
      const maxChunkLength = 16383;
      const len = buf.length;
      const extraBytes = len % 3;
      const len2 = len - extraBytes;
      const parts = new Array(
        Math.ceil(len2 / maxChunkLength) + (extraBytes ? 1 : 0)
      );
      let curChunk = 0;
      let chunkEnd;
      for (let i3 = 0; i3 < len2; i3 += maxChunkLength) {
        chunkEnd = i3 + maxChunkLength;
        parts[curChunk++] = encodeChunk(
          buf,
          i3,
          chunkEnd > len2 ? len2 : chunkEnd
        );
      }
      let tmp;
      if (extraBytes === 1) {
        tmp = buf[len2];
        parts[curChunk] = lookup32[tmp >> 2] + lookup32[tmp << 4 & 63];
        if (!urlsafe)
          parts[curChunk] += "==";
      } else if (extraBytes === 2) {
        tmp = buf[len2] << 8 | buf[len2 + 1] & 255;
        parts[curChunk] = lookup32[tmp >> 10] + lookup32[tmp >> 4 & 63] + lookup32[tmp << 2 & 63];
        if (!urlsafe)
          parts[curChunk] += "=";
      }
      return parts.join("");
    }
  };
}
var lookup = [];
var revLookup = [];
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (let i3 = 0, l7 = code.length; i3 < l7; ++i3) {
  lookup[i3] = code[i3];
  revLookup[code.charCodeAt(i3)] = i3;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
var { byteLength, toUint8Array, fromUint8Array } = init(
  lookup,
  revLookup
);
var lookup2 = [];
var revLookup2 = [];
var code2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
for (let i3 = 0, l7 = code2.length; i3 < l7; ++i3) {
  lookup2[i3] = code2[i3];
  revLookup2[code2.charCodeAt(i3)] = i3;
}
var { byteLength: byteLength2, toUint8Array: toUint8Array2, fromUint8Array: fromUint8Array2 } = init(
  lookup2,
  revLookup2,
  true
);
var decoder = new TextDecoder();
var encoder = new TextEncoder();
function toHexString(buf) {
  return buf.reduce(
    (hex, byte) => `${hex}${byte < 16 ? "0" : ""}${byte.toString(16)}`,
    ""
  );
}
function fromHexString(hex) {
  const len = hex.length;
  if (len % 2 || !/^[0-9a-fA-F]+$/.test(hex)) {
    throw new TypeError("Invalid hex string.");
  }
  hex = hex.toLowerCase();
  const buf = new Uint8Array(Math.floor(len / 2));
  const end = len / 2;
  for (let i3 = 0; i3 < end; ++i3) {
    buf[i3] = parseInt(hex.substr(i3 * 2, 2), 16);
  }
  return buf;
}
function decode(buf, encoding = "utf8") {
  if (/^utf-?8$/i.test(encoding)) {
    return decoder.decode(buf);
  } else if (/^base64$/i.test(encoding)) {
    return fromUint8Array(buf);
  } else if (/^base64url$/i.test(encoding)) {
    return fromUint8Array2(buf);
  } else if (/^hex(?:adecimal)?$/i.test(encoding)) {
    return toHexString(buf);
  } else {
    throw new TypeError("Unsupported string encoding.");
  }
}
function encode(str, encoding = "utf8") {
  if (/^utf-?8$/i.test(encoding)) {
    return encoder.encode(str);
  } else if (/^base64(?:url)?$/i.test(encoding)) {
    return toUint8Array(str);
  } else if (/^hex(?:adecimal)?$/i.test(encoding)) {
    return fromHexString(str);
  } else {
    throw new TypeError("Unsupported string encoding.");
  }
}
var BYTES = 32;
var SHA256 = class {
  hashSize = BYTES;
  _buf;
  _bufIdx;
  _count;
  _K;
  _H;
  _finalized;
  /** Creates a SHA256 instance. */
  constructor() {
    this._buf = new Uint8Array(64);
    this._K = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    this.init();
  }
  /** Initializes a hash. */
  init() {
    this._H = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    this._bufIdx = 0;
    this._count = new Uint32Array(2);
    this._buf.fill(0);
    this._finalized = false;
    return this;
  }
  /** Updates the hash with additional message data. */
  update(msg, inputEncoding) {
    if (msg === null) {
      throw new TypeError("msg must be a string or Uint8Array.");
    } else if (typeof msg === "string") {
      msg = encode(msg, inputEncoding);
    }
    for (let i3 = 0, len = msg.length; i3 < len; i3++) {
      this._buf[this._bufIdx++] = msg[i3];
      if (this._bufIdx === 64) {
        this._transform();
        this._bufIdx = 0;
      }
    }
    const c2 = this._count;
    if ((c2[0] += msg.length << 3) < msg.length << 3) {
      c2[1]++;
    }
    c2[1] += msg.length >>> 29;
    return this;
  }
  /** Finalizes the hash with additional message data. */
  digest(outputEncoding) {
    if (this._finalized) {
      throw new Error("digest has already been called.");
    }
    this._finalized = true;
    const b8 = this._buf;
    let idx = this._bufIdx;
    b8[idx++] = 128;
    while (idx !== 56) {
      if (idx === 64) {
        this._transform();
        idx = 0;
      }
      b8[idx++] = 0;
    }
    const c2 = this._count;
    b8[56] = c2[1] >>> 24 & 255;
    b8[57] = c2[1] >>> 16 & 255;
    b8[58] = c2[1] >>> 8 & 255;
    b8[59] = c2[1] >>> 0 & 255;
    b8[60] = c2[0] >>> 24 & 255;
    b8[61] = c2[0] >>> 16 & 255;
    b8[62] = c2[0] >>> 8 & 255;
    b8[63] = c2[0] >>> 0 & 255;
    this._transform();
    const hash22 = new Uint8Array(BYTES);
    for (let i3 = 0; i3 < 8; i3++) {
      hash22[(i3 << 2) + 0] = this._H[i3] >>> 24 & 255;
      hash22[(i3 << 2) + 1] = this._H[i3] >>> 16 & 255;
      hash22[(i3 << 2) + 2] = this._H[i3] >>> 8 & 255;
      hash22[(i3 << 2) + 3] = this._H[i3] >>> 0 & 255;
    }
    this.init();
    return outputEncoding ? decode(hash22, outputEncoding) : hash22;
  }
  /** Performs one transformation cycle. */
  _transform() {
    const h6 = this._H;
    let h0 = h6[0];
    let h1 = h6[1];
    let h22 = h6[2];
    let h32 = h6[3];
    let h42 = h6[4];
    let h52 = h6[5];
    let h62 = h6[6];
    let h7 = h6[7];
    const w9 = new Uint32Array(16);
    let i3;
    for (i3 = 0; i3 < 16; i3++) {
      w9[i3] = this._buf[(i3 << 2) + 3] | this._buf[(i3 << 2) + 2] << 8 | this._buf[(i3 << 2) + 1] << 16 | this._buf[i3 << 2] << 24;
    }
    for (i3 = 0; i3 < 64; i3++) {
      let tmp;
      if (i3 < 16) {
        tmp = w9[i3];
      } else {
        let a7 = w9[i3 + 1 & 15];
        let b8 = w9[i3 + 14 & 15];
        tmp = w9[i3 & 15] = (a7 >>> 7 ^ a7 >>> 18 ^ a7 >>> 3 ^ a7 << 25 ^ a7 << 14) + (b8 >>> 17 ^ b8 >>> 19 ^ b8 >>> 10 ^ b8 << 15 ^ b8 << 13) + w9[i3 & 15] + w9[i3 + 9 & 15] | 0;
      }
      tmp = tmp + h7 + (h42 >>> 6 ^ h42 >>> 11 ^ h42 >>> 25 ^ h42 << 26 ^ h42 << 21 ^ h42 << 7) + (h62 ^ h42 & (h52 ^ h62)) + this._K[i3] | 0;
      h7 = h62;
      h62 = h52;
      h52 = h42;
      h42 = h32 + tmp;
      h32 = h22;
      h22 = h1;
      h1 = h0;
      h0 = tmp + (h1 & h22 ^ h32 & (h1 ^ h22)) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10) | 0;
    }
    h6[0] = h6[0] + h0 | 0;
    h6[1] = h6[1] + h1 | 0;
    h6[2] = h6[2] + h22 | 0;
    h6[3] = h6[3] + h32 | 0;
    h6[4] = h6[4] + h42 | 0;
    h6[5] = h6[5] + h52 | 0;
    h6[6] = h6[6] + h62 | 0;
    h6[7] = h6[7] + h7 | 0;
  }
};
function sha256(msg, inputEncoding, outputEncoding) {
  return new SHA256().update(msg, inputEncoding).digest(outputEncoding);
}
var hash2 = (value) => sha256(value, "utf-8", "hex");
var hash_default2 = hash2;
var dynamicClasses = /* @__PURE__ */ new Set();
var helperStyle = document.createElement("style");
var createCssClass = (name2, styles) => {
  const classStyles = [styles].flat(Infinity);
  const key2 = `${name2}${hash_default2(`${classStyles}`)}`;
  if (!dynamicClasses.has(key2)) {
    dynamicClasses.add(key2);
    for (const each of classStyles) {
      helperStyle.innerHTML += `.${key2}${each}`;
    }
  }
  return key2;
};
createCssClass.helperStyle = helperStyle;
createCssClass.dynamicClasses = dynamicClasses;
var create_css_class_default = createCssClass;
var combineClasses22 = (...classes) => {
  classes = classes.filter((each) => each != null);
  let classesFinalList = [];
  for (let eachEntry of classes) {
    if (typeof eachEntry == "string") {
      eachEntry = eachEntry.split(" ");
    }
    if (eachEntry instanceof Array) {
      eachEntry = eachEntry.flat(Infinity);
      for (let eachName of eachEntry) {
        classesFinalList.push(eachName);
      }
    } else if (eachEntry instanceof Object) {
      for (const [className, enabled] of Object.entries(eachEntry)) {
        if (enabled) {
          classesFinalList.push(className);
        }
      }
    }
  }
  return classesFinalList;
};
var combine_classes_default = combineClasses22;
var setupClassStyles = (arg) => {
  if (arg.classStyles) {
    const className = create_css_class_default(``, arg.classStyles);
    arg.class = combine_classes_default(className, arg.class);
  }
  return arg;
};
var setup_class_styles_default = setupClassStyles;
var dynamicStyler = Symbol("dynamicStyler");
var ae = Object.create;
var F = Object.defineProperty;
var ne = Object.getOwnPropertyDescriptor;
var ce = Object.getOwnPropertyNames;
var se = Object.getPrototypeOf;
var ie = Object.prototype.hasOwnProperty;
var te = (b8, k5) => () => (k5 || b8((k5 = { exports: {} }).exports, k5), k5.exports);
var fe = (b8, k5) => {
  for (var r2 in k5)
    F(b8, r2, { get: k5[r2], enumerable: true });
};
var U = (b8, k5, r2, L8) => {
  if (k5 && typeof k5 == "object" || typeof k5 == "function")
    for (let z9 of ce(k5))
      !ie.call(b8, z9) && z9 !== r2 && F(b8, z9, { get: () => k5[z9], enumerable: !(L8 = ne(k5, z9)) || L8.enumerable });
  return b8;
};
var B = (b8, k5, r2) => (U(b8, k5, "default"), r2 && U(r2, k5, "default"));
var Q = (b8, k5, r2) => (r2 = b8 != null ? ae(se(b8)) : {}, U(k5 || !b8 || !b8.__esModule ? F(r2, "default", { value: b8, enumerable: true }) : r2, b8));
var q = te((X7, $4) => {
  (function() {
    function b8(e) {
      "use strict";
      var u5 = { omitExtraWLInCodeBlocks: { defaultValue: false, describe: "Omit the default extra whiteline added to code blocks", type: "boolean" }, noHeaderId: { defaultValue: false, describe: "Turn on/off generated header id", type: "boolean" }, prefixHeaderId: { defaultValue: false, describe: "Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix", type: "string" }, rawPrefixHeaderId: { defaultValue: false, describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)', type: "boolean" }, ghCompatibleHeaderId: { defaultValue: false, describe: "Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)", type: "boolean" }, rawHeaderId: { defaultValue: false, describe: `Remove only spaces, ' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids`, type: "boolean" }, headerLevelStart: { defaultValue: false, describe: "The header blocks level start", type: "integer" }, parseImgDimensions: { defaultValue: false, describe: "Turn on/off image dimension parsing", type: "boolean" }, simplifiedAutoLink: { defaultValue: false, describe: "Turn on/off GFM autolink style", type: "boolean" }, excludeTrailingPunctuationFromURLs: { defaultValue: false, describe: "Excludes trailing punctuation from links generated with autoLinking", type: "boolean" }, literalMidWordUnderscores: { defaultValue: false, describe: "Parse midword underscores as literal underscores", type: "boolean" }, literalMidWordAsterisks: { defaultValue: false, describe: "Parse midword asterisks as literal asterisks", type: "boolean" }, strikethrough: { defaultValue: false, describe: "Turn on/off strikethrough support", type: "boolean" }, tables: { defaultValue: false, describe: "Turn on/off tables support", type: "boolean" }, tablesHeaderId: { defaultValue: false, describe: "Add an id to table headers", type: "boolean" }, ghCodeBlocks: { defaultValue: true, describe: "Turn on/off GFM fenced code blocks support", type: "boolean" }, tasklists: { defaultValue: false, describe: "Turn on/off GFM tasklist support", type: "boolean" }, smoothLivePreview: { defaultValue: false, describe: "Prevents weird effects in live previews due to incomplete input", type: "boolean" }, smartIndentationFix: { defaultValue: false, describe: "Tries to smartly fix indentation in es6 strings", type: "boolean" }, disableForced4SpacesIndentedSublists: { defaultValue: false, describe: "Disables the requirement of indenting nested sublists by 4 spaces", type: "boolean" }, simpleLineBreaks: { defaultValue: false, describe: "Parses simple line breaks as <br> (GFM Style)", type: "boolean" }, requireSpaceBeforeHeadingText: { defaultValue: false, describe: "Makes adding a space between `#` and the header text mandatory (GFM Style)", type: "boolean" }, ghMentions: { defaultValue: false, describe: "Enables github @mentions", type: "boolean" }, ghMentionsLink: { defaultValue: "https://github.com/{u}", describe: "Changes the link generated by @mentions. Only applies if ghMentions option is enabled.", type: "string" }, encodeEmails: { defaultValue: true, describe: "Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities", type: "boolean" }, openLinksInNewWindow: { defaultValue: false, describe: "Open all links in new windows", type: "boolean" }, backslashEscapesHTMLTags: { defaultValue: false, describe: "Support for HTML Tag escaping. ex: <div>foo</div>", type: "boolean" }, emoji: { defaultValue: false, describe: "Enable emoji support. Ex: `this is a :smile: emoji`", type: "boolean" }, underline: { defaultValue: false, describe: "Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`", type: "boolean" }, ellipsis: { defaultValue: true, describe: "Replaces three dots with the ellipsis unicode character", type: "boolean" }, completeHTMLDocument: { defaultValue: false, describe: "Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags", type: "boolean" }, metadata: { defaultValue: false, describe: "Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).", type: "boolean" }, splitAdjacentBlockquotes: { defaultValue: false, describe: "Split adjacent blockquote blocks", type: "boolean" } };
      if (e === false)
        return JSON.parse(JSON.stringify(u5));
      var d5 = {};
      for (var a7 in u5)
        u5.hasOwnProperty(a7) && (d5[a7] = u5[a7].defaultValue);
      return d5;
    }
    function k5() {
      "use strict";
      var e = b8(true), u5 = {};
      for (var d5 in e)
        e.hasOwnProperty(d5) && (u5[d5] = true);
      return u5;
    }
    var r2 = {}, L8 = {}, z9 = {}, E9 = b8(true), R6 = "vanilla", H8 = { github: { omitExtraWLInCodeBlocks: true, simplifiedAutoLink: true, excludeTrailingPunctuationFromURLs: true, literalMidWordUnderscores: true, strikethrough: true, tables: true, tablesHeaderId: true, ghCodeBlocks: true, tasklists: true, disableForced4SpacesIndentedSublists: true, simpleLineBreaks: true, requireSpaceBeforeHeadingText: true, ghCompatibleHeaderId: true, ghMentions: true, backslashEscapesHTMLTags: true, emoji: true, splitAdjacentBlockquotes: true }, original: { noHeaderId: true, ghCodeBlocks: false }, ghost: { omitExtraWLInCodeBlocks: true, parseImgDimensions: true, simplifiedAutoLink: true, excludeTrailingPunctuationFromURLs: true, literalMidWordUnderscores: true, strikethrough: true, tables: true, tablesHeaderId: true, ghCodeBlocks: true, tasklists: true, smoothLivePreview: true, simpleLineBreaks: true, requireSpaceBeforeHeadingText: true, ghMentions: false, encodeEmails: true }, vanilla: b8(true), allOn: k5() };
    r2.helper = {}, r2.extensions = {}, r2.setOption = function(e, u5) {
      "use strict";
      return E9[e] = u5, this;
    }, r2.getOption = function(e) {
      "use strict";
      return E9[e];
    }, r2.getOptions = function() {
      "use strict";
      return E9;
    }, r2.resetOptions = function() {
      "use strict";
      E9 = b8(true);
    }, r2.setFlavor = function(e) {
      "use strict";
      if (!H8.hasOwnProperty(e))
        throw Error(e + " flavor was not found");
      r2.resetOptions();
      var u5 = H8[e];
      R6 = e;
      for (var d5 in u5)
        u5.hasOwnProperty(d5) && (E9[d5] = u5[d5]);
    }, r2.getFlavor = function() {
      "use strict";
      return R6;
    }, r2.getFlavorOptions = function(e) {
      "use strict";
      if (H8.hasOwnProperty(e))
        return H8[e];
    }, r2.getDefaultOptions = function(e) {
      "use strict";
      return b8(e);
    }, r2.subParser = function(e, u5) {
      "use strict";
      if (r2.helper.isString(e))
        if (typeof u5 < "u")
          L8[e] = u5;
        else {
          if (L8.hasOwnProperty(e))
            return L8[e];
          throw Error("SubParser named " + e + " not registered!");
        }
    }, r2.extension = function(e, u5) {
      "use strict";
      if (!r2.helper.isString(e))
        throw Error("Extension 'name' must be a string");
      if (e = r2.helper.stdExtName(e), r2.helper.isUndefined(u5)) {
        if (!z9.hasOwnProperty(e))
          throw Error("Extension named " + e + " is not registered!");
        return z9[e];
      } else {
        typeof u5 == "function" && (u5 = u5()), r2.helper.isArray(u5) || (u5 = [u5]);
        var d5 = T5(u5, e);
        if (d5.valid)
          z9[e] = u5;
        else
          throw Error(d5.error);
      }
    }, r2.getAllExtensions = function() {
      "use strict";
      return z9;
    }, r2.removeExtension = function(e) {
      "use strict";
      delete z9[e];
    }, r2.resetExtensions = function() {
      "use strict";
      z9 = {};
    };
    function T5(e, u5) {
      "use strict";
      var d5 = u5 ? "Error in " + u5 + " extension->" : "Error in unnamed extension", a7 = { valid: true, error: "" };
      r2.helper.isArray(e) || (e = [e]);
      for (var s66 = 0; s66 < e.length; ++s66) {
        var i3 = d5 + " sub-extension " + s66 + ": ", c2 = e[s66];
        if (typeof c2 != "object")
          return a7.valid = false, a7.error = i3 + "must be an object, but " + typeof c2 + " given", a7;
        if (!r2.helper.isString(c2.type))
          return a7.valid = false, a7.error = i3 + 'property "type" must be a string, but ' + typeof c2.type + " given", a7;
        var t3 = c2.type = c2.type.toLowerCase();
        if (t3 === "language" && (t3 = c2.type = "lang"), t3 === "html" && (t3 = c2.type = "output"), t3 !== "lang" && t3 !== "output" && t3 !== "listener")
          return a7.valid = false, a7.error = i3 + "type " + t3 + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"', a7;
        if (t3 === "listener") {
          if (r2.helper.isUndefined(c2.listeners))
            return a7.valid = false, a7.error = i3 + '. Extensions of type "listener" must have a property called "listeners"', a7;
        } else if (r2.helper.isUndefined(c2.filter) && r2.helper.isUndefined(c2.regex))
          return a7.valid = false, a7.error = i3 + t3 + ' extensions must define either a "regex" property or a "filter" method', a7;
        if (c2.listeners) {
          if (typeof c2.listeners != "object")
            return a7.valid = false, a7.error = i3 + '"listeners" property must be an object but ' + typeof c2.listeners + " given", a7;
          for (var p8 in c2.listeners)
            if (c2.listeners.hasOwnProperty(p8) && typeof c2.listeners[p8] != "function")
              return a7.valid = false, a7.error = i3 + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + p8 + " must be a function but " + typeof c2.listeners[p8] + " given", a7;
        }
        if (c2.filter) {
          if (typeof c2.filter != "function")
            return a7.valid = false, a7.error = i3 + '"filter" must be a function, but ' + typeof c2.filter + " given", a7;
        } else if (c2.regex) {
          if (r2.helper.isString(c2.regex) && (c2.regex = new RegExp(c2.regex, "g")), !(c2.regex instanceof RegExp))
            return a7.valid = false, a7.error = i3 + '"regex" property must either be a string or a RegExp object, but ' + typeof c2.regex + " given", a7;
          if (r2.helper.isUndefined(c2.replace))
            return a7.valid = false, a7.error = i3 + '"regex" extensions must implement a replace string or function', a7;
        }
      }
      return a7;
    }
    r2.validateExtension = function(e) {
      "use strict";
      var u5 = T5(e, null);
      return u5.valid ? true : (console.warn(u5.error), false);
    }, r2.hasOwnProperty("helper") || (r2.helper = {}), r2.helper.isString = function(e) {
      "use strict";
      return typeof e == "string" || e instanceof String;
    }, r2.helper.isFunction = function(e) {
      "use strict";
      var u5 = {};
      return e && u5.toString.call(e) === "[object Function]";
    }, r2.helper.isArray = function(e) {
      "use strict";
      return Array.isArray(e);
    }, r2.helper.isUndefined = function(e) {
      "use strict";
      return typeof e > "u";
    }, r2.helper.forEach = function(e, u5) {
      "use strict";
      if (r2.helper.isUndefined(e))
        throw new Error("obj param is required");
      if (r2.helper.isUndefined(u5))
        throw new Error("callback param is required");
      if (!r2.helper.isFunction(u5))
        throw new Error("callback param must be a function/closure");
      if (typeof e.forEach == "function")
        e.forEach(u5);
      else if (r2.helper.isArray(e))
        for (var d5 = 0; d5 < e.length; d5++)
          u5(e[d5], d5, e);
      else if (typeof e == "object")
        for (var a7 in e)
          e.hasOwnProperty(a7) && u5(e[a7], a7, e);
      else
        throw new Error("obj does not seem to be an array or an iterable object");
    }, r2.helper.stdExtName = function(e) {
      "use strict";
      return e.replace(/[_?*+\/\\.^-]/g, "").replace(/\s/g, "").toLowerCase();
    };
    function G8(e, u5) {
      "use strict";
      var d5 = u5.charCodeAt(0);
      return "¨E" + d5 + "E";
    }
    r2.helper.escapeCharactersCallback = G8, r2.helper.escapeCharacters = function(e, u5, d5) {
      "use strict";
      var a7 = "([" + u5.replace(/([\[\]\\])/g, "\\$1") + "])";
      d5 && (a7 = "\\\\" + a7);
      var s66 = new RegExp(a7, "g");
      return e = e.replace(s66, G8), e;
    }, r2.helper.unescapeHTMLEntities = function(e) {
      "use strict";
      return e.replace(/&quot;/g, '"').replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
    };
    var O5 = function(e, u5, d5, a7) {
      "use strict";
      var s66 = a7 || "", i3 = s66.indexOf("g") > -1, c2 = new RegExp(u5 + "|" + d5, "g" + s66.replace(/g/g, "")), t3 = new RegExp(u5, s66.replace(/g/g, "")), p8 = [], l7, o2, h6, n3, f4;
      do
        for (l7 = 0; h6 = c2.exec(e); )
          if (t3.test(h6[0]))
            l7++ || (o2 = c2.lastIndex, n3 = o2 - h6[0].length);
          else if (l7 && !--l7) {
            f4 = h6.index + h6[0].length;
            var _7 = { left: { start: n3, end: o2 }, match: { start: o2, end: h6.index }, right: { start: h6.index, end: f4 }, wholeMatch: { start: n3, end: f4 } };
            if (p8.push(_7), !i3)
              return p8;
          }
      while (l7 && (c2.lastIndex = o2));
      return p8;
    };
    r2.helper.matchRecursiveRegExp = function(e, u5, d5, a7) {
      "use strict";
      for (var s66 = O5(e, u5, d5, a7), i3 = [], c2 = 0; c2 < s66.length; ++c2)
        i3.push([e.slice(s66[c2].wholeMatch.start, s66[c2].wholeMatch.end), e.slice(s66[c2].match.start, s66[c2].match.end), e.slice(s66[c2].left.start, s66[c2].left.end), e.slice(s66[c2].right.start, s66[c2].right.end)]);
      return i3;
    }, r2.helper.replaceRecursiveRegExp = function(e, u5, d5, a7, s66) {
      "use strict";
      if (!r2.helper.isFunction(u5)) {
        var i3 = u5;
        u5 = function() {
          return i3;
        };
      }
      var c2 = O5(e, d5, a7, s66), t3 = e, p8 = c2.length;
      if (p8 > 0) {
        var l7 = [];
        c2[0].wholeMatch.start !== 0 && l7.push(e.slice(0, c2[0].wholeMatch.start));
        for (var o2 = 0; o2 < p8; ++o2)
          l7.push(u5(e.slice(c2[o2].wholeMatch.start, c2[o2].wholeMatch.end), e.slice(c2[o2].match.start, c2[o2].match.end), e.slice(c2[o2].left.start, c2[o2].left.end), e.slice(c2[o2].right.start, c2[o2].right.end))), o2 < p8 - 1 && l7.push(e.slice(c2[o2].wholeMatch.end, c2[o2 + 1].wholeMatch.start));
        c2[p8 - 1].wholeMatch.end < e.length && l7.push(e.slice(c2[p8 - 1].wholeMatch.end)), t3 = l7.join("");
      }
      return t3;
    }, r2.helper.regexIndexOf = function(e, u5, d5) {
      "use strict";
      if (!r2.helper.isString(e))
        throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
      if (!(u5 instanceof RegExp))
        throw "InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";
      var a7 = e.substring(d5 || 0).search(u5);
      return a7 >= 0 ? a7 + (d5 || 0) : a7;
    }, r2.helper.splitAtIndex = function(e, u5) {
      "use strict";
      if (!r2.helper.isString(e))
        throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
      return [e.substring(0, u5), e.substring(u5)];
    }, r2.helper.encodeEmailAddress = function(e) {
      "use strict";
      var u5 = [function(d5) {
        return "&#" + d5.charCodeAt(0) + ";";
      }, function(d5) {
        return "&#x" + d5.charCodeAt(0).toString(16) + ";";
      }, function(d5) {
        return d5;
      }];
      return e = e.replace(/./g, function(d5) {
        if (d5 === "@")
          d5 = u5[Math.floor(Math.random() * 2)](d5);
        else {
          var a7 = Math.random();
          d5 = a7 > 0.9 ? u5[2](d5) : a7 > 0.45 ? u5[1](d5) : u5[0](d5);
        }
        return d5;
      }), e;
    }, r2.helper.padEnd = function(u5, d5, a7) {
      "use strict";
      return d5 = d5 >> 0, a7 = String(a7 || " "), u5.length > d5 ? String(u5) : (d5 = d5 - u5.length, d5 > a7.length && (a7 += a7.repeat(d5 / a7.length)), String(u5) + a7.slice(0, d5));
    }, typeof console > "u" && (console = { warn: function(e) {
      "use strict";
      alert(e);
    }, log: function(e) {
      "use strict";
      alert(e);
    }, error: function(e) {
      "use strict";
      throw e;
    } }), r2.helper.regexes = { asteriskDashAndColon: /([*_:~])/g }, r2.helper.emojis = { "+1": "👍", "-1": "👎", 100: "💯", 1234: "🔢", "1st_place_medal": "🥇", "2nd_place_medal": "🥈", "3rd_place_medal": "🥉", "8ball": "🎱", a: "🅰️", ab: "🆎", abc: "🔤", abcd: "🔡", accept: "🉑", aerial_tramway: "🚡", airplane: "✈️", alarm_clock: "⏰", alembic: "⚗️", alien: "👽", ambulance: "🚑", amphora: "🏺", anchor: "⚓️", angel: "👼", anger: "💢", angry: "😠", anguished: "😧", ant: "🐜", apple: "🍎", aquarius: "♒️", aries: "♈️", arrow_backward: "◀️", arrow_double_down: "⏬", arrow_double_up: "⏫", arrow_down: "⬇️", arrow_down_small: "🔽", arrow_forward: "▶️", arrow_heading_down: "⤵️", arrow_heading_up: "⤴️", arrow_left: "⬅️", arrow_lower_left: "↙️", arrow_lower_right: "↘️", arrow_right: "➡️", arrow_right_hook: "↪️", arrow_up: "⬆️", arrow_up_down: "↕️", arrow_up_small: "🔼", arrow_upper_left: "↖️", arrow_upper_right: "↗️", arrows_clockwise: "🔃", arrows_counterclockwise: "🔄", art: "🎨", articulated_lorry: "🚛", artificial_satellite: "🛰", astonished: "😲", athletic_shoe: "👟", atm: "🏧", atom_symbol: "⚛️", avocado: "🥑", b: "🅱️", baby: "👶", baby_bottle: "🍼", baby_chick: "🐤", baby_symbol: "🚼", back: "🔙", bacon: "🥓", badminton: "🏸", baggage_claim: "🛄", baguette_bread: "🥖", balance_scale: "⚖️", balloon: "🎈", ballot_box: "🗳", ballot_box_with_check: "☑️", bamboo: "🎍", banana: "🍌", bangbang: "‼️", bank: "🏦", bar_chart: "📊", barber: "💈", baseball: "⚾️", basketball: "🏀", basketball_man: "⛹️", basketball_woman: "⛹️&zwj;♀️", bat: "🦇", bath: "🛀", bathtub: "🛁", battery: "🔋", beach_umbrella: "🏖", bear: "🐻", bed: "🛏", bee: "🐝", beer: "🍺", beers: "🍻", beetle: "🐞", beginner: "🔰", bell: "🔔", bellhop_bell: "🛎", bento: "🍱", biking_man: "🚴", bike: "🚲", biking_woman: "🚴&zwj;♀️", bikini: "👙", biohazard: "☣️", bird: "🐦", birthday: "🎂", black_circle: "⚫️", black_flag: "🏴", black_heart: "🖤", black_joker: "🃏", black_large_square: "⬛️", black_medium_small_square: "◾️", black_medium_square: "◼️", black_nib: "✒️", black_small_square: "▪️", black_square_button: "🔲", blonde_man: "👱", blonde_woman: "👱&zwj;♀️", blossom: "🌼", blowfish: "🐡", blue_book: "📘", blue_car: "🚙", blue_heart: "💙", blush: "😊", boar: "🐗", boat: "⛵️", bomb: "💣", book: "📖", bookmark: "🔖", bookmark_tabs: "📑", books: "📚", boom: "💥", boot: "👢", bouquet: "💐", bowing_man: "🙇", bow_and_arrow: "🏹", bowing_woman: "🙇&zwj;♀️", bowling: "🎳", boxing_glove: "🥊", boy: "👦", bread: "🍞", bride_with_veil: "👰", bridge_at_night: "🌉", briefcase: "💼", broken_heart: "💔", bug: "🐛", building_construction: "🏗", bulb: "💡", bullettrain_front: "🚅", bullettrain_side: "🚄", burrito: "🌯", bus: "🚌", business_suit_levitating: "🕴", busstop: "🚏", bust_in_silhouette: "👤", busts_in_silhouette: "👥", butterfly: "🦋", cactus: "🌵", cake: "🍰", calendar: "📆", call_me_hand: "🤙", calling: "📲", camel: "🐫", camera: "📷", camera_flash: "📸", camping: "🏕", cancer: "♋️", candle: "🕯", candy: "🍬", canoe: "🛶", capital_abcd: "🔠", capricorn: "♑️", car: "🚗", card_file_box: "🗃", card_index: "📇", card_index_dividers: "🗂", carousel_horse: "🎠", carrot: "🥕", cat: "🐱", cat2: "🐈", cd: "💿", chains: "⛓", champagne: "🍾", chart: "💹", chart_with_downwards_trend: "📉", chart_with_upwards_trend: "📈", checkered_flag: "🏁", cheese: "🧀", cherries: "🍒", cherry_blossom: "🌸", chestnut: "🌰", chicken: "🐔", children_crossing: "🚸", chipmunk: "🐿", chocolate_bar: "🍫", christmas_tree: "🎄", church: "⛪️", cinema: "🎦", circus_tent: "🎪", city_sunrise: "🌇", city_sunset: "🌆", cityscape: "🏙", cl: "🆑", clamp: "🗜", clap: "👏", clapper: "🎬", classical_building: "🏛", clinking_glasses: "🥂", clipboard: "📋", clock1: "🕐", clock10: "🕙", clock1030: "🕥", clock11: "🕚", clock1130: "🕦", clock12: "🕛", clock1230: "🕧", clock130: "🕜", clock2: "🕑", clock230: "🕝", clock3: "🕒", clock330: "🕞", clock4: "🕓", clock430: "🕟", clock5: "🕔", clock530: "🕠", clock6: "🕕", clock630: "🕡", clock7: "🕖", clock730: "🕢", clock8: "🕗", clock830: "🕣", clock9: "🕘", clock930: "🕤", closed_book: "📕", closed_lock_with_key: "🔐", closed_umbrella: "🌂", cloud: "☁️", cloud_with_lightning: "🌩", cloud_with_lightning_and_rain: "⛈", cloud_with_rain: "🌧", cloud_with_snow: "🌨", clown_face: "🤡", clubs: "♣️", cocktail: "🍸", coffee: "☕️", coffin: "⚰️", cold_sweat: "😰", comet: "☄️", computer: "💻", computer_mouse: "🖱", confetti_ball: "🎊", confounded: "😖", confused: "😕", congratulations: "㊗️", construction: "🚧", construction_worker_man: "👷", construction_worker_woman: "👷&zwj;♀️", control_knobs: "🎛", convenience_store: "🏪", cookie: "🍪", cool: "🆒", policeman: "👮", copyright: "©️", corn: "🌽", couch_and_lamp: "🛋", couple: "👫", couple_with_heart_woman_man: "💑", couple_with_heart_man_man: "👨&zwj;❤️&zwj;👨", couple_with_heart_woman_woman: "👩&zwj;❤️&zwj;👩", couplekiss_man_man: "👨&zwj;❤️&zwj;💋&zwj;👨", couplekiss_man_woman: "💏", couplekiss_woman_woman: "👩&zwj;❤️&zwj;💋&zwj;👩", cow: "🐮", cow2: "🐄", cowboy_hat_face: "🤠", crab: "🦀", crayon: "🖍", credit_card: "💳", crescent_moon: "🌙", cricket: "🏏", crocodile: "🐊", croissant: "🥐", crossed_fingers: "🤞", crossed_flags: "🎌", crossed_swords: "⚔️", crown: "👑", cry: "😢", crying_cat_face: "😿", crystal_ball: "🔮", cucumber: "🥒", cupid: "💘", curly_loop: "➰", currency_exchange: "💱", curry: "🍛", custard: "🍮", customs: "🛃", cyclone: "🌀", dagger: "🗡", dancer: "💃", dancing_women: "👯", dancing_men: "👯&zwj;♂️", dango: "🍡", dark_sunglasses: "🕶", dart: "🎯", dash: "💨", date: "📅", deciduous_tree: "🌳", deer: "🦌", department_store: "🏬", derelict_house: "🏚", desert: "🏜", desert_island: "🏝", desktop_computer: "🖥", male_detective: "🕵️", diamond_shape_with_a_dot_inside: "💠", diamonds: "♦️", disappointed: "😞", disappointed_relieved: "😥", dizzy: "💫", dizzy_face: "😵", do_not_litter: "🚯", dog: "🐶", dog2: "🐕", dollar: "💵", dolls: "🎎", dolphin: "🐬", door: "🚪", doughnut: "🍩", dove: "🕊", dragon: "🐉", dragon_face: "🐲", dress: "👗", dromedary_camel: "🐪", drooling_face: "🤤", droplet: "💧", drum: "🥁", duck: "🦆", dvd: "📀", "e-mail": "📧", eagle: "🦅", ear: "👂", ear_of_rice: "🌾", earth_africa: "🌍", earth_americas: "🌎", earth_asia: "🌏", egg: "🥚", eggplant: "🍆", eight_pointed_black_star: "✴️", eight_spoked_asterisk: "✳️", electric_plug: "🔌", elephant: "🐘", email: "✉️", end: "🔚", envelope_with_arrow: "📩", euro: "💶", european_castle: "🏰", european_post_office: "🏤", evergreen_tree: "🌲", exclamation: "❗️", expressionless: "😑", eye: "👁", eye_speech_bubble: "👁&zwj;🗨", eyeglasses: "👓", eyes: "👀", face_with_head_bandage: "🤕", face_with_thermometer: "🤒", fist_oncoming: "👊", factory: "🏭", fallen_leaf: "🍂", family_man_woman_boy: "👪", family_man_boy: "👨&zwj;👦", family_man_boy_boy: "👨&zwj;👦&zwj;👦", family_man_girl: "👨&zwj;👧", family_man_girl_boy: "👨&zwj;👧&zwj;👦", family_man_girl_girl: "👨&zwj;👧&zwj;👧", family_man_man_boy: "👨&zwj;👨&zwj;👦", family_man_man_boy_boy: "👨&zwj;👨&zwj;👦&zwj;👦", family_man_man_girl: "👨&zwj;👨&zwj;👧", family_man_man_girl_boy: "👨&zwj;👨&zwj;👧&zwj;👦", family_man_man_girl_girl: "👨&zwj;👨&zwj;👧&zwj;👧", family_man_woman_boy_boy: "👨&zwj;👩&zwj;👦&zwj;👦", family_man_woman_girl: "👨&zwj;👩&zwj;👧", family_man_woman_girl_boy: "👨&zwj;👩&zwj;👧&zwj;👦", family_man_woman_girl_girl: "👨&zwj;👩&zwj;👧&zwj;👧", family_woman_boy: "👩&zwj;👦", family_woman_boy_boy: "👩&zwj;👦&zwj;👦", family_woman_girl: "👩&zwj;👧", family_woman_girl_boy: "👩&zwj;👧&zwj;👦", family_woman_girl_girl: "👩&zwj;👧&zwj;👧", family_woman_woman_boy: "👩&zwj;👩&zwj;👦", family_woman_woman_boy_boy: "👩&zwj;👩&zwj;👦&zwj;👦", family_woman_woman_girl: "👩&zwj;👩&zwj;👧", family_woman_woman_girl_boy: "👩&zwj;👩&zwj;👧&zwj;👦", family_woman_woman_girl_girl: "👩&zwj;👩&zwj;👧&zwj;👧", fast_forward: "⏩", fax: "📠", fearful: "😨", feet: "🐾", female_detective: "🕵️&zwj;♀️", ferris_wheel: "🎡", ferry: "⛴", field_hockey: "🏑", file_cabinet: "🗄", file_folder: "📁", film_projector: "📽", film_strip: "🎞", fire: "🔥", fire_engine: "🚒", fireworks: "🎆", first_quarter_moon: "🌓", first_quarter_moon_with_face: "🌛", fish: "🐟", fish_cake: "🍥", fishing_pole_and_fish: "🎣", fist_raised: "✊", fist_left: "🤛", fist_right: "🤜", flags: "🎏", flashlight: "🔦", fleur_de_lis: "⚜️", flight_arrival: "🛬", flight_departure: "🛫", floppy_disk: "💾", flower_playing_cards: "🎴", flushed: "😳", fog: "🌫", foggy: "🌁", football: "🏈", footprints: "👣", fork_and_knife: "🍴", fountain: "⛲️", fountain_pen: "🖋", four_leaf_clover: "🍀", fox_face: "🦊", framed_picture: "🖼", free: "🆓", fried_egg: "🍳", fried_shrimp: "🍤", fries: "🍟", frog: "🐸", frowning: "😦", frowning_face: "☹️", frowning_man: "🙍&zwj;♂️", frowning_woman: "🙍", middle_finger: "🖕", fuelpump: "⛽️", full_moon: "🌕", full_moon_with_face: "🌝", funeral_urn: "⚱️", game_die: "🎲", gear: "⚙️", gem: "💎", gemini: "♊️", ghost: "👻", gift: "🎁", gift_heart: "💝", girl: "👧", globe_with_meridians: "🌐", goal_net: "🥅", goat: "🐐", golf: "⛳️", golfing_man: "🏌️", golfing_woman: "🏌️&zwj;♀️", gorilla: "🦍", grapes: "🍇", green_apple: "🍏", green_book: "📗", green_heart: "💚", green_salad: "🥗", grey_exclamation: "❕", grey_question: "❔", grimacing: "😬", grin: "😁", grinning: "😀", guardsman: "💂", guardswoman: "💂&zwj;♀️", guitar: "🎸", gun: "🔫", haircut_woman: "💇", haircut_man: "💇&zwj;♂️", hamburger: "🍔", hammer: "🔨", hammer_and_pick: "⚒", hammer_and_wrench: "🛠", hamster: "🐹", hand: "✋", handbag: "👜", handshake: "🤝", hankey: "💩", hatched_chick: "🐥", hatching_chick: "🐣", headphones: "🎧", hear_no_evil: "🙉", heart: "❤️", heart_decoration: "💟", heart_eyes: "😍", heart_eyes_cat: "😻", heartbeat: "💓", heartpulse: "💗", hearts: "♥️", heavy_check_mark: "✔️", heavy_division_sign: "➗", heavy_dollar_sign: "💲", heavy_heart_exclamation: "❣️", heavy_minus_sign: "➖", heavy_multiplication_x: "✖️", heavy_plus_sign: "➕", helicopter: "🚁", herb: "🌿", hibiscus: "🌺", high_brightness: "🔆", high_heel: "👠", hocho: "🔪", hole: "🕳", honey_pot: "🍯", horse: "🐴", horse_racing: "🏇", hospital: "🏥", hot_pepper: "🌶", hotdog: "🌭", hotel: "🏨", hotsprings: "♨️", hourglass: "⌛️", hourglass_flowing_sand: "⏳", house: "🏠", house_with_garden: "🏡", houses: "🏘", hugs: "🤗", hushed: "😯", ice_cream: "🍨", ice_hockey: "🏒", ice_skate: "⛸", icecream: "🍦", id: "🆔", ideograph_advantage: "🉐", imp: "👿", inbox_tray: "📥", incoming_envelope: "📨", tipping_hand_woman: "💁", information_source: "ℹ️", innocent: "😇", interrobang: "⁉️", iphone: "📱", izakaya_lantern: "🏮", jack_o_lantern: "🎃", japan: "🗾", japanese_castle: "🏯", japanese_goblin: "👺", japanese_ogre: "👹", jeans: "👖", joy: "😂", joy_cat: "😹", joystick: "🕹", kaaba: "🕋", key: "🔑", keyboard: "⌨️", keycap_ten: "🔟", kick_scooter: "🛴", kimono: "👘", kiss: "💋", kissing: "😗", kissing_cat: "😽", kissing_closed_eyes: "😚", kissing_heart: "😘", kissing_smiling_eyes: "😙", kiwi_fruit: "🥝", koala: "🐨", koko: "🈁", label: "🏷", large_blue_circle: "🔵", large_blue_diamond: "🔷", large_orange_diamond: "🔶", last_quarter_moon: "🌗", last_quarter_moon_with_face: "🌜", latin_cross: "✝️", laughing: "😆", leaves: "🍃", ledger: "📒", left_luggage: "🛅", left_right_arrow: "↔️", leftwards_arrow_with_hook: "↩️", lemon: "🍋", leo: "♌️", leopard: "🐆", level_slider: "🎚", libra: "♎️", light_rail: "🚈", link: "🔗", lion: "🦁", lips: "👄", lipstick: "💄", lizard: "🦎", lock: "🔒", lock_with_ink_pen: "🔏", lollipop: "🍭", loop: "➿", loud_sound: "🔊", loudspeaker: "📢", love_hotel: "🏩", love_letter: "💌", low_brightness: "🔅", lying_face: "🤥", m: "Ⓜ️", mag: "🔍", mag_right: "🔎", mahjong: "🀄️", mailbox: "📫", mailbox_closed: "📪", mailbox_with_mail: "📬", mailbox_with_no_mail: "📭", man: "👨", man_artist: "👨&zwj;🎨", man_astronaut: "👨&zwj;🚀", man_cartwheeling: "🤸&zwj;♂️", man_cook: "👨&zwj;🍳", man_dancing: "🕺", man_facepalming: "🤦&zwj;♂️", man_factory_worker: "👨&zwj;🏭", man_farmer: "👨&zwj;🌾", man_firefighter: "👨&zwj;🚒", man_health_worker: "👨&zwj;⚕️", man_in_tuxedo: "🤵", man_judge: "👨&zwj;⚖️", man_juggling: "🤹&zwj;♂️", man_mechanic: "👨&zwj;🔧", man_office_worker: "👨&zwj;💼", man_pilot: "👨&zwj;✈️", man_playing_handball: "🤾&zwj;♂️", man_playing_water_polo: "🤽&zwj;♂️", man_scientist: "👨&zwj;🔬", man_shrugging: "🤷&zwj;♂️", man_singer: "👨&zwj;🎤", man_student: "👨&zwj;🎓", man_teacher: "👨&zwj;🏫", man_technologist: "👨&zwj;💻", man_with_gua_pi_mao: "👲", man_with_turban: "👳", tangerine: "🍊", mans_shoe: "👞", mantelpiece_clock: "🕰", maple_leaf: "🍁", martial_arts_uniform: "🥋", mask: "😷", massage_woman: "💆", massage_man: "💆&zwj;♂️", meat_on_bone: "🍖", medal_military: "🎖", medal_sports: "🏅", mega: "📣", melon: "🍈", memo: "📝", men_wrestling: "🤼&zwj;♂️", menorah: "🕎", mens: "🚹", metal: "🤘", metro: "🚇", microphone: "🎤", microscope: "🔬", milk_glass: "🥛", milky_way: "🌌", minibus: "🚐", minidisc: "💽", mobile_phone_off: "📴", money_mouth_face: "🤑", money_with_wings: "💸", moneybag: "💰", monkey: "🐒", monkey_face: "🐵", monorail: "🚝", moon: "🌔", mortar_board: "🎓", mosque: "🕌", motor_boat: "🛥", motor_scooter: "🛵", motorcycle: "🏍", motorway: "🛣", mount_fuji: "🗻", mountain: "⛰", mountain_biking_man: "🚵", mountain_biking_woman: "🚵&zwj;♀️", mountain_cableway: "🚠", mountain_railway: "🚞", mountain_snow: "🏔", mouse: "🐭", mouse2: "🐁", movie_camera: "🎥", moyai: "🗿", mrs_claus: "🤶", muscle: "💪", mushroom: "🍄", musical_keyboard: "🎹", musical_note: "🎵", musical_score: "🎼", mute: "🔇", nail_care: "💅", name_badge: "📛", national_park: "🏞", nauseated_face: "🤢", necktie: "👔", negative_squared_cross_mark: "❎", nerd_face: "🤓", neutral_face: "😐", new: "🆕", new_moon: "🌑", new_moon_with_face: "🌚", newspaper: "📰", newspaper_roll: "🗞", next_track_button: "⏭", ng: "🆖", no_good_man: "🙅&zwj;♂️", no_good_woman: "🙅", night_with_stars: "🌃", no_bell: "🔕", no_bicycles: "🚳", no_entry: "⛔️", no_entry_sign: "🚫", no_mobile_phones: "📵", no_mouth: "😶", no_pedestrians: "🚷", no_smoking: "🚭", "non-potable_water": "🚱", nose: "👃", notebook: "📓", notebook_with_decorative_cover: "📔", notes: "🎶", nut_and_bolt: "🔩", o: "⭕️", o2: "🅾️", ocean: "🌊", octopus: "🐙", oden: "🍢", office: "🏢", oil_drum: "🛢", ok: "🆗", ok_hand: "👌", ok_man: "🙆&zwj;♂️", ok_woman: "🙆", old_key: "🗝", older_man: "👴", older_woman: "👵", om: "🕉", on: "🔛", oncoming_automobile: "🚘", oncoming_bus: "🚍", oncoming_police_car: "🚔", oncoming_taxi: "🚖", open_file_folder: "📂", open_hands: "👐", open_mouth: "😮", open_umbrella: "☂️", ophiuchus: "⛎", orange_book: "📙", orthodox_cross: "☦️", outbox_tray: "📤", owl: "🦉", ox: "🐂", package: "📦", page_facing_up: "📄", page_with_curl: "📃", pager: "📟", paintbrush: "🖌", palm_tree: "🌴", pancakes: "🥞", panda_face: "🐼", paperclip: "📎", paperclips: "🖇", parasol_on_ground: "⛱", parking: "🅿️", part_alternation_mark: "〽️", partly_sunny: "⛅️", passenger_ship: "🛳", passport_control: "🛂", pause_button: "⏸", peace_symbol: "☮️", peach: "🍑", peanuts: "🥜", pear: "🍐", pen: "🖊", pencil2: "✏️", penguin: "🐧", pensive: "😔", performing_arts: "🎭", persevere: "😣", person_fencing: "🤺", pouting_woman: "🙎", phone: "☎️", pick: "⛏", pig: "🐷", pig2: "🐖", pig_nose: "🐽", pill: "💊", pineapple: "🍍", ping_pong: "🏓", pisces: "♓️", pizza: "🍕", place_of_worship: "🛐", plate_with_cutlery: "🍽", play_or_pause_button: "⏯", point_down: "👇", point_left: "👈", point_right: "👉", point_up: "☝️", point_up_2: "👆", police_car: "🚓", policewoman: "👮&zwj;♀️", poodle: "🐩", popcorn: "🍿", post_office: "🏣", postal_horn: "📯", postbox: "📮", potable_water: "🚰", potato: "🥔", pouch: "👝", poultry_leg: "🍗", pound: "💷", rage: "😡", pouting_cat: "😾", pouting_man: "🙎&zwj;♂️", pray: "🙏", prayer_beads: "📿", pregnant_woman: "🤰", previous_track_button: "⏮", prince: "🤴", princess: "👸", printer: "🖨", purple_heart: "💜", purse: "👛", pushpin: "📌", put_litter_in_its_place: "🚮", question: "❓", rabbit: "🐰", rabbit2: "🐇", racehorse: "🐎", racing_car: "🏎", radio: "📻", radio_button: "🔘", radioactive: "☢️", railway_car: "🚃", railway_track: "🛤", rainbow: "🌈", rainbow_flag: "🏳️&zwj;🌈", raised_back_of_hand: "🤚", raised_hand_with_fingers_splayed: "🖐", raised_hands: "🙌", raising_hand_woman: "🙋", raising_hand_man: "🙋&zwj;♂️", ram: "🐏", ramen: "🍜", rat: "🐀", record_button: "⏺", recycle: "♻️", red_circle: "🔴", registered: "®️", relaxed: "☺️", relieved: "😌", reminder_ribbon: "🎗", repeat: "🔁", repeat_one: "🔂", rescue_worker_helmet: "⛑", restroom: "🚻", revolving_hearts: "💞", rewind: "⏪", rhinoceros: "🦏", ribbon: "🎀", rice: "🍚", rice_ball: "🍙", rice_cracker: "🍘", rice_scene: "🎑", right_anger_bubble: "🗯", ring: "💍", robot: "🤖", rocket: "🚀", rofl: "🤣", roll_eyes: "🙄", roller_coaster: "🎢", rooster: "🐓", rose: "🌹", rosette: "🏵", rotating_light: "🚨", round_pushpin: "📍", rowing_man: "🚣", rowing_woman: "🚣&zwj;♀️", rugby_football: "🏉", running_man: "🏃", running_shirt_with_sash: "🎽", running_woman: "🏃&zwj;♀️", sa: "🈂️", sagittarius: "♐️", sake: "🍶", sandal: "👡", santa: "🎅", satellite: "📡", saxophone: "🎷", school: "🏫", school_satchel: "🎒", scissors: "✂️", scorpion: "🦂", scorpius: "♏️", scream: "😱", scream_cat: "🙀", scroll: "📜", seat: "💺", secret: "㊙️", see_no_evil: "🙈", seedling: "🌱", selfie: "🤳", shallow_pan_of_food: "🥘", shamrock: "☘️", shark: "🦈", shaved_ice: "🍧", sheep: "🐑", shell: "🐚", shield: "🛡", shinto_shrine: "⛩", ship: "🚢", shirt: "👕", shopping: "🛍", shopping_cart: "🛒", shower: "🚿", shrimp: "🦐", signal_strength: "📶", six_pointed_star: "🔯", ski: "🎿", skier: "⛷", skull: "💀", skull_and_crossbones: "☠️", sleeping: "😴", sleeping_bed: "🛌", sleepy: "😪", slightly_frowning_face: "🙁", slightly_smiling_face: "🙂", slot_machine: "🎰", small_airplane: "🛩", small_blue_diamond: "🔹", small_orange_diamond: "🔸", small_red_triangle: "🔺", small_red_triangle_down: "🔻", smile: "😄", smile_cat: "😸", smiley: "😃", smiley_cat: "😺", smiling_imp: "😈", smirk: "😏", smirk_cat: "😼", smoking: "🚬", snail: "🐌", snake: "🐍", sneezing_face: "🤧", snowboarder: "🏂", snowflake: "❄️", snowman: "⛄️", snowman_with_snow: "☃️", sob: "😭", soccer: "⚽️", soon: "🔜", sos: "🆘", sound: "🔉", space_invader: "👾", spades: "♠️", spaghetti: "🍝", sparkle: "❇️", sparkler: "🎇", sparkles: "✨", sparkling_heart: "💖", speak_no_evil: "🙊", speaker: "🔈", speaking_head: "🗣", speech_balloon: "💬", speedboat: "🚤", spider: "🕷", spider_web: "🕸", spiral_calendar: "🗓", spiral_notepad: "🗒", spoon: "🥄", squid: "🦑", stadium: "🏟", star: "⭐️", star2: "🌟", star_and_crescent: "☪️", star_of_david: "✡️", stars: "🌠", station: "🚉", statue_of_liberty: "🗽", steam_locomotive: "🚂", stew: "🍲", stop_button: "⏹", stop_sign: "🛑", stopwatch: "⏱", straight_ruler: "📏", strawberry: "🍓", stuck_out_tongue: "😛", stuck_out_tongue_closed_eyes: "😝", stuck_out_tongue_winking_eye: "😜", studio_microphone: "🎙", stuffed_flatbread: "🥙", sun_behind_large_cloud: "🌥", sun_behind_rain_cloud: "🌦", sun_behind_small_cloud: "🌤", sun_with_face: "🌞", sunflower: "🌻", sunglasses: "😎", sunny: "☀️", sunrise: "🌅", sunrise_over_mountains: "🌄", surfing_man: "🏄", surfing_woman: "🏄&zwj;♀️", sushi: "🍣", suspension_railway: "🚟", sweat: "😓", sweat_drops: "💦", sweat_smile: "😅", sweet_potato: "🍠", swimming_man: "🏊", swimming_woman: "🏊&zwj;♀️", symbols: "🔣", synagogue: "🕍", syringe: "💉", taco: "🌮", tada: "🎉", tanabata_tree: "🎋", taurus: "♉️", taxi: "🚕", tea: "🍵", telephone_receiver: "📞", telescope: "🔭", tennis: "🎾", tent: "⛺️", thermometer: "🌡", thinking: "🤔", thought_balloon: "💭", ticket: "🎫", tickets: "🎟", tiger: "🐯", tiger2: "🐅", timer_clock: "⏲", tipping_hand_man: "💁&zwj;♂️", tired_face: "😫", tm: "™️", toilet: "🚽", tokyo_tower: "🗼", tomato: "🍅", tongue: "👅", top: "🔝", tophat: "🎩", tornado: "🌪", trackball: "🖲", tractor: "🚜", traffic_light: "🚥", train: "🚋", train2: "🚆", tram: "🚊", triangular_flag_on_post: "🚩", triangular_ruler: "📐", trident: "🔱", triumph: "😤", trolleybus: "🚎", trophy: "🏆", tropical_drink: "🍹", tropical_fish: "🐠", truck: "🚚", trumpet: "🎺", tulip: "🌷", tumbler_glass: "🥃", turkey: "🦃", turtle: "🐢", tv: "📺", twisted_rightwards_arrows: "🔀", two_hearts: "💕", two_men_holding_hands: "👬", two_women_holding_hands: "👭", u5272: "🈹", u5408: "🈴", u55b6: "🈺", u6307: "🈯️", u6708: "🈷️", u6709: "🈶", u6e80: "🈵", u7121: "🈚️", u7533: "🈸", u7981: "🈲", u7a7a: "🈳", umbrella: "☔️", unamused: "😒", underage: "🔞", unicorn: "🦄", unlock: "🔓", up: "🆙", upside_down_face: "🙃", v: "✌️", vertical_traffic_light: "🚦", vhs: "📼", vibration_mode: "📳", video_camera: "📹", video_game: "🎮", violin: "🎻", virgo: "♍️", volcano: "🌋", volleyball: "🏐", vs: "🆚", vulcan_salute: "🖖", walking_man: "🚶", walking_woman: "🚶&zwj;♀️", waning_crescent_moon: "🌘", waning_gibbous_moon: "🌖", warning: "⚠️", wastebasket: "🗑", watch: "⌚️", water_buffalo: "🐃", watermelon: "🍉", wave: "👋", wavy_dash: "〰️", waxing_crescent_moon: "🌒", wc: "🚾", weary: "😩", wedding: "💒", weight_lifting_man: "🏋️", weight_lifting_woman: "🏋️&zwj;♀️", whale: "🐳", whale2: "🐋", wheel_of_dharma: "☸️", wheelchair: "♿️", white_check_mark: "✅", white_circle: "⚪️", white_flag: "🏳️", white_flower: "💮", white_large_square: "⬜️", white_medium_small_square: "◽️", white_medium_square: "◻️", white_small_square: "▫️", white_square_button: "🔳", wilted_flower: "🥀", wind_chime: "🎐", wind_face: "🌬", wine_glass: "🍷", wink: "😉", wolf: "🐺", woman: "👩", woman_artist: "👩&zwj;🎨", woman_astronaut: "👩&zwj;🚀", woman_cartwheeling: "🤸&zwj;♀️", woman_cook: "👩&zwj;🍳", woman_facepalming: "🤦&zwj;♀️", woman_factory_worker: "👩&zwj;🏭", woman_farmer: "👩&zwj;🌾", woman_firefighter: "👩&zwj;🚒", woman_health_worker: "👩&zwj;⚕️", woman_judge: "👩&zwj;⚖️", woman_juggling: "🤹&zwj;♀️", woman_mechanic: "👩&zwj;🔧", woman_office_worker: "👩&zwj;💼", woman_pilot: "👩&zwj;✈️", woman_playing_handball: "🤾&zwj;♀️", woman_playing_water_polo: "🤽&zwj;♀️", woman_scientist: "👩&zwj;🔬", woman_shrugging: "🤷&zwj;♀️", woman_singer: "👩&zwj;🎤", woman_student: "👩&zwj;🎓", woman_teacher: "👩&zwj;🏫", woman_technologist: "👩&zwj;💻", woman_with_turban: "👳&zwj;♀️", womans_clothes: "👚", womans_hat: "👒", women_wrestling: "🤼&zwj;♀️", womens: "🚺", world_map: "🗺", worried: "😟", wrench: "🔧", writing_hand: "✍️", x: "❌", yellow_heart: "💛", yen: "💴", yin_yang: "☯️", yum: "😋", zap: "⚡️", zipper_mouth_face: "🤐", zzz: "💤", octocat: '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">', showdown: `<span style="font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>` }, r2.Converter = function(e) {
      "use strict";
      var u5 = {}, d5 = [], a7 = [], s66 = {}, i3 = R6, c2 = { parsed: {}, raw: "", format: "" };
      t3();
      function t3() {
        e = e || {};
        for (var n3 in E9)
          E9.hasOwnProperty(n3) && (u5[n3] = E9[n3]);
        if (typeof e == "object")
          for (var f4 in e)
            e.hasOwnProperty(f4) && (u5[f4] = e[f4]);
        else
          throw Error("Converter expects the passed parameter to be an object, but " + typeof e + " was passed instead.");
        u5.extensions && r2.helper.forEach(u5.extensions, p8);
      }
      function p8(n3, f4) {
        if (f4 = f4 || null, r2.helper.isString(n3))
          if (n3 = r2.helper.stdExtName(n3), f4 = n3, r2.extensions[n3]) {
            console.warn("DEPRECATION WARNING: " + n3 + " is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"), l7(r2.extensions[n3], n3);
            return;
          } else if (!r2.helper.isUndefined(z9[n3]))
            n3 = z9[n3];
          else
            throw Error('Extension "' + n3 + '" could not be loaded. It was either not found or is not a valid extension.');
        typeof n3 == "function" && (n3 = n3()), r2.helper.isArray(n3) || (n3 = [n3]);
        var _7 = T5(n3, f4);
        if (!_7.valid)
          throw Error(_7.error);
        for (var m10 = 0; m10 < n3.length; ++m10) {
          switch (n3[m10].type) {
            case "lang":
              d5.push(n3[m10]);
              break;
            case "output":
              a7.push(n3[m10]);
              break;
          }
          if (n3[m10].hasOwnProperty("listeners"))
            for (var w9 in n3[m10].listeners)
              n3[m10].listeners.hasOwnProperty(w9) && o2(w9, n3[m10].listeners[w9]);
        }
      }
      function l7(n3, f4) {
        typeof n3 == "function" && (n3 = n3(new r2.Converter())), r2.helper.isArray(n3) || (n3 = [n3]);
        var _7 = T5(n3, f4);
        if (!_7.valid)
          throw Error(_7.error);
        for (var m10 = 0; m10 < n3.length; ++m10)
          switch (n3[m10].type) {
            case "lang":
              d5.push(n3[m10]);
              break;
            case "output":
              a7.push(n3[m10]);
              break;
            default:
              throw Error("Extension loader error: Type unrecognized!!!");
          }
      }
      function o2(n3, f4) {
        if (!r2.helper.isString(n3))
          throw Error("Invalid argument in converter.listen() method: name must be a string, but " + typeof n3 + " given");
        if (typeof f4 != "function")
          throw Error("Invalid argument in converter.listen() method: callback must be a function, but " + typeof f4 + " given");
        s66.hasOwnProperty(n3) || (s66[n3] = []), s66[n3].push(f4);
      }
      function h6(n3) {
        var f4 = n3.match(/^\s*/)[0].length, _7 = new RegExp("^\\s{0," + f4 + "}", "gm");
        return n3.replace(_7, "");
      }
      this._dispatch = function(f4, _7, m10, w9) {
        if (s66.hasOwnProperty(f4))
          for (var g8 = 0; g8 < s66[f4].length; ++g8) {
            var y9 = s66[f4][g8](f4, _7, this, m10, w9);
            y9 && typeof y9 < "u" && (_7 = y9);
          }
        return _7;
      }, this.listen = function(n3, f4) {
        return o2(n3, f4), this;
      }, this.makeHtml = function(n3) {
        if (!n3)
          return n3;
        var f4 = { gHtmlBlocks: [], gHtmlMdBlocks: [], gHtmlSpans: [], gUrls: {}, gTitles: {}, gDimensions: {}, gListLevel: 0, hashLinkCounts: {}, langExtensions: d5, outputModifiers: a7, converter: this, ghCodeBlocks: [], metadata: { parsed: {}, raw: "", format: "" } };
        return n3 = n3.replace(/¨/g, "¨T"), n3 = n3.replace(/\$/g, "¨D"), n3 = n3.replace(/\r\n/g, `
`), n3 = n3.replace(/\r/g, `
`), n3 = n3.replace(/\u00A0/g, "&nbsp;"), u5.smartIndentationFix && (n3 = h6(n3)), n3 = `

` + n3 + `

`, n3 = r2.subParser("detab")(n3, u5, f4), n3 = n3.replace(/^[ \t]+$/mg, ""), r2.helper.forEach(d5, function(_7) {
          n3 = r2.subParser("runExtension")(_7, n3, u5, f4);
        }), n3 = r2.subParser("metadata")(n3, u5, f4), n3 = r2.subParser("hashPreCodeTags")(n3, u5, f4), n3 = r2.subParser("githubCodeBlocks")(n3, u5, f4), n3 = r2.subParser("hashHTMLBlocks")(n3, u5, f4), n3 = r2.subParser("hashCodeTags")(n3, u5, f4), n3 = r2.subParser("stripLinkDefinitions")(n3, u5, f4), n3 = r2.subParser("blockGamut")(n3, u5, f4), n3 = r2.subParser("unhashHTMLSpans")(n3, u5, f4), n3 = r2.subParser("unescapeSpecialChars")(n3, u5, f4), n3 = n3.replace(/¨D/g, "$$"), n3 = n3.replace(/¨T/g, "¨"), n3 = r2.subParser("completeHTMLDocument")(n3, u5, f4), r2.helper.forEach(a7, function(_7) {
          n3 = r2.subParser("runExtension")(_7, n3, u5, f4);
        }), c2 = f4.metadata, n3;
      }, this.makeMarkdown = this.makeMd = function(n3, f4) {
        if (n3 = n3.replace(/\r\n/g, `
`), n3 = n3.replace(/\r/g, `
`), n3 = n3.replace(/>[ \t]+</, ">¨NBSP;<"), !f4)
          if (window && window.document)
            f4 = window.document;
          else
            throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");
        var _7 = f4.createElement("div");
        _7.innerHTML = n3;
        var m10 = { preList: S6(_7) };
        j11(_7);
        for (var w9 = _7.childNodes, g8 = "", y9 = 0; y9 < w9.length; y9++)
          g8 += r2.subParser("makeMarkdown.node")(w9[y9], m10);
        function j11(v6) {
          for (var P5 = 0; P5 < v6.childNodes.length; ++P5) {
            var C8 = v6.childNodes[P5];
            C8.nodeType === 3 ? !/\S/.test(C8.nodeValue) && !/^[ ]+$/.test(C8.nodeValue) ? (v6.removeChild(C8), --P5) : (C8.nodeValue = C8.nodeValue.split(`
`).join(" "), C8.nodeValue = C8.nodeValue.replace(/(\s)+/g, "$1")) : C8.nodeType === 1 && j11(C8);
          }
        }
        function S6(v6) {
          for (var P5 = v6.querySelectorAll("pre"), C8 = [], M7 = 0; M7 < P5.length; ++M7)
            if (P5[M7].childElementCount === 1 && P5[M7].firstChild.tagName.toLowerCase() === "code") {
              var N7 = P5[M7].firstChild.innerHTML.trim(), V7 = P5[M7].firstChild.getAttribute("data-language") || "";
              if (V7 === "")
                for (var K6 = P5[M7].firstChild.className.split(" "), D8 = 0; D8 < K6.length; ++D8) {
                  var Z5 = K6[D8].match(/^language-(.+)$/);
                  if (Z5 !== null) {
                    V7 = Z5[1];
                    break;
                  }
                }
              N7 = r2.helper.unescapeHTMLEntities(N7), C8.push(N7), P5[M7].outerHTML = '<precode language="' + V7 + '" precodenum="' + M7.toString() + '"></precode>';
            } else
              C8.push(P5[M7].innerHTML), P5[M7].innerHTML = "", P5[M7].setAttribute("prenum", M7.toString());
          return C8;
        }
        return g8;
      }, this.setOption = function(n3, f4) {
        u5[n3] = f4;
      }, this.getOption = function(n3) {
        return u5[n3];
      }, this.getOptions = function() {
        return u5;
      }, this.addExtension = function(n3, f4) {
        f4 = f4 || null, p8(n3, f4);
      }, this.useExtension = function(n3) {
        p8(n3);
      }, this.setFlavor = function(n3) {
        if (!H8.hasOwnProperty(n3))
          throw Error(n3 + " flavor was not found");
        var f4 = H8[n3];
        i3 = n3;
        for (var _7 in f4)
          f4.hasOwnProperty(_7) && (u5[_7] = f4[_7]);
      }, this.getFlavor = function() {
        return i3;
      }, this.removeExtension = function(n3) {
        r2.helper.isArray(n3) || (n3 = [n3]);
        for (var f4 = 0; f4 < n3.length; ++f4) {
          for (var _7 = n3[f4], m10 = 0; m10 < d5.length; ++m10)
            d5[m10] === _7 && d5.splice(m10, 1);
          for (var w9 = 0; w9 < a7.length; ++w9)
            a7[w9] === _7 && a7.splice(w9, 1);
        }
      }, this.getAllExtensions = function() {
        return { language: d5, output: a7 };
      }, this.getMetadata = function(n3) {
        return n3 ? c2.raw : c2.parsed;
      }, this.getMetadataFormat = function() {
        return c2.format;
      }, this._setMetadataPair = function(n3, f4) {
        c2.parsed[n3] = f4;
      }, this._setMetadataFormat = function(n3) {
        c2.format = n3;
      }, this._setMetadataRaw = function(n3) {
        c2.raw = n3;
      };
    }, r2.subParser("anchors", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("anchors.before", e, u5, d5);
      var a7 = function(s66, i3, c2, t3, p8, l7, o2) {
        if (r2.helper.isUndefined(o2) && (o2 = ""), c2 = c2.toLowerCase(), s66.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1)
          t3 = "";
        else if (!t3)
          if (c2 || (c2 = i3.toLowerCase().replace(/ ?\n/g, " ")), t3 = "#" + c2, !r2.helper.isUndefined(d5.gUrls[c2]))
            t3 = d5.gUrls[c2], r2.helper.isUndefined(d5.gTitles[c2]) || (o2 = d5.gTitles[c2]);
          else
            return s66;
        t3 = t3.replace(r2.helper.regexes.asteriskDashAndColon, r2.helper.escapeCharactersCallback);
        var h6 = '<a href="' + t3 + '"';
        return o2 !== "" && o2 !== null && (o2 = o2.replace(/"/g, "&quot;"), o2 = o2.replace(r2.helper.regexes.asteriskDashAndColon, r2.helper.escapeCharactersCallback), h6 += ' title="' + o2 + '"'), u5.openLinksInNewWindow && !/^#/.test(t3) && (h6 += ' rel="noopener noreferrer" target="¨E95Eblank"'), h6 += ">" + i3 + "</a>", h6;
      };
      return e = e.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, a7), e = e.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g, a7), e = e.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g, a7), e = e.replace(/\[([^\[\]]+)]()()()()()/g, a7), u5.ghMentions && (e = e.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function(s66, i3, c2, t3, p8) {
        if (c2 === "\\")
          return i3 + t3;
        if (!r2.helper.isString(u5.ghMentionsLink))
          throw new Error("ghMentionsLink option must be a string");
        var l7 = u5.ghMentionsLink.replace(/\{u}/g, p8), o2 = "";
        return u5.openLinksInNewWindow && (o2 = ' rel="noopener noreferrer" target="¨E95Eblank"'), i3 + '<a href="' + l7 + '"' + o2 + ">" + t3 + "</a>";
      })), e = d5.converter._dispatch("anchors.after", e, u5, d5), e;
    });
    var Y8 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi, x7 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi, ee3 = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi, de7 = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi, ue8 = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi, I7 = function(e) {
      "use strict";
      return function(u5, d5, a7, s66, i3, c2, t3) {
        a7 = a7.replace(r2.helper.regexes.asteriskDashAndColon, r2.helper.escapeCharactersCallback);
        var p8 = a7, l7 = "", o2 = "", h6 = d5 || "", n3 = t3 || "";
        return /^www\./i.test(a7) && (a7 = a7.replace(/^www\./i, "http://www.")), e.excludeTrailingPunctuationFromURLs && c2 && (l7 = c2), e.openLinksInNewWindow && (o2 = ' rel="noopener noreferrer" target="¨E95Eblank"'), h6 + '<a href="' + a7 + '"' + o2 + ">" + p8 + "</a>" + l7 + n3;
      };
    }, W10 = function(e, u5) {
      "use strict";
      return function(d5, a7, s66) {
        var i3 = "mailto:";
        return a7 = a7 || "", s66 = r2.subParser("unescapeSpecialChars")(s66, e, u5), e.encodeEmails ? (i3 = r2.helper.encodeEmailAddress(i3 + s66), s66 = r2.helper.encodeEmailAddress(s66)) : i3 = i3 + s66, a7 + '<a href="' + i3 + '">' + s66 + "</a>";
      };
    };
    r2.subParser("autoLinks", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("autoLinks.before", e, u5, d5), e = e.replace(ee3, I7(u5)), e = e.replace(ue8, W10(u5, d5)), e = d5.converter._dispatch("autoLinks.after", e, u5, d5), e;
    }), r2.subParser("simplifiedAutoLinks", function(e, u5, d5) {
      "use strict";
      return u5.simplifiedAutoLink && (e = d5.converter._dispatch("simplifiedAutoLinks.before", e, u5, d5), u5.excludeTrailingPunctuationFromURLs ? e = e.replace(x7, I7(u5)) : e = e.replace(Y8, I7(u5)), e = e.replace(de7, W10(u5, d5)), e = d5.converter._dispatch("simplifiedAutoLinks.after", e, u5, d5)), e;
    }), r2.subParser("blockGamut", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("blockGamut.before", e, u5, d5), e = r2.subParser("blockQuotes")(e, u5, d5), e = r2.subParser("headers")(e, u5, d5), e = r2.subParser("horizontalRule")(e, u5, d5), e = r2.subParser("lists")(e, u5, d5), e = r2.subParser("codeBlocks")(e, u5, d5), e = r2.subParser("tables")(e, u5, d5), e = r2.subParser("hashHTMLBlocks")(e, u5, d5), e = r2.subParser("paragraphs")(e, u5, d5), e = d5.converter._dispatch("blockGamut.after", e, u5, d5), e;
    }), r2.subParser("blockQuotes", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("blockQuotes.before", e, u5, d5), e = e + `

`;
      var a7 = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;
      return u5.splitAdjacentBlockquotes && (a7 = /^ {0,3}>[\s\S]*?(?:\n\n)/gm), e = e.replace(a7, function(s66) {
        return s66 = s66.replace(/^[ \t]*>[ \t]?/gm, ""), s66 = s66.replace(/¨0/g, ""), s66 = s66.replace(/^[ \t]+$/gm, ""), s66 = r2.subParser("githubCodeBlocks")(s66, u5, d5), s66 = r2.subParser("blockGamut")(s66, u5, d5), s66 = s66.replace(/(^|\n)/g, "$1  "), s66 = s66.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function(i3, c2) {
          var t3 = c2;
          return t3 = t3.replace(/^  /mg, "¨0"), t3 = t3.replace(/¨0/g, ""), t3;
        }), r2.subParser("hashBlock")(`<blockquote>
` + s66 + `
</blockquote>`, u5, d5);
      }), e = d5.converter._dispatch("blockQuotes.after", e, u5, d5), e;
    }), r2.subParser("codeBlocks", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("codeBlocks.before", e, u5, d5), e += "¨0";
      var a7 = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
      return e = e.replace(a7, function(s66, i3, c2) {
        var t3 = i3, p8 = c2, l7 = `
`;
        return t3 = r2.subParser("outdent")(t3, u5, d5), t3 = r2.subParser("encodeCode")(t3, u5, d5), t3 = r2.subParser("detab")(t3, u5, d5), t3 = t3.replace(/^\n+/g, ""), t3 = t3.replace(/\n+$/g, ""), u5.omitExtraWLInCodeBlocks && (l7 = ""), t3 = "<pre><code>" + t3 + l7 + "</code></pre>", r2.subParser("hashBlock")(t3, u5, d5) + p8;
      }), e = e.replace(/¨0/, ""), e = d5.converter._dispatch("codeBlocks.after", e, u5, d5), e;
    }), r2.subParser("codeSpans", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("codeSpans.before", e, u5, d5), typeof e > "u" && (e = ""), e = e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm, function(a7, s66, i3, c2) {
        var t3 = c2;
        return t3 = t3.replace(/^([ \t]*)/g, ""), t3 = t3.replace(/[ \t]*$/g, ""), t3 = r2.subParser("encodeCode")(t3, u5, d5), t3 = s66 + "<code>" + t3 + "</code>", t3 = r2.subParser("hashHTMLSpans")(t3, u5, d5), t3;
      }), e = d5.converter._dispatch("codeSpans.after", e, u5, d5), e;
    }), r2.subParser("completeHTMLDocument", function(e, u5, d5) {
      "use strict";
      if (!u5.completeHTMLDocument)
        return e;
      e = d5.converter._dispatch("completeHTMLDocument.before", e, u5, d5);
      var a7 = "html", s66 = `<!DOCTYPE HTML>
`, i3 = "", c2 = `<meta charset="utf-8">
`, t3 = "", p8 = "";
      typeof d5.metadata.parsed.doctype < "u" && (s66 = "<!DOCTYPE " + d5.metadata.parsed.doctype + `>
`, a7 = d5.metadata.parsed.doctype.toString().toLowerCase(), (a7 === "html" || a7 === "html5") && (c2 = '<meta charset="utf-8">'));
      for (var l7 in d5.metadata.parsed)
        if (d5.metadata.parsed.hasOwnProperty(l7))
          switch (l7.toLowerCase()) {
            case "doctype":
              break;
            case "title":
              i3 = "<title>" + d5.metadata.parsed.title + `</title>
`;
              break;
            case "charset":
              a7 === "html" || a7 === "html5" ? c2 = '<meta charset="' + d5.metadata.parsed.charset + `">
` : c2 = '<meta name="charset" content="' + d5.metadata.parsed.charset + `">
`;
              break;
            case "language":
            case "lang":
              t3 = ' lang="' + d5.metadata.parsed[l7] + '"', p8 += '<meta name="' + l7 + '" content="' + d5.metadata.parsed[l7] + `">
`;
              break;
            default:
              p8 += '<meta name="' + l7 + '" content="' + d5.metadata.parsed[l7] + `">
`;
          }
      return e = s66 + "<html" + t3 + `>
<head>
` + i3 + c2 + p8 + `</head>
<body>
` + e.trim() + `
</body>
</html>`, e = d5.converter._dispatch("completeHTMLDocument.after", e, u5, d5), e;
    }), r2.subParser("detab", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("detab.before", e, u5, d5), e = e.replace(/\t(?=\t)/g, "    "), e = e.replace(/\t/g, "¨A¨B"), e = e.replace(/¨B(.+?)¨A/g, function(a7, s66) {
        for (var i3 = s66, c2 = 4 - i3.length % 4, t3 = 0; t3 < c2; t3++)
          i3 += " ";
        return i3;
      }), e = e.replace(/¨A/g, "    "), e = e.replace(/¨B/g, ""), e = d5.converter._dispatch("detab.after", e, u5, d5), e;
    }), r2.subParser("ellipsis", function(e, u5, d5) {
      "use strict";
      return u5.ellipsis && (e = d5.converter._dispatch("ellipsis.before", e, u5, d5), e = e.replace(/\.\.\./g, "…"), e = d5.converter._dispatch("ellipsis.after", e, u5, d5)), e;
    }), r2.subParser("emoji", function(e, u5, d5) {
      "use strict";
      if (!u5.emoji)
        return e;
      e = d5.converter._dispatch("emoji.before", e, u5, d5);
      var a7 = /:([\S]+?):/g;
      return e = e.replace(a7, function(s66, i3) {
        return r2.helper.emojis.hasOwnProperty(i3) ? r2.helper.emojis[i3] : s66;
      }), e = d5.converter._dispatch("emoji.after", e, u5, d5), e;
    }), r2.subParser("encodeAmpsAndAngles", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("encodeAmpsAndAngles.before", e, u5, d5), e = e.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, "&amp;"), e = e.replace(/<(?![a-z\/?$!])/gi, "&lt;"), e = e.replace(/</g, "&lt;"), e = e.replace(/>/g, "&gt;"), e = d5.converter._dispatch("encodeAmpsAndAngles.after", e, u5, d5), e;
    }), r2.subParser("encodeBackslashEscapes", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("encodeBackslashEscapes.before", e, u5, d5), e = e.replace(/\\(\\)/g, r2.helper.escapeCharactersCallback), e = e.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g, r2.helper.escapeCharactersCallback), e = d5.converter._dispatch("encodeBackslashEscapes.after", e, u5, d5), e;
    }), r2.subParser("encodeCode", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("encodeCode.before", e, u5, d5), e = e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/([*_{}\[\]\\=~-])/g, r2.helper.escapeCharactersCallback), e = d5.converter._dispatch("encodeCode.after", e, u5, d5), e;
    }), r2.subParser("escapeSpecialCharsWithinTagAttributes", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before", e, u5, d5);
      var a7 = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi, s66 = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;
      return e = e.replace(a7, function(i3) {
        return i3.replace(/(.)<\/?code>(?=.)/g, "$1`").replace(/([\\`*_~=|])/g, r2.helper.escapeCharactersCallback);
      }), e = e.replace(s66, function(i3) {
        return i3.replace(/([\\`*_~=|])/g, r2.helper.escapeCharactersCallback);
      }), e = d5.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after", e, u5, d5), e;
    }), r2.subParser("githubCodeBlocks", function(e, u5, d5) {
      "use strict";
      return u5.ghCodeBlocks ? (e = d5.converter._dispatch("githubCodeBlocks.before", e, u5, d5), e += "¨0", e = e.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function(a7, s66, i3, c2) {
        var t3 = u5.omitExtraWLInCodeBlocks ? "" : `
`;
        return c2 = r2.subParser("encodeCode")(c2, u5, d5), c2 = r2.subParser("detab")(c2, u5, d5), c2 = c2.replace(/^\n+/g, ""), c2 = c2.replace(/\n+$/g, ""), c2 = "<pre><code" + (i3 ? ' class="' + i3 + " language-" + i3 + '"' : "") + ">" + c2 + t3 + "</code></pre>", c2 = r2.subParser("hashBlock")(c2, u5, d5), `

¨G` + (d5.ghCodeBlocks.push({ text: a7, codeblock: c2 }) - 1) + `G

`;
      }), e = e.replace(/¨0/, ""), d5.converter._dispatch("githubCodeBlocks.after", e, u5, d5)) : e;
    }), r2.subParser("hashBlock", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("hashBlock.before", e, u5, d5), e = e.replace(/(^\n+|\n+$)/g, ""), e = `

¨K` + (d5.gHtmlBlocks.push(e) - 1) + `K

`, e = d5.converter._dispatch("hashBlock.after", e, u5, d5), e;
    }), r2.subParser("hashCodeTags", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("hashCodeTags.before", e, u5, d5);
      var a7 = function(s66, i3, c2, t3) {
        var p8 = c2 + r2.subParser("encodeCode")(i3, u5, d5) + t3;
        return "¨C" + (d5.gHtmlSpans.push(p8) - 1) + "C";
      };
      return e = r2.helper.replaceRecursiveRegExp(e, a7, "<code\\b[^>]*>", "</code>", "gim"), e = d5.converter._dispatch("hashCodeTags.after", e, u5, d5), e;
    }), r2.subParser("hashElement", function(e, u5, d5) {
      "use strict";
      return function(a7, s66) {
        var i3 = s66;
        return i3 = i3.replace(/\n\n/g, `
`), i3 = i3.replace(/^\n/, ""), i3 = i3.replace(/\n+$/g, ""), i3 = `

¨K` + (d5.gHtmlBlocks.push(i3) - 1) + `K

`, i3;
      };
    }), r2.subParser("hashHTMLBlocks", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("hashHTMLBlocks.before", e, u5, d5);
      var a7 = ["pre", "div", "h1", "h2", "h3", "h4", "h5", "h6", "blockquote", "table", "dl", "ol", "ul", "script", "noscript", "form", "fieldset", "iframe", "math", "style", "section", "header", "footer", "nav", "article", "aside", "address", "audio", "canvas", "figure", "hgroup", "output", "video", "p"], s66 = function(n3, f4, _7, m10) {
        var w9 = n3;
        return _7.search(/\bmarkdown\b/) !== -1 && (w9 = _7 + d5.converter.makeHtml(f4) + m10), `

¨K` + (d5.gHtmlBlocks.push(w9) - 1) + `K

`;
      };
      u5.backslashEscapesHTMLTags && (e = e.replace(/\\<(\/?[^>]+?)>/g, function(n3, f4) {
        return "&lt;" + f4 + "&gt;";
      }));
      for (var i3 = 0; i3 < a7.length; ++i3)
        for (var c2, t3 = new RegExp("^ {0,3}(<" + a7[i3] + "\\b[^>]*>)", "im"), p8 = "<" + a7[i3] + "\\b[^>]*>", l7 = "</" + a7[i3] + ">"; (c2 = r2.helper.regexIndexOf(e, t3)) !== -1; ) {
          var o2 = r2.helper.splitAtIndex(e, c2), h6 = r2.helper.replaceRecursiveRegExp(o2[1], s66, p8, l7, "im");
          if (h6 === o2[1])
            break;
          e = o2[0].concat(h6);
        }
      return e = e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g, r2.subParser("hashElement")(e, u5, d5)), e = r2.helper.replaceRecursiveRegExp(e, function(n3) {
        return `

¨K` + (d5.gHtmlBlocks.push(n3) - 1) + `K

`;
      }, "^ {0,3}<!--", "-->", "gm"), e = e.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g, r2.subParser("hashElement")(e, u5, d5)), e = d5.converter._dispatch("hashHTMLBlocks.after", e, u5, d5), e;
    }), r2.subParser("hashHTMLSpans", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("hashHTMLSpans.before", e, u5, d5);
      function a7(s66) {
        return "¨C" + (d5.gHtmlSpans.push(s66) - 1) + "C";
      }
      return e = e.replace(/<[^>]+?\/>/gi, function(s66) {
        return a7(s66);
      }), e = e.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function(s66) {
        return a7(s66);
      }), e = e.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function(s66) {
        return a7(s66);
      }), e = e.replace(/<[^>]+?>/gi, function(s66) {
        return a7(s66);
      }), e = d5.converter._dispatch("hashHTMLSpans.after", e, u5, d5), e;
    }), r2.subParser("unhashHTMLSpans", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("unhashHTMLSpans.before", e, u5, d5);
      for (var a7 = 0; a7 < d5.gHtmlSpans.length; ++a7) {
        for (var s66 = d5.gHtmlSpans[a7], i3 = 0; /¨C(\d+)C/.test(s66); ) {
          var c2 = RegExp.$1;
          if (s66 = s66.replace("¨C" + c2 + "C", d5.gHtmlSpans[c2]), i3 === 10) {
            console.error("maximum nesting of 10 spans reached!!!");
            break;
          }
          ++i3;
        }
        e = e.replace("¨C" + a7 + "C", s66);
      }
      return e = d5.converter._dispatch("unhashHTMLSpans.after", e, u5, d5), e;
    }), r2.subParser("hashPreCodeTags", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("hashPreCodeTags.before", e, u5, d5);
      var a7 = function(s66, i3, c2, t3) {
        var p8 = c2 + r2.subParser("encodeCode")(i3, u5, d5) + t3;
        return `

¨G` + (d5.ghCodeBlocks.push({ text: s66, codeblock: p8 }) - 1) + `G

`;
      };
      return e = r2.helper.replaceRecursiveRegExp(e, a7, "^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>", "^ {0,3}</code>\\s*</pre>", "gim"), e = d5.converter._dispatch("hashPreCodeTags.after", e, u5, d5), e;
    }), r2.subParser("headers", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("headers.before", e, u5, d5);
      var a7 = isNaN(parseInt(u5.headerLevelStart)) ? 1 : parseInt(u5.headerLevelStart), s66 = u5.smoothLivePreview ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm, i3 = u5.smoothLivePreview ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;
      e = e.replace(s66, function(p8, l7) {
        var o2 = r2.subParser("spanGamut")(l7, u5, d5), h6 = u5.noHeaderId ? "" : ' id="' + t3(l7) + '"', n3 = a7, f4 = "<h" + n3 + h6 + ">" + o2 + "</h" + n3 + ">";
        return r2.subParser("hashBlock")(f4, u5, d5);
      }), e = e.replace(i3, function(p8, l7) {
        var o2 = r2.subParser("spanGamut")(l7, u5, d5), h6 = u5.noHeaderId ? "" : ' id="' + t3(l7) + '"', n3 = a7 + 1, f4 = "<h" + n3 + h6 + ">" + o2 + "</h" + n3 + ">";
        return r2.subParser("hashBlock")(f4, u5, d5);
      });
      var c2 = u5.requireSpaceBeforeHeadingText ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;
      e = e.replace(c2, function(p8, l7, o2) {
        var h6 = o2;
        u5.customizedHeaderId && (h6 = o2.replace(/\s?\{([^{]+?)}\s*$/, ""));
        var n3 = r2.subParser("spanGamut")(h6, u5, d5), f4 = u5.noHeaderId ? "" : ' id="' + t3(o2) + '"', _7 = a7 - 1 + l7.length, m10 = "<h" + _7 + f4 + ">" + n3 + "</h" + _7 + ">";
        return r2.subParser("hashBlock")(m10, u5, d5);
      });
      function t3(p8) {
        var l7, o2;
        if (u5.customizedHeaderId) {
          var h6 = p8.match(/\{([^{]+?)}\s*$/);
          h6 && h6[1] && (p8 = h6[1]);
        }
        return l7 = p8, r2.helper.isString(u5.prefixHeaderId) ? o2 = u5.prefixHeaderId : u5.prefixHeaderId === true ? o2 = "section-" : o2 = "", u5.rawPrefixHeaderId || (l7 = o2 + l7), u5.ghCompatibleHeaderId ? l7 = l7.replace(/ /g, "-").replace(/&amp;/g, "").replace(/¨T/g, "").replace(/¨D/g, "").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, "").toLowerCase() : u5.rawHeaderId ? l7 = l7.replace(/ /g, "-").replace(/&amp;/g, "&").replace(/¨T/g, "¨").replace(/¨D/g, "$").replace(/["']/g, "-").toLowerCase() : l7 = l7.replace(/[^\w]/g, "").toLowerCase(), u5.rawPrefixHeaderId && (l7 = o2 + l7), d5.hashLinkCounts[l7] ? l7 = l7 + "-" + d5.hashLinkCounts[l7]++ : d5.hashLinkCounts[l7] = 1, l7;
      }
      return e = d5.converter._dispatch("headers.after", e, u5, d5), e;
    }), r2.subParser("horizontalRule", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("horizontalRule.before", e, u5, d5);
      var a7 = r2.subParser("hashBlock")("<hr />", u5, d5);
      return e = e.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, a7), e = e.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, a7), e = e.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, a7), e = d5.converter._dispatch("horizontalRule.after", e, u5, d5), e;
    }), r2.subParser("images", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("images.before", e, u5, d5);
      var a7 = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, s66 = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g, i3 = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, c2 = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g, t3 = /!\[([^\[\]]+)]()()()()()/g;
      function p8(o2, h6, n3, f4, _7, m10, w9, g8) {
        return f4 = f4.replace(/\s/g, ""), l7(o2, h6, n3, f4, _7, m10, w9, g8);
      }
      function l7(o2, h6, n3, f4, _7, m10, w9, g8) {
        var y9 = d5.gUrls, j11 = d5.gTitles, S6 = d5.gDimensions;
        if (n3 = n3.toLowerCase(), g8 || (g8 = ""), o2.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1)
          f4 = "";
        else if (f4 === "" || f4 === null)
          if ((n3 === "" || n3 === null) && (n3 = h6.toLowerCase().replace(/ ?\n/g, " ")), f4 = "#" + n3, !r2.helper.isUndefined(y9[n3]))
            f4 = y9[n3], r2.helper.isUndefined(j11[n3]) || (g8 = j11[n3]), r2.helper.isUndefined(S6[n3]) || (_7 = S6[n3].width, m10 = S6[n3].height);
          else
            return o2;
        h6 = h6.replace(/"/g, "&quot;").replace(r2.helper.regexes.asteriskDashAndColon, r2.helper.escapeCharactersCallback), f4 = f4.replace(r2.helper.regexes.asteriskDashAndColon, r2.helper.escapeCharactersCallback);
        var v6 = '<img src="' + f4 + '" alt="' + h6 + '"';
        return g8 && r2.helper.isString(g8) && (g8 = g8.replace(/"/g, "&quot;").replace(r2.helper.regexes.asteriskDashAndColon, r2.helper.escapeCharactersCallback), v6 += ' title="' + g8 + '"'), _7 && m10 && (_7 = _7 === "*" ? "auto" : _7, m10 = m10 === "*" ? "auto" : m10, v6 += ' width="' + _7 + '"', v6 += ' height="' + m10 + '"'), v6 += " />", v6;
      }
      return e = e.replace(c2, l7), e = e.replace(i3, p8), e = e.replace(s66, l7), e = e.replace(a7, l7), e = e.replace(t3, l7), e = d5.converter._dispatch("images.after", e, u5, d5), e;
    }), r2.subParser("italicsAndBold", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("italicsAndBold.before", e, u5, d5);
      function a7(s66, i3, c2) {
        return i3 + s66 + c2;
      }
      return u5.literalMidWordUnderscores ? (e = e.replace(/\b___(\S[\s\S]*?)___\b/g, function(s66, i3) {
        return a7(i3, "<strong><em>", "</em></strong>");
      }), e = e.replace(/\b__(\S[\s\S]*?)__\b/g, function(s66, i3) {
        return a7(i3, "<strong>", "</strong>");
      }), e = e.replace(/\b_(\S[\s\S]*?)_\b/g, function(s66, i3) {
        return a7(i3, "<em>", "</em>");
      })) : (e = e.replace(/___(\S[\s\S]*?)___/g, function(s66, i3) {
        return /\S$/.test(i3) ? a7(i3, "<strong><em>", "</em></strong>") : s66;
      }), e = e.replace(/__(\S[\s\S]*?)__/g, function(s66, i3) {
        return /\S$/.test(i3) ? a7(i3, "<strong>", "</strong>") : s66;
      }), e = e.replace(/_([^\s_][\s\S]*?)_/g, function(s66, i3) {
        return /\S$/.test(i3) ? a7(i3, "<em>", "</em>") : s66;
      })), u5.literalMidWordAsterisks ? (e = e.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function(s66, i3, c2) {
        return a7(c2, i3 + "<strong><em>", "</em></strong>");
      }), e = e.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function(s66, i3, c2) {
        return a7(c2, i3 + "<strong>", "</strong>");
      }), e = e.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function(s66, i3, c2) {
        return a7(c2, i3 + "<em>", "</em>");
      })) : (e = e.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function(s66, i3) {
        return /\S$/.test(i3) ? a7(i3, "<strong><em>", "</em></strong>") : s66;
      }), e = e.replace(/\*\*(\S[\s\S]*?)\*\*/g, function(s66, i3) {
        return /\S$/.test(i3) ? a7(i3, "<strong>", "</strong>") : s66;
      }), e = e.replace(/\*([^\s*][\s\S]*?)\*/g, function(s66, i3) {
        return /\S$/.test(i3) ? a7(i3, "<em>", "</em>") : s66;
      })), e = d5.converter._dispatch("italicsAndBold.after", e, u5, d5), e;
    }), r2.subParser("lists", function(e, u5, d5) {
      "use strict";
      function a7(c2, t3) {
        d5.gListLevel++, c2 = c2.replace(/\n{2,}$/, `
`), c2 += "¨0";
        var p8 = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm, l7 = /\n[ \t]*\n(?!¨0)/.test(c2);
        return u5.disableForced4SpacesIndentedSublists && (p8 = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm), c2 = c2.replace(p8, function(o2, h6, n3, f4, _7, m10, w9) {
          w9 = w9 && w9.trim() !== "";
          var g8 = r2.subParser("outdent")(_7, u5, d5), y9 = "";
          return m10 && u5.tasklists && (y9 = ' class="task-list-item" style="list-style-type: none;"', g8 = g8.replace(/^[ \t]*\[(x|X| )?]/m, function() {
            var j11 = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
            return w9 && (j11 += " checked"), j11 += ">", j11;
          })), g8 = g8.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function(j11) {
            return "¨A" + j11;
          }), h6 || g8.search(/\n{2,}/) > -1 ? (g8 = r2.subParser("githubCodeBlocks")(g8, u5, d5), g8 = r2.subParser("blockGamut")(g8, u5, d5)) : (g8 = r2.subParser("lists")(g8, u5, d5), g8 = g8.replace(/\n$/, ""), g8 = r2.subParser("hashHTMLBlocks")(g8, u5, d5), g8 = g8.replace(/\n\n+/g, `

`), l7 ? g8 = r2.subParser("paragraphs")(g8, u5, d5) : g8 = r2.subParser("spanGamut")(g8, u5, d5)), g8 = g8.replace("¨A", ""), g8 = "<li" + y9 + ">" + g8 + `</li>
`, g8;
        }), c2 = c2.replace(/¨0/g, ""), d5.gListLevel--, t3 && (c2 = c2.replace(/\s+$/, "")), c2;
      }
      function s66(c2, t3) {
        if (t3 === "ol") {
          var p8 = c2.match(/^ *(\d+)\./);
          if (p8 && p8[1] !== "1")
            return ' start="' + p8[1] + '"';
        }
        return "";
      }
      function i3(c2, t3, p8) {
        var l7 = u5.disableForced4SpacesIndentedSublists ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm, o2 = u5.disableForced4SpacesIndentedSublists ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm, h6 = t3 === "ul" ? l7 : o2, n3 = "";
        if (c2.search(h6) !== -1)
          (function _7(m10) {
            var w9 = m10.search(h6), g8 = s66(c2, t3);
            w9 !== -1 ? (n3 += `

<` + t3 + g8 + `>
` + a7(m10.slice(0, w9), !!p8) + "</" + t3 + `>
`, t3 = t3 === "ul" ? "ol" : "ul", h6 = t3 === "ul" ? l7 : o2, _7(m10.slice(w9))) : n3 += `

<` + t3 + g8 + `>
` + a7(m10, !!p8) + "</" + t3 + `>
`;
          })(c2);
        else {
          var f4 = s66(c2, t3);
          n3 = `

<` + t3 + f4 + `>
` + a7(c2, !!p8) + "</" + t3 + `>
`;
        }
        return n3;
      }
      return e = d5.converter._dispatch("lists.before", e, u5, d5), e += "¨0", d5.gListLevel ? e = e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm, function(c2, t3, p8) {
        var l7 = p8.search(/[*+-]/g) > -1 ? "ul" : "ol";
        return i3(t3, l7, true);
      }) : e = e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm, function(c2, t3, p8, l7) {
        var o2 = l7.search(/[*+-]/g) > -1 ? "ul" : "ol";
        return i3(p8, o2, false);
      }), e = e.replace(/¨0/, ""), e = d5.converter._dispatch("lists.after", e, u5, d5), e;
    }), r2.subParser("metadata", function(e, u5, d5) {
      "use strict";
      if (!u5.metadata)
        return e;
      e = d5.converter._dispatch("metadata.before", e, u5, d5);
      function a7(s66) {
        d5.metadata.raw = s66, s66 = s66.replace(/&/g, "&amp;").replace(/"/g, "&quot;"), s66 = s66.replace(/\n {4}/g, " "), s66.replace(/^([\S ]+): +([\s\S]+?)$/gm, function(i3, c2, t3) {
          return d5.metadata.parsed[c2] = t3, "";
        });
      }
      return e = e.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function(s66, i3, c2) {
        return a7(c2), "¨M";
      }), e = e.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function(s66, i3, c2) {
        return i3 && (d5.metadata.format = i3), a7(c2), "¨M";
      }), e = e.replace(/¨M/g, ""), e = d5.converter._dispatch("metadata.after", e, u5, d5), e;
    }), r2.subParser("outdent", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("outdent.before", e, u5, d5), e = e.replace(/^(\t|[ ]{1,4})/gm, "¨0"), e = e.replace(/¨0/g, ""), e = d5.converter._dispatch("outdent.after", e, u5, d5), e;
    }), r2.subParser("paragraphs", function(e, u5, d5) {
      "use strict";
      e = d5.converter._dispatch("paragraphs.before", e, u5, d5), e = e.replace(/^\n+/g, ""), e = e.replace(/\n+$/g, "");
      for (var a7 = e.split(/\n{2,}/g), s66 = [], i3 = a7.length, c2 = 0; c2 < i3; c2++) {
        var t3 = a7[c2];
        t3.search(/¨(K|G)(\d+)\1/g) >= 0 ? s66.push(t3) : t3.search(/\S/) >= 0 && (t3 = r2.subParser("spanGamut")(t3, u5, d5), t3 = t3.replace(/^([ \t]*)/g, "<p>"), t3 += "</p>", s66.push(t3));
      }
      for (i3 = s66.length, c2 = 0; c2 < i3; c2++) {
        for (var p8 = "", l7 = s66[c2], o2 = false; /¨(K|G)(\d+)\1/.test(l7); ) {
          var h6 = RegExp.$1, n3 = RegExp.$2;
          h6 === "K" ? p8 = d5.gHtmlBlocks[n3] : o2 ? p8 = r2.subParser("encodeCode")(d5.ghCodeBlocks[n3].text, u5, d5) : p8 = d5.ghCodeBlocks[n3].codeblock, p8 = p8.replace(/\$/g, "$$$$"), l7 = l7.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, p8), /^<pre\b[^>]*>\s*<code\b[^>]*>/.test(l7) && (o2 = true);
        }
        s66[c2] = l7;
      }
      return e = s66.join(`
`), e = e.replace(/^\n+/g, ""), e = e.replace(/\n+$/g, ""), d5.converter._dispatch("paragraphs.after", e, u5, d5);
    }), r2.subParser("runExtension", function(e, u5, d5, a7) {
      "use strict";
      if (e.filter)
        u5 = e.filter(u5, a7.converter, d5);
      else if (e.regex) {
        var s66 = e.regex;
        s66 instanceof RegExp || (s66 = new RegExp(s66, "g")), u5 = u5.replace(s66, e.replace);
      }
      return u5;
    }), r2.subParser("spanGamut", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("spanGamut.before", e, u5, d5), e = r2.subParser("codeSpans")(e, u5, d5), e = r2.subParser("escapeSpecialCharsWithinTagAttributes")(e, u5, d5), e = r2.subParser("encodeBackslashEscapes")(e, u5, d5), e = r2.subParser("images")(e, u5, d5), e = r2.subParser("anchors")(e, u5, d5), e = r2.subParser("autoLinks")(e, u5, d5), e = r2.subParser("simplifiedAutoLinks")(e, u5, d5), e = r2.subParser("emoji")(e, u5, d5), e = r2.subParser("underline")(e, u5, d5), e = r2.subParser("italicsAndBold")(e, u5, d5), e = r2.subParser("strikethrough")(e, u5, d5), e = r2.subParser("ellipsis")(e, u5, d5), e = r2.subParser("hashHTMLSpans")(e, u5, d5), e = r2.subParser("encodeAmpsAndAngles")(e, u5, d5), u5.simpleLineBreaks ? /\n\n¨K/.test(e) || (e = e.replace(/\n+/g, `<br />
`)) : e = e.replace(/  +\n/g, `<br />
`), e = d5.converter._dispatch("spanGamut.after", e, u5, d5), e;
    }), r2.subParser("strikethrough", function(e, u5, d5) {
      "use strict";
      function a7(s66) {
        return u5.simplifiedAutoLink && (s66 = r2.subParser("simplifiedAutoLinks")(s66, u5, d5)), "<del>" + s66 + "</del>";
      }
      return u5.strikethrough && (e = d5.converter._dispatch("strikethrough.before", e, u5, d5), e = e.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function(s66, i3) {
        return a7(i3);
      }), e = d5.converter._dispatch("strikethrough.after", e, u5, d5)), e;
    }), r2.subParser("stripLinkDefinitions", function(e, u5, d5) {
      "use strict";
      var a7 = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm, s66 = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;
      e += "¨0";
      var i3 = function(c2, t3, p8, l7, o2, h6, n3) {
        return t3 = t3.toLowerCase(), e.toLowerCase().split(t3).length - 1 < 2 ? c2 : (p8.match(/^data:.+?\/.+?;base64,/) ? d5.gUrls[t3] = p8.replace(/\s/g, "") : d5.gUrls[t3] = r2.subParser("encodeAmpsAndAngles")(p8, u5, d5), h6 ? h6 + n3 : (n3 && (d5.gTitles[t3] = n3.replace(/"|'/g, "&quot;")), u5.parseImgDimensions && l7 && o2 && (d5.gDimensions[t3] = { width: l7, height: o2 }), ""));
      };
      return e = e.replace(s66, i3), e = e.replace(a7, i3), e = e.replace(/¨0/, ""), e;
    }), r2.subParser("tables", function(e, u5, d5) {
      "use strict";
      if (!u5.tables)
        return e;
      var a7 = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm, s66 = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;
      function i3(o2) {
        return /^:[ \t]*--*$/.test(o2) ? ' style="text-align:left;"' : /^--*[ \t]*:[ \t]*$/.test(o2) ? ' style="text-align:right;"' : /^:[ \t]*--*[ \t]*:$/.test(o2) ? ' style="text-align:center;"' : "";
      }
      function c2(o2, h6) {
        var n3 = "";
        return o2 = o2.trim(), (u5.tablesHeaderId || u5.tableHeaderId) && (n3 = ' id="' + o2.replace(/ /g, "_").toLowerCase() + '"'), o2 = r2.subParser("spanGamut")(o2, u5, d5), "<th" + n3 + h6 + ">" + o2 + `</th>
`;
      }
      function t3(o2, h6) {
        var n3 = r2.subParser("spanGamut")(o2, u5, d5);
        return "<td" + h6 + ">" + n3 + `</td>
`;
      }
      function p8(o2, h6) {
        for (var n3 = `<table>
<thead>
<tr>
`, f4 = o2.length, _7 = 0; _7 < f4; ++_7)
          n3 += o2[_7];
        for (n3 += `</tr>
</thead>
<tbody>
`, _7 = 0; _7 < h6.length; ++_7) {
          n3 += `<tr>
`;
          for (var m10 = 0; m10 < f4; ++m10)
            n3 += h6[_7][m10];
          n3 += `</tr>
`;
        }
        return n3 += `</tbody>
</table>
`, n3;
      }
      function l7(o2) {
        var h6, n3 = o2.split(`
`);
        for (h6 = 0; h6 < n3.length; ++h6)
          /^ {0,3}\|/.test(n3[h6]) && (n3[h6] = n3[h6].replace(/^ {0,3}\|/, "")), /\|[ \t]*$/.test(n3[h6]) && (n3[h6] = n3[h6].replace(/\|[ \t]*$/, "")), n3[h6] = r2.subParser("codeSpans")(n3[h6], u5, d5);
        var f4 = n3[0].split("|").map(function(v6) {
          return v6.trim();
        }), _7 = n3[1].split("|").map(function(v6) {
          return v6.trim();
        }), m10 = [], w9 = [], g8 = [], y9 = [];
        for (n3.shift(), n3.shift(), h6 = 0; h6 < n3.length; ++h6)
          n3[h6].trim() !== "" && m10.push(n3[h6].split("|").map(function(v6) {
            return v6.trim();
          }));
        if (f4.length < _7.length)
          return o2;
        for (h6 = 0; h6 < _7.length; ++h6)
          g8.push(i3(_7[h6]));
        for (h6 = 0; h6 < f4.length; ++h6)
          r2.helper.isUndefined(g8[h6]) && (g8[h6] = ""), w9.push(c2(f4[h6], g8[h6]));
        for (h6 = 0; h6 < m10.length; ++h6) {
          for (var j11 = [], S6 = 0; S6 < w9.length; ++S6)
            r2.helper.isUndefined(m10[h6][S6]), j11.push(t3(m10[h6][S6], g8[S6]));
          y9.push(j11);
        }
        return p8(w9, y9);
      }
      return e = d5.converter._dispatch("tables.before", e, u5, d5), e = e.replace(/\\(\|)/g, r2.helper.escapeCharactersCallback), e = e.replace(a7, l7), e = e.replace(s66, l7), e = d5.converter._dispatch("tables.after", e, u5, d5), e;
    }), r2.subParser("underline", function(e, u5, d5) {
      "use strict";
      return u5.underline && (e = d5.converter._dispatch("underline.before", e, u5, d5), u5.literalMidWordUnderscores ? (e = e.replace(/\b___(\S[\s\S]*?)___\b/g, function(a7, s66) {
        return "<u>" + s66 + "</u>";
      }), e = e.replace(/\b__(\S[\s\S]*?)__\b/g, function(a7, s66) {
        return "<u>" + s66 + "</u>";
      })) : (e = e.replace(/___(\S[\s\S]*?)___/g, function(a7, s66) {
        return /\S$/.test(s66) ? "<u>" + s66 + "</u>" : a7;
      }), e = e.replace(/__(\S[\s\S]*?)__/g, function(a7, s66) {
        return /\S$/.test(s66) ? "<u>" + s66 + "</u>" : a7;
      })), e = e.replace(/(_)/g, r2.helper.escapeCharactersCallback), e = d5.converter._dispatch("underline.after", e, u5, d5)), e;
    }), r2.subParser("unescapeSpecialChars", function(e, u5, d5) {
      "use strict";
      return e = d5.converter._dispatch("unescapeSpecialChars.before", e, u5, d5), e = e.replace(/¨E(\d+)E/g, function(a7, s66) {
        var i3 = parseInt(s66);
        return String.fromCharCode(i3);
      }), e = d5.converter._dispatch("unescapeSpecialChars.after", e, u5, d5), e;
    }), r2.subParser("makeMarkdown.blockquote", function(e, u5) {
      "use strict";
      var d5 = "";
      if (e.hasChildNodes())
        for (var a7 = e.childNodes, s66 = a7.length, i3 = 0; i3 < s66; ++i3) {
          var c2 = r2.subParser("makeMarkdown.node")(a7[i3], u5);
          c2 !== "" && (d5 += c2);
        }
      return d5 = d5.trim(), d5 = "> " + d5.split(`
`).join(`
> `), d5;
    }), r2.subParser("makeMarkdown.codeBlock", function(e, u5) {
      "use strict";
      var d5 = e.getAttribute("language"), a7 = e.getAttribute("precodenum");
      return "```" + d5 + `
` + u5.preList[a7] + "\n```";
    }), r2.subParser("makeMarkdown.codeSpan", function(e) {
      "use strict";
      return "`" + e.innerHTML + "`";
    }), r2.subParser("makeMarkdown.emphasis", function(e, u5) {
      "use strict";
      var d5 = "";
      if (e.hasChildNodes()) {
        d5 += "*";
        for (var a7 = e.childNodes, s66 = a7.length, i3 = 0; i3 < s66; ++i3)
          d5 += r2.subParser("makeMarkdown.node")(a7[i3], u5);
        d5 += "*";
      }
      return d5;
    }), r2.subParser("makeMarkdown.header", function(e, u5, d5) {
      "use strict";
      var a7 = new Array(d5 + 1).join("#"), s66 = "";
      if (e.hasChildNodes()) {
        s66 = a7 + " ";
        for (var i3 = e.childNodes, c2 = i3.length, t3 = 0; t3 < c2; ++t3)
          s66 += r2.subParser("makeMarkdown.node")(i3[t3], u5);
      }
      return s66;
    }), r2.subParser("makeMarkdown.hr", function() {
      "use strict";
      return "---";
    }), r2.subParser("makeMarkdown.image", function(e) {
      "use strict";
      var u5 = "";
      return e.hasAttribute("src") && (u5 += "![" + e.getAttribute("alt") + "](", u5 += "<" + e.getAttribute("src") + ">", e.hasAttribute("width") && e.hasAttribute("height") && (u5 += " =" + e.getAttribute("width") + "x" + e.getAttribute("height")), e.hasAttribute("title") && (u5 += ' "' + e.getAttribute("title") + '"'), u5 += ")"), u5;
    }), r2.subParser("makeMarkdown.links", function(e, u5) {
      "use strict";
      var d5 = "";
      if (e.hasChildNodes() && e.hasAttribute("href")) {
        var a7 = e.childNodes, s66 = a7.length;
        d5 = "[";
        for (var i3 = 0; i3 < s66; ++i3)
          d5 += r2.subParser("makeMarkdown.node")(a7[i3], u5);
        d5 += "](", d5 += "<" + e.getAttribute("href") + ">", e.hasAttribute("title") && (d5 += ' "' + e.getAttribute("title") + '"'), d5 += ")";
      }
      return d5;
    }), r2.subParser("makeMarkdown.list", function(e, u5, d5) {
      "use strict";
      var a7 = "";
      if (!e.hasChildNodes())
        return "";
      for (var s66 = e.childNodes, i3 = s66.length, c2 = e.getAttribute("start") || 1, t3 = 0; t3 < i3; ++t3)
        if (!(typeof s66[t3].tagName > "u" || s66[t3].tagName.toLowerCase() !== "li")) {
          var p8 = "";
          d5 === "ol" ? p8 = c2.toString() + ". " : p8 = "- ", a7 += p8 + r2.subParser("makeMarkdown.listItem")(s66[t3], u5), ++c2;
        }
      return a7 += `
<!-- -->
`, a7.trim();
    }), r2.subParser("makeMarkdown.listItem", function(e, u5) {
      "use strict";
      for (var d5 = "", a7 = e.childNodes, s66 = a7.length, i3 = 0; i3 < s66; ++i3)
        d5 += r2.subParser("makeMarkdown.node")(a7[i3], u5);
      return /\n$/.test(d5) ? d5 = d5.split(`
`).join(`
    `).replace(/^ {4}$/gm, "").replace(/\n\n+/g, `

`) : d5 += `
`, d5;
    }), r2.subParser("makeMarkdown.node", function(e, u5, d5) {
      "use strict";
      d5 = d5 || false;
      var a7 = "";
      if (e.nodeType === 3)
        return r2.subParser("makeMarkdown.txt")(e, u5);
      if (e.nodeType === 8)
        return "<!--" + e.data + `-->

`;
      if (e.nodeType !== 1)
        return "";
      var s66 = e.tagName.toLowerCase();
      switch (s66) {
        case "h1":
          d5 || (a7 = r2.subParser("makeMarkdown.header")(e, u5, 1) + `

`);
          break;
        case "h2":
          d5 || (a7 = r2.subParser("makeMarkdown.header")(e, u5, 2) + `

`);
          break;
        case "h3":
          d5 || (a7 = r2.subParser("makeMarkdown.header")(e, u5, 3) + `

`);
          break;
        case "h4":
          d5 || (a7 = r2.subParser("makeMarkdown.header")(e, u5, 4) + `

`);
          break;
        case "h5":
          d5 || (a7 = r2.subParser("makeMarkdown.header")(e, u5, 5) + `

`);
          break;
        case "h6":
          d5 || (a7 = r2.subParser("makeMarkdown.header")(e, u5, 6) + `

`);
          break;
        case "p":
          d5 || (a7 = r2.subParser("makeMarkdown.paragraph")(e, u5) + `

`);
          break;
        case "blockquote":
          d5 || (a7 = r2.subParser("makeMarkdown.blockquote")(e, u5) + `

`);
          break;
        case "hr":
          d5 || (a7 = r2.subParser("makeMarkdown.hr")(e, u5) + `

`);
          break;
        case "ol":
          d5 || (a7 = r2.subParser("makeMarkdown.list")(e, u5, "ol") + `

`);
          break;
        case "ul":
          d5 || (a7 = r2.subParser("makeMarkdown.list")(e, u5, "ul") + `

`);
          break;
        case "precode":
          d5 || (a7 = r2.subParser("makeMarkdown.codeBlock")(e, u5) + `

`);
          break;
        case "pre":
          d5 || (a7 = r2.subParser("makeMarkdown.pre")(e, u5) + `

`);
          break;
        case "table":
          d5 || (a7 = r2.subParser("makeMarkdown.table")(e, u5) + `

`);
          break;
        case "code":
          a7 = r2.subParser("makeMarkdown.codeSpan")(e, u5);
          break;
        case "em":
        case "i":
          a7 = r2.subParser("makeMarkdown.emphasis")(e, u5);
          break;
        case "strong":
        case "b":
          a7 = r2.subParser("makeMarkdown.strong")(e, u5);
          break;
        case "del":
          a7 = r2.subParser("makeMarkdown.strikethrough")(e, u5);
          break;
        case "a":
          a7 = r2.subParser("makeMarkdown.links")(e, u5);
          break;
        case "img":
          a7 = r2.subParser("makeMarkdown.image")(e, u5);
          break;
        default:
          a7 = e.outerHTML + `

`;
      }
      return a7;
    }), r2.subParser("makeMarkdown.paragraph", function(e, u5) {
      "use strict";
      var d5 = "";
      if (e.hasChildNodes())
        for (var a7 = e.childNodes, s66 = a7.length, i3 = 0; i3 < s66; ++i3)
          d5 += r2.subParser("makeMarkdown.node")(a7[i3], u5);
      return d5 = d5.trim(), d5;
    }), r2.subParser("makeMarkdown.pre", function(e, u5) {
      "use strict";
      var d5 = e.getAttribute("prenum");
      return "<pre>" + u5.preList[d5] + "</pre>";
    }), r2.subParser("makeMarkdown.strikethrough", function(e, u5) {
      "use strict";
      var d5 = "";
      if (e.hasChildNodes()) {
        d5 += "~~";
        for (var a7 = e.childNodes, s66 = a7.length, i3 = 0; i3 < s66; ++i3)
          d5 += r2.subParser("makeMarkdown.node")(a7[i3], u5);
        d5 += "~~";
      }
      return d5;
    }), r2.subParser("makeMarkdown.strong", function(e, u5) {
      "use strict";
      var d5 = "";
      if (e.hasChildNodes()) {
        d5 += "**";
        for (var a7 = e.childNodes, s66 = a7.length, i3 = 0; i3 < s66; ++i3)
          d5 += r2.subParser("makeMarkdown.node")(a7[i3], u5);
        d5 += "**";
      }
      return d5;
    }), r2.subParser("makeMarkdown.table", function(e, u5) {
      "use strict";
      var d5 = "", a7 = [[], []], s66 = e.querySelectorAll("thead>tr>th"), i3 = e.querySelectorAll("tbody>tr"), c2, t3;
      for (c2 = 0; c2 < s66.length; ++c2) {
        var p8 = r2.subParser("makeMarkdown.tableCell")(s66[c2], u5), l7 = "---";
        if (s66[c2].hasAttribute("style")) {
          var o2 = s66[c2].getAttribute("style").toLowerCase().replace(/\s/g, "");
          switch (o2) {
            case "text-align:left;":
              l7 = ":---";
              break;
            case "text-align:right;":
              l7 = "---:";
              break;
            case "text-align:center;":
              l7 = ":---:";
              break;
          }
        }
        a7[0][c2] = p8.trim(), a7[1][c2] = l7;
      }
      for (c2 = 0; c2 < i3.length; ++c2) {
        var h6 = a7.push([]) - 1, n3 = i3[c2].getElementsByTagName("td");
        for (t3 = 0; t3 < s66.length; ++t3) {
          var f4 = " ";
          typeof n3[t3] < "u" && (f4 = r2.subParser("makeMarkdown.tableCell")(n3[t3], u5)), a7[h6].push(f4);
        }
      }
      var _7 = 3;
      for (c2 = 0; c2 < a7.length; ++c2)
        for (t3 = 0; t3 < a7[c2].length; ++t3) {
          var m10 = a7[c2][t3].length;
          m10 > _7 && (_7 = m10);
        }
      for (c2 = 0; c2 < a7.length; ++c2) {
        for (t3 = 0; t3 < a7[c2].length; ++t3)
          c2 === 1 ? a7[c2][t3].slice(-1) === ":" ? a7[c2][t3] = r2.helper.padEnd(a7[c2][t3].slice(-1), _7 - 1, "-") + ":" : a7[c2][t3] = r2.helper.padEnd(a7[c2][t3], _7, "-") : a7[c2][t3] = r2.helper.padEnd(a7[c2][t3], _7);
        d5 += "| " + a7[c2].join(" | ") + ` |
`;
      }
      return d5.trim();
    }), r2.subParser("makeMarkdown.tableCell", function(e, u5) {
      "use strict";
      var d5 = "";
      if (!e.hasChildNodes())
        return "";
      for (var a7 = e.childNodes, s66 = a7.length, i3 = 0; i3 < s66; ++i3)
        d5 += r2.subParser("makeMarkdown.node")(a7[i3], u5, true);
      return d5.trim();
    }), r2.subParser("makeMarkdown.txt", function(e) {
      "use strict";
      var u5 = e.nodeValue;
      return u5 = u5.replace(/ +/g, " "), u5 = u5.replace(/¨NBSP;/g, " "), u5 = r2.helper.unescapeHTMLEntities(u5), u5 = u5.replace(/([*_~|`])/g, "\\$1"), u5 = u5.replace(/^(\s*)>/g, "\\$1>"), u5 = u5.replace(/^#/gm, "\\#"), u5 = u5.replace(/^(\s*)([-=]{3,})(\s*)$/, "$1\\$2$3"), u5 = u5.replace(/^( {0,3}\d+)\./gm, "$1\\."), u5 = u5.replace(/^( {0,3})([+-])/gm, "$1\\$2"), u5 = u5.replace(/]([\s]*)\(/g, "\\]$1\\("), u5 = u5.replace(/^ {0,3}\[([\S \t]*?)]:/gm, "\\[$1]:"), u5;
    });
    var re7 = this;
    typeof define == "function" && define.amd ? define(function() {
      "use strict";
      return r2;
    }) : typeof $4 < "u" && $4.exports ? $4.exports = r2 : re7.showdown = r2;
  }).call(X7);
});
var A = {};
fe(A, { default: () => he });
var oe = Q(q());
B(A, Q(q()));
var { default: J, ...le } = oe;
var he = J !== void 0 ? J : le;
var markdownConverter = new he.Converter();
var Markdown = ({ text }) => {
  const element2 = document.createElement("div");
  const indent22 = text.match(/\t* *\n( *)/)[1];
  text = text.replace(regex`${/^/}${indent22}`.gm, "");
  element2.innerHTML = markdownConverter.makeHtml(text);
  return element2;
};
var markdown_default = Markdown;
var toastOn = css22``;
var toastify = css22`
    padding: 12px 20px;
    color: #ffffff;
    display: inline-block;
    box-shadow: 0 3px 6px -1px rgba(0, 0, 0, 0.12), 0 10px 36px -4px rgba(77, 96, 232, 0.3);
    background: -webkit-linear-gradient(315deg, #73a5ff, #5477f5);
    background: linear-gradient(135deg, #73a5ff, #5477f5);
    position: fixed;
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
    border-radius: 2px;
    cursor: pointer;
    text-decoration: none;
    max-width: calc(50% - 20px);
    z-index: 2147483647;
    &${toastOn} {
        opacity: 1;
    }
`;
var toastClose = css22`
    background: transparent;
    border: 0;
    color: white;
    cursor: pointer;
    font-family: inherit;
    font-size: 1em;
    opacity: 0.4;
    padding: 0 5px;
`;
var toastifyRight = css22`
    right: 15px;
    @media only screen and (max-width: 360px) {
        margin-left: auto;
        margin-right: auto;
        left: 0;
        right: 0;
        max-width: fit-content;
    }
`;
var toastifyLeft = css22`
    left: 15px;
    @media only screen and (max-width: 360px) {
        margin-left: auto;
        margin-right: auto;
        left: 0;
        right: 0;
        max-width: fit-content;
    }
`;
var toastifyTop = css22`
    top: 50px;
`;
var toastifyBottom = css22`
    bottom: 50px;
`;
var toastifyRounded = css22`
    border-radius: 25px;
`;
var toastifyAvatar = css22`
    width: 1.5em;
    height: 1.5em;
    margin: -7px 5px;
    border-radius: 2px;
`;
var toastifyCenter = css22`
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
    max-width: fit-content;
    max-width: -moz-fit-content;
`;
var nameMapping = {
  right: toastifyRight,
  left: toastifyLeft,
  top: toastifyTop,
  bottom: toastifyBottom,
  rounded: toastifyRounded,
  avatar: toastifyAvatar,
  center: toastifyCenter
};
var Toastify = class {
  defaults = {
    oldestFirst: true,
    text: "Toastify is awesome!",
    node: void 0,
    duration: 3e3,
    selector: void 0,
    callback: function() {
    },
    destination: void 0,
    newWindow: false,
    close: false,
    gravity: toastifyBottom,
    positionLeft: false,
    position: "",
    backgroundColor: "",
    avatar: "",
    className: "",
    stopOnFocus: true,
    onClick: function() {
    },
    offset: { x: 0, y: 0 },
    escapeMarkup: true,
    ariaLive: "polite",
    style: { background: "" }
  };
  /**
  * Init the Toastify class
  * @example
  *     new Toastify({
  *         text: "This is a toast",
  *         duration: 3000
  *     }).showToast()
  *
  * @param {ToastifyConfigurationObject} options - The configuration object to configure Toastify
  * @param {string} [options.text=Hi there!] - Message to be displayed in the toast
  * @param {Element} [options.node] - Provide a node to be mounted inside the toast. node takes higher precedence over text
  * @param {number} [options.duration=3000] - Duration for which the toast should be displayed. -1 for permanent toast
  * @param {string} [options.selector] - CSS Selector on which the toast should be added
  * @param {url} [options.destination] - URL to which the browser should be navigated on click of the toast
  * @param {boolean} [options.newWindow=false] - Decides whether the destination should be opened in a new window or not
  * @param {boolean} [options.close=false] - To show the close icon or not
  * @param {string} [options.gravity=toastify-top] - To show the toast from top or bottom
  * @param {string} [options.position=right] - To show the toast on left or right
  * @param {string} [options.backgroundColor] - Sets the background color of the toast (To be deprecated)
  * @param {url} [options.avatar] - Image/icon to be shown before text
  * @param {string} [options.className] - Ability to provide custom class name for further customization
  * @param {boolean} [options.stopOnFocus] - To stop timer when hovered over the toast (Only if duration is set)
  * @param {Function} [options.callback] - Invoked when the toast is dismissed
  * @param {Function} [options.onClick] - Invoked when the toast is clicked
  * @param {Object} [options.offset] - Ability to add some offset to axis
  * @param {boolean} [options.escapeMarkup=true] - Toggle the default behavior of escaping HTML markup
  * @param {string} [options.ariaLive] - Announce the toast to screen readers
  * @param {Object} [options.style] - Use the HTML DOM style property to add styles to toast
  */
  constructor(options) {
    this.version = "1.12.0";
    this.options = {};
    this.toastElement = null;
    this._rootElement = document.body;
    this.options = Object.assign(this.defaults, options);
    if (this.options.backgroundColor) {
    }
    this.toastElement = null;
    this.options.gravity = options.gravity === "bottom" ? toastifyBottom : toastifyTop;
    this.options.stopOnFocus = options.stopOnFocus === void 0 ? true : options.stopOnFocus;
    if (options.backgroundColor) {
      this.options.style.background = options.backgroundColor;
    }
  }
  /**
  * Display the toast
  * @public
  */
  showToast() {
    this.toastElement = this._buildToast();
    if (typeof this.options.selector === "string") {
      this._rootElement = document.getElementById(this.options.selector);
    } else if (this.options.selector instanceof HTMLElement || this.options.selector instanceof ShadowRoot) {
      this._rootElement = this.options.selector;
    } else {
      this._rootElement = document.body;
    }
    if (!this._rootElement) {
      throw "Root element is not defined";
    }
    this._rootElement.insertBefore(this.toastElement, this._rootElement.firstChild);
    this._reposition();
    if (this.options.duration > 0) {
      this.toastElement.timeOutValue = window.setTimeout(() => {
        this._removeElement(this.toastElement);
      }, this.options.duration);
    }
    return this;
  }
  /**
  * Hide the toast
  * @public
  */
  hideToast() {
    if (this.toastElement.timeOutValue) {
      clearTimeout(this.toastElement.timeOutValue);
    }
    this._removeElement(this.toastElement);
  }
  /**
  * Build the Toastify element
  * @returns {Element}
  * @private
  */
  _buildToast() {
    if (!this.options) {
      throw "Toastify is not initialized";
    }
    let divElement = document.createElement("div");
    divElement.className = `${toastify} ${toastOn} ${this.options.className}`;
    divElement.className += ` ${nameMapping[this.options.position]}`;
    divElement.className += ` ${this.options.gravity}`;
    for (const property in this.options.style) {
      divElement.style[property] = this.options.style[property];
    }
    if (this.options.ariaLive) {
      divElement.setAttribute("aria-live", this.options.ariaLive);
    }
    if (this.options.node && this.options.node.nodeType === Node.ELEMENT_NODE) {
      divElement.appendChild(this.options.node);
    } else {
      if (this.options.escapeMarkup) {
        divElement.innerText = this.options.text;
      } else {
        divElement.innerHTML = this.options.text;
      }
      if (this.options.avatar !== "") {
        let avatarElement = document.createElement("img");
        avatarElement.src = this.options.avatar;
        avatarElement.className = toastifyAvatar;
        if (this.options.position == "left") {
          divElement.appendChild(avatarElement);
        } else {
          divElement.insertAdjacentElement("afterbegin", avatarElement);
        }
      }
    }
    if (this.options.close === true) {
      let closeElement = document.createElement("button");
      closeElement.type = "button";
      closeElement.setAttribute("aria-label", "Close");
      closeElement.className = toastClose;
      closeElement.innerHTML = "&#10006;";
      closeElement.addEventListener("click", (event) => {
        event.stopPropagation();
        this._removeElement(this.toastElement);
        window.clearTimeout(this.toastElement.timeOutValue);
      });
      const width = window.innerWidth > 0 ? window.innerWidth : screen.width;
      if (this.options.position == "left" && width > 360) {
        divElement.insertAdjacentElement("afterbegin", closeElement);
      } else {
        divElement.appendChild(closeElement);
      }
    }
    if (this.options.stopOnFocus && this.options.duration > 0) {
      divElement.addEventListener("mouseover", (event) => {
        window.clearTimeout(divElement.timeOutValue);
      });
      divElement.addEventListener("mouseleave", () => {
        divElement.timeOutValue = window.setTimeout(() => {
          this._removeElement(divElement);
        }, this.options.duration);
      });
    }
    if (typeof this.options.destination !== "undefined") {
      divElement.addEventListener("click", (event) => {
        event.stopPropagation();
        if (this.options.newWindow === true) {
          window.open(this.options.destination, "_blank");
        } else {
          window.location = this.options.destination;
        }
      });
    }
    if (typeof this.options.onClick === "function" && typeof this.options.destination === "undefined") {
      divElement.addEventListener("click", (event) => {
        event.stopPropagation();
        this.options.onClick();
      });
    }
    if (typeof this.options.offset === "object") {
      const x7 = this._getAxisOffsetAValue("x", this.options);
      const y9 = this._getAxisOffsetAValue("y", this.options);
      const xOffset = this.options.position == "left" ? x7 : `-${x7}`;
      const yOffset = this.options.gravity == toastifyTop ? y9 : `-${y9}`;
      divElement.style.transform = `translate(${xOffset},${yOffset})`;
    }
    return divElement;
  }
  /**
  * Remove the toast from the DOM
  * @param {Element} toastElement
  */
  _removeElement(toastElement) {
    toastElement.className = toastElement.className.replace(` ${toastOn}`, "");
    window.setTimeout(() => {
      if (this.options.node && this.options.node.parentNode) {
        this.options.node.parentNode.removeChild(this.options.node);
      }
      if (toastElement.parentNode) {
        toastElement.parentNode.removeChild(toastElement);
      }
      this.options.callback.call(toastElement);
      this._reposition();
    }, 400);
  }
  /**
  * Position the toast on the DOM
  * @private
  */
  _reposition() {
    let topLeftOffsetSize = {
      top: 15,
      bottom: 15
    };
    let topRightOffsetSize = {
      top: 15,
      bottom: 15
    };
    let offsetSize = {
      top: 15,
      bottom: 15
    };
    let allToasts = this._rootElement.querySelectorAll(`.${toastify}`);
    let classUsed;
    let topOrBottom;
    for (let i3 = 0; i3 < allToasts.length; i3++) {
      if (allToasts[i3].classList.contains(toastifyTop) === true) {
        classUsed = toastifyTop;
        topOrBottom = "top";
      } else {
        classUsed = toastifyBottom;
        topOrBottom = "bottom";
      }
      let height = allToasts[i3].offsetHeight;
      classUsed = classUsed.substr(9, classUsed.length - 1);
      let offset = 15;
      let width = window.innerWidth > 0 ? window.innerWidth : screen.width;
      if (width <= 360) {
        allToasts[i3].style[topOrBottom] = `${offsetSize[topOrBottom]}px`;
        offsetSize[topOrBottom] += height + offset;
      } else {
        if (allToasts[i3].classList.contains(toastifyLeft) === true) {
          allToasts[i3].style[topOrBottom] = `${topLeftOffsetSize[topOrBottom]}px`;
          topLeftOffsetSize[topOrBottom] += height + offset;
        } else {
          allToasts[i3].style[topOrBottom] = `${topRightOffsetSize[topOrBottom]}px`;
          topRightOffsetSize[topOrBottom] += height + offset;
        }
      }
    }
  }
  /**
  * Helper function to get offset
  * @param {string} axis - 'x' or 'y'
  * @param {ToastifyConfigurationObject} options - The options object containing the offset object
  */
  _getAxisOffsetAValue(axis, options) {
    if (options.offset[axis]) {
      if (isNaN(options.offset[axis])) {
        return options.offset[axis];
      } else {
        return `${options.offset[axis]}px`;
      }
    }
    return "0px";
  }
};
var showToast = (message, options) => {
  const toast = new Toastify({
    position: "right",
    gravity: "bottom",
    ...options,
    text: message
  });
  toast.showToast();
  return toast;
};
var helperElement = document.createElement("div");
helperElement.setAttribute("note", "STUFF WILL BREAK IF YOU DELETE ME");
helperElement.setAttribute("style", "position: fixed; top: 0; left: 0;");
window.addEventListener("load", () => document.body.prepend(helperElement));
var translateAlignment = (name2) => {
  if (name2 == "top" || name2 == "left") {
    return "flex-start";
  } else if (name2 == "bottom" || name2 == "right") {
    return "flex-end";
  } else {
    return name2;
  }
};
var columnClass = css22`
            display: flex;
            flex-direction: column;
            transition: all 0.4s ease-in-out 0s;
        `;
function Column({ verticalAlignment, horizontalAlignment, children, ...arg }) {
  arg = setup_class_styles_default(arg);
  arg.class = combine_classes_default(columnClass, arg.class);
  const justify = translateAlignment(verticalAlignment || "top");
  const align = translateAlignment(horizontalAlignment || "left");
  const verticalText = verticalAlignment == "center" ? "middle" : verticalAlignment;
  arg = setup_styles_default(arg, `
                display: flex;
                flex-direction: column;
                transition: all 0.4s ease-in-out 0s;
                justify-content: ${justify};
                align-items: ${align};
                text-align: ${horizontalAlignment};
                vertical-align: ${verticalText};
            `);
  return /* @__PURE__ */ html2("div", { ...arg }, children);
}
var rowClass = css22`
            display: flex;
            flex-direction: row;
            transition: all 0.4s ease-in-out 0s;
        `;
function Row({ verticalAlignment, horizontalAlignment, children, ...arg }) {
  arg = setup_class_styles_default(arg);
  arg.class = combine_classes_default(rowClass, arg.class);
  const justify = translateAlignment(horizontalAlignment || "left");
  const align = translateAlignment(verticalAlignment || "top");
  const verticalText = verticalAlignment == "center" ? "middle" : verticalAlignment;
  arg = setup_styles_default(arg, `
                display: flex;
                flex-direction: row;
                transition: all 0.4s ease-in-out 0s;
                justify-content: ${justify};
                align-items: ${align};
                text-align: ${horizontalAlignment};
                vertical-align: ${verticalText};
            `);
  return /* @__PURE__ */ html2("div", { ...arg }, children);
}
var codeClass = css22`
            white-space: pre;
            font-family: monospace, monospace;
            font-size: 100%;
            font: inherit;
            vertical-align: baseline;
            margin: 0;
            padding: 0;
            border: 0;
        `;
function Code({ children, ...arg }) {
  arg = setup_class_styles_default(arg);
  arg.class = combine_classes_default(codeClass, arg.class);
  return /* @__PURE__ */ html2("code", { ...arg }, children);
}
var inputClass = css22`
            margin: 0;
            font-family: inherit;
            font-size: inherit;
            line-height: inherit;
            overflow: visible;
        `;
function Input(arg) {
  arg = setup_class_styles_default(arg);
  arg.class = combine_classes_default(inputClass, arg.class);
  arg = setup_styles_default(arg, `
                margin: 0;
                font-family: inherit;
                font-size: inherit;
                line-height: inherit;
                overflow: visible;
            `);
  return /* @__PURE__ */ html2("input", { ...arg });
}
var buttonClass = css22`
            border-radius: 0;
            margin: 0;
            font-family: inherit;
            font-size: inherit;
            line-height: inherit;
            -webkit-appearance: button;
            overflow: visible;
            text-transform: none;
        `;
function Button(arg) {
  arg = setup_class_styles_default(arg);
  arg.class = combine_classes_default(buttonClass, arg.class);
  arg = setup_styles_default(arg, `
                border-radius: 0;
                margin: 0;
                font-family: inherit;
                font-size: inherit;
                line-height: inherit;
                -webkit-appearance: button;
                overflow: visible;
                text-transform: none;
            `);
  return /* @__PURE__ */ html2("button", { ...arg }, arg.children);
}
var checkboxClass = css22`
            box-sizing: border-box;
            padding: 0;
        `;
function Checkbox(arg) {
  arg = setup_class_styles_default(arg);
  arg.class = combine_classes_default(inputClass, checkboxClass, arg.class);
  const element2 = /* @__PURE__ */ html2("input", { type: "checkbox", ...arg });
  Object.defineProperties(element2, {
    value: {
      get() {
        this.checked;
      },
      set(value) {
        this.checked = value;
      }
    }
  });
  const propNames = Object.keys(arg);
  if (!propNames.includes("checked") && propNames.includes("value")) {
    element2.checked = arg.value;
  } else {
    element2.checked = arg.checked;
  }
  return element2;
}
var originalDisplayValueSymbol = Symbol("originalDisplayValue");
var dropdownPlaceholder = css22`
            overflow: visible;
        `;
var dropdownList = css22`
            overflow: auto;
            height: fit-content;
            max-height: 50vh;
        `;
function Dropdown({ children, ...arg }) {
  arg = setup_class_styles_default(arg);
  arg.class = combine_classes_default(dropdownList, arg.class);
  const placeholder = /* @__PURE__ */ html2(Column, { class: dropdownPlaceholder });
  const listOfOptions = /* @__PURE__ */ html2(Column, { class: dropdownList, ...arg }, children);
  for (const each of listOfOptions.children) {
    each[originalDisplayValueSymbol] = each.style.display;
  }
  const onMainClickOrInput = (event) => {
    placeholder.style.minHeight = `${listOfOptions.clientHeight}px`;
    placeholder.style.maxHeight = `${listOfOptions.clientHeight}px`;
    placeholder.style.minWidth = `${listOfOptions.clientWidth}px`;
    placeholder.style.maxWidth = `${listOfOptions.clientWidth}px`;
    const parent = listOfOptions.parentNode;
    parent.replaceChild(placeholder, listOfOptions);
    placeholder.appendChild(listOfOptions);
    for (const each of listOfOptions.children) {
      each.style.display = each[originalDisplayValueSymbol];
    }
  };
  const onOptionClickOrInput = (event) => {
    placeholder.selected = event.target;
    for (const each of listOfOptions.children) {
      each[originalDisplayValueSymbol] = each.style.display;
      if (each != element.selected) {
        each.style.display = "none";
      }
    }
    const parent = placeholder?.parentNode;
    if (parent?.replaceChild) {
      parent.replaceChild(listOfOptions, placeholder);
    }
  };
  listOfOptions.addEventListener("click", onMainClickOrInput);
  listOfOptions.addEventListener("input", onMainClickOrInput);
  for (const each of listOfOptions.children) {
    each.addEventListener("click", onOptionClickOrInput);
    each.addEventListener("input", onOptionClickOrInput);
  }
  onOptionClickOrInput({ target: args.default });
  return listOfOptions;
}
var components = {
  Column,
  Row,
  Code,
  Input,
  Button,
  Checkbox,
  Dropdown,
  Markdown: markdown_default
};
var askForFiles = async () => {
  return new Promise((resolve, reject) => {
    let value = null;
    let waitValue;
    let hasResolved = false;
    const cleanResolve = (returnValue) => {
      value = returnValue;
      if (hasResolved) {
        return;
      }
      if (!waitValue && returnValue.length == 0) {
        waitValue = setTimeout(() => {
          if (!hasResolved) {
            hasResolved = true;
            resolve(value);
          }
        }, 200);
      } else {
        clearTimeout(waitValue);
        hasResolved = true;
        resolve(value);
      }
      try {
        window.removeEventListener("focus", listener);
        helperElement.removeChild(filePicker);
      } catch (error) {
      }
    };
    const listener = () => cleanResolve([]);
    window.addEventListener("focus", listener);
    let filePicker = /* @__PURE__ */ html2(
      "input",
      {
        type: "file",
        onInput: (event) => {
          cleanResolve(event.target.files);
        },
        onBlur: (event) => {
          cleanResolve([]);
        },
        hidden: true
      }
    );
    helperElement.appendChild(filePicker);
    filePicker.click();
  });
};
var popUp = async ({ children, ...otherArgs }) => {
  const container = /* @__PURE__ */ html2(
    "div",
    {
      class: combine_classes_default(classIds.popUp, otherArgs.class),
      onClick: (event) => {
        if (event.target == container) {
          container.remove();
        }
      }
    },
    /* @__PURE__ */ html2(Column, { verticalAlignment: "top", horizontalAlignment: "center", style: "width: fit-content; height: 50vh; overflow-y: auto;" }, children)
  );
  helperElement.prepend(container);
  return container;
};

// https://deno.land/x/good_component@0.2.12/main/helpers/css.bundle.js
var __defProp2 = Object.defineProperty;
var __export2 = (target, all) => {
  for (var name2 in all)
    __defProp2(target, name2, { get: all[name2], enumerable: true });
};
function createCommonjsModule10(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire10(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfNotNamed4(n3) {
  return n3 && Object.prototype.hasOwnProperty.call(n3, "default") && Object.keys(n3).length === 1 ? n3["default"] : n3;
}
function commonjsRequire10() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var cache_exports2 = {};
__export2(cache_exports2, {
  default: () => cache_default2
});
var sheet_exports2 = {};
__export2(sheet_exports2, {
  StyleSheet: () => StyleSheet2,
  __moduleExports: () => emotionSheet_cjs2,
  default: () => sheet_default2
});
function createCommonjsModule22(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire22(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire22() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionSheet_cjs_prod2 = createCommonjsModule22(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i3 = 0; i3 < document.styleSheets.length; i3++) {
      if (document.styleSheets[i3].ownerNode === tag) {
        return document.styleSheets[i3];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet22 = /* @__PURE__ */ function() {
    function StyleSheet3(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? true : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet3.prototype;
    _proto.hydrate = function hydrate22(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert2(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (this.isSpeedy) {
        var sheet32 = sheetForTag(tag);
        try {
          sheet32.insertRule(rule, sheet32.cssRules.length);
        } catch (e) {
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush22() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
    };
    return StyleSheet3;
  }();
  exports.StyleSheet = StyleSheet22;
});
var emotionSheet_cjs2 = createCommonjsModule22(function(module) {
  {
    module.exports = emotionSheet_cjs_prod2;
  }
});
var StyleSheet2 = emotionSheet_cjs2.StyleSheet;
var sheet_default2 = emotionSheet_cjs2;
var stylis_exports2 = {};
__export2(stylis_exports2, {
  CHARSET: () => CHARSET2,
  COMMENT: () => COMMENT2,
  COUNTER_STYLE: () => COUNTER_STYLE2,
  DECLARATION: () => DECLARATION2,
  DOCUMENT: () => DOCUMENT2,
  FONT_FACE: () => FONT_FACE2,
  FONT_FEATURE_VALUES: () => FONT_FEATURE_VALUES2,
  IMPORT: () => IMPORT2,
  KEYFRAMES: () => KEYFRAMES2,
  MEDIA: () => MEDIA2,
  MOZ: () => MOZ2,
  MS: () => MS2,
  NAMESPACE: () => NAMESPACE2,
  PAGE: () => PAGE2,
  RULESET: () => RULESET2,
  SUPPORTS: () => SUPPORTS2,
  VIEWPORT: () => VIEWPORT2,
  WEBKIT: () => WEBKIT2,
  abs: () => abs2,
  alloc: () => alloc2,
  append: () => append2,
  assign: () => assign2,
  caret: () => caret2,
  char: () => char2,
  character: () => character2,
  characters: () => characters2,
  charat: () => charat2,
  column: () => column2,
  combine: () => combine2,
  comment: () => comment2,
  commenter: () => commenter2,
  compile: () => compile2,
  copy: () => copy2,
  dealloc: () => dealloc2,
  declaration: () => declaration2,
  default: () => stylis_default2,
  delimit: () => delimit2,
  delimiter: () => delimiter2,
  escaping: () => escaping2,
  from: () => from2,
  hash: () => hash3,
  identifier: () => identifier2,
  indexof: () => indexof2,
  length: () => length2,
  line: () => line2,
  match: () => match2,
  middleware: () => middleware2,
  namespace: () => namespace2,
  next: () => next2,
  node: () => node2,
  parse: () => parse2,
  peek: () => peek2,
  position: () => position2,
  prefix: () => prefix2,
  prefixer: () => prefixer2,
  prev: () => prev2,
  replace: () => replace2,
  ruleset: () => ruleset2,
  rulesheet: () => rulesheet2,
  serialize: () => serialize3,
  sizeof: () => sizeof2,
  slice: () => slice2,
  stringify: () => stringify2,
  strlen: () => strlen2,
  substr: () => substr2,
  token: () => token2,
  tokenize: () => tokenize2,
  tokenizer: () => tokenizer2,
  trim: () => trim2,
  whitespace: () => whitespace2
});
var MS2 = "-ms-";
var MOZ2 = "-moz-";
var WEBKIT2 = "-webkit-";
var COMMENT2 = "comm";
var RULESET2 = "rule";
var DECLARATION2 = "decl";
var PAGE2 = "@page";
var MEDIA2 = "@media";
var IMPORT2 = "@import";
var CHARSET2 = "@charset";
var VIEWPORT2 = "@viewport";
var SUPPORTS2 = "@supports";
var DOCUMENT2 = "@document";
var NAMESPACE2 = "@namespace";
var KEYFRAMES2 = "@keyframes";
var FONT_FACE2 = "@font-face";
var COUNTER_STYLE2 = "@counter-style";
var FONT_FEATURE_VALUES2 = "@font-feature-values";
var abs2 = Math.abs;
var from2 = String.fromCharCode;
var assign2 = Object.assign;
function hash3(value, length22) {
  return charat2(value, 0) ^ 45 ? (((length22 << 2 ^ charat2(value, 0)) << 2 ^ charat2(value, 1)) << 2 ^ charat2(value, 2)) << 2 ^ charat2(value, 3) : 0;
}
function trim2(value) {
  return value.trim();
}
function match2(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace2(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof2(value, search) {
  return value.indexOf(search);
}
function charat2(value, index) {
  return value.charCodeAt(index) | 0;
}
function substr2(value, begin, end) {
  return value.slice(begin, end);
}
function strlen2(value) {
  return value.length;
}
function sizeof2(value) {
  return value.length;
}
function append2(value, array) {
  return array.push(value), value;
}
function combine2(array, callback) {
  return array.map(callback).join("");
}
var line2 = 1;
var column2 = 1;
var length2 = 0;
var position2 = 0;
var character2 = 0;
var characters2 = "";
function node2(value, root, parent, type, props, children, length22) {
  return { value, root, parent, type, props, children, line: line2, column: column2, length: length22, return: "" };
}
function copy2(root, props) {
  return assign2(node2("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char2() {
  return character2;
}
function prev2() {
  character2 = position2 > 0 ? charat2(characters2, --position2) : 0;
  if (column2--, character2 === 10)
    column2 = 1, line2--;
  return character2;
}
function next2() {
  character2 = position2 < length2 ? charat2(characters2, position2++) : 0;
  if (column2++, character2 === 10)
    column2 = 1, line2++;
  return character2;
}
function peek2() {
  return charat2(characters2, position2);
}
function caret2() {
  return position2;
}
function slice2(begin, end) {
  return substr2(characters2, begin, end);
}
function token2(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc2(value) {
  return line2 = column2 = 1, length2 = strlen2(characters2 = value), position2 = 0, [];
}
function dealloc2(value) {
  return characters2 = "", value;
}
function delimit2(type) {
  return trim2(slice2(position2 - 1, delimiter2(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function tokenize2(value) {
  return dealloc2(tokenizer2(alloc2(value)));
}
function whitespace2(type) {
  while (character2 = peek2())
    if (character2 < 33)
      next2();
    else
      break;
  return token2(type) > 2 || token2(character2) > 3 ? "" : " ";
}
function tokenizer2(children) {
  while (next2())
    switch (token2(character2)) {
      case 0:
        append2(identifier2(position2 - 1), children);
        break;
      case 2:
        append2(delimit2(character2), children);
        break;
      default:
        append2(from2(character2), children);
    }
  return children;
}
function escaping2(index, count3) {
  while (--count3 && next2())
    if (character2 < 48 || character2 > 102 || character2 > 57 && character2 < 65 || character2 > 70 && character2 < 97)
      break;
  return slice2(index, caret2() + (count3 < 6 && peek2() == 32 && next2() == 32));
}
function delimiter2(type) {
  while (next2())
    switch (character2) {
      case type:
        return position2;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter2(character2);
        break;
      case 40:
        if (type === 41)
          delimiter2(type);
        break;
      case 92:
        next2();
        break;
    }
  return position2;
}
function commenter2(type, index) {
  while (next2())
    if (type + character2 === 47 + 10)
      break;
    else if (type + character2 === 42 + 42 && peek2() === 47)
      break;
  return "/*" + slice2(index, position2 - 1) + "*" + from2(type === 47 ? type : next2());
}
function identifier2(index) {
  while (!token2(peek2()))
    next2();
  return slice2(index, position2);
}
function compile2(value) {
  return dealloc2(parse2("", null, null, null, [""], value = alloc2(value), 0, [0], value));
}
function parse2(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length22 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character22 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters22 = type;
  while (scanning)
    switch (previous = character22, character22 = next2()) {
      case 40:
        if (previous != 108 && charat2(characters22, length22 - 1) == 58) {
          if (indexof2(characters22 += replace2(delimit2(character22), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters22 += delimit2(character22);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters22 += whitespace2(previous);
        break;
      case 92:
        characters22 += escaping2(caret2() - 1, 7);
        continue;
      case 47:
        switch (peek2()) {
          case 42:
          case 47:
            append2(comment2(commenter2(next2(), caret2()), root, parent), declarations);
            break;
          default:
            characters22 += "/";
        }
        break;
      case 123 * variable:
        points[index++] = strlen2(characters22) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character22) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (property > 0 && strlen2(characters22) - length22)
              append2(property > 32 ? declaration2(characters22 + ";", rule, parent, length22 - 1) : declaration2(replace2(characters22, " ", "") + ";", rule, parent, length22 - 2), declarations);
            break;
          case 59:
            characters22 += ";";
          default:
            append2(reference = ruleset2(characters22, root, parent, index, offset, rules, points, type, props = [], children = [], length22), rulesets);
            if (character22 === 123)
              if (offset === 0)
                parse2(characters22, root, reference, reference, props, rulesets, length22, points, children);
              else
                switch (atrule === 99 && charat2(characters22, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 109:
                  case 115:
                    parse2(value, reference, reference, rule && append2(ruleset2(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length22), children), rules, children, length22, points, rule ? props : children);
                    break;
                  default:
                    parse2(characters22, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type = characters22 = "", length22 = pseudo;
        break;
      case 58:
        length22 = 1 + strlen2(characters22), property = previous;
      default:
        if (variable < 1) {
          if (character22 == 123)
            --variable;
          else if (character22 == 125 && variable++ == 0 && prev2() == 125)
            continue;
        }
        switch (characters22 += from2(character22), character22 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters22 += "\f", -1);
            break;
          case 44:
            points[index++] = (strlen2(characters22) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek2() === 45)
              characters22 += delimit2(next2());
            atrule = peek2(), offset = length22 = strlen2(type = characters22 += identifier2(caret2())), character22++;
            break;
          case 45:
            if (previous === 45 && strlen2(characters22) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset2(value, root, parent, index, offset, rules, points, type, props, children, length22) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof2(rule);
  for (var i3 = 0, j11 = 0, k5 = 0; i3 < index; ++i3)
    for (var x7 = 0, y9 = substr2(value, post + 1, post = abs2(j11 = points[i3])), z9 = value; x7 < size; ++x7)
      if (z9 = trim2(j11 > 0 ? rule[x7] + " " + y9 : replace2(y9, /&\f/g, rule[x7])))
        props[k5++] = z9;
  return node2(value, root, parent, offset === 0 ? RULESET2 : type, props, children, length22);
}
function comment2(value, root, parent) {
  return node2(value, root, parent, COMMENT2, from2(char2()), substr2(value, 2, -2), 0);
}
function declaration2(value, root, parent, length22) {
  return node2(value, root, parent, DECLARATION2, substr2(value, 0, length22), substr2(value, length22 + 1, -1), length22);
}
function prefix2(value, length22, children) {
  switch (hash3(value, length22)) {
    case 5103:
      return WEBKIT2 + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT2 + value + value;
    case 4789:
      return MOZ2 + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT2 + value + MOZ2 + value + MS2 + value + value;
    case 5936:
      switch (charat2(value, length22 + 11)) {
        case 114:
          return WEBKIT2 + value + MS2 + replace2(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT2 + value + MS2 + replace2(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT2 + value + MS2 + replace2(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
    case 6828:
    case 4268:
    case 2903:
      return WEBKIT2 + value + MS2 + value + value;
    case 6165:
      return WEBKIT2 + value + MS2 + "flex-" + value + value;
    case 5187:
      return WEBKIT2 + value + replace2(value, /(\w+).+(:[^]+)/, WEBKIT2 + "box-$1$2" + MS2 + "flex-$1$2") + value;
    case 5443:
      return WEBKIT2 + value + MS2 + "flex-item-" + replace2(value, /flex-|-self/g, "") + (!match2(value, /flex-|baseline/) ? MS2 + "grid-row-" + replace2(value, /flex-|-self/g, "") : "") + value;
    case 4675:
      return WEBKIT2 + value + MS2 + "flex-line-pack" + replace2(value, /align-content|flex-|-self/g, "") + value;
    case 5548:
      return WEBKIT2 + value + MS2 + replace2(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT2 + value + MS2 + replace2(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT2 + "box-" + replace2(value, "-grow", "") + WEBKIT2 + value + MS2 + replace2(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT2 + replace2(value, /([^-])(transform)/g, "$1" + WEBKIT2 + "$2") + value;
    case 6187:
      return replace2(replace2(replace2(value, /(zoom-|grab)/, WEBKIT2 + "$1"), /(image-set)/, WEBKIT2 + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace2(value, /(image-set\([^]*)/, WEBKIT2 + "$1$`$1");
    case 4968:
      return replace2(replace2(value, /(.+:)(flex-)?(.*)/, WEBKIT2 + "box-pack:$3" + MS2 + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT2 + value + value;
    case 4200:
      if (!match2(value, /flex-|baseline/))
        return MS2 + "grid-column-align" + substr2(value, length22) + value;
      break;
    case 2592:
    case 3360:
      return MS2 + replace2(value, "template-", "") + value;
    case 4384:
    case 3616:
      if (children && children.some(function(element2, index) {
        return length22 = index, match2(element2.props, /grid-\w+-end/);
      })) {
        return ~indexof2(value + (children = children[length22].value), "span") ? value : MS2 + replace2(value, "-start", "") + value + MS2 + "grid-row-span:" + (~indexof2(children, "span") ? match2(children, /\d+/) : +match2(children, /\d+/) - +match2(value, /\d+/)) + ";";
      }
      return MS2 + replace2(value, "-start", "") + value;
    case 4896:
    case 4128:
      return children && children.some(function(element2) {
        return match2(element2.props, /grid-\w+-start/);
      }) ? value : MS2 + replace2(replace2(value, "-end", "-span"), "span ", "") + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace2(value, /(.+)-inline(.+)/, WEBKIT2 + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen2(value) - 1 - length22 > 6)
        switch (charat2(value, length22 + 1)) {
          case 109:
            if (charat2(value, length22 + 4) !== 45)
              break;
          case 102:
            return replace2(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT2 + "$2-$3$1" + MOZ2 + (charat2(value, length22 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof2(value, "stretch") ? prefix2(replace2(value, "stretch", "fill-available"), length22, children) + value : value;
        }
      break;
    case 5152:
    case 5920:
      return replace2(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_7, a7, b8, c2, d5, e, f4) {
        return MS2 + a7 + ":" + b8 + f4 + (c2 ? MS2 + a7 + "-span:" + (d5 ? e : +e - +b8) + f4 : "") + value;
      });
    case 4949:
      if (charat2(value, length22 + 6) === 121)
        return replace2(value, ":", ":" + WEBKIT2) + value;
      break;
    case 6444:
      switch (charat2(value, charat2(value, 14) === 45 ? 18 : 11)) {
        case 120:
          return replace2(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT2 + (charat2(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT2 + "$2$3$1" + MS2 + "$2box$3") + value;
        case 100:
          return replace2(value, ":", ":" + MS2) + value;
      }
      break;
    case 5719:
    case 2647:
    case 2135:
    case 3927:
    case 2391:
      return replace2(value, "scroll-", "scroll-snap-") + value;
  }
  return value;
}
function serialize3(children, callback) {
  var output = "";
  var length22 = sizeof2(children);
  for (var i3 = 0; i3 < length22; i3++)
    output += callback(children[i3], i3, children, callback) || "";
  return output;
}
function stringify2(element2, index, children, callback) {
  switch (element2.type) {
    case IMPORT2:
    case DECLARATION2:
      return element2.return = element2.return || element2.value;
    case COMMENT2:
      return "";
    case KEYFRAMES2:
      return element2.return = element2.value + "{" + serialize3(element2.children, callback) + "}";
    case RULESET2:
      element2.value = element2.props.join(",");
  }
  return strlen2(children = serialize3(element2.children, callback)) ? element2.return = element2.value + "{" + children + "}" : "";
}
function middleware2(collection) {
  var length22 = sizeof2(collection);
  return function(element2, index, children, callback) {
    var output = "";
    for (var i3 = 0; i3 < length22; i3++)
      output += collection[i3](element2, index, children, callback) || "";
    return output;
  };
}
function rulesheet2(callback) {
  return function(element2) {
    if (!element2.root) {
      if (element2 = element2.return)
        callback(element2);
    }
  };
}
function prefixer2(element2, index, children, callback) {
  if (element2.length > -1) {
    if (!element2.return)
      switch (element2.type) {
        case DECLARATION2:
          element2.return = prefix2(element2.value, element2.length, children);
          return;
        case KEYFRAMES2:
          return serialize3([copy2(element2, { value: replace2(element2.value, "@", "@" + WEBKIT2) })], callback);
        case RULESET2:
          if (element2.length)
            return combine2(element2.props, function(value) {
              switch (match2(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize3([copy2(element2, { props: [replace2(value, /:(read-\w+)/, ":" + MOZ2 + "$1")] })], callback);
                case "::placeholder":
                  return serialize3([
                    copy2(element2, { props: [replace2(value, /:(plac\w+)/, ":" + WEBKIT2 + "input-$1")] }),
                    copy2(element2, { props: [replace2(value, /:(plac\w+)/, ":" + MOZ2 + "$1")] }),
                    copy2(element2, { props: [replace2(value, /:(plac\w+)/, MS2 + "input-$1")] })
                  ], callback);
              }
              return "";
            });
      }
  }
}
function namespace2(element2) {
  switch (element2.type) {
    case RULESET2:
      element2.props = element2.props.map(function(value) {
        return combine2(tokenize2(value), function(value2, index, children) {
          switch (charat2(value2, 0)) {
            case 12:
              return substr2(value2, 1, strlen2(value2));
            case 0:
            case 40:
            case 43:
            case 62:
            case 126:
              return value2;
            case 58:
              if (children[++index] === "global")
                children[index] = "", children[++index] = "\f" + substr2(children[index], index = 1, -1);
            case 32:
              return index === 1 ? "" : value2;
            default:
              switch (index) {
                case 0:
                  element2 = value2;
                  return sizeof2(children) > 1 ? "" : value2;
                case (index = sizeof2(children) - 1):
                case 2:
                  return index === 2 ? value2 + element2 + element2 : value2 + element2;
                default:
                  return value2;
              }
          }
        });
      });
  }
}
var stylis_default2 = null;
var weak_memoize_exports2 = {};
__export2(weak_memoize_exports2, {
  default: () => weak_memoize_default2
});
function createCommonjsModule32(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire32(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire32() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionWeakMemoize_cjs_prod2 = createCommonjsModule32(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var weakMemoize22 = function weakMemoize222(func) {
    var cache3 = /* @__PURE__ */ new WeakMap();
    return function(arg) {
      if (cache3.has(arg)) {
        return cache3.get(arg);
      }
      var ret = func(arg);
      cache3.set(arg, ret);
      return ret;
    };
  };
  exports.default = weakMemoize22;
});
var emotionWeakMemoize_cjs2 = createCommonjsModule32(function(module) {
  {
    module.exports = emotionWeakMemoize_cjs_prod2;
  }
});
var weak_memoize_default2 = emotionWeakMemoize_cjs2;
var memoize_exports2 = {};
__export2(memoize_exports2, {
  default: () => memoize_default2
});
function createCommonjsModule42(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire42(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire42() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionMemoize_cjs_prod2 = createCommonjsModule42(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function memoize32(fn2) {
    var cache3 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache3[arg] === void 0)
        cache3[arg] = fn2(arg);
      return cache3[arg];
    };
  }
  exports.default = memoize32;
});
var emotionMemoize_cjs2 = createCommonjsModule42(function(module) {
  {
    module.exports = emotionMemoize_cjs_prod2;
  }
});
var memoize_default2 = emotionMemoize_cjs2;
function createCommonjsModule52(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire52(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfNotNamed22(n3) {
  return n3 && Object.prototype.hasOwnProperty.call(n3, "default") && Object.keys(n3).length === 1 ? n3["default"] : n3;
}
function commonjsRequire52() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var sheet3 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed22(sheet_exports2);
var stylis2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed22(stylis_exports2);
var weakMemoize2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed22(weak_memoize_exports2);
var memoize3 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed22(memoize_exports2);
var emotionCache_cjs_prod2 = createCommonjsModule52(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function _interopDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize2);
  var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character22 = 0;
    while (true) {
      previous = character22;
      character22 = stylis2.peek();
      if (previous === 38 && character22 === 12) {
        points[index] = 1;
      }
      if (stylis2.token(character22)) {
        break;
      }
      stylis2.next();
    }
    return stylis2.slice(begin, stylis2.position);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character22 = 44;
    do {
      switch (stylis2.token(character22)) {
        case 0:
          if (character22 === 38 && stylis2.peek() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(stylis2.position - 1, points, index);
          break;
        case 2:
          parsed[index] += stylis2.delimit(character22);
          break;
        case 4:
          if (character22 === 44) {
            parsed[++index] = stylis2.peek() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        default:
          parsed[index] += stylis2.from(character22);
      }
    } while (character22 = stylis2.next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return stylis2.dealloc(toRules(stylis2.alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element2) {
    if (element2.type !== "rule" || !element2.parent || element2.length < 1) {
      return;
    }
    var value = element2.value, parent = element2.parent;
    var isImplicitRule = element2.column === parent.column && element2.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element2.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element2, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i3 = 0, k5 = 0; i3 < rules.length; i3++) {
      for (var j11 = 0; j11 < parentRules.length; j11++, k5++) {
        element2.props[k5] = points[i3] ? rules[i3].replace(/&\f/g, parentRules[j11]) : parentRules[j11] + " " + rules[i3];
      }
    }
  };
  var removeLabel = function removeLabel2(element2) {
    if (element2.type === "decl") {
      var value = element2.value;
      if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
        element2["return"] = "";
        element2.value = "";
      }
    }
  };
  function prefix22(value, length22) {
    switch (stylis2.hash(value, length22)) {
      case 5103:
        return stylis2.WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return stylis2.WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return stylis2.WEBKIT + value + stylis2.MOZ + value + stylis2.MS + value + value;
      case 6828:
      case 4268:
        return stylis2.WEBKIT + value + stylis2.MS + value + value;
      case 6165:
        return stylis2.WEBKIT + value + stylis2.MS + "flex-" + value + value;
      case 5187:
        return stylis2.WEBKIT + value + stylis2.replace(value, /(\w+).+(:[^]+)/, stylis2.WEBKIT + "box-$1$2" + stylis2.MS + "flex-$1$2") + value;
      case 5443:
        return stylis2.WEBKIT + value + stylis2.MS + "flex-item-" + stylis2.replace(value, /flex-|-self/, "") + value;
      case 4675:
        return stylis2.WEBKIT + value + stylis2.MS + "flex-line-pack" + stylis2.replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return stylis2.WEBKIT + value + stylis2.MS + stylis2.replace(value, "shrink", "negative") + value;
      case 5292:
        return stylis2.WEBKIT + value + stylis2.MS + stylis2.replace(value, "basis", "preferred-size") + value;
      case 6060:
        return stylis2.WEBKIT + "box-" + stylis2.replace(value, "-grow", "") + stylis2.WEBKIT + value + stylis2.MS + stylis2.replace(value, "grow", "positive") + value;
      case 4554:
        return stylis2.WEBKIT + stylis2.replace(value, /([^-])(transform)/g, "$1" + stylis2.WEBKIT + "$2") + value;
      case 6187:
        return stylis2.replace(stylis2.replace(stylis2.replace(value, /(zoom-|grab)/, stylis2.WEBKIT + "$1"), /(image-set)/, stylis2.WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return stylis2.replace(value, /(image-set\([^]*)/, stylis2.WEBKIT + "$1$`$1");
      case 4968:
        return stylis2.replace(stylis2.replace(value, /(.+:)(flex-)?(.*)/, stylis2.WEBKIT + "box-pack:$3" + stylis2.MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + stylis2.WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return stylis2.replace(value, /(.+)-inline(.+)/, stylis2.WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (stylis2.strlen(value) - 1 - length22 > 6)
          switch (stylis2.charat(value, length22 + 1)) {
            case 109:
              if (stylis2.charat(value, length22 + 4) !== 45)
                break;
            case 102:
              return stylis2.replace(value, /(.+:)(.+)-([^]+)/, "$1" + stylis2.WEBKIT + "$2-$3$1" + stylis2.MOZ + (stylis2.charat(value, length22 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~stylis2.indexof(value, "stretch") ? prefix22(stylis2.replace(value, "stretch", "fill-available"), length22) + value : value;
          }
        break;
      case 4949:
        if (stylis2.charat(value, length22 + 1) !== 115)
          break;
      case 6444:
        switch (stylis2.charat(value, stylis2.strlen(value) - 3 - (~stylis2.indexof(value, "!important") && 10))) {
          case 107:
            return stylis2.replace(value, ":", ":" + stylis2.WEBKIT) + value;
          case 101:
            return stylis2.replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + stylis2.WEBKIT + (stylis2.charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + stylis2.WEBKIT + "$2$3$1" + stylis2.MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (stylis2.charat(value, length22 + 11)) {
          case 114:
            return stylis2.WEBKIT + value + stylis2.MS + stylis2.replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return stylis2.WEBKIT + value + stylis2.MS + stylis2.replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return stylis2.WEBKIT + value + stylis2.MS + stylis2.replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return stylis2.WEBKIT + value + stylis2.MS + value + value;
    }
    return value;
  }
  var prefixer22 = function prefixer222(element2, index, children, callback) {
    if (element2.length > -1) {
      if (!element2["return"])
        switch (element2.type) {
          case stylis2.DECLARATION:
            element2["return"] = prefix22(element2.value, element2.length);
            break;
          case stylis2.KEYFRAMES:
            return stylis2.serialize([stylis2.copy(element2, {
              value: stylis2.replace(element2.value, "@", "@" + stylis2.WEBKIT)
            })], callback);
          case stylis2.RULESET:
            if (element2.length)
              return stylis2.combine(element2.props, function(value) {
                switch (stylis2.match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return stylis2.serialize([stylis2.copy(element2, {
                      props: [stylis2.replace(value, /:(read-\w+)/, ":" + stylis2.MOZ + "$1")]
                    })], callback);
                  case "::placeholder":
                    return stylis2.serialize([stylis2.copy(element2, {
                      props: [stylis2.replace(value, /:(plac\w+)/, ":" + stylis2.WEBKIT + "input-$1")]
                    }), stylis2.copy(element2, {
                      props: [stylis2.replace(value, /:(plac\w+)/, ":" + stylis2.MOZ + "$1")]
                    }), stylis2.copy(element2, {
                      props: [stylis2.replace(value, /:(plac\w+)/, stylis2.MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
        }
    }
  };
  var isBrowser = typeof document !== "undefined";
  var getServerStylisCache = isBrowser ? void 0 : weakMemoize__default["default"](function() {
    return memoize__default["default"](function() {
      var cache3 = {};
      return function(name2) {
        return cache3[name2];
      };
    });
  });
  var defaultStylisPlugins = [prefixer22];
  var createCache22 = function createCache222(options) {
    var key2 = options.key;
    if (isBrowser && key2 === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node22) {
        var dataEmotionAttribute = node22.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node22);
        node22.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    if (isBrowser) {
      container = options.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key2 + ' "]'), function(node22) {
        var attrib = node22.getAttribute("data-emotion").split(" ");
        for (var i3 = 1; i3 < attrib.length; i3++) {
          inserted[attrib[i3]] = true;
        }
        nodesToHydrate.push(node22);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (isBrowser) {
      var currentSheet;
      var finalizingPlugins = [stylis2.stringify, stylis2.rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = stylis2.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis$12 = function stylis$13(styles) {
        return stylis2.serialize(stylis2.compile(styles), serializer);
      };
      _insert = function insert2(selector, serialized, sheet222, shouldCache) {
        currentSheet = sheet222;
        stylis$12(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache3.inserted[serialized.name] = true;
        }
      };
    } else {
      var _finalizingPlugins = [stylis2.stringify];
      var _serializer = stylis2.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
      var _stylis = function _stylis2(styles) {
        return stylis2.serialize(stylis2.compile(styles), _serializer);
      };
      var serverStylisCache = getServerStylisCache(stylisPlugins)(key2);
      var getRules2 = function getRules3(selector, serialized) {
        var name2 = serialized.name;
        if (serverStylisCache[name2] === void 0) {
          serverStylisCache[name2] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        }
        return serverStylisCache[name2];
      };
      _insert = function _insert2(selector, serialized, sheet222, shouldCache) {
        var name2 = serialized.name;
        var rules = getRules2(selector, serialized);
        if (cache3.compat === void 0) {
          if (shouldCache) {
            cache3.inserted[name2] = true;
          }
          return rules;
        } else {
          if (shouldCache) {
            cache3.inserted[name2] = rules;
          } else {
            return rules;
          }
        }
      };
    }
    var cache3 = {
      key: key2,
      sheet: new sheet3.StyleSheet({
        key: key2,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache3.sheet.hydrate(nodesToHydrate);
    return cache3;
  };
  exports.default = createCache22;
});
var emotionCache_cjs2 = createCommonjsModule52(function(module) {
  {
    module.exports = emotionCache_cjs_prod2;
  }
});
var cache_default2 = emotionCache_cjs2;
var serialize_exports2 = {};
__export2(serialize_exports2, {
  __moduleExports: () => emotionSerialize_cjs2,
  default: () => serialize_default2,
  serializeStyles: () => serializeStyles2
});
var hash_exports2 = {};
__export2(hash_exports2, {
  default: () => hash_default3
});
function createCommonjsModule62(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire62(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire62() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionHash_cjs_prod2 = createCommonjsModule62(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function murmur2(str) {
    var h6 = 0;
    var k5, i3 = 0, len = str.length;
    for (; len >= 4; ++i3, len -= 4) {
      k5 = str.charCodeAt(i3) & 255 | (str.charCodeAt(++i3) & 255) << 8 | (str.charCodeAt(++i3) & 255) << 16 | (str.charCodeAt(++i3) & 255) << 24;
      k5 = (k5 & 65535) * 1540483477 + ((k5 >>> 16) * 59797 << 16);
      k5 ^= k5 >>> 24;
      h6 = (k5 & 65535) * 1540483477 + ((k5 >>> 16) * 59797 << 16) ^ (h6 & 65535) * 1540483477 + ((h6 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h6 ^= (str.charCodeAt(i3 + 2) & 255) << 16;
      case 2:
        h6 ^= (str.charCodeAt(i3 + 1) & 255) << 8;
      case 1:
        h6 ^= str.charCodeAt(i3) & 255;
        h6 = (h6 & 65535) * 1540483477 + ((h6 >>> 16) * 59797 << 16);
    }
    h6 ^= h6 >>> 13;
    h6 = (h6 & 65535) * 1540483477 + ((h6 >>> 16) * 59797 << 16);
    return ((h6 ^ h6 >>> 15) >>> 0).toString(36);
  }
  exports.default = murmur2;
});
var emotionHash_cjs2 = createCommonjsModule62(function(module) {
  {
    module.exports = emotionHash_cjs_prod2;
  }
});
var hash_default3 = emotionHash_cjs2;
var unitless_exports2 = {};
__export2(unitless_exports2, {
  default: () => unitless_default2
});
function createCommonjsModule72(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire72(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire72() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionUnitless_cjs_prod2 = createCommonjsModule72(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  exports.default = unitlessKeys;
});
var emotionUnitless_cjs2 = createCommonjsModule72(function(module) {
  {
    module.exports = emotionUnitless_cjs_prod2;
  }
});
var unitless_default2 = emotionUnitless_cjs2;
function createCommonjsModule82(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire82(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfNotNamed32(n3) {
  return n3 && Object.prototype.hasOwnProperty.call(n3, "default") && Object.keys(n3).length === 1 ? n3["default"] : n3;
}
function commonjsRequire82() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var hashString2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed32(hash_exports2);
var unitless2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed32(unitless_exports2);
var memoize22 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed32(memoize_exports2);
var emotionSerialize_cjs_prod2 = createCommonjsModule82(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function _interopDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var hashString__default = /* @__PURE__ */ _interopDefault(hashString2);
  var unitless__default = /* @__PURE__ */ _interopDefault(unitless2);
  var memoize__default = /* @__PURE__ */ _interopDefault(memoize22);
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ memoize__default["default"](function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key2, value) {
    switch (key2) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match22, p1, p22) {
            cursor = {
              name: p1,
              styles: p22,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitless__default["default"][key2] !== 1 && !isCustomProperty(key2) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next22 = interpolation.next;
          if (next22 !== void 0) {
            while (next22 !== void 0) {
              cursor = {
                name: next22.name,
                styles: next22.styles,
                next: cursor
              };
              next22 = next22.next;
            }
          }
          var styles = interpolation.styles + ";";
          return styles;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string2 = "";
    if (Array.isArray(obj)) {
      for (var i3 = 0; i3 < obj.length; i3++) {
        string2 += handleInterpolation(mergedProps, registered, obj[i3]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string2 += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string2 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && false) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i2 = 0; _i2 < value.length; _i2++) {
              if (isProcessableValue(value[_i2])) {
                string2 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i2]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string2 += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                string2 += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string2;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var cursor;
  var serializeStyles22 = function serializeStyles3(args2, registered, mergedProps) {
    if (args2.length === 1 && typeof args2[0] === "object" && args2[0] !== null && args2[0].styles !== void 0) {
      return args2[0];
    }
    var stringMode = true;
    var styles = "";
    cursor = void 0;
    var strings = args2[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles += handleInterpolation(mergedProps, registered, strings);
    } else {
      styles += strings[0];
    }
    for (var i3 = 1; i3 < args2.length; i3++) {
      styles += handleInterpolation(mergedProps, registered, args2[i3]);
      if (stringMode) {
        styles += strings[i3];
      }
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match22;
    while ((match22 = labelPattern.exec(styles)) !== null) {
      identifierName += "-" + match22[1];
    }
    var name2 = hashString__default["default"](styles) + identifierName;
    return {
      name: name2,
      styles,
      next: cursor
    };
  };
  exports.serializeStyles = serializeStyles22;
});
var emotionSerialize_cjs2 = createCommonjsModule82(function(module) {
  {
    module.exports = emotionSerialize_cjs_prod2;
  }
});
var serialize_default2 = emotionSerialize_cjs2;
var serializeStyles2 = emotionSerialize_cjs2.serializeStyles;
var utils_exports2 = {};
__export2(utils_exports2, {
  __moduleExports: () => emotionUtils_cjs2,
  default: () => utils_default2,
  getRegisteredStyles: () => getRegisteredStyles3,
  insertStyles: () => insertStyles2,
  registerStyles: () => registerStyles2
});
function createCommonjsModule92(fn2, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire92(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn2(module, module.exports), module.exports;
}
function commonjsRequire92() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var emotionUtils_cjs_prod2 = createCommonjsModule92(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var isBrowser = typeof document !== "undefined";
  function getRegisteredStyles222(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles22 = function registerStyles3(cache3, serialized, isStringTag) {
    var className = cache3.key + "-" + serialized.name;
    if ((isStringTag === false || isBrowser === false && cache3.compat !== void 0) && cache3.registered[className] === void 0) {
      cache3.registered[className] = serialized.styles;
    }
  };
  var insertStyles22 = function insertStyles3(cache3, serialized, isStringTag) {
    registerStyles22(cache3, serialized, isStringTag);
    var className = cache3.key + "-" + serialized.name;
    if (cache3.inserted[serialized.name] === void 0) {
      var stylesForSSR = "";
      var current = serialized;
      do {
        var maybeStyles = cache3.insert(serialized === current ? "." + className : "", current, cache3.sheet, true);
        if (!isBrowser && maybeStyles !== void 0) {
          stylesForSSR += maybeStyles;
        }
        current = current.next;
      } while (current !== void 0);
      if (!isBrowser && stylesForSSR.length !== 0) {
        return stylesForSSR;
      }
    }
  };
  exports.getRegisteredStyles = getRegisteredStyles222;
  exports.insertStyles = insertStyles22;
  exports.registerStyles = registerStyles22;
});
var emotionUtils_cjs2 = createCommonjsModule92(function(module) {
  {
    module.exports = emotionUtils_cjs_prod2;
  }
});
var utils_default2 = emotionUtils_cjs2;
var getRegisteredStyles3 = emotionUtils_cjs2.getRegisteredStyles;
var insertStyles2 = emotionUtils_cjs2.insertStyles;
var registerStyles2 = emotionUtils_cjs2.registerStyles;
var createCache2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed4(cache_exports2);
var serialize22 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed4(serialize_exports2);
var utils2 = /* @__PURE__ */ getDefaultExportFromNamespaceIfNotNamed4(utils_exports2);
var emotionCssCreateInstance_cjs_prod2 = createCommonjsModule10(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function _interopDefault(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var createCache__default = /* @__PURE__ */ _interopDefault(createCache2);
  function insertWithoutScoping(cache222, serialized) {
    if (cache222.inserted[serialized.name] === void 0) {
      return cache222.insert("", serialized, cache222.sheet, true);
    }
  }
  function merge22(registered, css23, className) {
    var registeredStyles = [];
    var rawClassName = utils2.getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css23(registeredStyles);
  }
  var createEmotion = function createEmotion2(options) {
    var cache222 = createCache__default["default"](options);
    cache222.sheet.speedy = function(value) {
      this.isSpeedy = value;
    };
    cache222.compat = true;
    var css23 = function css222() {
      for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
        args2[_key] = arguments[_key];
      }
      var serialized = serialize22.serializeStyles(args2, cache222.registered, void 0);
      utils2.insertStyles(cache222, serialized, false);
      return cache222.key + "-" + serialized.name;
    };
    var keyframes22 = function keyframes222() {
      for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args2[_key2] = arguments[_key2];
      }
      var serialized = serialize22.serializeStyles(args2, cache222.registered);
      var animation = "animation-" + serialized.name;
      insertWithoutScoping(cache222, {
        name: serialized.name,
        styles: "@keyframes " + animation + "{" + serialized.styles + "}"
      });
      return animation;
    };
    var injectGlobal22 = function injectGlobal222() {
      for (var _len3 = arguments.length, args2 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args2[_key3] = arguments[_key3];
      }
      var serialized = serialize22.serializeStyles(args2, cache222.registered);
      insertWithoutScoping(cache222, serialized);
    };
    var cx22 = function cx222() {
      for (var _len4 = arguments.length, args2 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args2[_key4] = arguments[_key4];
      }
      return merge22(cache222.registered, css23, classnames(args2));
    };
    return {
      css: css23,
      cx: cx22,
      injectGlobal: injectGlobal22,
      keyframes: keyframes22,
      hydrate: function hydrate22(ids) {
        ids.forEach(function(key2) {
          cache222.inserted[key2] = true;
        });
      },
      flush: function flush22() {
        cache222.registered = {};
        cache222.inserted = {};
        cache222.sheet.flush();
      },
      sheet: cache222.sheet,
      cache: cache222,
      getRegisteredStyles: utils2.getRegisteredStyles.bind(null, cache222.registered),
      merge: merge22.bind(null, cache222.registered, css23)
    };
  };
  var classnames = function classnames2(args2) {
    var cls = "";
    for (var i3 = 0; i3 < args2.length; i3++) {
      var arg = args2[i3];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            toAdd = "";
            for (var k5 in arg) {
              if (arg[k5] && k5) {
                toAdd && (toAdd += " ");
                toAdd += k5;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  exports.default = createEmotion;
});
var emotionCss_cjs_prod2 = createCommonjsModule10(function(module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var _createEmotion = emotionCssCreateInstance_cjs_prod2["default"]({
    key: "css"
  }), flush22 = _createEmotion.flush, hydrate22 = _createEmotion.hydrate, cx22 = _createEmotion.cx, merge22 = _createEmotion.merge, getRegisteredStyles222 = _createEmotion.getRegisteredStyles, injectGlobal22 = _createEmotion.injectGlobal, keyframes22 = _createEmotion.keyframes, css23 = _createEmotion.css, sheet222 = _createEmotion.sheet, cache3 = _createEmotion.cache;
  exports.cache = cache3;
  exports.css = css23;
  exports.cx = cx22;
  exports.flush = flush22;
  exports.getRegisteredStyles = getRegisteredStyles222;
  exports.hydrate = hydrate22;
  exports.injectGlobal = injectGlobal22;
  exports.keyframes = keyframes22;
  exports.merge = merge22;
  exports.sheet = sheet222;
});
var emotionCss_cjs2 = createCommonjsModule10(function(module) {
  {
    module.exports = emotionCss_cjs_prod2;
  }
});
var cache22 = emotionCss_cjs2.cache;
var css3 = emotionCss_cjs2.css;
var cx2 = emotionCss_cjs2.cx;
var flush2 = emotionCss_cjs2.flush;
var getRegisteredStyles22 = emotionCss_cjs2.getRegisteredStyles;
var hydrate2 = emotionCss_cjs2.hydrate;
var injectGlobal2 = emotionCss_cjs2.injectGlobal;
var keyframes2 = emotionCss_cjs2.keyframes;
var merge2 = emotionCss_cjs2.merge;
var sheet22 = emotionCss_cjs2.sheet;

// https://deno.land/x/good_component@0.2.12/main/actions/show_toast.js
var toastOn2 = css3``;
var toastify2 = css3`
    padding: 12px 20px;
    color: #ffffff;
    display: inline-block;
    box-shadow: 0 3px 6px -1px rgba(0, 0, 0, 0.12), 0 10px 36px -4px rgba(77, 96, 232, 0.3);
    background: -webkit-linear-gradient(315deg, #73a5ff, #5477f5);
    background: linear-gradient(135deg, #73a5ff, #5477f5);
    position: fixed;
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
    border-radius: 2px;
    cursor: pointer;
    text-decoration: none;
    max-width: calc(50% - 20px);
    z-index: 2147483647;
    &${toastOn2} {
        opacity: 1;
    }
`;
var toastClose2 = css3`
    background: transparent;
    border: 0;
    color: white;
    cursor: pointer;
    font-family: inherit;
    font-size: 1em;
    opacity: 0.4;
    padding: 0 5px;
`;
var toastifyRight2 = css3`
    right: 15px;
    @media only screen and (max-width: 360px) {
        margin-left: auto;
        margin-right: auto;
        left: 0;
        right: 0;
        max-width: fit-content;
    }
`;
var toastifyLeft2 = css3`
    left: 15px;
    @media only screen and (max-width: 360px) {
        margin-left: auto;
        margin-right: auto;
        left: 0;
        right: 0;
        max-width: fit-content;
    }
`;
var toastifyTop2 = css3`
    top: 50px;
`;
var toastifyBottom2 = css3`
    bottom: 50px;
`;
var toastifyRounded2 = css3`
    border-radius: 25px;
`;
var toastifyAvatar2 = css3`
    width: 1.5em;
    height: 1.5em;
    margin: -7px 5px;
    border-radius: 2px;
`;
var toastifyCenter2 = css3`
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
    max-width: fit-content;
    max-width: -moz-fit-content;
`;

// https://deno.land/x/good_component@0.2.12/main/generic_tools/hash.js
function getLengths2(b64) {
  const len = b64.length;
  let validLen = b64.indexOf("=");
  if (validLen === -1) {
    validLen = len;
  }
  const placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function init2(lookup32, revLookup32, urlsafe = false) {
  function _byteLength(validLen, placeHoldersLen) {
    return Math.floor((validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen);
  }
  function tripletToBase64(num) {
    return lookup32[num >> 18 & 63] + lookup32[num >> 12 & 63] + lookup32[num >> 6 & 63] + lookup32[num & 63];
  }
  function encodeChunk(buf, start, end) {
    const out = new Array((end - start) / 3);
    for (let i3 = start, curTriplet = 0; i3 < end; i3 += 3) {
      out[curTriplet++] = tripletToBase64(
        (buf[i3] << 16) + (buf[i3 + 1] << 8) + buf[i3 + 2]
      );
    }
    return out.join("");
  }
  return {
    // base64 is 4/3 + up to two characters of the original data
    byteLength(b64) {
      return _byteLength.apply(null, getLengths2(b64));
    },
    toUint8Array(b64) {
      const [validLen, placeHoldersLen] = getLengths2(b64);
      const buf = new Uint8Array(_byteLength(validLen, placeHoldersLen));
      const len = placeHoldersLen ? validLen - 4 : validLen;
      let tmp;
      let curByte = 0;
      let i3;
      for (i3 = 0; i3 < len; i3 += 4) {
        tmp = revLookup32[b64.charCodeAt(i3)] << 18 | revLookup32[b64.charCodeAt(i3 + 1)] << 12 | revLookup32[b64.charCodeAt(i3 + 2)] << 6 | revLookup32[b64.charCodeAt(i3 + 3)];
        buf[curByte++] = tmp >> 16 & 255;
        buf[curByte++] = tmp >> 8 & 255;
        buf[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup32[b64.charCodeAt(i3)] << 2 | revLookup32[b64.charCodeAt(i3 + 1)] >> 4;
        buf[curByte++] = tmp & 255;
      } else if (placeHoldersLen === 1) {
        tmp = revLookup32[b64.charCodeAt(i3)] << 10 | revLookup32[b64.charCodeAt(i3 + 1)] << 4 | revLookup32[b64.charCodeAt(i3 + 2)] >> 2;
        buf[curByte++] = tmp >> 8 & 255;
        buf[curByte++] = tmp & 255;
      }
      return buf;
    },
    fromUint8Array(buf) {
      const maxChunkLength = 16383;
      const len = buf.length;
      const extraBytes = len % 3;
      const len2 = len - extraBytes;
      const parts = new Array(
        Math.ceil(len2 / maxChunkLength) + (extraBytes ? 1 : 0)
      );
      let curChunk = 0;
      let chunkEnd;
      for (let i3 = 0; i3 < len2; i3 += maxChunkLength) {
        chunkEnd = i3 + maxChunkLength;
        parts[curChunk++] = encodeChunk(
          buf,
          i3,
          chunkEnd > len2 ? len2 : chunkEnd
        );
      }
      let tmp;
      if (extraBytes === 1) {
        tmp = buf[len2];
        parts[curChunk] = lookup32[tmp >> 2] + lookup32[tmp << 4 & 63];
        if (!urlsafe)
          parts[curChunk] += "==";
      } else if (extraBytes === 2) {
        tmp = buf[len2] << 8 | buf[len2 + 1] & 255;
        parts[curChunk] = lookup32[tmp >> 10] + lookup32[tmp >> 4 & 63] + lookup32[tmp << 2 & 63];
        if (!urlsafe)
          parts[curChunk] += "=";
      }
      return parts.join("");
    }
  };
}
var lookup3 = [];
var revLookup3 = [];
var code3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (let i3 = 0, l7 = code3.length; i3 < l7; ++i3) {
  lookup3[i3] = code3[i3];
  revLookup3[code3.charCodeAt(i3)] = i3;
}
revLookup3["-".charCodeAt(0)] = 62;
revLookup3["_".charCodeAt(0)] = 63;
var { byteLength: byteLength3, toUint8Array: toUint8Array3, fromUint8Array: fromUint8Array3 } = init2(
  lookup3,
  revLookup3
);
var lookup22 = [];
var revLookup22 = [];
var code22 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
for (let i3 = 0, l7 = code22.length; i3 < l7; ++i3) {
  lookup22[i3] = code22[i3];
  revLookup22[code22.charCodeAt(i3)] = i3;
}
var { byteLength: byteLength22, toUint8Array: toUint8Array22, fromUint8Array: fromUint8Array22 } = init2(
  lookup22,
  revLookup22,
  true
);
var decoder2 = new TextDecoder();
var encoder2 = new TextEncoder();
function toHexString2(buf) {
  return buf.reduce(
    (hex, byte) => `${hex}${byte < 16 ? "0" : ""}${byte.toString(16)}`,
    ""
  );
}
function fromHexString2(hex) {
  const len = hex.length;
  if (len % 2 || !/^[0-9a-fA-F]+$/.test(hex)) {
    throw new TypeError("Invalid hex string.");
  }
  hex = hex.toLowerCase();
  const buf = new Uint8Array(Math.floor(len / 2));
  const end = len / 2;
  for (let i3 = 0; i3 < end; ++i3) {
    buf[i3] = parseInt(hex.substr(i3 * 2, 2), 16);
  }
  return buf;
}
function decode2(buf, encoding = "utf8") {
  if (/^utf-?8$/i.test(encoding)) {
    return decoder2.decode(buf);
  } else if (/^base64$/i.test(encoding)) {
    return fromUint8Array3(buf);
  } else if (/^base64url$/i.test(encoding)) {
    return fromUint8Array22(buf);
  } else if (/^hex(?:adecimal)?$/i.test(encoding)) {
    return toHexString2(buf);
  } else {
    throw new TypeError("Unsupported string encoding.");
  }
}
function encode2(str, encoding = "utf8") {
  if (/^utf-?8$/i.test(encoding)) {
    return encoder2.encode(str);
  } else if (/^base64(?:url)?$/i.test(encoding)) {
    return toUint8Array3(str);
  } else if (/^hex(?:adecimal)?$/i.test(encoding)) {
    return fromHexString2(str);
  } else {
    throw new TypeError("Unsupported string encoding.");
  }
}
var BYTES2 = 32;
var SHA2562 = class {
  hashSize = BYTES2;
  _buf;
  _bufIdx;
  _count;
  _K;
  _H;
  _finalized;
  /** Creates a SHA256 instance. */
  constructor() {
    this._buf = new Uint8Array(64);
    this._K = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    this.init();
  }
  /** Initializes a hash. */
  init() {
    this._H = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    this._bufIdx = 0;
    this._count = new Uint32Array(2);
    this._buf.fill(0);
    this._finalized = false;
    return this;
  }
  /** Updates the hash with additional message data. */
  update(msg, inputEncoding) {
    if (msg === null) {
      throw new TypeError("msg must be a string or Uint8Array.");
    } else if (typeof msg === "string") {
      msg = encode2(msg, inputEncoding);
    }
    for (let i3 = 0, len = msg.length; i3 < len; i3++) {
      this._buf[this._bufIdx++] = msg[i3];
      if (this._bufIdx === 64) {
        this._transform();
        this._bufIdx = 0;
      }
    }
    const c2 = this._count;
    if ((c2[0] += msg.length << 3) < msg.length << 3) {
      c2[1]++;
    }
    c2[1] += msg.length >>> 29;
    return this;
  }
  /** Finalizes the hash with additional message data. */
  digest(outputEncoding) {
    if (this._finalized) {
      throw new Error("digest has already been called.");
    }
    this._finalized = true;
    const b8 = this._buf;
    let idx = this._bufIdx;
    b8[idx++] = 128;
    while (idx !== 56) {
      if (idx === 64) {
        this._transform();
        idx = 0;
      }
      b8[idx++] = 0;
    }
    const c2 = this._count;
    b8[56] = c2[1] >>> 24 & 255;
    b8[57] = c2[1] >>> 16 & 255;
    b8[58] = c2[1] >>> 8 & 255;
    b8[59] = c2[1] >>> 0 & 255;
    b8[60] = c2[0] >>> 24 & 255;
    b8[61] = c2[0] >>> 16 & 255;
    b8[62] = c2[0] >>> 8 & 255;
    b8[63] = c2[0] >>> 0 & 255;
    this._transform();
    const hash22 = new Uint8Array(BYTES2);
    for (let i3 = 0; i3 < 8; i3++) {
      hash22[(i3 << 2) + 0] = this._H[i3] >>> 24 & 255;
      hash22[(i3 << 2) + 1] = this._H[i3] >>> 16 & 255;
      hash22[(i3 << 2) + 2] = this._H[i3] >>> 8 & 255;
      hash22[(i3 << 2) + 3] = this._H[i3] >>> 0 & 255;
    }
    this.init();
    return outputEncoding ? decode2(hash22, outputEncoding) : hash22;
  }
  /** Performs one transformation cycle. */
  _transform() {
    const h6 = this._H;
    let h0 = h6[0];
    let h1 = h6[1];
    let h22 = h6[2];
    let h32 = h6[3];
    let h42 = h6[4];
    let h52 = h6[5];
    let h62 = h6[6];
    let h7 = h6[7];
    const w9 = new Uint32Array(16);
    let i3;
    for (i3 = 0; i3 < 16; i3++) {
      w9[i3] = this._buf[(i3 << 2) + 3] | this._buf[(i3 << 2) + 2] << 8 | this._buf[(i3 << 2) + 1] << 16 | this._buf[i3 << 2] << 24;
    }
    for (i3 = 0; i3 < 64; i3++) {
      let tmp;
      if (i3 < 16) {
        tmp = w9[i3];
      } else {
        let a7 = w9[i3 + 1 & 15];
        let b8 = w9[i3 + 14 & 15];
        tmp = w9[i3 & 15] = (a7 >>> 7 ^ a7 >>> 18 ^ a7 >>> 3 ^ a7 << 25 ^ a7 << 14) + (b8 >>> 17 ^ b8 >>> 19 ^ b8 >>> 10 ^ b8 << 15 ^ b8 << 13) + w9[i3 & 15] + w9[i3 + 9 & 15] | 0;
      }
      tmp = tmp + h7 + (h42 >>> 6 ^ h42 >>> 11 ^ h42 >>> 25 ^ h42 << 26 ^ h42 << 21 ^ h42 << 7) + (h62 ^ h42 & (h52 ^ h62)) + this._K[i3] | 0;
      h7 = h62;
      h62 = h52;
      h52 = h42;
      h42 = h32 + tmp;
      h32 = h22;
      h22 = h1;
      h1 = h0;
      h0 = tmp + (h1 & h22 ^ h32 & (h1 ^ h22)) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10) | 0;
    }
    h6[0] = h6[0] + h0 | 0;
    h6[1] = h6[1] + h1 | 0;
    h6[2] = h6[2] + h22 | 0;
    h6[3] = h6[3] + h32 | 0;
    h6[4] = h6[4] + h42 | 0;
    h6[5] = h6[5] + h52 | 0;
    h6[6] = h6[6] + h62 | 0;
    h6[7] = h6[7] + h7 | 0;
  }
};
function sha2562(msg, inputEncoding, outputEncoding) {
  return new SHA2562().update(msg, inputEncoding).digest(outputEncoding);
}
var hash4 = (value) => sha2562(value, "utf-8", "hex");
var hash_default4 = hash4;

// https://deno.land/x/good_component@0.2.12/main/helpers/create_css_class.js
var dynamicClasses2 = /* @__PURE__ */ new Set();
var helperStyle2 = document.createElement("style");
var createCssClass2 = (name2, styles) => {
  const classStyles = [styles].flat(Infinity);
  const key2 = `${name2}${hash_default4(`${classStyles}`)}`;
  if (!dynamicClasses2.has(key2)) {
    dynamicClasses2.add(key2);
    for (const each of classStyles) {
      helperStyle2.innerHTML += `.${key2}${each}`;
    }
  }
  return key2;
};
createCssClass2.helperStyle = helperStyle2;
createCssClass2.dynamicClasses = dynamicClasses2;

// https://deno.land/x/good_component@0.2.12/main/helpers/add_dynamic_style_flags.js
var dynamicStyler2 = Symbol("dynamicStyler");

// https://deno.land/x/good@1.5.1.0/value.js
var typedArrayClasses3 = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each) => each);
var copyableClasses2 = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses3, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype2 = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator3 = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator3 = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator3 = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction3 = class {
};
var GeneratorFunction3 = class {
};
var AsyncGeneratorFunction3 = class {
};
var SyncGenerator2 = class {
};
var AsyncGenerator2 = class {
};
try {
  AsyncFunction3 = eval("(async function(){}).constructor");
  GeneratorFunction3 = eval("(function*(){}).constructor");
  AsyncGeneratorFunction3 = eval("(async function*(){}).constructor");
  SyncGenerator2 = eval("((function*(){})()).constructor");
  AsyncGenerator2 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive3 = (value) => !(value instanceof Object);
var isPureObject3 = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive3 = (value) => isPrimitive3(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator2 = (value) => IteratorPrototype2.isPrototypeOf(value);
var isGeneratorType3 = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator2(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator2 || constructor == AsyncGenerator2;
  }
  return false;
};
var isAsyncIterable3 = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable3 = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isIterableObjectOrContainer3 = function(value) {
  return value instanceof Object && (typeof value[Symbol.iterator] == "function" || typeof value[Symbol.asyncIterator] === "function");
};
var isTechnicallyIterable2 = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer3 = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol3 = Symbol.for("deepCopy");
var clonedFromSymbol3 = Symbol();
var getThis3 = Symbol();
Object.getPrototypeOf(function() {
})[getThis3] = function() {
  return this;
};
function deepCopyInner3(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol3] instanceof Function) {
    const clonedValue = value[deepCopySymbol3](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType3(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each) => `${each},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis3]();
    object = value.bind(theThis);
  } else if (copyableClasses2.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner3(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output = object;
  try {
    output.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key2, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get, set, ...options } = description;
    const getIsFunc = get instanceof Function;
    const setIsFunc = set instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key2] = {
        ...options,
        get: get ? function(...args2) {
          return get.apply(output, args2);
        } : void 0,
        set: set ? function(...args2) {
          return set.apply(output, args2);
        } : void 0
      };
    } else {
      if (key2 == "length" && output instanceof Array) {
        continue;
      }
      propertyDefinitions[key2] = {
        ...options,
        value: deepCopyInner3(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output, propertyDefinitions);
  return output;
}
var deepCopy3 = (value) => deepCopyInner3(value);
var shallowSortObject3 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key2) => {
      newObj[key2] = obj[key2];
      return newObj;
    },
    {}
  );
};
var deepSortObject4 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each of obj) {
        sortedChildren.push(deepSortObject4(each, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject4(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify3 = (value, ...args2) => {
  return JSON.stringify(deepSortObject4(value), ...args2);
};
var allKeys3 = function(obj) {
  let keys2 = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys2 = keys2.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys2;
};
var ownKeyDescriptions3 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions3 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/good@1.5.1.0/async.js
var objectPrototype2 = Object.getPrototypeOf({});

// https://deno.land/x/good@1.5.1.0/iterable.js
var emptyIterator2 = function* () {
}();
var Stop2 = Symbol("iterationStop");
async function asyncIteratorToList2(asyncIterator) {
  const results = [];
  for await (const each of asyncIterator) {
    results.push(each);
  }
  return results;
}
var ERROR_WHILE_MAPPING_MESSAGE2 = "Threw while mapping.";
function concurrentlyTransform2({ iterator, transformFunction, poolLimit = null, awaitAll = false }) {
  poolLimit = poolLimit || concurrentlyTransform2.defaultPoolLimit;
  const res = new TransformStream({
    async transform(p8, controller) {
      try {
        const s66 = await p8;
        controller.enqueue(s66);
      } catch (e) {
        if (e instanceof AggregateError && e.message == ERROR_WHILE_MAPPING_MESSAGE2) {
          controller.error(e);
        }
      }
    }
  });
  const mainPromise = (async () => {
    const writer = res.writable.getWriter();
    const executing = [];
    try {
      let index = 0;
      for await (const item of iterator) {
        const p8 = Promise.resolve().then(() => transformFunction(item, index));
        index++;
        writer.write(p8);
        const e = p8.then(() => executing.splice(executing.indexOf(e), 1));
        executing.push(e);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors = [];
      for (const result of await Promise.allSettled(executing)) {
        if (result.status == "rejected") {
          errors.push(result.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors, ERROR_WHILE_MAPPING_MESSAGE2)
      )).catch(() => {
      });
    }
  })();
  const asyncIterator = res.readable[Symbol.asyncIterator]();
  if (!awaitAll) {
    return asyncIterator;
  } else {
    return mainPromise.then(() => asyncIteratorToList2(asyncIterator));
  }
}
concurrentlyTransform2.defaultPoolLimit = 40;

// https://deno.land/x/good@1.5.1.0/array.js
var NamedArray = class extends Array {
  toJSON() {
    return { ...this };
  }
  toString() {
    return { ...this };
  }
  [Symbol.for("customInspect")]() {
    return { ...this };
  }
  [Symbol.for("Deno.customInspect")]() {
    return { ...this };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return { ...this };
  }
};

// https://esm.sh/stable/@vue/shared@3.3.4/denonext/shared.mjs
function l(e, t3) {
  let n3 = /* @__PURE__ */ Object.create(null), o2 = e.split(",");
  for (let r2 = 0; r2 < o2.length; r2++) n3[o2[r2]] = true;
  return t3 ? (r2) => !!n3[r2.toLowerCase()] : (r2) => !!n3[r2];
}
var se2 = Object.assign;
var j = Object.prototype.hasOwnProperty;
var ce2 = (e, t3) => j.call(e, t3);
var d = Array.isArray;
var z = (e) => u(e) === "[object Map]";
var p = (e) => typeof e == "string";
var A2 = (e) => typeof e == "symbol";
var f = (e) => e !== null && typeof e == "object";
var w = Object.prototype.toString;
var u = (e) => w.call(e);
var fe2 = (e) => u(e).slice(8, -1);
var de = (e) => p(e) && e !== "NaN" && e[0] !== "-" && "" + parseInt(e, 10) === e;
var ue = l(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
var he2 = l("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
var m = (e) => {
  let t3 = /* @__PURE__ */ Object.create(null);
  return (n3) => t3[n3] || (t3[n3] = e(n3));
};
var D = /-(\w)/g;
var ge = m((e) => e.replace(D, (t3, n3) => n3 ? n3.toUpperCase() : ""));
var U2 = /\B([A-Z])/g;
var I = m((e) => e.replace(U2, "-$1").toLowerCase());
var B2 = m((e) => e.charAt(0).toUpperCase() + e.slice(1));
var me = m((e) => e ? `on${B2(e)}` : "");
var ye = (e, t3) => !Object.is(e, t3);
var V = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console";
var we = l(V);
var K = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
var Y = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
var W = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
var Ce = l(K);
var _e = l(Y);
var Fe = l(W);
var M = "itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly";
var je = l(M);
var ze = l(M + ",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");
var Ue = l("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap");
var Ie = l("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");

// https://esm.sh/stable/@vue/reactivity@3.3.4/denonext/reactivity.mjs
var oe2 = (e) => {
  let t3 = new Set(e);
  return t3.w = 0, t3.n = 0, t3;
};
var Ee = (e) => (e.w & w2) > 0;
var ye2 = (e) => (e.n & w2) > 0;
var z2 = /* @__PURE__ */ new WeakMap();
var S = 0;
var w2 = 1;
var q2 = 30;
var l2;
var N = Symbol("");
var B3 = Symbol("");
var p2 = true;
var ce3 = [];
function Ge() {
  ce3.push(p2), p2 = false;
}
function Fe2() {
  let e = ce3.pop();
  p2 = e === void 0 ? true : e;
}
function u2(e, t3, s66) {
  if (p2 && l2) {
    let r2 = z2.get(e);
    r2 || z2.set(e, r2 = /* @__PURE__ */ new Map());
    let n3 = r2.get(s66);
    n3 || r2.set(s66, n3 = oe2()), Re(n3, void 0);
  }
}
function Re(e, t3) {
  let s66 = false;
  S <= q2 ? ye2(e) || (e.n |= w2, s66 = !Ee(e)) : s66 = !e.has(l2), s66 && (e.add(l2), l2.deps.push(e));
}
function E(e, t3, s66, r2, n3, i3) {
  let o2 = z2.get(e);
  if (!o2) return;
  let c2 = [];
  if (t3 === "clear") c2 = [...o2.values()];
  else if (s66 === "length" && d(e)) {
    let g8 = Number(r2);
    o2.forEach((d5, R6) => {
      (R6 === "length" || R6 >= g8) && c2.push(d5);
    });
  } else switch (s66 !== void 0 && c2.push(o2.get(s66)), t3) {
    case "add":
      d(e) ? de(s66) && c2.push(o2.get("length")) : (c2.push(o2.get(N)), z(e) && c2.push(o2.get(B3)));
      break;
    case "delete":
      d(e) || (c2.push(o2.get(N)), z(e) && c2.push(o2.get(B3)));
      break;
    case "set":
      z(e) && c2.push(o2.get(N));
      break;
  }
  let y9 = void 0;
  if (c2.length === 1) c2[0] && k(c2[0]);
  else {
    let g8 = [];
    for (let d5 of c2) d5 && g8.push(...d5);
    k(oe2(g8));
  }
}
function k(e, t3) {
  let s66 = d(e) ? e : [...e];
  for (let r2 of s66) r2.computed && he3(r2, t3);
  for (let r2 of s66) r2.computed || he3(r2, t3);
}
function he3(e, t3) {
  (e !== l2 || e.allowRecurse) && (e.scheduler ? e.scheduler() : e.run());
}
var qe = l("__proto__,__v_isRef,__isVue");
var Ne = new Set(Object.getOwnPropertyNames(Symbol).filter((e) => e !== "arguments" && e !== "caller").map((e) => Symbol[e]).filter(A2));
var Be = H();
var ke2 = H(false, true);
var Le = H(true);
var Ue2 = H(true, true);
var de2 = Je();
function Je() {
  let e = {};
  return ["includes", "indexOf", "lastIndexOf"].forEach((t3) => {
    e[t3] = function(...s66) {
      let r2 = a(this);
      for (let i3 = 0, o2 = this.length; i3 < o2; i3++) u2(r2, "get", i3 + "");
      let n3 = r2[t3](...s66);
      return n3 === -1 || n3 === false ? r2[t3](...s66.map(a)) : n3;
    };
  }), ["push", "pop", "shift", "unshift", "splice"].forEach((t3) => {
    e[t3] = function(...s66) {
      Ge();
      let r2 = a(this)[t3].apply(this, s66);
      return Fe2(), r2;
    };
  }), e;
}
function Qe(e) {
  let t3 = a(this);
  return u2(t3, "has", e), t3.hasOwnProperty(e);
}
function H(e = false, t3 = false) {
  return function(r2, n3, i3) {
    if (n3 === "__v_isReactive") return !e;
    if (n3 === "__v_isReadonly") return e;
    if (n3 === "__v_isShallow") return t3;
    if (n3 === "__v_raw" && i3 === (e ? t3 ? De : Ve : t3 ? Oe : me2).get(r2)) return r2;
    let o2 = d(r2);
    if (!e) {
      if (o2 && ce2(de2, n3)) return Reflect.get(de2, n3, i3);
      if (n3 === "hasOwnProperty") return Qe;
    }
    let c2 = Reflect.get(r2, n3, i3);
    return (A2(n3) ? Ne.has(n3) : qe(n3)) || (e || u2(r2, "get", n3), t3) ? c2 : h(c2) ? o2 && de(n3) ? c2 : c2.value : f(c2) ? e ? Ie2(c2) : Me(c2) : c2;
  };
}
var Xe = be();
var Ze = be(true);
function be(e = false) {
  return function(s66, r2, n3, i3) {
    let o2 = s66[r2];
    if (b2(o2) && h(o2) && !h(n3)) return false;
    if (!e && (!xe(n3) && !b2(n3) && (o2 = a(o2), n3 = a(n3)), !d(s66) && h(o2) && !h(n3))) return o2.value = n3, true;
    let c2 = d(s66) && de(r2) ? Number(r2) < s66.length : ce2(s66, r2), y9 = Reflect.set(s66, r2, n3, i3);
    return s66 === a(i3) && (c2 ? ye(n3, o2) && E(s66, "set", r2, n3, o2) : E(s66, "add", r2, n3)), y9;
  };
}
function et(e, t3) {
  let s66 = ce2(e, t3), r2 = e[t3], n3 = Reflect.deleteProperty(e, t3);
  return n3 && s66 && E(e, "delete", t3, void 0, r2), n3;
}
function tt(e, t3) {
  let s66 = Reflect.has(e, t3);
  return (!A2(t3) || !Ne.has(t3)) && u2(e, "has", t3), s66;
}
function st(e) {
  return u2(e, "iterate", d(e) ? "length" : N), Reflect.ownKeys(e);
}
var Se = { get: Be, set: Xe, deleteProperty: et, has: tt, ownKeys: st };
var Te = { get: Le, set(e, t3) {
  return true;
}, deleteProperty(e, t3) {
  return true;
} };
var nt = se2({}, Se, { get: ke2, set: Ze });
var rt = se2({}, Te, { get: Ue2 });
var ae2 = (e) => e;
var j2 = (e) => Reflect.getPrototypeOf(e);
function D2(e, t3, s66 = false, r2 = false) {
  e = e.__v_raw;
  let n3 = a(e), i3 = a(t3);
  s66 || (t3 !== i3 && u2(n3, "get", t3), u2(n3, "get", i3));
  let { has: o2 } = j2(n3), c2 = r2 ? ae2 : s66 ? ue2 : m2;
  if (o2.call(n3, t3)) return c2(e.get(t3));
  if (o2.call(n3, i3)) return c2(e.get(i3));
  e !== n3 && e.get(t3);
}
function M2(e, t3 = false) {
  let s66 = this.__v_raw, r2 = a(s66), n3 = a(e);
  return t3 || (e !== n3 && u2(r2, "has", e), u2(r2, "has", n3)), e === n3 ? s66.has(e) : s66.has(e) || s66.has(n3);
}
function I2(e, t3 = false) {
  return e = e.__v_raw, !t3 && u2(a(e), "iterate", N), Reflect.get(e, "size", e);
}
function pe(e) {
  e = a(e);
  let t3 = a(this);
  return j2(t3).has.call(t3, e) || (t3.add(e), E(t3, "add", e, e)), this;
}
function _e2(e, t3) {
  t3 = a(t3);
  let s66 = a(this), { has: r2, get: n3 } = j2(s66), i3 = r2.call(s66, e);
  i3 || (e = a(e), i3 = r2.call(s66, e));
  let o2 = n3.call(s66, e);
  return s66.set(e, t3), i3 ? ye(t3, o2) && E(s66, "set", e, t3, o2) : E(s66, "add", e, t3), this;
}
function ge2(e) {
  let t3 = a(this), { has: s66, get: r2 } = j2(t3), n3 = s66.call(t3, e);
  n3 || (e = a(e), n3 = s66.call(t3, e));
  let i3 = r2 ? r2.call(t3, e) : void 0, o2 = t3.delete(e);
  return n3 && E(t3, "delete", e, void 0, i3), o2;
}
function ve() {
  let e = a(this), t3 = e.size !== 0, s66 = void 0, r2 = e.clear();
  return t3 && E(e, "clear", void 0, void 0, s66), r2;
}
function x(e, t3) {
  return function(r2, n3) {
    let i3 = this, o2 = i3.__v_raw, c2 = a(o2), y9 = t3 ? ae2 : e ? ue2 : m2;
    return !e && u2(c2, "iterate", N), o2.forEach((g8, d5) => r2.call(n3, y9(g8), y9(d5), i3));
  };
}
function K2(e, t3, s66) {
  return function(...r2) {
    let n3 = this.__v_raw, i3 = a(n3), o2 = z(i3), c2 = e === "entries" || e === Symbol.iterator && o2, y9 = e === "keys" && o2, g8 = n3[e](...r2), d5 = s66 ? ae2 : t3 ? ue2 : m2;
    return !t3 && u2(i3, "iterate", y9 ? B3 : N), { next() {
      let { value: R6, done: F8 } = g8.next();
      return F8 ? { value: R6, done: F8 } : { value: c2 ? [d5(R6[0]), d5(R6[1])] : d5(R6), done: F8 };
    }, [Symbol.iterator]() {
      return this;
    } };
  };
}
function v(e) {
  return function(...t3) {
    return e === "delete" ? false : this;
  };
}
function it() {
  let e = { get(i3) {
    return D2(this, i3);
  }, get size() {
    return I2(this);
  }, has: M2, add: pe, set: _e2, delete: ge2, clear: ve, forEach: x(false, false) }, t3 = { get(i3) {
    return D2(this, i3, false, true);
  }, get size() {
    return I2(this);
  }, has: M2, add: pe, set: _e2, delete: ge2, clear: ve, forEach: x(false, true) }, s66 = { get(i3) {
    return D2(this, i3, true);
  }, get size() {
    return I2(this, true);
  }, has(i3) {
    return M2.call(this, i3, true);
  }, add: v("add"), set: v("set"), delete: v("delete"), clear: v("clear"), forEach: x(true, false) }, r2 = { get(i3) {
    return D2(this, i3, true, true);
  }, get size() {
    return I2(this, true);
  }, has(i3) {
    return M2.call(this, i3, true);
  }, add: v("add"), set: v("set"), delete: v("delete"), clear: v("clear"), forEach: x(true, true) };
  return ["keys", "values", "entries", Symbol.iterator].forEach((i3) => {
    e[i3] = K2(i3, false, false), s66[i3] = K2(i3, true, false), t3[i3] = K2(i3, false, true), r2[i3] = K2(i3, true, true);
  }), [e, s66, t3, r2];
}
var [ot, ct, at, ft] = it();
function C(e, t3) {
  let s66 = t3 ? e ? ft : at : e ? ct : ot;
  return (r2, n3, i3) => n3 === "__v_isReactive" ? !e : n3 === "__v_isReadonly" ? e : n3 === "__v_raw" ? r2 : Reflect.get(ce2(s66, n3) && n3 in r2 ? s66 : r2, n3, i3);
}
var ut = { get: C(false, false) };
var lt = { get: C(false, true) };
var ht = { get: C(true, false) };
var dt = { get: C(true, true) };
var me2 = /* @__PURE__ */ new WeakMap();
var Oe = /* @__PURE__ */ new WeakMap();
var Ve = /* @__PURE__ */ new WeakMap();
var De = /* @__PURE__ */ new WeakMap();
function pt(e) {
  switch (e) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function _t(e) {
  return e.__v_skip || !Object.isExtensible(e) ? 0 : pt(fe2(e));
}
function Me(e) {
  return b2(e) ? e : W2(e, false, Se, ut, me2);
}
function Ie2(e) {
  return W2(e, true, Te, ht, Ve);
}
function W2(e, t3, s66, r2, n3) {
  if (!f(e) || e.__v_raw && !(t3 && e.__v_isReactive)) return e;
  let i3 = n3.get(e);
  if (i3) return i3;
  let o2 = _t(e);
  if (o2 === 0) return e;
  let c2 = new Proxy(e, o2 === 2 ? r2 : s66);
  return n3.set(e, c2), c2;
}
function b2(e) {
  return !!(e && e.__v_isReadonly);
}
function xe(e) {
  return !!(e && e.__v_isShallow);
}
function a(e) {
  let t3 = e && e.__v_raw;
  return t3 ? a(t3) : e;
}
var m2 = (e) => f(e) ? Me(e) : e;
var ue2 = (e) => f(e) ? Ie2(e) : e;
function h(e) {
  return !!(e && e.__v_isRef === true);
}
var wt = Promise.resolve();

// https://esm.sh/stable/@vue/shared@3.5.13/denonext/shared.mjs
function l3(e) {
  let t3 = /* @__PURE__ */ Object.create(null);
  for (let n3 of e.split(",")) t3[n3] = 1;
  return (n3) => n3 in t3;
}
var fe3 = Object.assign;
var P = Object.prototype.hasOwnProperty;
var me3 = (e, t3) => P.call(e, t3);
var d2 = Array.isArray;
var F2 = (e) => m3(e) === "[object Map]";
var p3 = (e) => typeof e == "string";
var y = (e) => typeof e == "symbol";
var f2 = (e) => e !== null && typeof e == "object";
var _ = Object.prototype.toString;
var m3 = (e) => _.call(e);
var ge3 = (e) => m3(e).slice(8, -1);
var ye3 = (e) => p3(e) && e !== "NaN" && e[0] !== "-" && "" + parseInt(e, 10) === e;
var Ee2 = l3(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
var be2 = l3("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
var E2 = (e) => {
  let t3 = /* @__PURE__ */ Object.create(null);
  return (n3) => t3[n3] || (t3[n3] = e(n3));
};
var z3 = /-(\w)/g;
var Te2 = E2((e) => e.replace(z3, (t3, n3) => n3 ? n3.toUpperCase() : ""));
var j3 = /\B([A-Z])/g;
var H2 = E2((e) => e.replace(j3, "-$1").toLowerCase());
var B4 = E2((e) => e.charAt(0).toUpperCase() + e.slice(1));
var Ae = E2((e) => e ? `on${B4(e)}` : "");
var Se2 = (e, t3) => !Object.is(e, t3);
var V2 = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol";
var Y2 = l3(V2);
var W3 = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
var X = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
var J2 = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
var Z = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
var je2 = l3(W3);
var He = l3(X);
var Be2 = l3(J2);
var Ge2 = l3(Z);
var L = "itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly";
var Ve2 = l3(L);
var Ye = l3(L + ",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");
var $e = l3("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap");
var We = l3("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");
var Xe2 = l3("accent,accentunder,actiontype,align,alignmentscope,altimg,altimg-height,altimg-valign,altimg-width,alttext,bevelled,close,columnsalign,columnlines,columnspan,denomalign,depth,dir,display,displaystyle,encoding,equalcolumns,equalrows,fence,fontstyle,fontweight,form,frame,framespacing,groupalign,height,href,id,indentalign,indentalignfirst,indentalignlast,indentshift,indentshiftfirst,indentshiftlast,indextype,justify,largetop,largeop,lquote,lspace,mathbackground,mathcolor,mathsize,mathvariant,maxsize,minlabelspacing,mode,other,overflow,position,rowalign,rowlines,rowspan,rquote,rspace,scriptlevel,scriptminsize,scriptsizemultiplier,selection,separator,separators,shift,side,src,stackalign,stretchy,subscriptshift,superscriptshift,symmetric,voffset,width,widths,xlink:href,xlink:show,xlink:type,xmlns");

// https://esm.sh/stable/@vue/reactivity@3.5.13/denonext/reactivity.mjs
var u3;
var Pe = 0;
var k2;
var U4;
function De2() {
  Pe++;
}
function Oe3() {
  if (--Pe > 0) return;
  if (U4) {
    let t3 = U4;
    for (U4 = void 0; t3; ) {
      let s66 = t3.next;
      t3.next = void 0, t3.flags &= -9, t3 = s66;
    }
  }
  let e;
  for (; k2; ) {
    let t3 = k2;
    for (k2 = void 0; t3; ) {
      let s66 = t3.next;
      if (t3.next = void 0, t3.flags &= -9, t3.flags & 1) try {
        t3.trigger();
      } catch (n3) {
        e || (e = n3);
      }
      t3 = s66;
    }
  }
  if (e) throw e;
}
var y2 = true;
var Ve3 = [];
function He2() {
  Ve3.push(y2), y2 = false;
}
function je3() {
  let e = Ve3.pop();
  y2 = e === void 0 ? true : e;
}
var G = 0;
var ve2 = class {
  constructor(t3, s66) {
    this.sub = t3, this.dep = s66, this.version = s66.version, this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
  }
};
var L2 = class {
  constructor(t3) {
    this.computed = t3, this.version = 0, this.activeLink = void 0, this.subs = void 0, this.map = void 0, this.key = void 0, this.sc = 0;
  }
  track(t3) {
    if (!u3 || !y2 || u3 === this.computed) return;
    let s66 = this.activeLink;
    if (s66 === void 0 || s66.sub !== u3) s66 = this.activeLink = new ve2(u3, this), u3.deps ? (s66.prevDep = u3.depsTail, u3.depsTail.nextDep = s66, u3.depsTail = s66) : u3.deps = u3.depsTail = s66, ke3(s66);
    else if (s66.version === -1 && (s66.version = this.version, s66.nextDep)) {
      let n3 = s66.nextDep;
      n3.prevDep = s66.prevDep, s66.prevDep && (s66.prevDep.nextDep = n3), s66.prevDep = u3.depsTail, s66.nextDep = void 0, u3.depsTail.nextDep = s66, u3.depsTail = s66, u3.deps === s66 && (u3.deps = n3);
    }
    return s66;
  }
  trigger(t3) {
    this.version++, G++, this.notify(t3);
  }
  notify(t3) {
    De2();
    try {
      for (let s66 = this.subs; s66; s66 = s66.prevSub) s66.sub.notify() && s66.sub.dep.notify();
    } finally {
      Oe3();
    }
  }
};
function ke3(e) {
  if (e.dep.sc++, e.sub.flags & 4) {
    let t3 = e.dep.computed;
    if (t3 && !e.dep.subs) {
      t3.flags |= 20;
      for (let n3 = t3.deps; n3; n3 = n3.nextDep) ke3(n3);
    }
    let s66 = e.dep.subs;
    s66 !== e && (e.prevSub = s66, s66 && (s66.nextSub = e)), e.dep.subs = e;
  }
}
var se3 = /* @__PURE__ */ new WeakMap();
var A3 = Symbol("");
var ge4 = Symbol("");
var Y3 = Symbol("");
function w3(e, t3, s66) {
  if (y2 && u3) {
    let n3 = se3.get(e);
    n3 || se3.set(e, n3 = /* @__PURE__ */ new Map());
    let i3 = n3.get(s66);
    i3 || (n3.set(s66, i3 = new L2()), i3.map = n3, i3.key = s66), i3.track();
  }
}
function D3(e, t3, s66, n3, i3, r2) {
  let o2 = se3.get(e);
  if (!o2) {
    G++;
    return;
  }
  let a7 = (c2) => {
    c2 && c2.trigger();
  };
  if (De2(), t3 === "clear") o2.forEach(a7);
  else {
    let c2 = d2(e), d5 = c2 && ye3(s66);
    if (c2 && s66 === "length") {
      let _7 = Number(n3);
      o2.forEach((f4, p8) => {
        (p8 === "length" || p8 === Y3 || !y(p8) && p8 >= _7) && a7(f4);
      });
    } else switch ((s66 !== void 0 || o2.has(void 0)) && a7(o2.get(s66)), d5 && a7(o2.get(Y3)), t3) {
      case "add":
        c2 ? d5 && a7(o2.get("length")) : (a7(o2.get(A3)), F2(e) && a7(o2.get(ge4)));
        break;
      case "delete":
        c2 || (a7(o2.get(A3)), F2(e) && a7(o2.get(ge4)));
        break;
      case "set":
        F2(e) && a7(o2.get(A3));
        break;
    }
  }
  Oe3();
}
function C2(e) {
  let t3 = h2(e);
  return t3 === e ? t3 : (w3(t3, "iterate", Y3), b3(e) ? t3 : t3.map(g2));
}
function Ae2(e) {
  return w3(e = h2(e), "iterate", Y3), e;
}
var lt2 = { __proto__: null, [Symbol.iterator]() {
  return he4(this, Symbol.iterator, g2);
}, concat(...e) {
  return C2(this).concat(...e.map((t3) => d2(t3) ? C2(t3) : t3));
}, entries() {
  return he4(this, "entries", (e) => (e[1] = g2(e[1]), e));
}, every(e, t3) {
  return N2(this, "every", e, t3, void 0, arguments);
}, filter(e, t3) {
  return N2(this, "filter", e, t3, (s66) => s66.map(g2), arguments);
}, find(e, t3) {
  return N2(this, "find", e, t3, g2, arguments);
}, findIndex(e, t3) {
  return N2(this, "findIndex", e, t3, void 0, arguments);
}, findLast(e, t3) {
  return N2(this, "findLast", e, t3, g2, arguments);
}, findLastIndex(e, t3) {
  return N2(this, "findLastIndex", e, t3, void 0, arguments);
}, forEach(e, t3) {
  return N2(this, "forEach", e, t3, void 0, arguments);
}, includes(...e) {
  return pe2(this, "includes", e);
}, indexOf(...e) {
  return pe2(this, "indexOf", e);
}, join(e) {
  return C2(this).join(e);
}, lastIndexOf(...e) {
  return pe2(this, "lastIndexOf", e);
}, map(e, t3) {
  return N2(this, "map", e, t3, void 0, arguments);
}, pop() {
  return H3(this, "pop");
}, push(...e) {
  return H3(this, "push", e);
}, reduce(e, ...t3) {
  return Ie3(this, "reduce", e, t3);
}, reduceRight(e, ...t3) {
  return Ie3(this, "reduceRight", e, t3);
}, shift() {
  return H3(this, "shift");
}, some(e, t3) {
  return N2(this, "some", e, t3, void 0, arguments);
}, splice(...e) {
  return H3(this, "splice", e);
}, toReversed() {
  return C2(this).toReversed();
}, toSorted(e) {
  return C2(this).toSorted(e);
}, toSpliced(...e) {
  return C2(this).toSpliced(...e);
}, unshift(...e) {
  return H3(this, "unshift", e);
}, values() {
  return he4(this, "values", g2);
} };
function he4(e, t3, s66) {
  let n3 = Ae2(e), i3 = n3[t3]();
  return n3 !== e && !b3(e) && (i3._next = i3.next, i3.next = () => {
    let r2 = i3._next();
    return r2.value && (r2.value = s66(r2.value)), r2;
  }), i3;
}
var ut2 = Array.prototype;
function N2(e, t3, s66, n3, i3, r2) {
  let o2 = Ae2(e), a7 = o2 !== e && !b3(e), c2 = o2[t3];
  if (c2 !== ut2[t3]) {
    let f4 = c2.apply(e, r2);
    return a7 ? g2(f4) : f4;
  }
  let d5 = s66;
  o2 !== e && (a7 ? d5 = function(f4, p8) {
    return s66.call(this, g2(f4), p8, e);
  } : s66.length > 2 && (d5 = function(f4, p8) {
    return s66.call(this, f4, p8, e);
  }));
  let _7 = c2.call(o2, d5, n3);
  return a7 && i3 ? i3(_7) : _7;
}
function Ie3(e, t3, s66, n3) {
  let i3 = Ae2(e), r2 = s66;
  return i3 !== e && (b3(e) ? s66.length > 3 && (r2 = function(o2, a7, c2) {
    return s66.call(this, o2, a7, c2, e);
  }) : r2 = function(o2, a7, c2) {
    return s66.call(this, o2, g2(a7), c2, e);
  }), i3[t3](r2, ...n3);
}
function pe2(e, t3, s66) {
  let n3 = h2(e);
  w3(n3, "iterate", Y3);
  let i3 = n3[t3](...s66);
  return (i3 === -1 || i3 === false) && Dt(s66[0]) ? (s66[0] = h2(s66[0]), n3[t3](...s66)) : i3;
}
function H3(e, t3, s66 = []) {
  He2(), De2();
  let n3 = h2(e)[t3].apply(e, s66);
  return Oe3(), je3(), n3;
}
var ht2 = l3("__proto__,__v_isRef,__isVue");
var Ue3 = new Set(Object.getOwnPropertyNames(Symbol).filter((e) => e !== "arguments" && e !== "caller").map((e) => Symbol[e]).filter(y));
function pt2(e) {
  y(e) || (e = String(e));
  let t3 = h2(this);
  return w3(t3, "has", e), t3.hasOwnProperty(e);
}
var ie3 = class {
  constructor(t3 = false, s66 = false) {
    this._isReadonly = t3, this._isShallow = s66;
  }
  get(t3, s66, n3) {
    if (s66 === "__v_skip") return t3.__v_skip;
    let i3 = this._isReadonly, r2 = this._isShallow;
    if (s66 === "__v_isReactive") return !i3;
    if (s66 === "__v_isReadonly") return i3;
    if (s66 === "__v_isShallow") return r2;
    if (s66 === "__v_raw") return n3 === (i3 ? r2 ? Ye2 : Ge3 : r2 ? Fe3 : $e2).get(t3) || Object.getPrototypeOf(t3) === Object.getPrototypeOf(n3) ? t3 : void 0;
    let o2 = d2(t3);
    if (!i3) {
      let c2;
      if (o2 && (c2 = lt2[s66])) return c2;
      if (s66 === "hasOwnProperty") return pt2;
    }
    let a7 = Reflect.get(t3, s66, E3(t3) ? t3 : n3);
    return (y(s66) ? Ue3.has(s66) : ht2(s66)) || (i3 || w3(t3, "get", s66), r2) ? a7 : E3(a7) ? o2 && ye3(s66) ? a7 : a7.value : f2(a7) ? i3 ? Be3(a7) : ze2(a7) : a7;
  }
};
var ne3 = class extends ie3 {
  constructor(t3 = false) {
    super(false, t3);
  }
  set(t3, s66, n3, i3) {
    let r2 = t3[s66];
    if (!this._isShallow) {
      let c2 = m4(r2);
      if (!b3(n3) && !m4(n3) && (r2 = h2(r2), n3 = h2(n3)), !d2(t3) && E3(r2) && !E3(n3)) return c2 ? false : (r2.value = n3, true);
    }
    let o2 = d2(t3) && ye3(s66) ? Number(s66) < t3.length : me3(t3, s66), a7 = Reflect.set(t3, s66, n3, E3(t3) ? t3 : i3);
    return t3 === h2(i3) && (o2 ? Se2(n3, r2) && D3(t3, "set", s66, n3, r2) : D3(t3, "add", s66, n3)), a7;
  }
  deleteProperty(t3, s66) {
    let n3 = me3(t3, s66), i3 = t3[s66], r2 = Reflect.deleteProperty(t3, s66);
    return r2 && n3 && D3(t3, "delete", s66, void 0, i3), r2;
  }
  has(t3, s66) {
    let n3 = Reflect.has(t3, s66);
    return (!y(s66) || !Ue3.has(s66)) && w3(t3, "has", s66), n3;
  }
  ownKeys(t3) {
    return w3(t3, "iterate", d2(t3) ? "length" : A3), Reflect.ownKeys(t3);
  }
};
var re = class extends ie3 {
  constructor(t3 = false) {
    super(true, t3);
  }
  set(t3, s66) {
    return true;
  }
  deleteProperty(t3, s66) {
    return true;
  }
};
var dt2 = new ne3();
var _t2 = new re();
var vt = new ne3(true);
var gt = new re(true);
var we2 = (e) => e;
var X2 = (e) => Reflect.getPrototypeOf(e);
function wt2(e, t3, s66) {
  return function(...n3) {
    let i3 = this.__v_raw, r2 = h2(i3), o2 = F2(r2), a7 = e === "entries" || e === Symbol.iterator && o2, c2 = e === "keys" && o2, d5 = i3[e](...n3), _7 = s66 ? we2 : t3 ? Ee3 : g2;
    return !t3 && w3(r2, "iterate", c2 ? ge4 : A3), { next() {
      let { value: f4, done: p8 } = d5.next();
      return p8 ? { value: f4, done: p8 } : { value: a7 ? [_7(f4[0]), _7(f4[1])] : _7(f4), done: p8 };
    }, [Symbol.iterator]() {
      return this;
    } };
  };
}
function Z2(e) {
  return function(...t3) {
    return e === "delete" ? false : e === "clear" ? void 0 : this;
  };
}
function Et(e, t3) {
  let s66 = { get(i3) {
    let r2 = this.__v_raw, o2 = h2(r2), a7 = h2(i3);
    e || (Se2(i3, a7) && w3(o2, "get", i3), w3(o2, "get", a7));
    let { has: c2 } = X2(o2), d5 = t3 ? we2 : e ? Ee3 : g2;
    if (c2.call(o2, i3)) return d5(r2.get(i3));
    if (c2.call(o2, a7)) return d5(r2.get(a7));
    r2 !== o2 && r2.get(i3);
  }, get size() {
    let i3 = this.__v_raw;
    return !e && w3(h2(i3), "iterate", A3), Reflect.get(i3, "size", i3);
  }, has(i3) {
    let r2 = this.__v_raw, o2 = h2(r2), a7 = h2(i3);
    return e || (Se2(i3, a7) && w3(o2, "has", i3), w3(o2, "has", a7)), i3 === a7 ? r2.has(i3) : r2.has(i3) || r2.has(a7);
  }, forEach(i3, r2) {
    let o2 = this, a7 = o2.__v_raw, c2 = h2(a7), d5 = t3 ? we2 : e ? Ee3 : g2;
    return !e && w3(c2, "iterate", A3), a7.forEach((_7, f4) => i3.call(r2, d5(_7), d5(f4), o2));
  } };
  return fe3(s66, e ? { add: Z2("add"), set: Z2("set"), delete: Z2("delete"), clear: Z2("clear") } : { add(i3) {
    !t3 && !b3(i3) && !m4(i3) && (i3 = h2(i3));
    let r2 = h2(this);
    return X2(r2).has.call(r2, i3) || (r2.add(i3), D3(r2, "add", i3, i3)), this;
  }, set(i3, r2) {
    !t3 && !b3(r2) && !m4(r2) && (r2 = h2(r2));
    let o2 = h2(this), { has: a7, get: c2 } = X2(o2), d5 = a7.call(o2, i3);
    d5 || (i3 = h2(i3), d5 = a7.call(o2, i3));
    let _7 = c2.call(o2, i3);
    return o2.set(i3, r2), d5 ? Se2(r2, _7) && D3(o2, "set", i3, r2, _7) : D3(o2, "add", i3, r2), this;
  }, delete(i3) {
    let r2 = h2(this), { has: o2, get: a7 } = X2(r2), c2 = o2.call(r2, i3);
    c2 || (i3 = h2(i3), c2 = o2.call(r2, i3));
    let d5 = a7 ? a7.call(r2, i3) : void 0, _7 = r2.delete(i3);
    return c2 && D3(r2, "delete", i3, void 0, d5), _7;
  }, clear() {
    let i3 = h2(this), r2 = i3.size !== 0, o2 = void 0, a7 = i3.clear();
    return r2 && D3(i3, "clear", void 0, void 0, o2), a7;
  } }), ["keys", "values", "entries", Symbol.iterator].forEach((i3) => {
    s66[i3] = wt2(i3, e, t3);
  }), s66;
}
function ae4(e, t3) {
  let s66 = Et(e, t3);
  return (n3, i3, r2) => i3 === "__v_isReactive" ? !e : i3 === "__v_isReadonly" ? e : i3 === "__v_raw" ? n3 : Reflect.get(me3(s66, i3) && i3 in n3 ? s66 : n3, i3, r2);
}
var yt = { get: ae4(false, false) };
var bt = { get: ae4(false, true) };
var St = { get: ae4(true, false) };
var Nt = { get: ae4(true, true) };
var $e2 = /* @__PURE__ */ new WeakMap();
var Fe3 = /* @__PURE__ */ new WeakMap();
var Ge3 = /* @__PURE__ */ new WeakMap();
var Ye2 = /* @__PURE__ */ new WeakMap();
function Rt(e) {
  switch (e) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function Tt(e) {
  return e.__v_skip || !Object.isExtensible(e) ? 0 : Rt(ge3(e));
}
function ze2(e) {
  return m4(e) ? e : ce4(e, false, dt2, yt, $e2);
}
function Be3(e) {
  return ce4(e, true, _t2, St, Ge3);
}
function ce4(e, t3, s66, n3, i3) {
  if (!f2(e) || e.__v_raw && !(t3 && e.__v_isReactive)) return e;
  let r2 = i3.get(e);
  if (r2) return r2;
  let o2 = Tt(e);
  if (o2 === 0) return e;
  let a7 = new Proxy(e, o2 === 2 ? n3 : s66);
  return i3.set(e, a7), a7;
}
function m4(e) {
  return !!(e && e.__v_isReadonly);
}
function b3(e) {
  return !!(e && e.__v_isShallow);
}
function Dt(e) {
  return e ? !!e.__v_raw : false;
}
function h2(e) {
  let t3 = e && e.__v_raw;
  return t3 ? h2(t3) : e;
}
var g2 = (e) => f2(e) ? ze2(e) : e;
var Ee3 = (e) => f2(e) ? Be3(e) : e;
function E3(e) {
  return e ? e.__v_isRef === true : false;
}

// https://esm.sh/stable/@vue/shared@3.4.15/denonext/shared.mjs
function l4(e, t3) {
  let n3 = new Set(e.split(","));
  return t3 ? (o2) => n3.has(o2.toLowerCase()) : (o2) => n3.has(o2);
}
var re2 = () => {
};
var P2 = Object.prototype.hasOwnProperty;
var pe3 = (e, t3) => P2.call(e, t3);
var f3 = Array.isArray;
var F3 = (e) => m5(e) === "[object Map]";
var g3 = (e) => typeof e == "function";
var p4 = (e) => typeof e == "string";
var E4 = (e) => typeof e == "symbol";
var d3 = (e) => e !== null && typeof e == "object";
var fe4 = (e) => (d3(e) || g3(e)) && g3(e.then) && g3(e.catch);
var x2 = Object.prototype.toString;
var m5 = (e) => x2.call(e);
var me4 = (e) => m5(e).slice(8, -1);
var ue3 = (e) => p4(e) && e !== "NaN" && e[0] !== "-" && "" + parseInt(e, 10) === e;
var he5 = l4(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
var ge5 = l4("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
var y3 = (e) => {
  let t3 = /* @__PURE__ */ Object.create(null);
  return (n3) => t3[n3] || (t3[n3] = e(n3));
};
var U5 = /-(\w)/g;
var Ee4 = y3((e) => e.replace(U5, (t3, n3) => n3 ? n3.toUpperCase() : ""));
var j4 = /\B([A-Z])/g;
var z4 = y3((e) => e.replace(j4, "-$1").toLowerCase());
var H4 = y3((e) => e.charAt(0).toUpperCase() + e.slice(1));
var ye4 = y3((e) => e ? `on${H4(e)}` : "");
var Te3 = (e, t3) => !Object.is(e, t3);
var G2 = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error";
var Y4 = l4(G2);
var q3 = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
var W4 = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
var X3 = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
var J3 = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
var we3 = l4(q3);
var Ie4 = l4(W4);
var Ue4 = l4(X3);
var je4 = l4(J3);
var C3 = "itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly";
var ze3 = l4(C3);
var He3 = l4(C3 + ",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");
var Ve4 = l4("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap");
var Ke = l4("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");

// https://esm.sh/stable/@vue/reactivity@3.4.15/denonext/reactivity.mjs
var l5;
function ge6(e, t3 = l5) {
  t3 && t3.active && t3.effects.push(e);
}
var w4;
var N3 = class {
  constructor(t3, s66, n3, r2) {
    this.fn = t3, this.trigger = s66, this.scheduler = n3, this.active = true, this.deps = [], this._dirtyLevel = 2, this._trackId = 0, this._runnings = 0, this._shouldSchedule = false, this._depsLength = 0, ge6(this, r2);
  }
  get dirty() {
    if (this._dirtyLevel === 1) {
      we4();
      for (let t3 = 0; t3 < this._depsLength; t3++) {
        let s66 = this.deps[t3];
        if (s66.computed && (Ce2(s66.computed), this._dirtyLevel >= 2)) break;
      }
      this._dirtyLevel < 2 && (this._dirtyLevel = 0), Ee5();
    }
    return this._dirtyLevel >= 2;
  }
  set dirty(t3) {
    this._dirtyLevel = t3 ? 2 : 0;
  }
  run() {
    if (this._dirtyLevel = 0, !this.active) return this.fn();
    let t3 = h3, s66 = w4;
    try {
      return h3 = true, w4 = this, this._runnings++, ae5(this), this.fn();
    } finally {
      le2(this), this._runnings--, w4 = s66, h3 = t3;
    }
  }
  stop() {
    var t3;
    this.active && (ae5(this), le2(this), (t3 = this.onStop) == null || t3.call(this), this.active = false);
  }
};
function Ce2(e) {
  return e.value;
}
function ae5(e) {
  e._trackId++, e._depsLength = 0;
}
function le2(e) {
  if (e.deps && e.deps.length > e._depsLength) {
    for (let t3 = e._depsLength; t3 < e.deps.length; t3++) ve3(e.deps[t3], e);
    e.deps.length = e._depsLength;
  }
}
function ve3(e, t3) {
  let s66 = e.get(t3);
  s66 !== void 0 && t3._trackId !== s66 && (e.delete(t3), e.size === 0 && e.cleanup());
}
var h3 = true;
var G3 = 0;
var te2 = [];
function we4() {
  te2.push(h3), h3 = false;
}
function Ee5() {
  let e = te2.pop();
  h3 = e === void 0 ? true : e;
}
function se4() {
  G3++;
}
function ne4() {
  for (G3--; !G3 && q4.length; ) q4.shift()();
}
function ye5(e, t3, s66) {
  var n3;
  if (t3.get(e) !== e._trackId) {
    t3.set(e, e._trackId);
    let r2 = e.deps[e._depsLength];
    r2 !== t3 ? (r2 && ve3(r2, e), e.deps[e._depsLength++] = t3) : e._depsLength++;
  }
}
var q4 = [];
function Re2(e, t3, s66) {
  var n3;
  se4();
  for (let r2 of e.keys()) if (r2._dirtyLevel < t3 && e.get(r2) === r2._trackId) {
    let i3 = r2._dirtyLevel;
    r2._dirtyLevel = t3, i3 === 0 && (r2._shouldSchedule = true, r2.trigger());
  }
  be3(e), ne4();
}
function be3(e) {
  for (let t3 of e.keys()) t3.scheduler && t3._shouldSchedule && (!t3._runnings || t3.allowRecurse) && e.get(t3) === t3._trackId && (t3._shouldSchedule = false, q4.push(t3.scheduler));
}
var Se4 = (e, t3) => {
  let s66 = /* @__PURE__ */ new Map();
  return s66.cleanup = e, s66.computed = t3, s66;
};
var P3 = /* @__PURE__ */ new WeakMap();
var E5 = Symbol("");
var U6 = Symbol("");
function u4(e, t3, s66) {
  if (h3 && w4) {
    let n3 = P3.get(e);
    n3 || P3.set(e, n3 = /* @__PURE__ */ new Map());
    let r2 = n3.get(s66);
    r2 || n3.set(s66, r2 = Se4(() => n3.delete(s66))), ye5(w4, r2, void 0);
  }
}
function v2(e, t3, s66, n3, r2, i3) {
  let o2 = P3.get(e);
  if (!o2) return;
  let c2 = [];
  if (t3 === "clear") c2 = [...o2.values()];
  else if (s66 === "length" && f3(e)) {
    let f4 = Number(n3);
    o2.forEach((S6, d5) => {
      (d5 === "length" || !E4(d5) && d5 >= f4) && c2.push(S6);
    });
  } else switch (s66 !== void 0 && c2.push(o2.get(s66)), t3) {
    case "add":
      f3(e) ? ue3(s66) && c2.push(o2.get("length")) : (c2.push(o2.get(E5)), F3(e) && c2.push(o2.get(U6)));
      break;
    case "delete":
      f3(e) || (c2.push(o2.get(E5)), F3(e) && c2.push(o2.get(U6)));
      break;
    case "set":
      F3(e) && c2.push(o2.get(E5));
      break;
  }
  se4();
  for (let f4 of c2) f4 && Re2(f4, 2, void 0);
  ne4();
}
var He4 = l4("__proto__,__v_isRef,__isVue");
var Ne2 = new Set(Object.getOwnPropertyNames(Symbol).filter((e) => e !== "arguments" && e !== "caller").map((e) => Symbol[e]).filter(E4));
var ue4 = We2();
function We2() {
  let e = {};
  return ["includes", "indexOf", "lastIndexOf"].forEach((t3) => {
    e[t3] = function(...s66) {
      let n3 = a2(this);
      for (let i3 = 0, o2 = this.length; i3 < o2; i3++) u4(n3, "get", i3 + "");
      let r2 = n3[t3](...s66);
      return r2 === -1 || r2 === false ? n3[t3](...s66.map(a2)) : r2;
    };
  }), ["push", "pop", "shift", "unshift", "splice"].forEach((t3) => {
    e[t3] = function(...s66) {
      we4(), se4();
      let n3 = a2(this)[t3].apply(this, s66);
      return ne4(), Ee5(), n3;
    };
  }), e;
}
function Fe4(e) {
  let t3 = a2(this);
  return u4(t3, "has", e), t3.hasOwnProperty(e);
}
var A4 = class {
  constructor(t3 = false, s66 = false) {
    this._isReadonly = t3, this._shallow = s66;
  }
  get(t3, s66, n3) {
    let r2 = this._isReadonly, i3 = this._shallow;
    if (s66 === "__v_isReactive") return !r2;
    if (s66 === "__v_isReadonly") return r2;
    if (s66 === "__v_isShallow") return i3;
    if (s66 === "__v_raw") return n3 === (r2 ? i3 ? me5 : Ie5 : i3 ? Te4 : Oe4).get(t3) || Object.getPrototypeOf(t3) === Object.getPrototypeOf(n3) ? t3 : void 0;
    let o2 = f3(t3);
    if (!r2) {
      if (o2 && pe3(ue4, s66)) return Reflect.get(ue4, s66, n3);
      if (s66 === "hasOwnProperty") return Fe4;
    }
    let c2 = Reflect.get(t3, s66, n3);
    return (E4(s66) ? Ne2.has(s66) : He4(s66)) || (r2 || u4(t3, "get", s66), i3) ? c2 : _2(c2) ? o2 && ue3(s66) ? c2 : c2.value : d3(c2) ? r2 ? Ve5(c2) : De3(c2) : c2;
  }
};
var z5 = class extends A4 {
  constructor(t3 = false) {
    super(false, t3);
  }
  set(t3, s66, n3, r2) {
    let i3 = t3[s66];
    if (!this._shallow) {
      let f4 = R(i3);
      if (!xe2(n3) && !R(n3) && (i3 = a2(i3), n3 = a2(n3)), !f3(t3) && _2(i3) && !_2(n3)) return f4 ? false : (i3.value = n3, true);
    }
    let o2 = f3(t3) && ue3(s66) ? Number(s66) < t3.length : pe3(t3, s66), c2 = Reflect.set(t3, s66, n3, r2);
    return t3 === a2(r2) && (o2 ? Te3(n3, i3) && v2(t3, "set", s66, n3, i3) : v2(t3, "add", s66, n3)), c2;
  }
  deleteProperty(t3, s66) {
    let n3 = pe3(t3, s66), r2 = t3[s66], i3 = Reflect.deleteProperty(t3, s66);
    return i3 && n3 && v2(t3, "delete", s66, void 0, r2), i3;
  }
  has(t3, s66) {
    let n3 = Reflect.has(t3, s66);
    return (!E4(s66) || !Ne2.has(s66)) && u4(t3, "has", s66), n3;
  }
  ownKeys(t3) {
    return u4(t3, "iterate", f3(t3) ? "length" : E5), Reflect.ownKeys(t3);
  }
};
var j5 = class extends A4 {
  constructor(t3 = false) {
    super(true, t3);
  }
  set(t3, s66) {
    return true;
  }
  deleteProperty(t3, s66) {
    return true;
  }
};
var Ye3 = new z5();
var ke4 = new j5();
var Ge4 = new z5(true);
var qe2 = new j5(true);
var re3 = (e) => e;
var H5 = (e) => Reflect.getPrototypeOf(e);
function m6(e, t3, s66 = false, n3 = false) {
  e = e.__v_raw;
  let r2 = a2(e), i3 = a2(t3);
  s66 || (Te3(t3, i3) && u4(r2, "get", t3), u4(r2, "get", i3));
  let { has: o2 } = H5(r2), c2 = n3 ? re3 : s66 ? oe3 : O;
  if (o2.call(r2, t3)) return c2(e.get(t3));
  if (o2.call(r2, i3)) return c2(e.get(i3));
  e !== r2 && e.get(t3);
}
function D4(e, t3 = false) {
  let s66 = this.__v_raw, n3 = a2(s66), r2 = a2(e);
  return t3 || (Te3(e, r2) && u4(n3, "has", e), u4(n3, "has", r2)), e === r2 ? s66.has(e) : s66.has(e) || s66.has(r2);
}
function V3(e, t3 = false) {
  return e = e.__v_raw, !t3 && u4(a2(e), "iterate", E5), Reflect.get(e, "size", e);
}
function fe5(e) {
  e = a2(e);
  let t3 = a2(this);
  return H5(t3).has.call(t3, e) || (t3.add(e), v2(t3, "add", e, e)), this;
}
function he6(e, t3) {
  t3 = a2(t3);
  let s66 = a2(this), { has: n3, get: r2 } = H5(s66), i3 = n3.call(s66, e);
  i3 || (e = a2(e), i3 = n3.call(s66, e));
  let o2 = r2.call(s66, e);
  return s66.set(e, t3), i3 ? Te3(t3, o2) && v2(s66, "set", e, t3, o2) : v2(s66, "add", e, t3), this;
}
function de4(e) {
  let t3 = a2(this), { has: s66, get: n3 } = H5(t3), r2 = s66.call(t3, e);
  r2 || (e = a2(e), r2 = s66.call(t3, e));
  let i3 = n3 ? n3.call(t3, e) : void 0, o2 = t3.delete(e);
  return r2 && v2(t3, "delete", e, void 0, i3), o2;
}
function _e3() {
  let e = a2(this), t3 = e.size !== 0, s66 = void 0, n3 = e.clear();
  return t3 && v2(e, "clear", void 0, void 0, s66), n3;
}
function x3(e, t3) {
  return function(n3, r2) {
    let i3 = this, o2 = i3.__v_raw, c2 = a2(o2), f4 = t3 ? re3 : e ? oe3 : O;
    return !e && u4(c2, "iterate", E5), o2.forEach((S6, d5) => n3.call(r2, f4(S6), f4(d5), i3));
  };
}
function L3(e, t3, s66) {
  return function(...n3) {
    let r2 = this.__v_raw, i3 = a2(r2), o2 = F3(i3), c2 = e === "entries" || e === Symbol.iterator && o2, f4 = e === "keys" && o2, S6 = r2[e](...n3), d5 = s66 ? re3 : t3 ? oe3 : O;
    return !t3 && u4(i3, "iterate", f4 ? U6 : E5), { next() {
      let { value: I7, done: Y8 } = S6.next();
      return Y8 ? { value: I7, done: Y8 } : { value: c2 ? [d5(I7[0]), d5(I7[1])] : d5(I7), done: Y8 };
    }, [Symbol.iterator]() {
      return this;
    } };
  };
}
function p5(e) {
  return function(...t3) {
    return e === "delete" ? false : e === "clear" ? void 0 : this;
  };
}
function Ue5() {
  let e = { get(i3) {
    return m6(this, i3);
  }, get size() {
    return V3(this);
  }, has: D4, add: fe5, set: he6, delete: de4, clear: _e3, forEach: x3(false, false) }, t3 = { get(i3) {
    return m6(this, i3, false, true);
  }, get size() {
    return V3(this);
  }, has: D4, add: fe5, set: he6, delete: de4, clear: _e3, forEach: x3(false, true) }, s66 = { get(i3) {
    return m6(this, i3, true);
  }, get size() {
    return V3(this, true);
  }, has(i3) {
    return D4.call(this, i3, true);
  }, add: p5("add"), set: p5("set"), delete: p5("delete"), clear: p5("clear"), forEach: x3(true, false) }, n3 = { get(i3) {
    return m6(this, i3, true, true);
  }, get size() {
    return V3(this, true);
  }, has(i3) {
    return D4.call(this, i3, true);
  }, add: p5("add"), set: p5("set"), delete: p5("delete"), clear: p5("clear"), forEach: x3(true, true) };
  return ["keys", "values", "entries", Symbol.iterator].forEach((i3) => {
    e[i3] = L3(i3, false, false), s66[i3] = L3(i3, true, false), t3[i3] = L3(i3, false, true), n3[i3] = L3(i3, true, true);
  }), [e, s66, t3, n3];
}
var [Je2, Qe2, Xe3, Ze2] = Ue5();
function W5(e, t3) {
  let s66 = t3 ? e ? Ze2 : Xe3 : e ? Qe2 : Je2;
  return (n3, r2, i3) => r2 === "__v_isReactive" ? !e : r2 === "__v_isReadonly" ? e : r2 === "__v_raw" ? n3 : Reflect.get(pe3(s66, r2) && r2 in n3 ? s66 : n3, r2, i3);
}
var Be4 = { get: W5(false, false) };
var et2 = { get: W5(false, true) };
var tt2 = { get: W5(true, false) };
var st2 = { get: W5(true, true) };
var Oe4 = /* @__PURE__ */ new WeakMap();
var Te4 = /* @__PURE__ */ new WeakMap();
var Ie5 = /* @__PURE__ */ new WeakMap();
var me5 = /* @__PURE__ */ new WeakMap();
function nt2(e) {
  switch (e) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function rt2(e) {
  return e.__v_skip || !Object.isExtensible(e) ? 0 : nt2(me4(e));
}
function De3(e) {
  return R(e) ? e : F4(e, false, Ye3, Be4, Oe4);
}
function Ve5(e) {
  return F4(e, true, ke4, tt2, Ie5);
}
function F4(e, t3, s66, n3, r2) {
  if (!d3(e) || e.__v_raw && !(t3 && e.__v_isReactive)) return e;
  let i3 = r2.get(e);
  if (i3) return i3;
  let o2 = rt2(e);
  if (o2 === 0) return e;
  let c2 = new Proxy(e, o2 === 2 ? n3 : s66);
  return r2.set(e, c2), c2;
}
function ie4(e) {
  return R(e) ? ie4(e.__v_raw) : !!(e && e.__v_isReactive);
}
function R(e) {
  return !!(e && e.__v_isReadonly);
}
function xe2(e) {
  return !!(e && e.__v_isShallow);
}
function a2(e) {
  let t3 = e && e.__v_raw;
  return t3 ? a2(t3) : e;
}
var O = (e) => d3(e) ? De3(e) : e;
var oe3 = (e) => d3(e) ? Ve5(e) : e;
function _2(e) {
  return !!(e && e.__v_isRef === true);
}

// https://esm.sh/v135/@vue-reactivity/watch@0.2.0/denonext/watch.mjs
function h4(e, t3, r2) {
  let o2;
  try {
    o2 = r2 ? e(...r2) : e();
  } catch (i3) {
    W6(i3, t3);
  }
  return o2;
}
function g4(e, t3, r2) {
  if (g3(e)) {
    let i3 = h4(e, t3, r2);
    return i3 && fe4(i3) && i3.catch((f4) => {
      W6(f4, t3);
    }), i3;
  }
  let o2 = [];
  for (let i3 = 0; i3 < e.length; i3++) o2.push(g4(e[i3], t3, r2));
  return o2;
}
function W6(e, t3) {
  console.error(new Error(`[@vue-reactivity/watch]: ${t3}`)), console.error(e);
}
function L4(e) {
  console.warn(M3(e));
}
function M3(e) {
  return new Error(`[reactivue]: ${e}`);
}
var S2 = {};
function G4(e, t3, r2) {
  return j6(e, t3, r2);
}
function j6(e, t3, { immediate: r2, deep: o2, flush: i3 } = {}) {
  let f4, w9 = false, E9 = false;
  if (_2(e) ? (f4 = () => e.value, w9 = xe2(e)) : ie4(e) ? (f4 = () => e, o2 = true) : f3(e) ? (E9 = true, w9 = e.some(ie4), f4 = () => e.map((n3) => _2(n3) ? n3.value : ie4(n3) ? a3(n3) : g3(n3) ? h4(n3, "watch getter") : L4("invalid source"))) : g3(e) ? t3 ? f4 = () => h4(e, "watch getter") : f4 = () => (s66 && s66(), g4(e, "watch callback", [p8])) : f4 = re2, t3 && o2) {
    let n3 = f4;
    f4 = () => a3(n3());
  }
  let s66, p8 = (n3) => {
    s66 = c2.onStop = () => {
      h4(n3, "watch cleanup");
    };
  }, l7 = E9 ? [] : S2, u5 = () => {
    if (c2.active) if (t3) {
      let n3 = c2.run();
      (o2 || w9 || (E9 ? n3.some((k5, C8) => Te3(k5, l7[C8])) : Te3(n3, l7))) && (s66 && s66(), g4(t3, "watch value", [n3, l7 === S2 ? void 0 : l7, p8]), l7 = n3);
    } else c2.run();
  };
  u5.allowRecurse = !!t3;
  let m10;
  i3 === "sync" ? m10 = u5 : m10 = () => {
    u5();
  };
  let c2 = new N3(f4, m10);
  return t3 ? r2 ? u5() : l7 = c2.run() : c2.run(), () => c2.stop();
}
function a3(e, t3 = /* @__PURE__ */ new Set()) {
  if (!d3(e) || t3.has(e)) return e;
  if (t3.add(e), f3(e)) for (let r2 = 0; r2 < e.length; r2++) a3(e[r2], t3);
  else if (e instanceof Map) e.forEach((r2, o2) => {
    a3(e.get(o2), t3);
  });
  else if (e instanceof Set) e.forEach((r2) => {
    a3(r2, t3);
  });
  else for (let r2 of Object.keys(e)) a3(e[r2], t3);
  return e;
}

// https://deno.land/x/storage_object@0.0.2.0/main.js
var localStorage = globalThis.localStorage;
var storageObject = new Proxy(localStorage, {
  get(self2, key2) {
    let rawValue;
    try {
      rawValue = localStorage.getItem(key2);
      let value = JSON.parse(rawValue);
      if (value instanceof Object) {
        value = Me(value);
        G4(value, (newValue) => {
          localStorage.setItem(key2, JSON.stringify(newValue));
        });
      }
      return value;
    } catch (error) {
      return rawValue;
    }
  },
  set(self2, key2, newValue) {
    localStorage.setItem(key2, JSON.stringify(newValue));
    return true;
  },
  deleteProperty(self2, key2) {
    try {
      return localStorage.removeItem(key2);
    } catch (error) {
    }
  },
  ownKeys(self2, ...args2) {
    return Object.keys(localStorage);
  },
  has(self2, key2) {
    return Object.keys(localStorage).includes(key2);
  }
});

// https://esm.sh/v135/@codemirror/state@6.4.1/es2020/state.development.mjs
var Text = class _Text {
  /**
  Get the line description around the given position.
  */
  lineAt(pos) {
    if (pos < 0 || pos > this.length)
      throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
    return this.lineInner(pos, false, 1, 0);
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(n3) {
    if (n3 < 1 || n3 > this.lines)
      throw new RangeError(`Invalid line number ${n3} in ${this.lines}-line document`);
    return this.lineInner(n3, true, 1, 0);
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(from3, to2, text) {
    [from3, to2] = clip(this, from3, to2);
    let parts = [];
    this.decompose(
      0,
      from3,
      parts,
      2
      /* Open.To */
    );
    if (text.length)
      text.decompose(
        0,
        text.length,
        parts,
        1 | 2
        /* Open.To */
      );
    this.decompose(
      to2,
      this.length,
      parts,
      1
      /* Open.From */
    );
    return TextNode.from(parts, this.length - (to2 - from3) + text.length);
  }
  /**
  Append another document to this one.
  */
  append(other) {
    return this.replace(this.length, this.length, other);
  }
  /**
  Retrieve the text between the given points.
  */
  slice(from3, to2 = this.length) {
    [from3, to2] = clip(this, from3, to2);
    let parts = [];
    this.decompose(from3, to2, parts, 0);
    return TextNode.from(parts, to2 - from3);
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(other) {
    if (other == this)
      return true;
    if (other.length != this.length || other.lines != this.lines)
      return false;
    let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
    let a7 = new RawTextCursor(this), b8 = new RawTextCursor(other);
    for (let skip = start, pos = start; ; ) {
      a7.next(skip);
      b8.next(skip);
      skip = 0;
      if (a7.lineBreak != b8.lineBreak || a7.done != b8.done || a7.value != b8.value)
        return false;
      pos += a7.value.length;
      if (a7.done || pos >= end)
        return true;
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(dir = 1) {
    return new RawTextCursor(this, dir);
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(from3, to2 = this.length) {
    return new PartialTextCursor(this, from3, to2);
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(from3, to2) {
    let inner;
    if (from3 == null) {
      inner = this.iter();
    } else {
      if (to2 == null)
        to2 = this.lines + 1;
      let start = this.line(from3).from;
      inner = this.iterRange(start, Math.max(start, to2 == this.lines + 1 ? this.length : to2 <= 1 ? 0 : this.line(to2 - 1).to));
    }
    return new LineCursor(inner);
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0);
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let lines = [];
    this.flatten(lines);
    return lines;
  }
  /**
  @internal
  */
  constructor() {
  }
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(text) {
    if (text.length == 0)
      throw new RangeError("A document must have at least one line");
    if (text.length == 1 && !text[0])
      return _Text.empty;
    return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
  }
};
var TextLeaf = class _TextLeaf extends Text {
  constructor(text, length3 = textLength(text)) {
    super();
    this.text = text;
    this.length = length3;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(target, isLine, line3, offset) {
    for (let i3 = 0; ; i3++) {
      let string2 = this.text[i3], end = offset + string2.length;
      if ((isLine ? line3 : end) >= target)
        return new Line(offset, end, line3, string2);
      offset = end + 1;
      line3++;
    }
  }
  decompose(from3, to2, target, open) {
    let text = from3 <= 0 && to2 >= this.length ? this : new _TextLeaf(sliceText(this.text, from3, to2), Math.min(to2, this.length) - Math.max(0, from3));
    if (open & 1) {
      let prev3 = target.pop();
      let joined = appendText(text.text, prev3.text.slice(), 0, text.length);
      if (joined.length <= 32) {
        target.push(new _TextLeaf(joined, prev3.length + text.length));
      } else {
        let mid = joined.length >> 1;
        target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
      }
    } else {
      target.push(text);
    }
  }
  replace(from3, to2, text) {
    if (!(text instanceof _TextLeaf))
      return super.replace(from3, to2, text);
    [from3, to2] = clip(this, from3, to2);
    let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from3)), to2);
    let newLen = this.length + text.length - (to2 - from3);
    if (lines.length <= 32)
      return new _TextLeaf(lines, newLen);
    return TextNode.from(_TextLeaf.split(lines, []), newLen);
  }
  sliceString(from3, to2 = this.length, lineSep = "\n") {
    [from3, to2] = clip(this, from3, to2);
    let result = "";
    for (let pos = 0, i3 = 0; pos <= to2 && i3 < this.text.length; i3++) {
      let line3 = this.text[i3], end = pos + line3.length;
      if (pos > from3 && i3)
        result += lineSep;
      if (from3 < end && to2 > pos)
        result += line3.slice(Math.max(0, from3 - pos), to2 - pos);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let line3 of this.text)
      target.push(line3);
  }
  scanIdentical() {
    return 0;
  }
  static split(text, target) {
    let part = [], len = -1;
    for (let line3 of text) {
      part.push(line3);
      len += line3.length + 1;
      if (part.length == 32) {
        target.push(new _TextLeaf(part, len));
        part = [];
        len = -1;
      }
    }
    if (len > -1)
      target.push(new _TextLeaf(part, len));
    return target;
  }
};
var TextNode = class _TextNode extends Text {
  constructor(children, length3) {
    super();
    this.children = children;
    this.length = length3;
    this.lines = 0;
    for (let child of children)
      this.lines += child.lines;
  }
  lineInner(target, isLine, line3, offset) {
    for (let i3 = 0; ; i3++) {
      let child = this.children[i3], end = offset + child.length, endLine = line3 + child.lines - 1;
      if ((isLine ? endLine : end) >= target)
        return child.lineInner(target, isLine, line3, offset);
      offset = end + 1;
      line3 = endLine + 1;
    }
  }
  decompose(from3, to2, target, open) {
    for (let i3 = 0, pos = 0; pos <= to2 && i3 < this.children.length; i3++) {
      let child = this.children[i3], end = pos + child.length;
      if (from3 <= end && to2 >= pos) {
        let childOpen = open & ((pos <= from3 ? 1 : 0) | (end >= to2 ? 2 : 0));
        if (pos >= from3 && end <= to2 && !childOpen)
          target.push(child);
        else
          child.decompose(from3 - pos, to2 - pos, target, childOpen);
      }
      pos = end + 1;
    }
  }
  replace(from3, to2, text) {
    [from3, to2] = clip(this, from3, to2);
    if (text.lines < this.lines)
      for (let i3 = 0, pos = 0; i3 < this.children.length; i3++) {
        let child = this.children[i3], end = pos + child.length;
        if (from3 >= pos && to2 <= end) {
          let updated = child.replace(from3 - pos, to2 - pos, text);
          let totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
            let copy3 = this.children.slice();
            copy3[i3] = updated;
            return new _TextNode(copy3, this.length - (to2 - from3) + text.length);
          }
          return super.replace(pos, end, updated);
        }
        pos = end + 1;
      }
    return super.replace(from3, to2, text);
  }
  sliceString(from3, to2 = this.length, lineSep = "\n") {
    [from3, to2] = clip(this, from3, to2);
    let result = "";
    for (let i3 = 0, pos = 0; i3 < this.children.length && pos <= to2; i3++) {
      let child = this.children[i3], end = pos + child.length;
      if (pos > from3 && i3)
        result += lineSep;
      if (from3 < end && to2 > pos)
        result += child.sliceString(from3 - pos, to2 - pos, lineSep);
      pos = end + 1;
    }
    return result;
  }
  flatten(target) {
    for (let child of this.children)
      child.flatten(target);
  }
  scanIdentical(other, dir) {
    if (!(other instanceof _TextNode))
      return 0;
    let length3 = 0;
    let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
    for (; ; iA += dir, iB += dir) {
      if (iA == eA || iB == eB)
        return length3;
      let chA = this.children[iA], chB = other.children[iB];
      if (chA != chB)
        return length3 + chA.scanIdentical(chB, dir);
      length3 += chA.length + 1;
    }
  }
  static from(children, length3 = children.reduce((l7, ch) => l7 + ch.length + 1, -1)) {
    let lines = 0;
    for (let ch of children)
      lines += ch.lines;
    if (lines < 32) {
      let flat = [];
      for (let ch of children)
        ch.flatten(flat);
      return new TextLeaf(flat, length3);
    }
    let chunk = Math.max(
      32,
      lines >> 5
      /* Tree.BranchShift */
    ), maxChunk = chunk << 1, minChunk = chunk >> 1;
    let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
    function add2(child) {
      let last;
      if (child.lines > maxChunk && child instanceof _TextNode) {
        for (let node3 of child.children)
          add2(node3);
      } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
        flush3();
        chunked.push(child);
      } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
      } else {
        if (currentLines + child.lines > chunk)
          flush3();
        currentLines += child.lines;
        currentLen += child.length + 1;
        currentChunk.push(child);
      }
    }
    function flush3() {
      if (currentLines == 0)
        return;
      chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
      currentLen = -1;
      currentLines = currentChunk.length = 0;
    }
    for (let child of children)
      add2(child);
    flush3();
    return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length3);
  }
};
Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
function textLength(text) {
  let length3 = -1;
  for (let line3 of text)
    length3 += line3.length + 1;
  return length3;
}
function appendText(text, target, from3 = 0, to2 = 1e9) {
  for (let pos = 0, i3 = 0, first = true; i3 < text.length && pos <= to2; i3++) {
    let line3 = text[i3], end = pos + line3.length;
    if (end >= from3) {
      if (end > to2)
        line3 = line3.slice(0, to2 - pos);
      if (pos < from3)
        line3 = line3.slice(from3 - pos);
      if (first) {
        target[target.length - 1] += line3;
        first = false;
      } else
        target.push(line3);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from3, to2) {
  return appendText(text, [""], from3, to2);
}
var RawTextCursor = class {
  constructor(text, dir = 1) {
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  nextInner(skip, dir) {
    this.done = this.lineBreak = false;
    for (; ; ) {
      let last = this.nodes.length - 1;
      let top2 = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
      let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
      if (offset == (dir > 0 ? size : 0)) {
        if (last == 0) {
          this.done = true;
          this.value = "";
          return this;
        }
        if (dir > 0)
          this.offsets[last - 1]++;
        this.nodes.pop();
        this.offsets.pop();
      } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
        this.offsets[last] += dir;
        if (skip == 0) {
          this.lineBreak = true;
          this.value = "\n";
          return this;
        }
        skip--;
      } else if (top2 instanceof TextLeaf) {
        let next3 = top2.text[offset + (dir < 0 ? -1 : 0)];
        this.offsets[last] += dir;
        if (next3.length > Math.max(0, skip)) {
          this.value = skip == 0 ? next3 : dir > 0 ? next3.slice(skip) : next3.slice(0, next3.length - skip);
          return this;
        }
        skip -= next3.length;
      } else {
        let next3 = top2.children[offset + (dir < 0 ? -1 : 0)];
        if (skip > next3.length) {
          skip -= next3.length;
          this.offsets[last] += dir;
        } else {
          if (dir < 0)
            this.offsets[last]--;
          this.nodes.push(next3);
          this.offsets.push(dir > 0 ? 1 : (next3 instanceof TextLeaf ? next3.text.length : next3.children.length) << 1);
        }
      }
    }
  }
  next(skip = 0) {
    if (skip < 0) {
      this.nextInner(-skip, -this.dir);
      skip = this.value.length;
    }
    return this.nextInner(skip, this.dir);
  }
};
var PartialTextCursor = class {
  constructor(text, start, end) {
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }
  nextInner(skip, dir) {
    if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
      this.value = "";
      this.done = true;
      return this;
    }
    skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
    let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
    if (skip > limit)
      skip = limit;
    limit -= skip;
    let { value } = this.cursor.next(skip);
    this.pos += (value.length + skip) * dir;
    this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
    this.done = !this.value;
    return this;
  }
  next(skip = 0) {
    if (skip < 0)
      skip = Math.max(skip, this.from - this.pos);
    else if (skip > 0)
      skip = Math.min(skip, this.to - this.pos);
    return this.nextInner(skip, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
};
var LineCursor = class {
  constructor(inner) {
    this.inner = inner;
    this.afterBreak = true;
    this.value = "";
    this.done = false;
  }
  next(skip = 0) {
    let { done, lineBreak, value } = this.inner.next(skip);
    if (done && this.afterBreak) {
      this.value = "";
      this.afterBreak = false;
    } else if (done) {
      this.done = true;
      this.value = "";
    } else if (lineBreak) {
      if (this.afterBreak) {
        this.value = "";
      } else {
        this.afterBreak = true;
        this.next();
      }
    } else {
      this.value = value;
      this.afterBreak = false;
    }
    return this;
  }
  get lineBreak() {
    return false;
  }
};
if (typeof Symbol != "undefined") {
  Text.prototype[Symbol.iterator] = function() {
    return this.iter();
  };
  RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
var Line = class {
  /**
  @internal
  */
  constructor(from3, to2, number2, text) {
    this.from = from3;
    this.to = to2;
    this.number = number2;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from;
  }
};
function clip(text, from3, to2) {
  from3 = Math.max(0, Math.min(text.length, from3));
  return [from3, Math.max(from3, Math.min(text.length, to2))];
}
var extend = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s66) => s66 ? parseInt(s66, 36) : 1);
for (let i3 = 1; i3 < extend.length; i3++)
  extend[i3] += extend[i3 - 1];
function isExtendingChar(code5) {
  for (let i3 = 1; i3 < extend.length; i3 += 2)
    if (extend[i3] > code5)
      return extend[i3 - 1] <= code5;
  return false;
}
function isRegionalIndicator(code5) {
  return code5 >= 127462 && code5 <= 127487;
}
var ZWJ = 8205;
function findClusterBreak(str, pos, forward = true, includeExtending = true) {
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length)
    return pos;
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
    pos--;
  let prev3 = codePointAt(str, pos);
  pos += codePointSize(prev3);
  while (pos < str.length) {
    let next3 = codePointAt(str, pos);
    if (prev3 == ZWJ || next3 == ZWJ || includeExtending && isExtendingChar(next3)) {
      pos += codePointSize(next3);
      prev3 = next3;
    } else if (isRegionalIndicator(next3)) {
      let countBefore = 0, i3 = pos - 2;
      while (i3 >= 0 && isRegionalIndicator(codePointAt(str, i3))) {
        countBefore++;
        i3 -= 2;
      }
      if (countBefore % 2 == 0)
        break;
      else
        pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    let found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos)
      return found;
    pos--;
  }
  return 0;
}
function surrogateLow(ch) {
  return ch >= 56320 && ch < 57344;
}
function surrogateHigh(ch) {
  return ch >= 55296 && ch < 56320;
}
function codePointAt(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length)
    return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1))
    return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function fromCodePoint(code5) {
  if (code5 <= 65535)
    return String.fromCharCode(code5);
  code5 -= 65536;
  return String.fromCharCode((code5 >> 10) + 55296, (code5 & 1023) + 56320);
}
function codePointSize(code5) {
  return code5 < 65536 ? 1 : 2;
}
var DefaultSplit = /\r\n?|\n/;
var MapMode = /* @__PURE__ */ function(MapMode2) {
  MapMode2[MapMode2["Simple"] = 0] = "Simple";
  MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
  MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
  MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
  return MapMode2;
}(MapMode || (MapMode = {}));
var ChangeDesc = class _ChangeDesc {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(sections) {
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let result = 0;
    for (let i3 = 0; i3 < this.sections.length; i3 += 2)
      result += this.sections[i3];
    return result;
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let result = 0;
    for (let i3 = 0; i3 < this.sections.length; i3 += 2) {
      let ins = this.sections[i3 + 1];
      result += ins < 0 ? this.sections[i3] : ins;
    }
    return result;
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(f4) {
    for (let i3 = 0, posA = 0, posB = 0; i3 < this.sections.length; ) {
      let len = this.sections[i3++], ins = this.sections[i3++];
      if (ins < 0) {
        f4(posA, posB, len);
        posB += len;
      } else {
        posB += ins;
      }
      posA += len;
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(f4, individual = false) {
    iterChanges(this, f4, individual);
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let sections = [];
    for (let i3 = 0; i3 < this.sections.length; ) {
      let len = this.sections[i3++], ins = this.sections[i3++];
      if (ins < 0)
        sections.push(len, ins);
      else
        sections.push(ins, len);
    }
    return new _ChangeDesc(sections);
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other);
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(other, before = false) {
    return other.empty ? this : mapSet(this, other, before);
  }
  mapPos(pos, assoc = -1, mode = MapMode.Simple) {
    let posA = 0, posB = 0;
    for (let i3 = 0; i3 < this.sections.length; ) {
      let len = this.sections[i3++], ins = this.sections[i3++], endA = posA + len;
      if (ins < 0) {
        if (endA > pos)
          return posB + (pos - posA);
        posB += len;
      } else {
        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
          return null;
        if (endA > pos || endA == pos && assoc < 0 && !len)
          return pos == posA || assoc < 0 ? posB : posB + ins;
        posB += ins;
      }
      posA = endA;
    }
    if (pos > posA)
      throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
    return posB;
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(from3, to2 = from3) {
    for (let i3 = 0, pos = 0; i3 < this.sections.length && pos <= to2; ) {
      let len = this.sections[i3++], ins = this.sections[i3++], end = pos + len;
      if (ins >= 0 && pos <= to2 && end >= from3)
        return pos < from3 && end > to2 ? "cover" : true;
      pos = end;
    }
    return false;
  }
  /**
  @internal
  */
  toString() {
    let result = "";
    for (let i3 = 0; i3 < this.sections.length; ) {
      let len = this.sections[i3++], ins = this.sections[i3++];
      result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
    }
    return result;
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections;
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json) || json.length % 2 || json.some((a7) => typeof a7 != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new _ChangeDesc(json);
  }
  /**
  @internal
  */
  static create(sections) {
    return new _ChangeDesc(sections);
  }
};
var ChangeSet = class _ChangeSet extends ChangeDesc {
  constructor(sections, inserted) {
    super(sections);
    this.inserted = inserted;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(doc2) {
    if (this.length != doc2.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
    return doc2;
  }
  mapDesc(other, before = false) {
    return mapSet(this, other, before, true);
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(doc2) {
    let sections = this.sections.slice(), inserted = [];
    for (let i3 = 0, pos = 0; i3 < sections.length; i3 += 2) {
      let len = sections[i3], ins = sections[i3 + 1];
      if (ins >= 0) {
        sections[i3] = ins;
        sections[i3 + 1] = len;
        let index = i3 >> 1;
        while (inserted.length < index)
          inserted.push(Text.empty);
        inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
      }
      pos += len;
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(other) {
    return this.empty ? other : other.empty ? this : composeSets(this, other, true);
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(other, before = false) {
    return other.empty ? this : mapSet(this, other, before, true);
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(f4, individual = false) {
    iterChanges(this, f4, individual);
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return ChangeDesc.create(this.sections);
  }
  /**
  @internal
  */
  filter(ranges) {
    let resultSections = [], resultInserted = [], filteredSections = [];
    let iter2 = new SectionIter(this);
    done:
      for (let i3 = 0, pos = 0; ; ) {
        let next3 = i3 == ranges.length ? 1e9 : ranges[i3++];
        while (pos < next3 || pos == next3 && iter2.len == 0) {
          if (iter2.done)
            break done;
          let len = Math.min(iter2.len, next3 - pos);
          addSection(filteredSections, len, -1);
          let ins = iter2.ins == -1 ? -1 : iter2.off == 0 ? iter2.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0)
            addInsert(resultInserted, resultSections, iter2.text);
          iter2.forward(len);
          pos += len;
        }
        let end = ranges[i3++];
        while (pos < end) {
          if (iter2.done)
            break done;
          let len = Math.min(iter2.len, end - pos);
          addSection(resultSections, len, -1);
          addSection(filteredSections, len, iter2.ins == -1 ? -1 : iter2.off == 0 ? iter2.ins : 0);
          iter2.forward(len);
          pos += len;
        }
      }
    return {
      changes: new _ChangeSet(resultSections, resultInserted),
      filtered: ChangeDesc.create(filteredSections)
    };
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let parts = [];
    for (let i3 = 0; i3 < this.sections.length; i3 += 2) {
      let len = this.sections[i3], ins = this.sections[i3 + 1];
      if (ins < 0)
        parts.push(len);
      else if (ins == 0)
        parts.push([len]);
      else
        parts.push([len].concat(this.inserted[i3 >> 1].toJSON()));
    }
    return parts;
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(changes, length3, lineSep) {
    let sections = [], inserted = [], pos = 0;
    let total = null;
    function flush3(force = false) {
      if (!force && !sections.length)
        return;
      if (pos < length3)
        addSection(sections, length3 - pos, -1);
      let set = new _ChangeSet(sections, inserted);
      total = total ? total.compose(set.map(total)) : set;
      sections = [];
      inserted = [];
      pos = 0;
    }
    function process(spec) {
      if (Array.isArray(spec)) {
        for (let sub of spec)
          process(sub);
      } else if (spec instanceof _ChangeSet) {
        if (spec.length != length3)
          throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length3})`);
        flush3();
        total = total ? total.compose(spec.map(total)) : spec;
      } else {
        let { from: from3, to: to2 = from3, insert: insert2 } = spec;
        if (from3 > to2 || from3 < 0 || to2 > length3)
          throw new RangeError(`Invalid change range ${from3} to ${to2} (in doc of length ${length3})`);
        let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
        let insLen = insText.length;
        if (from3 == to2 && insLen == 0)
          return;
        if (from3 < pos)
          flush3();
        if (from3 > pos)
          addSection(sections, from3 - pos, -1);
        addSection(sections, to2 - from3, insLen);
        addInsert(inserted, sections, insText);
        pos = to2;
      }
    }
    process(changes);
    flush3(!total);
    return total;
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(length3) {
    return new _ChangeSet(length3 ? [length3, -1] : [], []);
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(json) {
    if (!Array.isArray(json))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let sections = [], inserted = [];
    for (let i3 = 0; i3 < json.length; i3++) {
      let part = json[i3];
      if (typeof part == "number") {
        sections.push(part, -1);
      } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i22) => i22 && typeof e != "string")) {
        throw new RangeError("Invalid JSON representation of ChangeSet");
      } else if (part.length == 1) {
        sections.push(part[0], 0);
      } else {
        while (inserted.length < i3)
          inserted.push(Text.empty);
        inserted[i3] = Text.of(part.slice(1));
        sections.push(part[0], inserted[i3].length);
      }
    }
    return new _ChangeSet(sections, inserted);
  }
  /**
  @internal
  */
  static createSet(sections, inserted) {
    return new _ChangeSet(sections, inserted);
  }
};
function addSection(sections, len, ins, forceJoin = false) {
  if (len == 0 && ins <= 0)
    return;
  let last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1])
    sections[last] += len;
  else if (len == 0 && sections[last] == 0)
    sections[last + 1] += ins;
  else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else
    sections.push(len, ins);
}
function addInsert(values, sections, value) {
  if (value.length == 0)
    return;
  let index = sections.length - 2 >> 1;
  if (index < values.length) {
    values[values.length - 1] = values[values.length - 1].append(value);
  } else {
    while (values.length < index)
      values.push(Text.empty);
    values.push(value);
  }
}
function iterChanges(desc, f4, individual) {
  let inserted = desc.inserted;
  for (let posA = 0, posB = 0, i3 = 0; i3 < desc.sections.length; ) {
    let len = desc.sections[i3++], ins = desc.sections[i3++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      let endA = posA, endB = posB, text = Text.empty;
      for (; ; ) {
        endA += len;
        endB += ins;
        if (ins && inserted)
          text = text.append(inserted[i3 - 2 >> 1]);
        if (individual || i3 == desc.sections.length || desc.sections[i3 + 1] < 0)
          break;
        len = desc.sections[i3++];
        ins = desc.sections[i3++];
      }
      f4(posA, endA, posB, endB, text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before, mkSet = false) {
  let sections = [], insert2 = mkSet ? [] : null;
  let a7 = new SectionIter(setA), b8 = new SectionIter(setB);
  for (let inserted = -1; ; ) {
    if (a7.ins == -1 && b8.ins == -1) {
      let len = Math.min(a7.len, b8.len);
      addSection(sections, len, -1);
      a7.forward(len);
      b8.forward(len);
    } else if (b8.ins >= 0 && (a7.ins < 0 || inserted == a7.i || a7.off == 0 && (b8.len < a7.len || b8.len == a7.len && !before))) {
      let len = b8.len;
      addSection(sections, b8.ins, -1);
      while (len) {
        let piece = Math.min(a7.len, len);
        if (a7.ins >= 0 && inserted < a7.i && a7.len <= piece) {
          addSection(sections, 0, a7.ins);
          if (insert2)
            addInsert(insert2, sections, a7.text);
          inserted = a7.i;
        }
        a7.forward(piece);
        len -= piece;
      }
      b8.next();
    } else if (a7.ins >= 0) {
      let len = 0, left = a7.len;
      while (left) {
        if (b8.ins == -1) {
          let piece = Math.min(left, b8.len);
          len += piece;
          left -= piece;
          b8.forward(piece);
        } else if (b8.ins == 0 && b8.len < left) {
          left -= b8.len;
          b8.next();
        } else {
          break;
        }
      }
      addSection(sections, len, inserted < a7.i ? a7.ins : 0);
      if (insert2 && inserted < a7.i)
        addInsert(insert2, sections, a7.text);
      inserted = a7.i;
      a7.forward(a7.len - left);
    } else if (a7.done && b8.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB, mkSet = false) {
  let sections = [];
  let insert2 = mkSet ? [] : null;
  let a7 = new SectionIter(setA), b8 = new SectionIter(setB);
  for (let open = false; ; ) {
    if (a7.done && b8.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else if (a7.ins == 0) {
      addSection(sections, a7.len, 0, open);
      a7.next();
    } else if (b8.len == 0 && !b8.done) {
      addSection(sections, 0, b8.ins, open);
      if (insert2)
        addInsert(insert2, sections, b8.text);
      b8.next();
    } else if (a7.done || b8.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      let len = Math.min(a7.len2, b8.len), sectionLen = sections.length;
      if (a7.ins == -1) {
        let insB = b8.ins == -1 ? -1 : b8.off ? 0 : b8.ins;
        addSection(sections, len, insB, open);
        if (insert2 && insB)
          addInsert(insert2, sections, b8.text);
      } else if (b8.ins == -1) {
        addSection(sections, a7.off ? 0 : a7.len, len, open);
        if (insert2)
          addInsert(insert2, sections, a7.textBit(len));
      } else {
        addSection(sections, a7.off ? 0 : a7.len, b8.off ? 0 : b8.ins, open);
        if (insert2 && !b8.off)
          addInsert(insert2, sections, b8.text);
      }
      open = (a7.ins > len || b8.ins >= 0 && b8.len > len) && (open || sections.length > sectionLen);
      a7.forward2(len);
      b8.forward(len);
    }
  }
}
var SectionIter = class {
  constructor(set) {
    this.set = set;
    this.i = 0;
    this.next();
  }
  next() {
    let { sections } = this.set;
    if (this.i < sections.length) {
      this.len = sections[this.i++];
      this.ins = sections[this.i++];
    } else {
      this.len = 0;
      this.ins = -2;
    }
    this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length ? Text.empty : inserted[index];
  }
  textBit(len) {
    let { inserted } = this.set, index = this.i - 2 >> 1;
    return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
  }
  forward(len) {
    if (len == this.len)
      this.next();
    else {
      this.len -= len;
      this.off += len;
    }
  }
  forward2(len) {
    if (this.ins == -1)
      this.forward(len);
    else if (len == this.ins)
      this.next();
    else {
      this.ins -= len;
      this.off += len;
    }
  }
};
var SelectionRange = class _SelectionRange {
  constructor(from3, to2, flags) {
    this.from = from3;
    this.to = to2;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to;
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let level = this.flags & 7;
    return level == 7 ? null : level;
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let value = this.flags >> 6;
    return value == 16777215 ? void 0 : value;
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(change, assoc = -1) {
    let from3, to2;
    if (this.empty) {
      from3 = to2 = change.mapPos(this.from, assoc);
    } else {
      from3 = change.mapPos(this.from, 1);
      to2 = change.mapPos(this.to, -1);
    }
    return from3 == this.from && to2 == this.to ? this : new _SelectionRange(from3, to2, this.flags);
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(from3, to2 = from3) {
    if (from3 <= this.anchor && to2 >= this.anchor)
      return EditorSelection.range(from3, to2);
    let head = Math.abs(from3 - this.anchor) > Math.abs(to2 - this.anchor) ? from3 : to2;
    return EditorSelection.range(this.anchor, head);
  }
  /**
  Compare this range to another range.
  */
  eq(other, includeAssoc = false) {
    return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(json) {
    if (!json || typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return EditorSelection.range(json.anchor, json.head);
  }
  /**
  @internal
  */
  static create(from3, to2, flags) {
    return new _SelectionRange(from3, to2, flags);
  }
};
var EditorSelection = class _EditorSelection {
  constructor(ranges, mainIndex) {
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(change, assoc = -1) {
    if (change.empty)
      return this;
    return _EditorSelection.create(this.ranges.map((r2) => r2.map(change, assoc)), this.mainIndex);
  }
  /**
  Compare this selection to another selection. By default, ranges
  are compared only by position. When `includeAssoc` is true,
  cursor ranges must also have the same
  [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
  */
  eq(other, includeAssoc = false) {
    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
      return false;
    for (let i3 = 0; i3 < this.ranges.length; i3++)
      if (!this.ranges[i3].eq(other.ranges[i3], includeAssoc))
        return false;
    return true;
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex];
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(range, main = true) {
    return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(range, which = this.mainIndex) {
    let ranges = this.ranges.slice();
    ranges[which] = range;
    return _EditorSelection.create(ranges, this.mainIndex);
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((r2) => r2.toJSON()), main: this.mainIndex };
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(json) {
    if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new _EditorSelection(json.ranges.map((r2) => SelectionRange.fromJSON(r2)), json.main);
  }
  /**
  Create a selection holding a single range.
  */
  static single(anchor, head = anchor) {
    return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(ranges, mainIndex = 0) {
    if (ranges.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let pos = 0, i3 = 0; i3 < ranges.length; i3++) {
      let range = ranges[i3];
      if (range.empty ? range.from <= pos : range.from < pos)
        return _EditorSelection.normalized(ranges.slice(), mainIndex);
      pos = range.to;
    }
    return new _EditorSelection(ranges, mainIndex);
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
    return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
  }
  /**
  Create a selection range.
  */
  static range(anchor, head, goalColumn, bidiLevel) {
    let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
    return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
  }
  /**
  @internal
  */
  static normalized(ranges, mainIndex = 0) {
    let main = ranges[mainIndex];
    ranges.sort((a7, b8) => a7.from - b8.from);
    mainIndex = ranges.indexOf(main);
    for (let i3 = 1; i3 < ranges.length; i3++) {
      let range = ranges[i3], prev3 = ranges[i3 - 1];
      if (range.empty ? range.from <= prev3.to : range.from < prev3.to) {
        let from3 = prev3.from, to2 = Math.max(range.to, prev3.to);
        if (i3 <= mainIndex)
          mainIndex--;
        ranges.splice(--i3, 2, range.anchor > range.head ? _EditorSelection.range(to2, from3) : _EditorSelection.range(from3, to2));
      }
    }
    return new _EditorSelection(ranges, mainIndex);
  }
};
function checkSelection(selection, docLength) {
  for (let range of selection.ranges)
    if (range.to > docLength)
      throw new RangeError("Selection points outside of document");
}
var nextID = 0;
var Facet = class _Facet {
  constructor(combine3, compareInput, compare2, isStatic, enables) {
    this.combine = combine3;
    this.compareInput = compareInput;
    this.compare = compare2;
    this.isStatic = isStatic;
    this.id = nextID++;
    this.default = combine3([]);
    this.extensions = typeof enables == "function" ? enables(this) : enables;
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this;
  }
  /**
  Define a new facet.
  */
  static define(config2 = {}) {
    return new _Facet(config2.combine || ((a7) => a7), config2.compareInput || ((a7, b8) => a7 === b8), config2.compare || (!config2.combine ? sameArray : (a7, b8) => a7 === b8), !!config2.static, config2.enables);
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(value) {
    return new FacetProvider([], this, 0, value);
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(deps, get) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 1, get);
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(deps, get) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new FacetProvider(deps, this, 2, get);
  }
  from(field, get) {
    if (!get)
      get = (x7) => x7;
    return this.compute([field], (state) => get(state.field(field)));
  }
};
function sameArray(a7, b8) {
  return a7 == b8 || a7.length == b8.length && a7.every((e, i3) => e === b8[i3]);
}
var FacetProvider = class {
  constructor(dependencies, facet, type, value) {
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }
  dynamicSlot(addresses) {
    var _a2;
    let getter = this.value;
    let compare2 = this.facet.compareInput;
    let id2 = this.id, idx = addresses[id2] >> 1, multi = this.type == 2;
    let depDoc = false, depSel = false, depAddrs = [];
    for (let dep of this.dependencies) {
      if (dep == "doc")
        depDoc = true;
      else if (dep == "selection")
        depSel = true;
      else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
        depAddrs.push(addresses[dep.id]);
    }
    return {
      create(state) {
        state.values[idx] = getter(state);
        return 1;
      },
      update(state, tr2) {
        if (depDoc && tr2.docChanged || depSel && (tr2.docChanged || tr2.selection) || ensureAll(state, depAddrs)) {
          let newVal = getter(state);
          if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
            state.values[idx] = newVal;
            return 1;
          }
        }
        return 0;
      },
      reconfigure: (state, oldState) => {
        let newVal, oldAddr = oldState.config.address[id2];
        if (oldAddr != null) {
          let oldVal = getAddr(oldState, oldAddr);
          if (this.dependencies.every((dep) => {
            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
          }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
            state.values[idx] = oldVal;
            return 0;
          }
        } else {
          newVal = getter(state);
        }
        state.values[idx] = newVal;
        return 1;
      }
    };
  }
};
function compareArray(a7, b8, compare2) {
  if (a7.length != b8.length)
    return false;
  for (let i3 = 0; i3 < a7.length; i3++)
    if (!compare2(a7[i3], b8[i3]))
      return false;
  return true;
}
function ensureAll(state, addrs) {
  let changed = false;
  for (let addr of addrs)
    if (ensureAddr(state, addr) & 1)
      changed = true;
  return changed;
}
function dynamicFacetSlot(addresses, facet, providers) {
  let providerAddrs = providers.map((p8) => addresses[p8.id]);
  let providerTypes = providers.map((p8) => p8.type);
  let dynamic = providerAddrs.filter((p8) => !(p8 & 1));
  let idx = addresses[facet.id] >> 1;
  function get(state) {
    let values = [];
    for (let i3 = 0; i3 < providerAddrs.length; i3++) {
      let value = getAddr(state, providerAddrs[i3]);
      if (providerTypes[i3] == 2)
        for (let val of value)
          values.push(val);
      else
        values.push(value);
    }
    return facet.combine(values);
  }
  return {
    create(state) {
      for (let addr of providerAddrs)
        ensureAddr(state, addr);
      state.values[idx] = get(state);
      return 1;
    },
    update(state, tr2) {
      if (!ensureAll(state, dynamic))
        return 0;
      let value = get(state);
      if (facet.compare(value, state.values[idx]))
        return 0;
      state.values[idx] = value;
      return 1;
    },
    reconfigure(state, oldState) {
      let depChanged = ensureAll(state, providerAddrs);
      let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      let value = get(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1;
    }
  };
}
var initField = /* @__PURE__ */ Facet.define({ static: true });
var StateField = class _StateField {
  constructor(id2, createF, updateF, compareF, spec) {
    this.id = id2;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    this.provides = void 0;
  }
  /**
  Define a state field.
  */
  static define(config2) {
    let field = new _StateField(nextID++, config2.create, config2.update, config2.compare || ((a7, b8) => a7 === b8), config2);
    if (config2.provide)
      field.provides = config2.provide(field);
    return field;
  }
  create(state) {
    let init3 = state.facet(initField).find((i3) => i3.field == this);
    return ((init3 === null || init3 === void 0 ? void 0 : init3.create) || this.createF)(state);
  }
  /**
  @internal
  */
  slot(addresses) {
    let idx = addresses[this.id] >> 1;
    return {
      create: (state) => {
        state.values[idx] = this.create(state);
        return 1;
      },
      update: (state, tr2) => {
        let oldVal = state.values[idx];
        let value = this.updateF(oldVal, tr2);
        if (this.compareF(oldVal, value))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure: (state, oldState) => {
        if (oldState.config.address[this.id] != null) {
          state.values[idx] = oldState.field(this);
          return 0;
        }
        state.values[idx] = this.create(state);
        return 1;
      }
    };
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(create) {
    return [this, initField.of({ field: this, create })];
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this;
  }
};
var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function prec(value) {
  return (ext) => new PrecExtension(ext, value);
}
var Prec = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ prec(Prec_.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ prec(Prec_.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ prec(Prec_.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ prec(Prec_.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ prec(Prec_.lowest)
};
var PrecExtension = class {
  constructor(inner, prec2) {
    this.inner = inner;
    this.prec = prec2;
  }
};
var Compartment = class _Compartment {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(ext) {
    return new CompartmentInstance(this, ext);
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(content2) {
    return _Compartment.reconfigure.of({ compartment: this, extension: content2 });
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(state) {
    return state.config.compartments.get(this);
  }
};
var CompartmentInstance = class {
  constructor(compartment, inner) {
    this.compartment = compartment;
    this.inner = inner;
  }
};
var Configuration = class _Configuration {
  constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
    this.base = base2;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.facets = facets;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length)
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      );
  }
  staticFacet(facet) {
    let addr = this.address[facet.id];
    return addr == null ? facet.default : this.staticValues[addr >> 1];
  }
  static resolve(base2, compartments, oldState) {
    let fields = [];
    let facets = /* @__PURE__ */ Object.create(null);
    let newCompartments = /* @__PURE__ */ new Map();
    for (let ext of flatten(base2, compartments, newCompartments)) {
      if (ext instanceof StateField)
        fields.push(ext);
      else
        (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
    }
    let address = /* @__PURE__ */ Object.create(null);
    let staticValues = [];
    let dynamicSlots = [];
    for (let field of fields) {
      address[field.id] = dynamicSlots.length << 1;
      dynamicSlots.push((a7) => field.slot(a7));
    }
    let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
    for (let id2 in facets) {
      let providers = facets[id2], facet = providers[0].facet;
      let oldProviders = oldFacets && oldFacets[id2] || [];
      if (providers.every(
        (p8) => p8.type == 0
        /* Provider.Static */
      )) {
        address[facet.id] = staticValues.length << 1 | 1;
        if (sameArray(oldProviders, providers)) {
          staticValues.push(oldState.facet(facet));
        } else {
          let value = facet.combine(providers.map((p8) => p8.value));
          staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
        }
      } else {
        for (let p8 of providers) {
          if (p8.type == 0) {
            address[p8.id] = staticValues.length << 1 | 1;
            staticValues.push(p8.value);
          } else {
            address[p8.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a7) => p8.dynamicSlot(a7));
          }
        }
        address[facet.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a7) => dynamicFacetSlot(a7, facet, providers));
      }
    }
    let dynamic = dynamicSlots.map((f4) => f4(address));
    return new _Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
  }
};
function flatten(extension, compartments, newCompartments) {
  let result = [[], [], [], [], []];
  let seen = /* @__PURE__ */ new Map();
  function inner(ext, prec2) {
    let known = seen.get(ext);
    if (known != null) {
      if (known <= prec2)
        return;
      let found = result[known].indexOf(ext);
      if (found > -1)
        result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance)
        newCompartments.delete(ext.compartment);
    }
    seen.set(ext, prec2);
    if (Array.isArray(ext)) {
      for (let e of ext)
        inner(e, prec2);
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment))
        throw new RangeError(`Duplicate use of compartment in extensions`);
      let content2 = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content2);
      inner(content2, prec2);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec2].push(ext);
      if (ext.provides)
        inner(ext.provides, prec2);
    } else if (ext instanceof FacetProvider) {
      result[prec2].push(ext);
      if (ext.facet.extensions)
        inner(ext.facet.extensions, Prec_.default);
    } else {
      let content2 = ext.extension;
      if (!content2)
        throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      inner(content2, prec2);
    }
  }
  inner(extension, Prec_.default);
  return result.reduce((a7, b8) => a7.concat(b8));
}
function ensureAddr(state, addr) {
  if (addr & 1)
    return 2;
  let idx = addr >> 1;
  let status = state.status[idx];
  if (status == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2)
    return status;
  state.status[idx] = 4;
  let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
var languageData = /* @__PURE__ */ Facet.define();
var allowMultipleSelections = /* @__PURE__ */ Facet.define({
  combine: (values) => values.some((v6) => v6),
  static: true
});
var lineSeparator = /* @__PURE__ */ Facet.define({
  combine: (values) => values.length ? values[0] : void 0,
  static: true
});
var changeFilter = /* @__PURE__ */ Facet.define();
var transactionFilter = /* @__PURE__ */ Facet.define();
var transactionExtender = /* @__PURE__ */ Facet.define();
var readOnly = /* @__PURE__ */ Facet.define({
  combine: (values) => values.length ? values[0] : false
});
var Annotation = class {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new AnnotationType();
  }
};
var AnnotationType = class {
  /**
  Create an instance of this annotation.
  */
  of(value) {
    return new Annotation(this, value);
  }
};
var StateEffectType = class {
  /**
  @internal
  */
  constructor(map) {
    this.map = map;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(value) {
    return new StateEffect(this, value);
  }
};
var StateEffect = class _StateEffect {
  /**
  @internal
  */
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(mapping) {
    let mapped = this.type.map(this.value, mapping);
    return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(type) {
    return this.type == type;
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(spec = {}) {
    return new StateEffectType(spec.map || ((v6) => v6));
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(effects, mapping) {
    if (!effects.length)
      return effects;
    let result = [];
    for (let effect of effects) {
      let mapped = effect.map(mapping);
      if (mapped)
        result.push(mapped);
    }
    return result;
  }
};
StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
var Transaction = class _Transaction {
  constructor(startState, changes, selection, effects, annotations, scrollIntoView3) {
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView3;
    this._doc = null;
    this._state = null;
    if (selection)
      checkSelection(selection, changes.newLength);
    if (!annotations.some((a7) => a7.type == _Transaction.time))
      this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
  }
  /**
  @internal
  */
  static create(startState, changes, selection, effects, annotations, scrollIntoView3) {
    return new _Transaction(startState, changes, selection, effects, annotations, scrollIntoView3);
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    if (!this._state)
      this.startState.applyTransaction(this);
    return this._state;
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(type) {
    for (let ann of this.annotations)
      if (ann.type == type)
        return ann.value;
    return void 0;
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(event) {
    let e = this.annotation(_Transaction.userEvent);
    return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
  }
};
Transaction.time = /* @__PURE__ */ Annotation.define();
Transaction.userEvent = /* @__PURE__ */ Annotation.define();
Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
Transaction.remote = /* @__PURE__ */ Annotation.define();
function joinRanges(a7, b8) {
  let result = [];
  for (let iA = 0, iB = 0; ; ) {
    let from3, to2;
    if (iA < a7.length && (iB == b8.length || b8[iB] >= a7[iA])) {
      from3 = a7[iA++];
      to2 = a7[iA++];
    } else if (iB < b8.length) {
      from3 = b8[iB++];
      to2 = b8[iB++];
    } else
      return result;
    if (!result.length || result[result.length - 1] < from3)
      result.push(from3, to2);
    else if (result[result.length - 1] < to2)
      result[result.length - 1] = to2;
  }
}
function mergeTransaction(a7, b8, sequential) {
  var _a2;
  let mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b8.changes;
    mapForB = ChangeSet.empty(b8.changes.length);
    changes = a7.changes.compose(b8.changes);
  } else {
    mapForA = b8.changes.map(a7.changes);
    mapForB = a7.changes.mapDesc(b8.changes, true);
    changes = a7.changes.compose(mapForA);
  }
  return {
    changes,
    selection: b8.selection ? b8.selection.map(mapForB) : (_a2 = a7.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
    effects: StateEffect.mapEffects(a7.effects, mapForA).concat(StateEffect.mapEffects(b8.effects, mapForB)),
    annotations: a7.annotations.length ? a7.annotations.concat(b8.annotations) : b8.annotations,
    scrollIntoView: a7.scrollIntoView || b8.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  let sel = spec.selection, annotations = asArray(spec.annotations);
  if (spec.userEvent)
    annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter) {
  let s66 = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false)
    filter = false;
  for (let i3 = 1; i3 < specs.length; i3++) {
    if (specs[i3].filter === false)
      filter = false;
    let seq = !!specs[i3].sequential;
    s66 = mergeTransaction(s66, resolveTransactionInner(state, specs[i3], seq ? s66.changes.newLength : state.doc.length), seq);
  }
  let tr2 = Transaction.create(state, s66.changes, s66.selection, s66.effects, s66.annotations, s66.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr2) : tr2);
}
function filterTransaction(tr2) {
  let state = tr2.startState;
  let result = true;
  for (let filter of state.facet(changeFilter)) {
    let value = filter(tr2);
    if (value === false) {
      result = false;
      break;
    }
    if (Array.isArray(value))
      result = result === true ? value : joinRanges(result, value);
  }
  if (result !== true) {
    let changes, back;
    if (result === false) {
      back = tr2.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      let filtered = tr2.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr2 = Transaction.create(state, changes, tr2.selection && tr2.selection.map(back), StateEffect.mapEffects(tr2.effects, back), tr2.annotations, tr2.scrollIntoView);
  }
  let filters = state.facet(transactionFilter);
  for (let i3 = filters.length - 1; i3 >= 0; i3--) {
    let filtered = filters[i3](tr2);
    if (filtered instanceof Transaction)
      tr2 = filtered;
    else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
      tr2 = filtered[0];
    else
      tr2 = resolveTransaction(state, asArray(filtered), false);
  }
  return tr2;
}
function extendTransaction(tr2) {
  let state = tr2.startState, extenders = state.facet(transactionExtender), spec = tr2;
  for (let i3 = extenders.length - 1; i3 >= 0; i3--) {
    let extension = extenders[i3](tr2);
    if (extension && Object.keys(extension).length)
      spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr2.changes.newLength), true);
  }
  return spec == tr2 ? tr2 : Transaction.create(state, tr2.changes, tr2.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
var none = [];
function asArray(value) {
  return value == null ? none : Array.isArray(value) ? value : [value];
}
var CharCategory = /* @__PURE__ */ function(CharCategory2) {
  CharCategory2[CharCategory2["Word"] = 0] = "Word";
  CharCategory2[CharCategory2["Space"] = 1] = "Space";
  CharCategory2[CharCategory2["Other"] = 2] = "Other";
  return CharCategory2;
}(CharCategory || (CharCategory = {}));
var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var wordChar;
try {
  wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_7) {
}
function hasWordChar(str) {
  if (wordChar)
    return wordChar.test(str);
  for (let i3 = 0; i3 < str.length; i3++) {
    let ch = str[i3];
    if (/\w/.test(ch) || ch > "" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
      return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return (char3) => {
    if (!/\S/.test(char3))
      return CharCategory.Space;
    if (hasWordChar(char3))
      return CharCategory.Word;
    for (let i3 = 0; i3 < wordChars.length; i3++)
      if (char3.indexOf(wordChars[i3]) > -1)
        return CharCategory.Word;
    return CharCategory.Other;
  };
}
var EditorState = class _EditorState {
  constructor(config2, doc2, selection, values, computeSlot, tr2) {
    this.config = config2;
    this.doc = doc2;
    this.selection = selection;
    this.values = values;
    this.status = config2.statusTemplate.slice();
    this.computeSlot = computeSlot;
    if (tr2)
      tr2._state = this;
    for (let i3 = 0; i3 < this.config.dynamicSlots.length; i3++)
      ensureAddr(this, i3 << 1);
    this.computeSlot = null;
  }
  field(field, require2 = true) {
    let addr = this.config.address[field.id];
    if (addr == null) {
      if (require2)
        throw new RangeError("Field is not present in this state");
      return void 0;
    }
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...specs) {
    return resolveTransaction(this, specs, true);
  }
  /**
  @internal
  */
  applyTransaction(tr2) {
    let conf = this.config, { base: base2, compartments } = conf;
    for (let effect of tr2.effects) {
      if (effect.is(Compartment.reconfigure)) {
        if (conf) {
          compartments = /* @__PURE__ */ new Map();
          conf.compartments.forEach((val, key2) => compartments.set(key2, val));
          conf = null;
        }
        compartments.set(effect.value.compartment, effect.value.extension);
      } else if (effect.is(StateEffect.reconfigure)) {
        conf = null;
        base2 = effect.value;
      } else if (effect.is(StateEffect.appendConfig)) {
        conf = null;
        base2 = asArray(base2).concat(effect.value);
      }
    }
    let startValues;
    if (!conf) {
      conf = Configuration.resolve(base2, compartments, this);
      let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
      startValues = intermediateState.values;
    } else {
      startValues = tr2.startState.values.slice();
    }
    let selection = tr2.startState.facet(allowMultipleSelections) ? tr2.newSelection : tr2.newSelection.asSingle();
    new _EditorState(conf, tr2.newDoc, selection, startValues, (state, slot) => slot.update(state, tr2), tr2);
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(text) {
    if (typeof text == "string")
      text = this.toText(text);
    return this.changeByRange((range) => ({
      changes: { from: range.from, to: range.to, insert: text },
      range: EditorSelection.cursor(range.from + text.length)
    }));
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(f4) {
    let sel = this.selection;
    let result1 = f4(sel.ranges[0]);
    let changes = this.changes(result1.changes), ranges = [result1.range];
    let effects = asArray(result1.effects);
    for (let i3 = 1; i3 < sel.ranges.length; i3++) {
      let result = f4(sel.ranges[i3]);
      let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
      for (let j11 = 0; j11 < i3; j11++)
        ranges[j11] = ranges[j11].map(newMapped);
      let mapBy = changes.mapDesc(newChanges, true);
      ranges.push(result.range.map(mapBy));
      changes = changes.compose(newMapped);
      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
    }
    return {
      changes,
      selection: EditorSelection.create(ranges, sel.mainIndex),
      effects
    };
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(spec = []) {
    if (spec instanceof ChangeSet)
      return spec;
    return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(string2) {
    return Text.of(string2.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(from3 = 0, to2 = this.doc.length) {
    return this.doc.sliceString(from3, to2, this.lineBreak);
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(facet) {
    let addr = this.config.address[facet.id];
    if (addr == null)
      return facet.default;
    ensureAddr(this, addr);
    return getAddr(this, addr);
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(fields) {
    let result = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (fields)
      for (let prop in fields) {
        let value = fields[prop];
        if (value instanceof StateField && this.config.address[value.id] != null)
          result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
    return result;
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(json, config2 = {}, fields) {
    if (!json || typeof json.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let fieldInit = [];
    if (fields)
      for (let prop in fields) {
        if (Object.prototype.hasOwnProperty.call(json, prop)) {
          let field = fields[prop], value = json[prop];
          fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
        }
      }
    return _EditorState.create({
      doc: json.doc,
      selection: EditorSelection.fromJSON(json.selection),
      extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
    });
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(config2 = {}) {
    let configuration = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
    let doc2 = config2.doc instanceof Text ? config2.doc : Text.of((config2.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
    let selection = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
    checkSelection(selection, doc2.length);
    if (!configuration.staticFacet(allowMultipleSelections))
      selection = selection.asSingle();
    return new _EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(_EditorState.tabSize);
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return this.facet(_EditorState.lineSeparator) || "\n";
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(readOnly);
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(phrase2, ...insert2) {
    for (let map of this.facet(_EditorState.phrases))
      if (Object.prototype.hasOwnProperty.call(map, phrase2)) {
        phrase2 = map[phrase2];
        break;
      }
    if (insert2.length)
      phrase2 = phrase2.replace(/\$(\$|\d*)/g, (m10, i3) => {
        if (i3 == "$")
          return "$";
        let n3 = +(i3 || 1);
        return !n3 || n3 > insert2.length ? m10 : insert2[n3 - 1];
      });
    return phrase2;
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(name2, pos, side = -1) {
    let values = [];
    for (let provider of this.facet(languageData)) {
      for (let result of provider(this, pos, side)) {
        if (Object.prototype.hasOwnProperty.call(result, name2))
          values.push(result[name2]);
      }
    }
    return values;
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(at4) {
    return makeCategorizer(this.languageDataAt("wordChars", at4).join(""));
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(pos) {
    let { text, from: from3, length: length3 } = this.doc.lineAt(pos);
    let cat = this.charCategorizer(pos);
    let start = pos - from3, end = pos - from3;
    while (start > 0) {
      let prev3 = findClusterBreak(text, start, false);
      if (cat(text.slice(prev3, start)) != CharCategory.Word)
        break;
      start = prev3;
    }
    while (end < length3) {
      let next3 = findClusterBreak(text, end);
      if (cat(text.slice(end, next3)) != CharCategory.Word)
        break;
      end = next3;
    }
    return start == end ? null : EditorSelection.range(start + from3, end + from3);
  }
};
EditorState.allowMultipleSelections = allowMultipleSelections;
EditorState.tabSize = /* @__PURE__ */ Facet.define({
  combine: (values) => values.length ? values[0] : 4
});
EditorState.lineSeparator = lineSeparator;
EditorState.readOnly = readOnly;
EditorState.phrases = /* @__PURE__ */ Facet.define({
  compare(a7, b8) {
    let kA = Object.keys(a7), kB = Object.keys(b8);
    return kA.length == kB.length && kA.every((k5) => a7[k5] == b8[k5]);
  }
});
EditorState.languageData = languageData;
EditorState.changeFilter = changeFilter;
EditorState.transactionFilter = transactionFilter;
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
function combineConfig(configs, defaults3, combine3 = {}) {
  let result = {};
  for (let config2 of configs)
    for (let key2 of Object.keys(config2)) {
      let value = config2[key2], current = result[key2];
      if (current === void 0)
        result[key2] = value;
      else if (current === value || value === void 0)
        ;
      else if (Object.hasOwnProperty.call(combine3, key2))
        result[key2] = combine3[key2](current, value);
      else
        throw new Error("Config merge conflict for field " + key2);
    }
  for (let key2 in defaults3)
    if (result[key2] === void 0)
      result[key2] = defaults3[key2];
  return result;
}
var RangeValue = class {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(other) {
    return this == other;
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(from3, to2 = from3) {
    return Range.create(from3, to2, this);
  }
};
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = MapMode.TrackDel;
var Range = class _Range {
  constructor(from3, to2, value) {
    this.from = from3;
    this.to = to2;
    this.value = value;
  }
  /**
  @internal
  */
  static create(from3, to2, value) {
    return new _Range(from3, to2, value);
  }
};
function cmpRange(a7, b8) {
  return a7.from - b8.from || a7.value.startSide - b8.value.startSide;
}
var Chunk = class _Chunk {
  constructor(from3, to2, value, maxPoint) {
    this.from = from3;
    this.to = to2;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(pos, side, end, startAt = 0) {
    let arr = end ? this.to : this.from;
    for (let lo2 = startAt, hi2 = arr.length; ; ) {
      if (lo2 == hi2)
        return lo2;
      let mid = lo2 + hi2 >> 1;
      let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
      if (mid == lo2)
        return diff >= 0 ? lo2 : hi2;
      if (diff >= 0)
        hi2 = mid;
      else
        lo2 = mid + 1;
    }
  }
  between(offset, from3, to2, f4) {
    for (let i3 = this.findIndex(from3, -1e9, true), e = this.findIndex(to2, 1e9, false, i3); i3 < e; i3++)
      if (f4(this.from[i3] + offset, this.to[i3] + offset, this.value[i3]) === false)
        return false;
  }
  map(offset, changes) {
    let value = [], from3 = [], to2 = [], newPos = -1, maxPoint = -1;
    for (let i3 = 0; i3 < this.value.length; i3++) {
      let val = this.value[i3], curFrom = this.from[i3] + offset, curTo = this.to[i3] + offset, newFrom, newTo;
      if (curFrom == curTo) {
        let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
        if (mapped == null)
          continue;
        newFrom = newTo = mapped;
        if (val.startSide != val.endSide) {
          newTo = changes.mapPos(curFrom, val.endSide);
          if (newTo < newFrom)
            continue;
        }
      } else {
        newFrom = changes.mapPos(curFrom, val.startSide);
        newTo = changes.mapPos(curTo, val.endSide);
        if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
          continue;
      }
      if ((newTo - newFrom || val.endSide - val.startSide) < 0)
        continue;
      if (newPos < 0)
        newPos = newFrom;
      if (val.point)
        maxPoint = Math.max(maxPoint, newTo - newFrom);
      value.push(val);
      from3.push(newFrom - newPos);
      to2.push(newTo - newPos);
    }
    return { mapped: value.length ? new _Chunk(from3, to2, value, maxPoint) : null, pos: newPos };
  }
};
var RangeSet = class _RangeSet {
  constructor(chunkPos, chunk, nextLayer, maxPoint) {
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  static create(chunkPos, chunk, nextLayer, maxPoint) {
    return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
  }
  /**
  @internal
  */
  get length() {
    let last = this.chunk.length - 1;
    return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty)
      return 0;
    let size = this.nextLayer.size;
    for (let chunk of this.chunk)
      size += chunk.value.length;
    return size;
  }
  /**
  @internal
  */
  chunkEnd(index) {
    return this.chunkPos[index] + this.chunk[index].length;
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(updateSpec) {
    let { add: add2 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
    let filter = updateSpec.filter;
    if (add2.length == 0 && !filter)
      return this;
    if (sort)
      add2 = add2.slice().sort(cmpRange);
    if (this.isEmpty)
      return add2.length ? _RangeSet.of(add2) : this;
    let cur2 = new LayerCursor(this, null, -1).goto(0), i3 = 0, spill = [];
    let builder = new RangeSetBuilder();
    while (cur2.value || i3 < add2.length) {
      if (i3 < add2.length && (cur2.from - add2[i3].from || cur2.startSide - add2[i3].value.startSide) >= 0) {
        let range = add2[i3++];
        if (!builder.addInner(range.from, range.to, range.value))
          spill.push(range);
      } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i3 == add2.length || this.chunkEnd(cur2.chunkIndex) < add2[i3].from) && (!filter || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
        cur2.nextChunk();
      } else {
        if (!filter || filterFrom > cur2.to || filterTo < cur2.from || filter(cur2.from, cur2.to, cur2.value)) {
          if (!builder.addInner(cur2.from, cur2.to, cur2.value))
            spill.push(Range.create(cur2.from, cur2.to, cur2.value));
        }
        cur2.next();
      }
    }
    return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(changes) {
    if (changes.empty || this.isEmpty)
      return this;
    let chunks = [], chunkPos = [], maxPoint = -1;
    for (let i3 = 0; i3 < this.chunk.length; i3++) {
      let start = this.chunkPos[i3], chunk = this.chunk[i3];
      let touch = changes.touchesRange(start, start + chunk.length);
      if (touch === false) {
        maxPoint = Math.max(maxPoint, chunk.maxPoint);
        chunks.push(chunk);
        chunkPos.push(changes.mapPos(start));
      } else if (touch === true) {
        let { mapped, pos } = chunk.map(start, changes);
        if (mapped) {
          maxPoint = Math.max(maxPoint, mapped.maxPoint);
          chunks.push(mapped);
          chunkPos.push(pos);
        }
      }
    }
    let next3 = this.nextLayer.map(changes);
    return chunks.length == 0 ? next3 : new _RangeSet(chunkPos, chunks, next3 || _RangeSet.empty, maxPoint);
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(from3, to2, f4) {
    if (this.isEmpty)
      return;
    for (let i3 = 0; i3 < this.chunk.length; i3++) {
      let start = this.chunkPos[i3], chunk = this.chunk[i3];
      if (to2 >= start && from3 <= start + chunk.length && chunk.between(start, from3 - start, to2 - start, f4) === false)
        return;
    }
    this.nextLayer.between(from3, to2, f4);
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(from3 = 0) {
    return HeapCursor.from([this]).goto(from3);
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this;
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(sets, from3 = 0) {
    return HeapCursor.from(sets).goto(from3);
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
    let a7 = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let b8 = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
    let sharedChunks = findSharedChunks(a7, b8, textDiff);
    let sideA = new SpanCursor(a7, sharedChunks, minPointSize);
    let sideB = new SpanCursor(b8, sharedChunks, minPointSize);
    textDiff.iterGaps((fromA, fromB, length3) => compare(sideA, fromA, sideB, fromB, length3, comparator));
    if (textDiff.empty && textDiff.length == 0)
      compare(sideA, 0, sideB, 0, 0, comparator);
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(oldSets, newSets, from3 = 0, to2) {
    if (to2 == null)
      to2 = 1e9 - 1;
    let a7 = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
    let b8 = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
    if (a7.length != b8.length)
      return false;
    if (!a7.length)
      return true;
    let sharedChunks = findSharedChunks(a7, b8);
    let sideA = new SpanCursor(a7, sharedChunks, 0).goto(from3), sideB = new SpanCursor(b8, sharedChunks, 0).goto(from3);
    for (; ; ) {
      if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
        return false;
      if (sideA.to > to2)
        return true;
      sideA.next();
      sideB.next();
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(sets, from3, to2, iterator, minPointSize = -1) {
    let cursor = new SpanCursor(sets, null, minPointSize).goto(from3), pos = from3;
    let openRanges = cursor.openStart;
    for (; ; ) {
      let curTo = Math.min(cursor.to, to2);
      if (cursor.point) {
        let active = cursor.activeForPoint(cursor.to);
        let openCount = cursor.pointFrom < from3 ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
        iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
        openRanges = Math.min(cursor.openEnd(curTo), active.length);
      } else if (curTo > pos) {
        iterator.span(pos, curTo, cursor.active, openRanges);
        openRanges = cursor.openEnd(curTo);
      }
      if (cursor.to > to2)
        return openRanges + (cursor.point && cursor.to > to2 ? 1 : 0);
      pos = cursor.to;
      cursor.next();
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(ranges, sort = false) {
    let build = new RangeSetBuilder();
    for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
      build.add(range.from, range.to, range.value);
    return build.finish();
  }
  /**
  Join an array of range sets into a single set.
  */
  static join(sets) {
    if (!sets.length)
      return _RangeSet.empty;
    let result = sets[sets.length - 1];
    for (let i3 = sets.length - 2; i3 >= 0; i3--) {
      for (let layer2 = sets[i3]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)
        result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
    }
    return result;
  }
};
RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1)
    for (let prev3 = ranges[0], i3 = 1; i3 < ranges.length; i3++) {
      let cur2 = ranges[i3];
      if (cmpRange(prev3, cur2) > 0)
        return ranges.slice().sort(cmpRange);
      prev3 = cur2;
    }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
var RangeSetBuilder = class _RangeSetBuilder {
  finishChunk(newArrays) {
    this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
    this.chunkPos.push(this.chunkStart);
    this.chunkStart = -1;
    this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
    this.maxPoint = -1;
    if (newArrays) {
      this.from = [];
      this.to = [];
      this.value = [];
    }
  }
  /**
  Create an empty builder.
  */
  constructor() {
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1e9;
    this.lastTo = -1e9;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(from3, to2, value) {
    if (!this.addInner(from3, to2, value))
      (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from3, to2, value);
  }
  /**
  @internal
  */
  addInner(from3, to2, value) {
    let diff = from3 - this.lastTo || value.startSide - this.last.endSide;
    if (diff <= 0 && (from3 - this.lastFrom || value.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    if (diff < 0)
      return false;
    if (this.from.length == 250)
      this.finishChunk(true);
    if (this.chunkStart < 0)
      this.chunkStart = from3;
    this.from.push(from3 - this.chunkStart);
    this.to.push(to2 - this.chunkStart);
    this.last = value;
    this.lastFrom = from3;
    this.lastTo = to2;
    this.value.push(value);
    if (value.point)
      this.maxPoint = Math.max(this.maxPoint, to2 - from3);
    return true;
  }
  /**
  @internal
  */
  addChunk(from3, chunk) {
    if ((from3 - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
      return false;
    if (this.from.length)
      this.finishChunk(true);
    this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
    this.chunks.push(chunk);
    this.chunkPos.push(from3);
    let last = chunk.value.length - 1;
    this.last = chunk.value[last];
    this.lastFrom = chunk.from[last] + from3;
    this.lastTo = chunk.to[last] + from3;
    return true;
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(RangeSet.empty);
  }
  /**
  @internal
  */
  finishInner(next3) {
    if (this.from.length)
      this.finishChunk(false);
    if (this.chunks.length == 0)
      return next3;
    let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next3) : next3, this.setMaxPoint);
    this.from = null;
    return result;
  }
};
function findSharedChunks(a7, b8, textDiff) {
  let inA = /* @__PURE__ */ new Map();
  for (let set of a7)
    for (let i3 = 0; i3 < set.chunk.length; i3++)
      if (set.chunk[i3].maxPoint <= 0)
        inA.set(set.chunk[i3], set.chunkPos[i3]);
  let shared = /* @__PURE__ */ new Set();
  for (let set of b8)
    for (let i3 = 0; i3 < set.chunk.length; i3++) {
      let known = inA.get(set.chunk[i3]);
      if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i3] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i3].length)))
        shared.add(set.chunk[i3]);
    }
  return shared;
}
var LayerCursor = class {
  constructor(layer2, skip, minPoint, rank = 0) {
    this.layer = layer2;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(pos, side = -1e9) {
    this.chunkIndex = this.rangeIndex = 0;
    this.gotoInner(pos, side, false);
    return this;
  }
  gotoInner(pos, side, forward) {
    while (this.chunkIndex < this.layer.chunk.length) {
      let next3 = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(next3) || this.layer.chunkEnd(this.chunkIndex) < pos || next3.maxPoint < this.minPoint))
        break;
      this.chunkIndex++;
      forward = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
      if (!forward || this.rangeIndex < rangeIndex)
        this.setRangeIndex(rangeIndex);
    }
    this.next();
  }
  forward(pos, side) {
    if ((this.to - pos || this.endSide - side) < 0)
      this.gotoInner(pos, side, true);
  }
  next() {
    for (; ; ) {
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9;
        this.value = null;
        break;
      } else {
        let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
        let from3 = chunkPos + chunk.from[this.rangeIndex];
        this.from = from3;
        this.to = chunkPos + chunk.to[this.rangeIndex];
        this.value = chunk.value[this.rangeIndex];
        this.setRangeIndex(this.rangeIndex + 1);
        if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
    }
  }
  setRangeIndex(index) {
    if (index == this.layer.chunk[this.chunkIndex].value.length) {
      this.chunkIndex++;
      if (this.skip) {
        while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
          this.chunkIndex++;
      }
      this.rangeIndex = 0;
    } else {
      this.rangeIndex = index;
    }
  }
  nextChunk() {
    this.chunkIndex++;
    this.rangeIndex = 0;
    this.next();
  }
  compare(other) {
    return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
  }
};
var HeapCursor = class _HeapCursor {
  constructor(heap) {
    this.heap = heap;
  }
  static from(sets, skip = null, minPoint = -1) {
    let heap = [];
    for (let i3 = 0; i3 < sets.length; i3++) {
      for (let cur2 = sets[i3]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
        if (cur2.maxPoint >= minPoint)
          heap.push(new LayerCursor(cur2, skip, minPoint, i3));
      }
    }
    return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(pos, side = -1e9) {
    for (let cur2 of this.heap)
      cur2.goto(pos, side);
    for (let i3 = this.heap.length >> 1; i3 >= 0; i3--)
      heapBubble(this.heap, i3);
    this.next();
    return this;
  }
  forward(pos, side) {
    for (let cur2 of this.heap)
      cur2.forward(pos, side);
    for (let i3 = this.heap.length >> 1; i3 >= 0; i3--)
      heapBubble(this.heap, i3);
    if ((this.to - pos || this.value.endSide - side) < 0)
      this.next();
  }
  next() {
    if (this.heap.length == 0) {
      this.from = this.to = 1e9;
      this.value = null;
      this.rank = -1;
    } else {
      let top2 = this.heap[0];
      this.from = top2.from;
      this.to = top2.to;
      this.value = top2.value;
      this.rank = top2.rank;
      if (top2.value)
        top2.next();
      heapBubble(this.heap, 0);
    }
  }
};
function heapBubble(heap, index) {
  for (let cur2 = heap[index]; ; ) {
    let childIndex = (index << 1) + 1;
    if (childIndex >= heap.length)
      break;
    let child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur2.compare(child) < 0)
      break;
    heap[childIndex] = cur2;
    heap[index] = child;
    index = childIndex;
  }
}
var SpanCursor = class {
  constructor(sets, skip, minPoint) {
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1e9;
    this.endSide = 0;
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  goto(pos, side = -1e9) {
    this.cursor.goto(pos, side);
    this.active.length = this.activeTo.length = this.activeRank.length = 0;
    this.minActive = -1;
    this.to = pos;
    this.endSide = side;
    this.openStart = -1;
    this.next();
    return this;
  }
  forward(pos, side) {
    while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
      this.removeActive(this.minActive);
    this.cursor.forward(pos, side);
  }
  removeActive(index) {
    remove(this.active, index);
    remove(this.activeTo, index);
    remove(this.activeRank, index);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  addActive(trackOpen) {
    let i3 = 0, { value, to: to2, rank } = this.cursor;
    while (i3 < this.activeRank.length && (rank - this.activeRank[i3] || to2 - this.activeTo[i3]) > 0)
      i3++;
    insert(this.active, i3, value);
    insert(this.activeTo, i3, to2);
    insert(this.activeRank, i3, rank);
    if (trackOpen)
      insert(trackOpen, i3, this.cursor.from);
    this.minActive = findMinIndex(this.active, this.activeTo);
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let from3 = this.to, wasPoint = this.point;
    this.point = null;
    let trackOpen = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let a7 = this.minActive;
      if (a7 > -1 && (this.activeTo[a7] - this.cursor.from || this.active[a7].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[a7] > from3) {
          this.to = this.activeTo[a7];
          this.endSide = this.active[a7].endSide;
          break;
        }
        this.removeActive(a7);
        if (trackOpen)
          remove(trackOpen, a7);
      } else if (!this.cursor.value) {
        this.to = this.endSide = 1e9;
        break;
      } else if (this.cursor.from > from3) {
        this.to = this.cursor.from;
        this.endSide = this.cursor.startSide;
        break;
      } else {
        let nextVal = this.cursor.value;
        if (!nextVal.point) {
          this.addActive(trackOpen);
          this.cursor.next();
        } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
          this.cursor.next();
        } else {
          this.point = nextVal;
          this.pointFrom = this.cursor.from;
          this.pointRank = this.cursor.rank;
          this.to = this.cursor.to;
          this.endSide = nextVal.endSide;
          this.cursor.next();
          this.forward(this.to, this.endSide);
          break;
        }
      }
    }
    if (trackOpen) {
      this.openStart = 0;
      for (let i3 = trackOpen.length - 1; i3 >= 0 && trackOpen[i3] < from3; i3--)
        this.openStart++;
    }
  }
  activeForPoint(to2) {
    if (!this.active.length)
      return this.active;
    let active = [];
    for (let i3 = this.active.length - 1; i3 >= 0; i3--) {
      if (this.activeRank[i3] < this.pointRank)
        break;
      if (this.activeTo[i3] > to2 || this.activeTo[i3] == to2 && this.active[i3].endSide >= this.point.endSide)
        active.push(this.active[i3]);
    }
    return active.reverse();
  }
  openEnd(to2) {
    let open = 0;
    for (let i3 = this.activeTo.length - 1; i3 >= 0 && this.activeTo[i3] > to2; i3--)
      open++;
    return open;
  }
};
function compare(a7, startA, b8, startB, length3, comparator) {
  a7.goto(startA);
  b8.goto(startB);
  let endB = startB + length3;
  let pos = startB, dPos = startB - startA;
  for (; ; ) {
    let diff = a7.to + dPos - b8.to || a7.endSide - b8.endSide;
    let end = diff < 0 ? a7.to + dPos : b8.to, clipEnd = Math.min(end, endB);
    if (a7.point || b8.point) {
      if (!(a7.point && b8.point && (a7.point == b8.point || a7.point.eq(b8.point)) && sameValues(a7.activeForPoint(a7.to), b8.activeForPoint(b8.to))))
        comparator.comparePoint(pos, clipEnd, a7.point, b8.point);
    } else {
      if (clipEnd > pos && !sameValues(a7.active, b8.active))
        comparator.compareRange(pos, clipEnd, a7.active, b8.active);
    }
    if (end > endB)
      break;
    pos = end;
    if (diff <= 0)
      a7.next();
    if (diff >= 0)
      b8.next();
  }
}
function sameValues(a7, b8) {
  if (a7.length != b8.length)
    return false;
  for (let i3 = 0; i3 < a7.length; i3++)
    if (a7[i3] != b8[i3] && !a7[i3].eq(b8[i3]))
      return false;
  return true;
}
function remove(array, index) {
  for (let i3 = index, e = array.length - 1; i3 < e; i3++)
    array[i3] = array[i3 + 1];
  array.pop();
}
function insert(array, index, value) {
  for (let i3 = array.length - 1; i3 >= index; i3--)
    array[i3 + 1] = array[i3];
  array[index] = value;
}
function findMinIndex(value, array) {
  let found = -1, foundPos = 1e9;
  for (let i3 = 0; i3 < array.length; i3++)
    if ((array[i3] - foundPos || value[i3].endSide - value[found].endSide) < 0) {
      found = i3;
      foundPos = array[i3];
    }
  return found;
}
function countColumn(string2, tabSize, to2 = string2.length) {
  let n3 = 0;
  for (let i3 = 0; i3 < to2; ) {
    if (string2.charCodeAt(i3) == 9) {
      n3 += tabSize - n3 % tabSize;
      i3++;
    } else {
      n3++;
      i3 = findClusterBreak(string2, i3);
    }
  }
  return n3;
}
function findColumn(string2, col, tabSize, strict) {
  for (let i3 = 0, n3 = 0; ; ) {
    if (n3 >= col)
      return i3;
    if (i3 == string2.length)
      break;
    n3 += string2.charCodeAt(i3) == 9 ? tabSize - n3 % tabSize : 1;
    i3 = findClusterBreak(string2, i3);
  }
  return strict === true ? -1 : string2.length;
}

// https://esm.sh/v135/style-mod@4.1.2/es2020/style-mod.development.mjs
var C4 = "ͼ";
var COUNT = typeof Symbol == "undefined" ? "__" + C4 : Symbol.for(C4);
var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
var StyleModule = class {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(spec, options) {
    this.rules = [];
    let { finish } = options || {};
    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }
    function render(selectors, spec2, target, isKeyframes) {
      let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes3 = isAt && isAt[1] == "keyframes";
      if (isAt && spec2 == null)
        return target.push(selectors[0] + ";");
      for (let prop in spec2) {
        let value = spec2[prop];
        if (/&/.test(prop)) {
          render(
            prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a7, b8) => a7.concat(b8)),
            value,
            target
          );
        } else if (value && typeof value == "object") {
          if (!isAt)
            throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes3);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l7) => "-" + l7.toLowerCase()) + ": " + value + ";");
        }
      }
      if (local.length || keyframes3) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (let prop in spec)
      render(splitSelector(prop), spec[prop], this.rules);
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join("\n");
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let id2 = top[COUNT] || 1;
    top[COUNT] = id2 + 1;
    return C4 + id2.toString(36);
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(root, modules, options) {
    let set = root[SET], nonce = options && options.nonce;
    if (!set)
      set = new StyleSet(root, nonce);
    else if (nonce)
      set.setNonce(nonce);
    set.mount(Array.isArray(modules) ? modules : [modules], root);
  }
};
var adoptedSet = /* @__PURE__ */ new Map();
var StyleSet = class {
  constructor(root, nonce) {
    let doc2 = root.ownerDocument || root, win = doc2.defaultView;
    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
      let adopted = adoptedSet.get(doc2);
      if (adopted)
        return root[SET] = adopted;
      this.sheet = new win.CSSStyleSheet();
      adoptedSet.set(doc2, this);
    } else {
      this.styleTag = doc2.createElement("style");
      if (nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
    this.modules = [];
    root[SET] = this;
  }
  mount(modules, root) {
    let sheet4 = this.sheet;
    let pos = 0, j11 = 0;
    for (let i3 = 0; i3 < modules.length; i3++) {
      let mod = modules[i3], index = this.modules.indexOf(mod);
      if (index < j11 && index > -1) {
        this.modules.splice(index, 1);
        j11--;
        index = -1;
      }
      if (index == -1) {
        this.modules.splice(j11++, 0, mod);
        if (sheet4)
          for (let k5 = 0; k5 < mod.rules.length; k5++)
            sheet4.insertRule(mod.rules[k5], pos++);
      } else {
        while (j11 < index)
          pos += this.modules[j11++].rules.length;
        pos += mod.rules.length;
        j11++;
      }
    }
    if (sheet4) {
      if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
        root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
    } else {
      let text = "";
      for (let i3 = 0; i3 < this.modules.length; i3++)
        text += this.modules[i3].getRules() + "\n";
      this.styleTag.textContent = text;
      let target = root.head || root;
      if (this.styleTag.parentNode != target)
        target.insertBefore(this.styleTag, target.firstChild);
    }
  }
  setNonce(nonce) {
    if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
      this.styleTag.setAttribute("nonce", nonce);
  }
};

// https://esm.sh/v135/w3c-keyname@2.2.8/es2020/w3c-keyname.development.mjs
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie5 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (i = 0; i < 10; i++)
  base[48 + i] = base[96 + i] = String(i);
var i;
for (i = 1; i <= 24; i++)
  base[i + 111] = "F" + i;
var i;
for (i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}
var i;
for (code4 in base)
  if (!shift.hasOwnProperty(code4))
    shift[code4] = base[code4];
var code4;
function keyName(event) {
  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie5 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name2 == "Esc")
    name2 = "Escape";
  if (name2 == "Del")
    name2 = "Delete";
  if (name2 == "Left")
    name2 = "ArrowLeft";
  if (name2 == "Up")
    name2 = "ArrowUp";
  if (name2 == "Right")
    name2 = "ArrowRight";
  if (name2 == "Down")
    name2 = "ArrowDown";
  return name2;
}

// https://esm.sh/v135/@codemirror/view@6.35.0/es2020/view.development.mjs
function getSelection(root) {
  let target;
  if (root.nodeType == 11) {
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }
  return target.getSelection();
}
function contains(dom, node3) {
  return node3 ? dom == node3 || dom.contains(node3.nodeType != 1 ? node3.parentNode : node3) : false;
}
function hasSelection(dom, selection) {
  if (!selection.anchorNode)
    return false;
  try {
    return contains(dom, selection.anchorNode);
  } catch (_7) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3)
    return textRange(dom, 0, dom.nodeValue.length).getClientRects();
  else if (dom.nodeType == 1)
    return dom.getClientRects();
  else
    return [];
}
function isEquivalentPosition(node3, off, targetNode, targetOff) {
  return targetNode ? scanFor(node3, off, targetNode, targetOff, -1) || scanFor(node3, off, targetNode, targetOff, 1) : false;
}
function domIndex(node3) {
  for (var index = 0; ; index++) {
    node3 = node3.previousSibling;
    if (!node3)
      return index;
  }
}
function isBlockElement(node3) {
  return node3.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node3.nodeName);
}
function scanFor(node3, off, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node3 == targetNode && off == targetOff)
      return true;
    if (off == (dir < 0 ? 0 : maxOffset(node3))) {
      if (node3.nodeName == "DIV")
        return false;
      let parent = node3.parentNode;
      if (!parent || parent.nodeType != 1)
        return false;
      off = domIndex(node3) + (dir < 0 ? 0 : 1);
      node3 = parent;
    } else if (node3.nodeType == 1) {
      node3 = node3.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node3.nodeType == 1 && node3.contentEditable == "false")
        return false;
      off = dir < 0 ? maxOffset(node3) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node3) {
  return node3.nodeType == 3 ? node3.nodeValue.length : node3.childNodes.length;
}
function flattenRect(rect, left) {
  let x7 = left ? rect.left : rect.right;
  return { left: x7, right: x7, top: rect.top, bottom: rect.bottom };
}
function windowRect(win) {
  let vp = win.visualViewport;
  if (vp)
    return {
      left: 0,
      right: vp.width,
      top: 0,
      bottom: vp.height
    };
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function getScale(elt, rect) {
  let scaleX = rect.width / elt.offsetWidth;
  let scaleY = rect.height / elt.offsetHeight;
  if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
    scaleX = 1;
  if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
    scaleY = 1;
  return { scaleX, scaleY };
}
function scrollRectIntoView(dom, rect, side, x7, y9, xMargin, yMargin, ltr) {
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  for (let cur2 = dom, stop = false; cur2 && !stop; ) {
    if (cur2.nodeType == 1) {
      let bounding, top2 = cur2 == doc2.body;
      let scaleX = 1, scaleY = 1;
      if (top2) {
        bounding = windowRect(win);
      } else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
          stop = true;
        if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
          cur2 = cur2.assignedSlot || cur2.parentNode;
          continue;
        }
        let rect2 = cur2.getBoundingClientRect();
        ({ scaleX, scaleY } = getScale(cur2, rect2));
        bounding = {
          left: rect2.left,
          right: rect2.left + cur2.clientWidth * scaleX,
          top: rect2.top,
          bottom: rect2.top + cur2.clientHeight * scaleY
        };
      }
      let moveX = 0, moveY = 0;
      if (y9 == "nearest") {
        if (rect.top < bounding.top) {
          moveY = -(bounding.top - rect.top + yMargin);
          if (side > 0 && rect.bottom > bounding.bottom + moveY)
            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
        } else if (rect.bottom > bounding.bottom) {
          moveY = rect.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect.top - moveY < bounding.top)
            moveY = -(bounding.top + moveY - rect.top + yMargin);
        }
      } else {
        let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
        let targetTop = y9 == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y9 == "start" || y9 == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x7 == "nearest") {
        if (rect.left < bounding.left) {
          moveX = -(bounding.left - rect.left + xMargin);
          if (side > 0 && rect.right > bounding.right + moveX)
            moveX = rect.right - bounding.right + moveX + xMargin;
        } else if (rect.right > bounding.right) {
          moveX = rect.right - bounding.right + xMargin;
          if (side < 0 && rect.left < bounding.left + moveX)
            moveX = -(bounding.left + moveX - rect.left + xMargin);
        }
      } else {
        let targetLeft = x7 == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x7 == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top2) {
          win.scrollBy(moveX, moveY);
        } else {
          let movedX = 0, movedY = 0;
          if (moveY) {
            let start = cur2.scrollTop;
            cur2.scrollTop += moveY / scaleY;
            movedY = (cur2.scrollTop - start) * scaleY;
          }
          if (moveX) {
            let start = cur2.scrollLeft;
            cur2.scrollLeft += moveX / scaleX;
            movedX = (cur2.scrollLeft - start) * scaleX;
          }
          rect = {
            left: rect.left - movedX,
            top: rect.top - movedY,
            right: rect.right - movedX,
            bottom: rect.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1)
            x7 = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1)
            y9 = "nearest";
        }
      }
      if (top2)
        break;
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
}
function scrollableParents(dom) {
  let doc2 = dom.ownerDocument, x7, y9;
  for (let cur2 = dom.parentNode; cur2; ) {
    if (cur2 == doc2.body || x7 && y9) {
      break;
    } else if (cur2.nodeType == 1) {
      if (!y9 && cur2.scrollHeight > cur2.clientHeight)
        y9 = cur2;
      if (!x7 && cur2.scrollWidth > cur2.clientWidth)
        x7 = cur2;
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
  return { x: x7, y: y9 };
}
var DOMSelectionState = class {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  eq(domSel) {
    return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
  }
  setRange(range) {
    let { anchorNode, focusNode } = range;
    this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
  }
  set(anchorNode, anchorOffset, focusNode, focusOffset) {
    this.anchorNode = anchorNode;
    this.anchorOffset = anchorOffset;
    this.focusNode = focusNode;
    this.focusOffset = focusOffset;
  }
};
var preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stack = [];
  for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
    stack.push(cur2, cur2.scrollTop, cur2.scrollLeft);
    if (cur2 == cur2.ownerDocument)
      break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (let i3 = 0; i3 < stack.length; ) {
      let elt = stack[i3++], top2 = stack[i3++], left = stack[i3++];
      if (elt.scrollTop != top2)
        elt.scrollTop = top2;
      if (elt.scrollLeft != left)
        elt.scrollLeft = left;
    }
  }
}
var scratchRange;
function textRange(node3, from3, to2 = from3) {
  let range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node3, to2);
  range.setStart(node3, from3);
  return range;
}
function dispatchKey(elt, name2, code5, mods) {
  let options = { key: name2, code: name2, keyCode: code5, which: code5, cancelable: true };
  if (mods)
    ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
  let down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  let up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
function getRoot(node3) {
  while (node3) {
    if (node3 && (node3.nodeType == 9 || node3.nodeType == 11 && node3.host))
      return node3;
    node3 = node3.assignedSlot || node3.parentNode;
  }
  return null;
}
function clearAttributes(node3) {
  while (node3.attributes.length)
    node3.removeAttributeNode(node3.attributes[0]);
}
function atElementStart(doc2, selection) {
  let node3 = selection.focusNode, offset = selection.focusOffset;
  if (!node3 || selection.anchorNode != node3 || selection.anchorOffset != offset)
    return false;
  offset = Math.min(offset, maxOffset(node3));
  for (; ; ) {
    if (offset) {
      if (node3.nodeType != 1)
        return false;
      let prev3 = node3.childNodes[offset - 1];
      if (prev3.contentEditable == "false")
        offset--;
      else {
        node3 = prev3;
        offset = maxOffset(node3);
      }
    } else if (node3 == doc2) {
      return true;
    } else {
      offset = domIndex(node3);
      node3 = node3.parentNode;
    }
  }
}
function isScrolledToBottom(elt) {
  return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
}
function textNodeBefore(startNode, startOffset) {
  for (let node3 = startNode, offset = startOffset; ; ) {
    if (node3.nodeType == 3 && offset > 0) {
      return { node: node3, offset };
    } else if (node3.nodeType == 1 && offset > 0) {
      if (node3.contentEditable == "false")
        return null;
      node3 = node3.childNodes[offset - 1];
      offset = maxOffset(node3);
    } else if (node3.parentNode && !isBlockElement(node3)) {
      offset = domIndex(node3);
      node3 = node3.parentNode;
    } else {
      return null;
    }
  }
}
function textNodeAfter(startNode, startOffset) {
  for (let node3 = startNode, offset = startOffset; ; ) {
    if (node3.nodeType == 3 && offset < node3.nodeValue.length) {
      return { node: node3, offset };
    } else if (node3.nodeType == 1 && offset < node3.childNodes.length) {
      if (node3.contentEditable == "false")
        return null;
      node3 = node3.childNodes[offset];
      offset = 0;
    } else if (node3.parentNode && !isBlockElement(node3)) {
      offset = domIndex(node3) + 1;
      node3 = node3.parentNode;
    } else {
      return null;
    }
  }
}
var DOMPos = class _DOMPos {
  constructor(node3, offset, precise = true) {
    this.node = node3;
    this.offset = offset;
    this.precise = precise;
  }
  static before(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom), precise);
  }
  static after(dom, precise) {
    return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
  }
};
var noChildren = [];
var ContentView = class _ContentView {
  constructor() {
    this.parent = null;
    this.dom = null;
    this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(view) {
    let pos = this.posAtStart;
    for (let child of this.children) {
      if (child == view)
        return pos;
      pos += child.length + child.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(view) {
    return this.posBefore(view) + view.length;
  }
  sync(view, track) {
    if (this.flags & 2) {
      let parent = this.dom;
      let prev3 = null, next3;
      for (let child of this.children) {
        if (child.flags & 7) {
          if (!child.dom && (next3 = prev3 ? prev3.nextSibling : parent.firstChild)) {
            let contentView = _ContentView.get(next3);
            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
              child.reuseDOM(next3);
          }
          child.sync(view, track);
          child.flags &= ~7;
        }
        next3 = prev3 ? prev3.nextSibling : parent.firstChild;
        if (track && !track.written && track.node == parent && next3 != child.dom)
          track.written = true;
        if (child.dom.parentNode == parent) {
          while (next3 && next3 != child.dom)
            next3 = rm$1(next3);
        } else {
          parent.insertBefore(child.dom, next3);
        }
        prev3 = child.dom;
      }
      next3 = prev3 ? prev3.nextSibling : parent.firstChild;
      if (next3 && track && track.node == parent)
        track.written = true;
      while (next3)
        next3 = rm$1(next3);
    } else if (this.flags & 1) {
      for (let child of this.children)
        if (child.flags & 7) {
          child.sync(view, track);
          child.flags &= ~7;
        }
    }
  }
  reuseDOM(_dom) {
  }
  localPosFromDOM(node3, offset) {
    let after;
    if (node3 == this.dom) {
      after = this.dom.childNodes[offset];
    } else {
      let bias = maxOffset(node3) == 0 ? 0 : offset == 0 ? -1 : 1;
      for (; ; ) {
        let parent = node3.parentNode;
        if (parent == this.dom)
          break;
        if (bias == 0 && parent.firstChild != parent.lastChild) {
          if (node3 == parent.firstChild)
            bias = -1;
          else
            bias = 1;
        }
        node3 = parent;
      }
      if (bias < 0)
        after = node3;
      else
        after = node3.nextSibling;
    }
    if (after == this.dom.firstChild)
      return 0;
    while (after && !_ContentView.get(after))
      after = after.nextSibling;
    if (!after)
      return this.length;
    for (let i3 = 0, pos = 0; ; i3++) {
      let child = this.children[i3];
      if (child.dom == after)
        return pos;
      pos += child.length + child.breakAfter;
    }
  }
  domBoundsAround(from3, to2, offset = 0) {
    let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
    for (let i3 = 0, pos = offset, prevEnd = offset; i3 < this.children.length; i3++) {
      let child = this.children[i3], end = pos + child.length;
      if (pos < from3 && end > to2)
        return child.domBoundsAround(from3, to2, pos);
      if (end >= from3 && fromI == -1) {
        fromI = i3;
        fromStart = pos;
      }
      if (pos > to2 && child.dom.parentNode == this.dom) {
        toI = i3;
        toEnd = prevEnd;
        break;
      }
      prevEnd = end;
      pos = end + child.breakAfter;
    }
    return {
      from: fromStart,
      to: toEnd < 0 ? offset + this.length : toEnd,
      startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
    };
  }
  markDirty(andParent = false) {
    this.flags |= 2;
    this.markParentsDirty(andParent);
  }
  markParentsDirty(childList) {
    for (let parent = this.parent; parent; parent = parent.parent) {
      if (childList)
        parent.flags |= 2;
      if (parent.flags & 1)
        return;
      parent.flags |= 1;
      childList = false;
    }
  }
  setParent(parent) {
    if (this.parent != parent) {
      this.parent = parent;
      if (this.flags & 7)
        this.markParentsDirty(true);
    }
  }
  setDOM(dom) {
    if (this.dom == dom)
      return;
    if (this.dom)
      this.dom.cmView = null;
    this.dom = dom;
    dom.cmView = this;
  }
  get rootView() {
    for (let v6 = this; ; ) {
      let parent = v6.parent;
      if (!parent)
        return v6;
      v6 = parent;
    }
  }
  replaceChildren(from3, to2, children = noChildren) {
    this.markDirty();
    for (let i3 = from3; i3 < to2; i3++) {
      let child = this.children[i3];
      if (child.parent == this && children.indexOf(child) < 0)
        child.destroy();
    }
    if (children.length < 250)
      this.children.splice(from3, to2 - from3, ...children);
    else
      this.children = [].concat(this.children.slice(0, from3), children, this.children.slice(to2));
    for (let i3 = 0; i3 < children.length; i3++)
      children[i3].setParent(this);
  }
  ignoreMutation(_rec) {
    return false;
  }
  ignoreEvent(_event) {
    return false;
  }
  childCursor(pos = this.length) {
    return new ChildCursor(this.children, pos, this.children.length);
  }
  childPos(pos, bias = 1) {
    return this.childCursor().findPos(pos, bias);
  }
  toString() {
    let name2 = this.constructor.name.replace("View", "");
    return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(node3) {
    return node3.cmView;
  }
  get isEditable() {
    return true;
  }
  get isWidget() {
    return false;
  }
  get isHidden() {
    return false;
  }
  merge(from3, to2, source, hasStart, openStart, openEnd) {
    return false;
  }
  become(other) {
    return false;
  }
  canReuseDOM(other) {
    return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0;
  }
  destroy() {
    for (let child of this.children)
      if (child.parent == this)
        child.destroy();
    this.parent = null;
  }
};
ContentView.prototype.breakAfter = 0;
function rm$1(dom) {
  let next3 = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next3;
}
var ChildCursor = class {
  constructor(children, pos, i3) {
    this.children = children;
    this.pos = pos;
    this.i = i3;
    this.off = 0;
  }
  findPos(pos, bias = 1) {
    for (; ; ) {
      if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
        this.off = pos - this.pos;
        return this;
      }
      let next3 = this.children[--this.i];
      this.pos -= next3.length + next3.breakAfter;
    }
  }
};
function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
  let { children } = parent;
  let before = children.length ? children[fromI] : null;
  let last = insert2.length ? insert2[insert2.length - 1] : null;
  let breakAtEnd = last ? last.breakAfter : breakAtStart;
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
    return;
  if (toI < children.length) {
    let after = children[toI];
    if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
        insert2[insert2.length - 1] = after;
      } else {
        if (toOff || after.children.length && !after.children[0].length)
          after.merge(0, toOff, null, false, 0, openEnd);
        insert2.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      if (last)
        last.breakAfter = 1;
      else
        breakAtStart = 1;
    }
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
        before.breakAfter = insert2.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  while (fromI < toI && insert2.length) {
    if (children[toI - 1].become(insert2[insert2.length - 1])) {
      toI--;
      insert2.pop();
      openEnd = insert2.length ? 0 : openStart;
    } else if (children[fromI].become(insert2[0])) {
      fromI++;
      insert2.shift();
      openStart = insert2.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
    fromI--;
  if (fromI < toI || insert2.length)
    parent.replaceChildren(fromI, toI, insert2);
}
function mergeChildrenInto(parent, from3, to2, insert2, openStart, openEnd) {
  let cur2 = parent.childCursor();
  let { i: toI, off: toOff } = cur2.findPos(to2, 1);
  let { i: fromI, off: fromOff } = cur2.findPos(from3, -1);
  let dLen = from3 - to2;
  for (let view of insert2)
    dLen += view.length;
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
}
var nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
var doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
var ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
var ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
var ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
var ie6 = !!(ie_upto10 || ie_11up || ie_edge);
var gecko = !ie6 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
var chrome = !ie6 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
var webkit = "webkitFontSmoothing" in doc.documentElement.style;
var safari = !ie6 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
var ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
var browser = {
  mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
  windows: /* @__PURE__ */ /Win/.test(nav.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
  ie: ie6,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko,
  gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios,
  android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
  webkit,
  safari,
  webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
var MaxJoinLen = 256;
var TextView = class _TextView extends ContentView {
  constructor(text) {
    super();
    this.text = text;
  }
  get length() {
    return this.text.length;
  }
  createDOM(textDOM) {
    this.setDOM(textDOM || document.createTextNode(this.text));
  }
  sync(view, track) {
    if (!this.dom)
      this.createDOM();
    if (this.dom.nodeValue != this.text) {
      if (track && track.node == this.dom)
        track.written = true;
      this.dom.nodeValue = this.text;
    }
  }
  reuseDOM(dom) {
    if (dom.nodeType == 3)
      this.createDOM(dom);
  }
  merge(from3, to2, source) {
    if (this.flags & 8 || source && (!(source instanceof _TextView) || this.length - (to2 - from3) + source.length > MaxJoinLen || source.flags & 8))
      return false;
    this.text = this.text.slice(0, from3) + (source ? source.text : "") + this.text.slice(to2);
    this.markDirty();
    return true;
  }
  split(from3) {
    let result = new _TextView(this.text.slice(from3));
    this.text = this.text.slice(0, from3);
    this.markDirty();
    result.flags |= this.flags & 8;
    return result;
  }
  localPosFromDOM(node3, offset) {
    return node3 == this.dom ? offset : offset ? this.text.length : 0;
  }
  domAtPos(pos) {
    return new DOMPos(this.dom, pos);
  }
  domBoundsAround(_from, _to, offset) {
    return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(pos, side) {
    return textCoords(this.dom, pos, side);
  }
};
var MarkView = class _MarkView extends ContentView {
  constructor(mark, children = [], length3 = 0) {
    super();
    this.mark = mark;
    this.children = children;
    this.length = length3;
    for (let ch of children)
      ch.setParent(this);
  }
  setAttrs(dom) {
    clearAttributes(dom);
    if (this.mark.class)
      dom.className = this.mark.class;
    if (this.mark.attrs)
      for (let name2 in this.mark.attrs)
        dom.setAttribute(name2, this.mark.attrs[name2]);
    return dom;
  }
  canReuseDOM(other) {
    return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
  }
  reuseDOM(node3) {
    if (node3.nodeName == this.mark.tagName.toUpperCase()) {
      this.setDOM(node3);
      this.flags |= 4 | 2;
    }
  }
  sync(view, track) {
    if (!this.dom)
      this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
    else if (this.flags & 4)
      this.setAttrs(this.dom);
    super.sync(view, track);
  }
  merge(from3, to2, source, _hasStart, openStart, openEnd) {
    if (source && (!(source instanceof _MarkView && source.mark.eq(this.mark)) || from3 && openStart <= 0 || to2 < this.length && openEnd <= 0))
      return false;
    mergeChildrenInto(this, from3, to2, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
    this.markDirty();
    return true;
  }
  split(from3) {
    let result = [], off = 0, detachFrom = -1, i3 = 0;
    for (let elt of this.children) {
      let end = off + elt.length;
      if (end > from3)
        result.push(off < from3 ? elt.split(from3 - off) : elt);
      if (detachFrom < 0 && off >= from3)
        detachFrom = i3;
      off = end;
      i3++;
    }
    let length3 = this.length - from3;
    this.length = from3;
    if (detachFrom > -1) {
      this.children.length = detachFrom;
      this.markDirty();
    }
    return new _MarkView(this.mark, result, length3);
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  coordsAt(pos, side) {
    return coordsInChildren(this, pos, side);
  }
};
function textCoords(text, pos, side) {
  let length3 = text.nodeValue.length;
  if (pos > length3)
    pos = length3;
  let from3 = pos, to2 = pos, flatten2 = 0;
  if (pos == 0 && side < 0 || pos == length3 && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      if (pos) {
        from3--;
        flatten2 = 1;
      } else if (to2 < length3) {
        to2++;
        flatten2 = -1;
      }
    }
  } else {
    if (side < 0)
      from3--;
    else if (to2 < length3)
      to2++;
  }
  let rects = textRange(text, from3, to2).getClientRects();
  if (!rects.length)
    return null;
  let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten2 && rect.width == 0)
    rect = Array.prototype.find.call(rects, (r2) => r2.width) || rect;
  return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
}
var WidgetView = class _WidgetView extends ContentView {
  static create(widget, length3, side) {
    return new _WidgetView(widget, length3, side);
  }
  constructor(widget, length3, side) {
    super();
    this.widget = widget;
    this.length = length3;
    this.side = side;
    this.prevWidget = null;
  }
  split(from3) {
    let result = _WidgetView.create(this.widget, this.length - from3, this.side);
    this.length -= from3;
    return result;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  getSide() {
    return this.side;
  }
  merge(from3, to2, source, hasStart, openStart, openEnd) {
    if (source && (!(source instanceof _WidgetView) || !this.widget.compare(source.widget) || from3 > 0 && openStart <= 0 || to2 < this.length && openEnd <= 0))
      return false;
    this.length = from3 + (source ? source.length : 0) + (this.length - to2);
    return true;
  }
  become(other) {
    if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
      if (!this.widget.compare(other.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return Text.empty;
    let top2 = this;
    while (top2.parent)
      top2 = top2.parent;
    let { view } = top2, text = view && view.state.doc, start = this.posAtStart;
    return text ? text.slice(start, start + this.length) : Text.empty;
  }
  domAtPos(pos) {
    return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos, side) {
    let custom = this.widget.coordsAt(this.dom, pos, side);
    if (custom)
      return custom;
    let rects = this.dom.getClientRects(), rect = null;
    if (!rects.length)
      return null;
    let fromBack = this.side ? this.side < 0 : pos > 0;
    for (let i3 = fromBack ? rects.length - 1 : 0; ; i3 += fromBack ? -1 : 1) {
      rect = rects[i3];
      if (pos > 0 ? i3 == 0 : i3 == rects.length - 1 || rect.top < rect.bottom)
        break;
    }
    return flattenRect(rect, !fromBack);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
};
var WidgetBufferView = class _WidgetBufferView extends ContentView {
  constructor(side) {
    super();
    this.side = side;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(other) {
    return other instanceof _WidgetBufferView && other.side == this.side;
  }
  split() {
    return new _WidgetBufferView(this.side);
  }
  sync() {
    if (!this.dom) {
      let dom = document.createElement("img");
      dom.className = "cm-widgetBuffer";
      dom.setAttribute("aria-hidden", "true");
      this.setDOM(dom);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(pos) {
    return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(pos) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return Text.empty;
  }
  get isHidden() {
    return true;
  }
};
TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
function inlineDOMAtPos(parent, pos) {
  let dom = parent.dom, { children } = parent, i3 = 0;
  for (let off = 0; i3 < children.length; i3++) {
    let child = children[i3], end = off + child.length;
    if (end == off && child.getSide() <= 0)
      continue;
    if (pos > off && pos < end && child.dom.parentNode == dom)
      return child.domAtPos(pos - off);
    if (pos <= off)
      break;
    off = end;
  }
  for (let j11 = i3; j11 > 0; j11--) {
    let prev3 = children[j11 - 1];
    if (prev3.dom.parentNode == dom)
      return prev3.domAtPos(prev3.length);
  }
  for (let j11 = i3; j11 < children.length; j11++) {
    let next3 = children[j11];
    if (next3.dom.parentNode == dom)
      return next3.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
function joinInlineInto(parent, view, open) {
  let last, { children } = parent;
  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  let before = null, beforePos = -1, after = null, afterPos = -1;
  function scan(view2, pos2) {
    for (let i3 = 0, off = 0; i3 < view2.children.length && off <= pos2; i3++) {
      let child = view2.children[i3], end = off + child.length;
      if (end >= pos2) {
        if (child.children.length) {
          scan(child, pos2 - off);
        } else if ((!after || after.isHidden && side > 0) && (end > pos2 || off == end && child.getSide() > 0)) {
          after = child;
          afterPos = pos2 - off;
        } else if (off < pos2 || off == end && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos2 - off;
        }
      }
      off = end;
    }
  }
  scan(view, pos);
  let target = (side < 0 ? before : after) || before || after;
  if (target)
    return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view);
}
function fallbackRect(view) {
  let last = view.dom.lastChild;
  if (!last)
    return view.dom.getBoundingClientRect();
  let rects = clientRectsFor(last);
  return rects[rects.length - 1] || null;
}
function combineAttrs(source, target) {
  for (let name2 in source) {
    if (name2 == "class" && target.class)
      target.class += " " + source.class;
    else if (name2 == "style" && target.style)
      target.style += ";" + source.style;
    else
      target[name2] = source[name2];
  }
  return target;
}
var noAttrs = /* @__PURE__ */ Object.create(null);
function attrsEq(a7, b8, ignore) {
  if (a7 == b8)
    return true;
  if (!a7)
    a7 = noAttrs;
  if (!b8)
    b8 = noAttrs;
  let keysA = Object.keys(a7), keysB = Object.keys(b8);
  if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
    return false;
  for (let key2 of keysA) {
    if (key2 != ignore && (keysB.indexOf(key2) == -1 || a7[key2] !== b8[key2]))
      return false;
  }
  return true;
}
function updateAttrs(dom, prev3, attrs) {
  let changed = false;
  if (prev3) {
    for (let name2 in prev3)
      if (!(attrs && name2 in attrs)) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = "";
        else
          dom.removeAttribute(name2);
      }
  }
  if (attrs) {
    for (let name2 in attrs)
      if (!(prev3 && prev3[name2] == attrs[name2])) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = attrs[name2];
        else
          dom.setAttribute(name2, attrs[name2]);
      }
  }
  return changed;
}
function getAttrs(dom) {
  let attrs = /* @__PURE__ */ Object.create(null);
  for (let i3 = 0; i3 < dom.attributes.length; i3++) {
    let attr = dom.attributes[i3];
    attrs[attr.name] = attr.value;
  }
  return attrs;
}
var WidgetType = class {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(widget) {
    return false;
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(dom, view) {
    return false;
  }
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1;
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0;
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(event) {
    return true;
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(dom, pos, side) {
    return null;
  }
  /**
  @internal
  */
  get isHidden() {
    return false;
  }
  /**
  @internal
  */
  get editable() {
    return false;
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(dom) {
  }
};
var BlockType = /* @__PURE__ */ function(BlockType2) {
  BlockType2[BlockType2["Text"] = 0] = "Text";
  BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
  BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
  BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
  return BlockType2;
}(BlockType || (BlockType = {}));
var Decoration = class extends RangeValue {
  constructor(startSide, endSide, widget, spec) {
    super();
    this.startSide = startSide;
    this.endSide = endSide;
    this.widget = widget;
    this.spec = spec;
  }
  /**
  @internal
  */
  get heightRelevant() {
    return false;
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(spec) {
    return new MarkDecoration(spec);
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(spec) {
    let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;
    side += block && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
    return new PointDecoration(spec, side, side, block, spec.widget || null, false);
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(spec) {
    let block = !!spec.block, startSide, endSide;
    if (spec.isBlockGap) {
      startSide = -5e8;
      endSide = 4e8;
    } else {
      let { start, end } = getInclusive(spec, block);
      startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;
      endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;
    }
    return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(spec) {
    return new LineDecoration(spec);
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(of, sort = false) {
    return RangeSet.of(of, sort);
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
};
Decoration.none = RangeSet.empty;
var MarkDecoration = class _MarkDecoration extends Decoration {
  constructor(spec) {
    let { start, end } = getInclusive(spec);
    super(start ? -1 : 5e8, end ? 1 : -6e8, null, spec);
    this.tagName = spec.tagName || "span";
    this.class = spec.class || "";
    this.attrs = spec.attributes || null;
  }
  eq(other) {
    var _a2, _b;
    return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) && attrsEq(this.attrs, other.attrs, "class");
  }
  range(from3, to2 = from3) {
    if (from3 >= to2)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(from3, to2);
  }
};
MarkDecoration.prototype.point = false;
var LineDecoration = class _LineDecoration extends Decoration {
  constructor(spec) {
    super(-2e8, -2e8, null, spec);
  }
  eq(other) {
    return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
  }
  range(from3, to2 = from3) {
    if (to2 != from3)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(from3, to2);
  }
};
LineDecoration.prototype.mapMode = MapMode.TrackBefore;
LineDecoration.prototype.point = true;
var PointDecoration = class _PointDecoration extends Decoration {
  constructor(spec, startSide, endSide, block, widget, isReplace) {
    super(startSide, endSide, widget, spec);
    this.block = block;
    this.isReplace = isReplace;
    this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(other) {
    return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
  }
  range(from3, to2 = from3) {
    if (this.isReplace && (from3 > to2 || from3 == to2 && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && to2 != from3)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(from3, to2);
  }
};
PointDecoration.prototype.point = true;
function getInclusive(spec, block = false) {
  let { inclusiveStart: start, inclusiveEnd: end } = spec;
  if (start == null)
    start = spec.inclusive;
  if (end == null)
    end = spec.inclusive;
  return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
}
function widgetsEq(a7, b8) {
  return a7 == b8 || !!(a7 && b8 && a7.compare(b8));
}
function addRange(from3, to2, ranges, margin = 0) {
  let last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin >= from3)
    ranges[last] = Math.max(ranges[last], to2);
  else
    ranges.push(from3, to2);
}
var LineView = class _LineView extends ContentView {
  constructor() {
    super(...arguments);
    this.children = [];
    this.length = 0;
    this.prevAttrs = void 0;
    this.attrs = null;
    this.breakAfter = 0;
  }
  // Consumes source
  merge(from3, to2, source, hasStart, openStart, openEnd) {
    if (source) {
      if (!(source instanceof _LineView))
        return false;
      if (!this.dom)
        source.transferDOM(this);
    }
    if (hasStart)
      this.setDeco(source ? source.attrs : null);
    mergeChildrenInto(this, from3, to2, source ? source.children.slice() : [], openStart, openEnd);
    return true;
  }
  split(at4) {
    let end = new _LineView();
    end.breakAfter = this.breakAfter;
    if (this.length == 0)
      return end;
    let { i: i3, off } = this.childPos(at4);
    if (off) {
      end.append(this.children[i3].split(off), 0);
      this.children[i3].merge(off, this.children[i3].length, null, false, 0, 0);
      i3++;
    }
    for (let j11 = i3; j11 < this.children.length; j11++)
      end.append(this.children[j11], 0);
    while (i3 > 0 && this.children[i3 - 1].length == 0)
      this.children[--i3].destroy();
    this.children.length = i3;
    this.markDirty();
    this.length = at4;
    return end;
  }
  transferDOM(other) {
    if (!this.dom)
      return;
    this.markDirty();
    other.setDOM(this.dom);
    other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
    this.prevAttrs = void 0;
    this.dom = null;
  }
  setDeco(attrs) {
    if (!attrsEq(this.attrs, attrs)) {
      if (this.dom) {
        this.prevAttrs = this.attrs;
        this.markDirty();
      }
      this.attrs = attrs;
    }
  }
  append(child, openStart) {
    joinInlineInto(this, child, openStart);
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(deco) {
    let attrs = deco.spec.attributes, cls = deco.spec.class;
    if (attrs)
      this.attrs = combineAttrs(attrs, this.attrs || {});
    if (cls)
      this.attrs = combineAttrs({ class: cls }, this.attrs || {});
  }
  domAtPos(pos) {
    return inlineDOMAtPos(this, pos);
  }
  reuseDOM(node3) {
    if (node3.nodeName == "DIV") {
      this.setDOM(node3);
      this.flags |= 4 | 2;
    }
  }
  sync(view, track) {
    var _a2;
    if (!this.dom) {
      this.setDOM(document.createElement("div"));
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    } else if (this.flags & 4) {
      clearAttributes(this.dom);
      this.dom.className = "cm-line";
      this.prevAttrs = this.attrs ? null : void 0;
    }
    if (this.prevAttrs !== void 0) {
      updateAttrs(this.dom, this.prevAttrs, this.attrs);
      this.dom.classList.add("cm-line");
      this.prevAttrs = void 0;
    }
    super.sync(view, track);
    let last = this.dom.lastChild;
    while (last && ContentView.get(last) instanceof MarkView)
      last = last.lastChild;
    if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch) => ch instanceof TextView))) {
      let hack = document.createElement("BR");
      hack.cmIgnore = true;
      this.dom.appendChild(hack);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let totalWidth = 0, textHeight;
    for (let child of this.children) {
      if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
        return null;
      let rects = clientRectsFor(child.dom);
      if (rects.length != 1)
        return null;
      totalWidth += rects[0].width;
      textHeight = rects[0].height;
    }
    return !totalWidth ? null : {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: totalWidth / this.length,
      textHeight
    };
  }
  coordsAt(pos, side) {
    let rect = coordsInChildren(this, pos, side);
    if (!this.children.length && rect && this.parent) {
      let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
      if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
        let dist2 = (height - heightOracle.textHeight) / 2;
        return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
      }
    }
    return rect;
  }
  become(other) {
    return other instanceof _LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
  }
  covers() {
    return true;
  }
  static find(docView, pos) {
    for (let i3 = 0, off = 0; i3 < docView.children.length; i3++) {
      let block = docView.children[i3], end = off + block.length;
      if (end >= pos) {
        if (block instanceof _LineView)
          return block;
        if (end > pos)
          break;
      }
      off = end + block.breakAfter;
    }
    return null;
  }
};
var BlockWidgetView = class _BlockWidgetView extends ContentView {
  constructor(widget, length3, deco) {
    super();
    this.widget = widget;
    this.length = length3;
    this.deco = deco;
    this.breakAfter = 0;
    this.prevWidget = null;
  }
  merge(from3, to2, source, _takeDeco, openStart, openEnd) {
    if (source && (!(source instanceof _BlockWidgetView) || !this.widget.compare(source.widget) || from3 > 0 && openStart <= 0 || to2 < this.length && openEnd <= 0))
      return false;
    this.length = from3 + (source ? source.length : 0) + (this.length - to2);
    return true;
  }
  domAtPos(pos) {
    return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
  }
  split(at4) {
    let len = this.length - at4;
    this.length = at4;
    let end = new _BlockWidgetView(this.widget, len, this.deco);
    end.breakAfter = this.breakAfter;
    return end;
  }
  get children() {
    return noChildren;
  }
  sync(view) {
    if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
      if (this.dom && this.prevWidget)
        this.prevWidget.destroy(this.dom);
      this.prevWidget = null;
      this.setDOM(this.widget.toDOM(view));
      if (!this.widget.editable)
        this.dom.contentEditable = "false";
    }
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(other) {
    if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
      if (!other.widget.compare(this.widget))
        this.markDirty(true);
      if (this.dom && !this.prevWidget)
        this.prevWidget = this.widget;
      this.widget = other.widget;
      this.length = other.length;
      this.deco = other.deco;
      this.breakAfter = other.breakAfter;
      return true;
    }
    return false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(event) {
    return this.widget.ignoreEvent(event);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  coordsAt(pos, side) {
    let custom = this.widget.coordsAt(this.dom, pos, side);
    if (custom)
      return custom;
    if (this.widget instanceof BlockGapWidget)
      return null;
    return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
  }
  destroy() {
    super.destroy();
    if (this.dom)
      this.widget.destroy(this.dom);
  }
  covers(side) {
    let { startSide, endSide } = this.deco;
    return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
  }
};
var BlockGapWidget = class extends WidgetType {
  constructor(height) {
    super();
    this.height = height;
  }
  toDOM() {
    let elt = document.createElement("div");
    elt.className = "cm-gap";
    this.updateDOM(elt);
    return elt;
  }
  eq(other) {
    return other.height == this.height;
  }
  updateDOM(elt) {
    elt.style.height = this.height + "px";
    return true;
  }
  get editable() {
    return true;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return false;
  }
};
var ContentBuilder = class _ContentBuilder {
  constructor(doc2, pos, end, disallowBlockEffectsFor) {
    this.doc = doc2;
    this.pos = pos;
    this.end = end;
    this.disallowBlockEffectsFor = disallowBlockEffectsFor;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.pendingBuffer = 0;
    this.bufferMarks = [];
    this.atCursorPos = true;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc2.iter();
    this.skip = pos;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let last = this.content[this.content.length - 1];
    return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
  }
  getLine() {
    if (!this.curLine) {
      this.content.push(this.curLine = new LineView());
      this.atCursorPos = true;
    }
    return this.curLine;
  }
  flushBuffer(active = this.bufferMarks) {
    if (this.pendingBuffer) {
      this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
      this.pendingBuffer = 0;
    }
  }
  addBlockWidget(view) {
    this.flushBuffer();
    this.curLine = null;
    this.content.push(view);
  }
  finish(openEnd) {
    if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
      this.flushBuffer();
    else
      this.pendingBuffer = 0;
    if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
      this.getLine();
  }
  buildText(length3, active, openStart) {
    while (length3 > 0) {
      if (this.textOff == this.text.length) {
        let { value, lineBreak, done } = this.cursor.next(this.skip);
        this.skip = 0;
        if (done)
          throw new Error("Ran out of text content when drawing inline views");
        if (lineBreak) {
          if (!this.posCovered())
            this.getLine();
          if (this.content.length)
            this.content[this.content.length - 1].breakAfter = 1;
          else
            this.breakAtStart = 1;
          this.flushBuffer();
          this.curLine = null;
          this.atCursorPos = true;
          length3--;
          continue;
        } else {
          this.text = value;
          this.textOff = 0;
        }
      }
      let take = Math.min(
        this.text.length - this.textOff,
        length3,
        512
        /* T.Chunk */
      );
      this.flushBuffer(active.slice(active.length - openStart));
      this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
      this.atCursorPos = true;
      this.textOff += take;
      length3 -= take;
      openStart = 0;
    }
  }
  span(from3, to2, active, openStart) {
    this.buildText(to2 - from3, active, openStart);
    this.pos = to2;
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  point(from3, to2, deco, active, openStart, index) {
    if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
      if (deco.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (to2 > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let len = to2 - from3;
    if (deco instanceof PointDecoration) {
      if (deco.block) {
        if (deco.startSide > 0 && !this.posCovered())
          this.getLine();
        this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
      } else {
        let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
        let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from3 < to2 || deco.startSide > 0);
        let cursorAfter = !view.isEditable && (from3 < to2 || openStart > active.length || deco.startSide <= 0);
        let line3 = this.getLine();
        if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
          this.pendingBuffer = 0;
        this.flushBuffer(active);
        if (cursorBefore) {
          line3.append(wrapMarks(new WidgetBufferView(1), active), openStart);
          openStart = active.length + Math.max(0, openStart - active.length);
        }
        line3.append(wrapMarks(view, active), openStart);
        this.atCursorPos = cursorAfter;
        this.pendingBuffer = !cursorAfter ? 0 : from3 < to2 || openStart > active.length ? 1 : 2;
        if (this.pendingBuffer)
          this.bufferMarks = active.slice();
      }
    } else if (this.doc.lineAt(this.pos).from == this.pos) {
      this.getLine().addLineDeco(deco);
    }
    if (len) {
      if (this.textOff + len <= this.text.length) {
        this.textOff += len;
      } else {
        this.skip += len - (this.text.length - this.textOff);
        this.text = "";
        this.textOff = 0;
      }
      this.pos = to2;
    }
    if (this.openStart < 0)
      this.openStart = openStart;
  }
  static build(text, from3, to2, decorations2, dynamicDecorationMap) {
    let builder = new _ContentBuilder(text, from3, to2, dynamicDecorationMap);
    builder.openEnd = RangeSet.spans(decorations2, from3, to2, builder);
    if (builder.openStart < 0)
      builder.openStart = builder.openEnd;
    builder.finish(builder.openEnd);
    return builder;
  }
};
function wrapMarks(view, active) {
  for (let mark of active)
    view = new MarkView(mark, [view], view.length);
  return view;
}
var NullWidget = class extends WidgetType {
  constructor(tag) {
    super();
    this.tag = tag;
  }
  eq(other) {
    return other.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(elt) {
    return elt.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return true;
  }
};
NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
NullWidget.block = /* @__PURE__ */ new NullWidget("div");
var Direction = /* @__PURE__ */ function(Direction2) {
  Direction2[Direction2["LTR"] = 0] = "LTR";
  Direction2[Direction2["RTL"] = 1] = "RTL";
  return Direction2;
}(Direction || (Direction = {}));
var LTR = Direction.LTR;
var RTL = Direction.RTL;
function dec(str) {
  let result = [];
  for (let i3 = 0; i3 < str.length; i3++)
    result.push(1 << +str[i3]);
  return result;
}
var LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
var ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var Brackets = /* @__PURE__ */ Object.create(null);
var BracketStack = [];
for (let p8 of ["()", "[]", "{}"]) {
  let l7 = /* @__PURE__ */ p8.charCodeAt(0), r2 = /* @__PURE__ */ p8.charCodeAt(1);
  Brackets[l7] = r2;
  Brackets[r2] = -l7;
}
function charType(ch) {
  return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8204 ? 256 : 64336 <= ch && ch <= 65023 ? 4 : 1;
}
var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
var BidiSpan = class {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? RTL : LTR;
  }
  /**
  @internal
  */
  constructor(from3, to2, level) {
    this.from = from3;
    this.to = to2;
    this.level = level;
  }
  /**
  @internal
  */
  side(end, dir) {
    return this.dir == dir == end ? this.to : this.from;
  }
  /**
  @internal
  */
  forward(forward, dir) {
    return forward == (this.dir == dir);
  }
  /**
  @internal
  */
  static find(order, index, level, assoc) {
    let maybe = -1;
    for (let i3 = 0; i3 < order.length; i3++) {
      let span = order[i3];
      if (span.from <= index && span.to >= index) {
        if (span.level == level)
          return i3;
        if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
          maybe = i3;
      }
    }
    if (maybe < 0)
      throw new RangeError("Index out of range");
    return maybe;
  }
};
function isolatesEq(a7, b8) {
  if (a7.length != b8.length)
    return false;
  for (let i3 = 0; i3 < a7.length; i3++) {
    let iA = a7[i3], iB = b8[i3];
    if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
      return false;
  }
  return true;
}
var types = [];
function computeCharTypes(line3, rFrom, rTo, isolates, outerType) {
  for (let iI = 0; iI <= isolates.length; iI++) {
    let from3 = iI ? isolates[iI - 1].to : rFrom, to2 = iI < isolates.length ? isolates[iI].from : rTo;
    let prevType = iI ? 256 : outerType;
    for (let i3 = from3, prev3 = prevType, prevStrong = prevType; i3 < to2; i3++) {
      let type = charType(line3.charCodeAt(i3));
      if (type == 512)
        type = prev3;
      else if (type == 8 && prevStrong == 4)
        type = 16;
      types[i3] = type == 4 ? 2 : type;
      if (type & 7)
        prevStrong = type;
      prev3 = type;
    }
    for (let i3 = from3, prev3 = prevType, prevStrong = prevType; i3 < to2; i3++) {
      let type = types[i3];
      if (type == 128) {
        if (i3 < to2 - 1 && prev3 == types[i3 + 1] && prev3 & 24)
          type = types[i3] = prev3;
        else
          types[i3] = 256;
      } else if (type == 64) {
        let end = i3 + 1;
        while (end < to2 && types[end] == 64)
          end++;
        let replace22 = i3 && prev3 == 8 || end < rTo && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
        for (let j11 = i3; j11 < end; j11++)
          types[j11] = replace22;
        i3 = end - 1;
      } else if (type == 8 && prevStrong == 1) {
        types[i3] = 1;
      }
      prev3 = type;
      if (type & 7)
        prevStrong = type;
    }
  }
}
function processBracketPairs(line3, rFrom, rTo, isolates, outerType) {
  let oppositeType = outerType == 1 ? 2 : 1;
  for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
    let from3 = iI ? isolates[iI - 1].to : rFrom, to2 = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i3 = from3, ch, br2, type; i3 < to2; i3++) {
      if (br2 = Brackets[ch = line3.charCodeAt(i3)]) {
        if (br2 < 0) {
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            if (BracketStack[sJ + 1] == -br2) {
              let flags = BracketStack[sJ + 2];
              let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
              if (type2)
                types[i3] = types[BracketStack[sJ]] = type2;
              sI = sJ;
              break;
            }
          }
        } else if (BracketStack.length == 189) {
          break;
        } else {
          BracketStack[sI++] = i3;
          BracketStack[sI++] = ch;
          BracketStack[sI++] = context;
        }
      } else if ((type = types[i3]) == 2 || type == 1) {
        let embed = type == outerType;
        context = embed ? 0 : 1;
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          let cur2 = BracketStack[sJ + 2];
          if (cur2 & 2)
            break;
          if (embed) {
            BracketStack[sJ + 2] |= 2;
          } else {
            if (cur2 & 4)
              break;
            BracketStack[sJ + 2] |= 4;
          }
        }
      }
    }
  }
}
function processNeutrals(rFrom, rTo, isolates, outerType) {
  for (let iI = 0, prev3 = outerType; iI <= isolates.length; iI++) {
    let from3 = iI ? isolates[iI - 1].to : rFrom, to2 = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i3 = from3; i3 < to2; ) {
      let type = types[i3];
      if (type == 256) {
        let end = i3 + 1;
        for (; ; ) {
          if (end == to2) {
            if (iI == isolates.length)
              break;
            end = isolates[iI++].to;
            to2 = iI < isolates.length ? isolates[iI].from : rTo;
          } else if (types[end] == 256) {
            end++;
          } else {
            break;
          }
        }
        let beforeL = prev3 == 1;
        let afterL = (end < rTo ? types[end] : outerType) == 1;
        let replace22 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
        for (let j11 = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j11 > i3; ) {
          if (j11 == fromJ) {
            j11 = isolates[--jI].from;
            fromJ = jI ? isolates[jI - 1].to : rFrom;
          }
          types[--j11] = replace22;
        }
        i3 = end;
      } else {
        prev3 = type;
        i3++;
      }
    }
  }
}
function emitSpans(line3, from3, to2, level, baseLevel, isolates, order) {
  let ourType = level % 2 ? 2 : 1;
  if (level % 2 == baseLevel % 2) {
    for (let iCh = from3, iI = 0; iCh < to2; ) {
      let sameDir = true, isNum = false;
      if (iI == isolates.length || iCh < isolates[iI].from) {
        let next3 = types[iCh];
        if (next3 != ourType) {
          sameDir = false;
          isNum = next3 == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run:
        for (; ; ) {
          if (iI < isolates.length && iScan == isolates[iI].from) {
            if (isNum)
              break run;
            let iso = isolates[iI];
            if (!sameDir)
              for (let upto = iso.to, jI = iI + 1; ; ) {
                if (upto == to2)
                  break run;
                if (jI < isolates.length && isolates[jI].from == upto)
                  upto = isolates[jI++].to;
                else if (types[upto] == ourType)
                  break run;
                else
                  break;
              }
            iI++;
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.from > iCh)
                order.push(new BidiSpan(iCh, iso.from, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line3, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.to;
            }
            iScan = iso.to;
          } else if (iScan == to2 || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
            break;
          } else {
            iScan++;
          }
        }
      if (recurse)
        emitSpans(line3, iCh, iScan, level + 1, baseLevel, recurse, order);
      else if (iCh < iScan)
        order.push(new BidiSpan(iCh, iScan, localLevel));
      iCh = iScan;
    }
  } else {
    for (let iCh = to2, iI = isolates.length; iCh > from3; ) {
      let sameDir = true, isNum = false;
      if (!iI || iCh > isolates[iI - 1].to) {
        let next3 = types[iCh - 1];
        if (next3 != ourType) {
          sameDir = false;
          isNum = next3 == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run:
        for (; ; ) {
          if (iI && iScan == isolates[iI - 1].to) {
            if (isNum)
              break run;
            let iso = isolates[--iI];
            if (!sameDir)
              for (let upto = iso.from, jI = iI; ; ) {
                if (upto == from3)
                  break run;
                if (jI && isolates[jI - 1].to == upto)
                  upto = isolates[--jI].from;
                else if (types[upto - 1] == ourType)
                  break run;
                else
                  break;
              }
            if (recurse) {
              recurse.push(iso);
            } else {
              if (iso.to < iCh)
                order.push(new BidiSpan(iso.to, iCh, localLevel));
              let dirSwap = iso.direction == LTR != !(localLevel % 2);
              computeSectionOrder(line3, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
              iCh = iso.from;
            }
            iScan = iso.from;
          } else if (iScan == from3 || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
            break;
          } else {
            iScan--;
          }
        }
      if (recurse)
        emitSpans(line3, iScan, iCh, level + 1, baseLevel, recurse, order);
      else if (iScan < iCh)
        order.push(new BidiSpan(iScan, iCh, localLevel));
      iCh = iScan;
    }
  }
}
function computeSectionOrder(line3, level, baseLevel, isolates, from3, to2, order) {
  let outerType = level % 2 ? 2 : 1;
  computeCharTypes(line3, from3, to2, isolates, outerType);
  processBracketPairs(line3, from3, to2, isolates, outerType);
  processNeutrals(from3, to2, isolates, outerType);
  emitSpans(line3, from3, to2, level, baseLevel, isolates, order);
}
function computeOrder(line3, direction, isolates) {
  if (!line3)
    return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
  if (direction == LTR && !isolates.length && !BidiRE.test(line3))
    return trivialOrder(line3.length);
  if (isolates.length)
    while (line3.length > types.length)
      types[types.length] = 256;
  let order = [], level = direction == LTR ? 0 : 1;
  computeSectionOrder(line3, level, level, isolates, 0, line3.length, order);
  return order;
}
function trivialOrder(length3) {
  return [new BidiSpan(0, length3, 0)];
}
var movedOver = "";
function moveVisually(line3, order, dir, start, forward) {
  var _a2;
  let startIndex = start.head - line3.from;
  let spanI = BidiSpan.find(order, startIndex, (_a2 = start.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start.assoc);
  let span = order[spanI], spanEnd = span.side(forward, dir);
  if (startIndex == spanEnd) {
    let nextI = spanI += forward ? 1 : -1;
    if (nextI < 0 || nextI >= order.length)
      return null;
    span = order[spanI = nextI];
    startIndex = span.side(!forward, dir);
    spanEnd = span.side(forward, dir);
  }
  let nextIndex = findClusterBreak(line3.text, startIndex, span.forward(forward, dir));
  if (nextIndex < span.from || nextIndex > span.to)
    nextIndex = spanEnd;
  movedOver = line3.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
    return EditorSelection.cursor(nextSpan.side(!forward, dir) + line3.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
  return EditorSelection.cursor(nextIndex + line3.from, span.forward(forward, dir) ? -1 : 1, span.level);
}
function autoDirection(text, from3, to2) {
  for (let i3 = from3; i3 < to2; i3++) {
    let type = charType(text.charCodeAt(i3));
    if (type == 1)
      return LTR;
    if (type == 2 || type == 4)
      return RTL;
  }
  return LTR;
}
var clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
var dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
var mouseSelectionStyle = /* @__PURE__ */ Facet.define();
var exceptionSink = /* @__PURE__ */ Facet.define();
var updateListener = /* @__PURE__ */ Facet.define();
var inputHandler = /* @__PURE__ */ Facet.define();
var focusChangeEffect = /* @__PURE__ */ Facet.define();
var clipboardInputFilter = /* @__PURE__ */ Facet.define();
var clipboardOutputFilter = /* @__PURE__ */ Facet.define();
var perLineTextDirection = /* @__PURE__ */ Facet.define({
  combine: (values) => values.some((x7) => x7)
});
var nativeSelectionHidden = /* @__PURE__ */ Facet.define({
  combine: (values) => values.some((x7) => x7)
});
var scrollHandler = /* @__PURE__ */ Facet.define();
var ScrollTarget = class _ScrollTarget {
  constructor(range, y9 = "nearest", x7 = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
    this.range = range;
    this.y = y9;
    this.x = x7;
    this.yMargin = yMargin;
    this.xMargin = xMargin;
    this.isSnapshot = isSnapshot;
  }
  map(changes) {
    return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(state) {
    return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
};
var scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t3, ch) => t3.map(ch) });
var setEditContextFormatting = /* @__PURE__ */ StateEffect.define();
function logException(state, exception, context) {
  let handler = state.facet(exceptionSink);
  if (handler.length)
    handler[0](exception);
  else if (window.onerror)
    window.onerror(String(exception), context, void 0, void 0, exception);
  else if (context)
    console.error(context + ":", exception);
  else
    console.error(exception);
}
var editable = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : true });
var nextPluginID = 0;
var viewPlugin = /* @__PURE__ */ Facet.define();
var ViewPlugin = class _ViewPlugin {
  constructor(id2, create, domEventHandlers, domEventObservers, buildExtensions) {
    this.id = id2;
    this.create = create;
    this.domEventHandlers = domEventHandlers;
    this.domEventObservers = domEventObservers;
    this.extension = buildExtensions(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(create, spec) {
    const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
    return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin2) => {
      let ext = [viewPlugin.of(plugin2)];
      if (deco)
        ext.push(decorations.of((view) => {
          let pluginInst = view.plugin(plugin2);
          return pluginInst ? deco(pluginInst) : Decoration.none;
        }));
      if (provide)
        ext.push(provide(plugin2));
      return ext;
    });
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(cls, spec) {
    return _ViewPlugin.define((view) => new cls(view), spec);
  }
};
var PluginInstance = class {
  constructor(spec) {
    this.spec = spec;
    this.mustUpdate = null;
    this.value = null;
  }
  update(view) {
    if (!this.value) {
      if (this.spec) {
        try {
          this.value = this.spec.create(view);
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
          this.deactivate();
        }
      }
    } else if (this.mustUpdate) {
      let update = this.mustUpdate;
      this.mustUpdate = null;
      if (this.value.update) {
        try {
          this.value.update(update);
        } catch (e) {
          logException(update.state, e, "CodeMirror plugin crashed");
          if (this.value.destroy)
            try {
              this.value.destroy();
            } catch (_7) {
            }
          this.deactivate();
        }
      }
    }
    return this;
  }
  destroy(view) {
    var _a2;
    if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
      try {
        this.value.destroy();
      } catch (e) {
        logException(view.state, e, "CodeMirror plugin crashed");
      }
    }
  }
  deactivate() {
    this.spec = this.value = null;
  }
};
var editorAttributes = /* @__PURE__ */ Facet.define();
var contentAttributes = /* @__PURE__ */ Facet.define();
var decorations = /* @__PURE__ */ Facet.define();
var outerDecorations = /* @__PURE__ */ Facet.define();
var atomicRanges = /* @__PURE__ */ Facet.define();
var bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
function getIsolatedRanges(view, line3) {
  let isolates = view.state.facet(bidiIsolatedRanges);
  if (!isolates.length)
    return isolates;
  let sets = isolates.map((i3) => i3 instanceof Function ? i3(view) : i3);
  let result = [];
  RangeSet.spans(sets, line3.from, line3.to, {
    point() {
    },
    span(fromDoc, toDoc, active, open) {
      let from3 = fromDoc - line3.from, to2 = toDoc - line3.from;
      let level = result;
      for (let i3 = active.length - 1; i3 >= 0; i3--, open--) {
        let direction = active[i3].spec.bidiIsolate, update;
        if (direction == null)
          direction = autoDirection(line3.text, from3, to2);
        if (open > 0 && level.length && (update = level[level.length - 1]).to == from3 && update.direction == direction) {
          update.to = to2;
          level = update.inner;
        } else {
          let add2 = { from: from3, to: to2, direction, inner: [] };
          level.push(add2);
          level = add2.inner;
        }
      }
    }
  });
  return result;
}
var scrollMargins = /* @__PURE__ */ Facet.define();
function getScrollMargins(view) {
  let left = 0, right = 0, top2 = 0, bottom = 0;
  for (let source of view.state.facet(scrollMargins)) {
    let m10 = source(view);
    if (m10) {
      if (m10.left != null)
        left = Math.max(left, m10.left);
      if (m10.right != null)
        right = Math.max(right, m10.right);
      if (m10.top != null)
        top2 = Math.max(top2, m10.top);
      if (m10.bottom != null)
        bottom = Math.max(bottom, m10.bottom);
    }
  }
  return { left, right, top: top2, bottom };
}
var styleModule = /* @__PURE__ */ Facet.define();
var ChangedRange = class _ChangedRange {
  constructor(fromA, toA, fromB, toB) {
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  join(other) {
    return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
  }
  addToSet(set) {
    let i3 = set.length, me9 = this;
    for (; i3 > 0; i3--) {
      let range = set[i3 - 1];
      if (range.fromA > me9.toA)
        continue;
      if (range.toA < me9.fromA)
        break;
      me9 = me9.join(range);
      set.splice(i3 - 1, 1);
    }
    set.splice(i3, 0, me9);
    return set;
  }
  static extendWithRanges(diff, ranges) {
    if (ranges.length == 0)
      return diff;
    let result = [];
    for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
      let next3 = dI == diff.length ? null : diff[dI], off = posA - posB;
      let end = next3 ? next3.fromB : 1e9;
      while (rI < ranges.length && ranges[rI] < end) {
        let from3 = ranges[rI], to2 = ranges[rI + 1];
        let fromB = Math.max(posB, from3), toB = Math.min(end, to2);
        if (fromB <= toB)
          new _ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
        if (to2 > end)
          break;
        else
          rI += 2;
      }
      if (!next3)
        return result;
      new _ChangedRange(next3.fromA, next3.toA, next3.fromB, next3.toB).addToSet(result);
      posA = next3.toA;
      posB = next3.toB;
    }
  }
};
var ViewUpdate = class _ViewUpdate {
  constructor(view, state, transactions) {
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    this.flags = 0;
    this.startState = view.state;
    this.changes = ChangeSet.empty(this.startState.doc.length);
    for (let tr2 of transactions)
      this.changes = this.changes.compose(tr2.changes);
    let changedRanges = [];
    this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
    this.changedRanges = changedRanges;
  }
  /**
  @internal
  */
  static create(view, state, transactions) {
    return new _ViewUpdate(view, state, transactions);
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & (8 | 2)) > 0;
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty;
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((tr2) => tr2.selection);
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
};
var DocView = class extends ContentView {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(view) {
    super();
    this.view = view;
    this.decorations = [];
    this.dynamicDecorationMap = [false];
    this.domChanged = null;
    this.hasComposition = null;
    this.markedForComposition = /* @__PURE__ */ new Set();
    this.editContextFormatting = Decoration.none;
    this.lastCompositionAfterCursor = false;
    this.minWidth = 0;
    this.minWidthFrom = 0;
    this.minWidthTo = 0;
    this.impreciseAnchor = null;
    this.impreciseHead = null;
    this.forceSelection = false;
    this.lastUpdate = Date.now();
    this.setDOM(view.contentDOM);
    this.children = [new LineView()];
    this.children[0].setParent(this);
    this.updateDeco();
    this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
  }
  // Update the document view to a given state.
  update(update) {
    var _a2;
    let changedRanges = update.changedRanges;
    if (this.minWidth > 0 && changedRanges.length) {
      if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
        this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
      } else {
        this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
        this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
      }
    }
    this.updateEditContextFormatting(update);
    let readCompositionAt = -1;
    if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
      if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
        readCompositionAt = this.domChanged.newSel.head;
      else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
        readCompositionAt = update.state.selection.main.head;
    }
    let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
    this.domChanged = null;
    if (this.hasComposition) {
      this.markedForComposition.clear();
      let { from: from3, to: to2 } = this.hasComposition;
      changedRanges = new ChangedRange(from3, to2, update.changes.mapPos(from3, -1), update.changes.mapPos(to2, 1)).addToSet(changedRanges.slice());
    }
    this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
    if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
      this.forceSelection = true;
    let prevDeco = this.decorations, deco = this.updateDeco();
    let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
    changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
    if (!(this.flags & 7) && changedRanges.length == 0) {
      return false;
    } else {
      this.updateInner(changedRanges, update.startState.doc.length, composition);
      if (update.transactions.length)
        this.lastUpdate = Date.now();
      return true;
    }
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(changes, oldLength, composition) {
    this.view.viewState.mustMeasureContent = true;
    this.updateChildren(changes, oldLength, composition);
    let { observer } = this.view;
    observer.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
      this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
      this.sync(this.view, track);
      this.flags &= ~7;
      if (track && (track.written || observer.selectionRange.focusNode != track.node))
        this.forceSelection = true;
      this.dom.style.height = "";
    });
    this.markedForComposition.forEach(
      (cView) => cView.flags &= ~8
      /* ViewFlag.Composition */
    );
    let gaps = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
      for (let child of this.children)
        if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
          gaps.push(child.dom);
    }
    observer.updateGaps(gaps);
  }
  updateChildren(changes, oldLength, composition) {
    let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
    let cursor = this.childCursor(oldLength);
    for (let i3 = ranges.length - 1; ; i3--) {
      let next3 = i3 >= 0 ? ranges[i3] : null;
      if (!next3)
        break;
      let { fromA, toA, fromB, toB } = next3, content2, breakAtStart, openStart, openEnd;
      if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
        let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
        let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
        breakAtStart = before.breakAtStart;
        openStart = before.openStart;
        openEnd = after.openEnd;
        let compLine = this.compositionView(composition);
        if (after.breakAtStart) {
          compLine.breakAfter = 1;
        } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
          compLine.breakAfter = after.content[0].breakAfter;
          after.content.shift();
        }
        if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
          before.content.pop();
        }
        content2 = before.content.concat(compLine).concat(after.content);
      } else {
        ({ content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
      }
      let { i: toI, off: toOff } = cursor.findPos(toA, 1);
      let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
      replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
    }
    if (composition)
      this.fixCompositionDOM(composition);
  }
  updateEditContextFormatting(update) {
    this.editContextFormatting = this.editContextFormatting.map(update.changes);
    for (let tr2 of update.transactions)
      for (let effect of tr2.effects)
        if (effect.is(setEditContextFormatting)) {
          this.editContextFormatting = effect.value;
        }
  }
  compositionView(composition) {
    let cur2 = new TextView(composition.text.nodeValue);
    cur2.flags |= 8;
    for (let { deco } of composition.marks)
      cur2 = new MarkView(deco, [cur2], cur2.length);
    let line3 = new LineView();
    line3.append(cur2, 0);
    return line3;
  }
  fixCompositionDOM(composition) {
    let fix = (dom, cView2) => {
      cView2.flags |= 8 | (cView2.children.some(
        (c2) => c2.flags & 7
        /* ViewFlag.Dirty */
      ) ? 1 : 0);
      this.markedForComposition.add(cView2);
      let prev3 = ContentView.get(dom);
      if (prev3 && prev3 != cView2)
        prev3.dom = null;
      cView2.setDOM(dom);
    };
    let pos = this.childPos(composition.range.fromB, 1);
    let cView = this.children[pos.i];
    fix(composition.line, cView);
    for (let i3 = composition.marks.length - 1; i3 >= -1; i3--) {
      pos = cView.childPos(pos.off, 1);
      cView = cView.children[pos.i];
      fix(i3 >= 0 ? composition.marks[i3].node : composition.text, cView);
    }
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(mustRead = false, fromPointer = false) {
    if (mustRead || !this.view.observer.selectionRange.focusNode)
      this.view.observer.readSelectionRange();
    let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
    let selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
    if (!(focused || fromPointer || selectionNotFocus))
      return;
    let force = this.forceSelection;
    this.forceSelection = false;
    let main = this.view.state.selection.main;
    let anchor = this.moveToLine(this.domAtPos(main.anchor));
    let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
    if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
      let dummy = document.createTextNode("");
      this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
      anchor = head = new DOMPos(dummy, 0);
      force = true;
    }
    let domSel = this.view.observer.selectionRange;
    if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
      this.view.observer.ignore(() => {
        if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
          this.dom.blur();
          this.dom.focus({ preventScroll: true });
        }
        let rawSel = getSelection(this.view.root);
        if (!rawSel)
          ;
        else if (main.empty) {
          if (browser.gecko) {
            let nextTo = nextToUneditable(anchor.node, anchor.offset);
            if (nextTo && nextTo != (1 | 2)) {
              let text = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
              if (text)
                anchor = new DOMPos(text.node, text.offset);
            }
          }
          rawSel.collapse(anchor.node, anchor.offset);
          if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
            rawSel.caretBidiLevel = main.bidiLevel;
        } else if (rawSel.extend) {
          rawSel.collapse(anchor.node, anchor.offset);
          try {
            rawSel.extend(head.node, head.offset);
          } catch (_7) {
          }
        } else {
          let range = document.createRange();
          if (main.anchor > main.head)
            [anchor, head] = [head, anchor];
          range.setEnd(head.node, head.offset);
          range.setStart(anchor.node, anchor.offset);
          rawSel.removeAllRanges();
          rawSel.addRange(range);
        }
        if (selectionNotFocus && this.view.root.activeElement == this.dom) {
          this.dom.blur();
          if (activeElt)
            activeElt.focus();
        }
      });
      this.view.observer.setSelectionRange(anchor, head);
    }
    this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
    this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
  }
  // If a zero-length widget is inserted next to the cursor during
  // composition, avoid moving it across it and disrupting the
  // composition.
  suppressWidgetCursorChange(sel, cursor) {
    return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition)
      return;
    let { view } = this, cursor = view.state.selection.main;
    let sel = getSelection(view.root);
    let { anchorNode, anchorOffset } = view.observer.selectionRange;
    if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
      return;
    let line3 = LineView.find(this, cursor.head);
    if (!line3)
      return;
    let lineStart = line3.posAtStart;
    if (cursor.head == lineStart || cursor.head == lineStart + line3.length)
      return;
    let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
    if (!before || !after || before.bottom > after.top)
      return;
    let dom = this.domAtPos(cursor.head + cursor.assoc);
    sel.collapse(dom.node, dom.offset);
    sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
    view.observer.readSelectionRange();
    let newRange = view.observer.selectionRange;
    if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
      sel.collapse(anchorNode, anchorOffset);
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(pos) {
    let dom = this.dom, newPos;
    if (pos.node != dom)
      return pos;
    for (let i3 = pos.offset; !newPos && i3 < dom.childNodes.length; i3++) {
      let view = ContentView.get(dom.childNodes[i3]);
      if (view instanceof LineView)
        newPos = view.domAtPos(0);
    }
    for (let i3 = pos.offset - 1; !newPos && i3 >= 0; i3--) {
      let view = ContentView.get(dom.childNodes[i3]);
      if (view instanceof LineView)
        newPos = view.domAtPos(view.length);
    }
    return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
  }
  nearest(dom) {
    for (let cur2 = dom; cur2; ) {
      let domView = ContentView.get(cur2);
      if (domView && domView.rootView == this)
        return domView;
      cur2 = cur2.parentNode;
    }
    return null;
  }
  posFromDOM(node3, offset) {
    let view = this.nearest(node3);
    if (!view)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return view.localPosFromDOM(node3, offset) + view.posAtStart;
  }
  domAtPos(pos) {
    let { i: i3, off } = this.childCursor().findPos(pos, -1);
    for (; i3 < this.children.length - 1; ) {
      let child = this.children[i3];
      if (off < child.length || child instanceof LineView)
        break;
      i3++;
      off = 0;
    }
    return this.children[i3].domAtPos(off);
  }
  coordsAt(pos, side) {
    let best = null, bestPos = 0;
    for (let off = this.length, i3 = this.children.length - 1; i3 >= 0; i3--) {
      let child = this.children[i3], end = off - child.breakAfter, start = end - child.length;
      if (end < pos)
        break;
      if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
        best = child;
        bestPos = start;
      } else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
        if (child.deco.startSide < 0)
          break;
        else if (i3)
          best = null;
      }
      off = start;
    }
    return best ? best.coordsAt(pos - bestPos, side) : null;
  }
  coordsForChar(pos) {
    let { i: i3, off } = this.childPos(pos, 1), child = this.children[i3];
    if (!(child instanceof LineView))
      return null;
    while (child.children.length) {
      let { i: i22, off: childOff } = child.childPos(off, 1);
      for (; ; i22++) {
        if (i22 == child.children.length)
          return null;
        if ((child = child.children[i22]).length)
          break;
      }
      off = childOff;
    }
    if (!(child instanceof TextView))
      return null;
    let end = findClusterBreak(child.text, off);
    if (end == off)
      return null;
    let rects = textRange(child.dom, off, end).getClientRects();
    for (let i22 = 0; i22 < rects.length; i22++) {
      let rect = rects[i22];
      if (i22 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
        return rect;
    }
    return null;
  }
  measureVisibleLineHeights(viewport) {
    let result = [], { from: from3, to: to2 } = viewport;
    let contentWidth = this.view.contentDOM.clientWidth;
    let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
    let widest = -1, ltr = this.view.textDirection == Direction.LTR;
    for (let pos = 0, i3 = 0; i3 < this.children.length; i3++) {
      let child = this.children[i3], end = pos + child.length;
      if (end > to2)
        break;
      if (pos >= from3) {
        let childRect = child.dom.getBoundingClientRect();
        result.push(childRect.height);
        if (isWider) {
          let last = child.dom.lastChild;
          let rects = last ? clientRectsFor(last) : [];
          if (rects.length) {
            let rect = rects[rects.length - 1];
            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
            if (width > widest) {
              widest = width;
              this.minWidth = contentWidth;
              this.minWidthFrom = pos;
              this.minWidthTo = end;
            }
          }
        }
      }
      pos = end + child.breakAfter;
    }
    return result;
  }
  textDirectionAt(pos) {
    let { i: i3 } = this.childPos(pos, 1);
    return getComputedStyle(this.children[i3].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
  }
  measureTextSize() {
    for (let child of this.children) {
      if (child instanceof LineView) {
        let measure = child.measureTextSize();
        if (measure)
          return measure;
      }
    }
    let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
    dummy.className = "cm-line";
    dummy.style.width = "99999px";
    dummy.style.position = "absolute";
    dummy.textContent = "abc def ghi jkl mno pqr stu";
    this.view.observer.ignore(() => {
      this.dom.appendChild(dummy);
      let rect = clientRectsFor(dummy.firstChild)[0];
      lineHeight = dummy.getBoundingClientRect().height;
      charWidth = rect ? rect.width / 27 : 7;
      textHeight = rect ? rect.height : lineHeight;
      dummy.remove();
    });
    return { lineHeight, charWidth, textHeight };
  }
  childCursor(pos = this.length) {
    let i3 = this.children.length;
    if (i3)
      pos -= this.children[--i3].length;
    return new ChildCursor(this.children, pos, i3);
  }
  computeBlockGapDeco() {
    let deco = [], vs2 = this.view.viewState;
    for (let pos = 0, i3 = 0; ; i3++) {
      let next3 = i3 == vs2.viewports.length ? null : vs2.viewports[i3];
      let end = next3 ? next3.from - 1 : this.length;
      if (end > pos) {
        let height = (vs2.lineBlockAt(end).bottom - vs2.lineBlockAt(pos).top) / this.view.scaleY;
        deco.push(Decoration.replace({
          widget: new BlockGapWidget(height),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(pos, end));
      }
      if (!next3)
        break;
      pos = next3.to + 1;
    }
    return Decoration.set(deco);
  }
  updateDeco() {
    let i3 = 1;
    let allDeco = this.view.state.facet(decorations).map((d5) => {
      let dynamic = this.dynamicDecorationMap[i3++] = typeof d5 == "function";
      return dynamic ? d5(this.view) : d5;
    });
    let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d5, i22) => {
      let dynamic = typeof d5 == "function";
      if (dynamic)
        dynamicOuter = true;
      return dynamic ? d5(this.view) : d5;
    });
    if (outerDeco.length) {
      this.dynamicDecorationMap[i3++] = dynamicOuter;
      allDeco.push(RangeSet.join(outerDeco));
    }
    this.decorations = [
      this.editContextFormatting,
      ...allDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
    while (i3 < this.decorations.length)
      this.dynamicDecorationMap[i3++] = false;
    return this.decorations;
  }
  scrollIntoView(target) {
    if (target.isSnapshot) {
      let ref = this.view.viewState.lineBlockAt(target.range.head);
      this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
      this.view.scrollDOM.scrollLeft = target.xMargin;
      return;
    }
    for (let handler of this.view.state.facet(scrollHandler)) {
      try {
        if (handler(this.view, target.range, target))
          return true;
      } catch (e) {
        logException(this.view.state, e, "scroll handler");
      }
    }
    let { range } = target;
    let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
    if (!rect)
      return;
    if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
      rect = {
        left: Math.min(rect.left, other.left),
        top: Math.min(rect.top, other.top),
        right: Math.max(rect.right, other.right),
        bottom: Math.max(rect.bottom, other.bottom)
      };
    let margins = getScrollMargins(this.view);
    let targetRect = {
      left: rect.left - margins.left,
      top: rect.top - margins.top,
      right: rect.right + margins.right,
      bottom: rect.bottom + margins.bottom
    };
    let { offsetWidth, offsetHeight } = this.view.scrollDOM;
    scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
  }
};
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
function findCompositionNode(view, headPos) {
  let sel = view.observer.selectionRange;
  if (!sel.focusNode)
    return null;
  let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
  let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
  let textNode = textBefore || textAfter;
  if (textAfter && textBefore && textAfter.node != textBefore.node) {
    let descAfter = ContentView.get(textAfter.node);
    if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
      textNode = textAfter;
    } else if (view.docView.lastCompositionAfterCursor) {
      let descBefore = ContentView.get(textBefore.node);
      if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
        textNode = textAfter;
    }
  }
  view.docView.lastCompositionAfterCursor = textNode != textBefore;
  if (!textNode)
    return null;
  let from3 = headPos - textNode.offset;
  return { from: from3, to: from3 + textNode.node.nodeValue.length, node: textNode.node };
}
function findCompositionRange(view, changes, headPos) {
  let found = findCompositionNode(view, headPos);
  if (!found)
    return null;
  let { node: textNode, from: from3, to: to2 } = found, text = textNode.nodeValue;
  if (/[\n\r]/.test(text))
    return null;
  if (view.state.doc.sliceString(found.from, found.to) != text)
    return null;
  let inv = changes.invertedDesc;
  let range = new ChangedRange(inv.mapPos(from3), inv.mapPos(to2), from3, to2);
  let marks2 = [];
  for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
    let parentView = ContentView.get(parent);
    if (parentView instanceof MarkView)
      marks2.push({ node: parent, deco: parentView.mark });
    else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
      return { range, text: textNode, marks: marks2, line: parent };
    else if (parent != view.contentDOM)
      marks2.push({ node: parent, deco: new MarkDecoration({
        inclusive: true,
        attributes: getAttrs(parent),
        tagName: parent.tagName.toLowerCase()
      }) });
    else
      return null;
  }
}
function nextToUneditable(node3, offset) {
  if (node3.nodeType != 1)
    return 0;
  return (offset && node3.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node3.childNodes.length && node3.childNodes[offset].contentEditable == "false" ? 2 : 0);
}
var DecorationComparator$1 = class DecorationComparator {
  constructor() {
    this.changes = [];
  }
  compareRange(from3, to2) {
    addRange(from3, to2, this.changes);
  }
  comparePoint(from3, to2) {
    addRange(from3, to2, this.changes);
  }
};
function findChangedDeco(a7, b8, diff) {
  let comp = new DecorationComparator$1();
  RangeSet.compare(a7, b8, diff, comp);
  return comp.changes;
}
function inUneditable(node3, inside2) {
  for (let cur2 = node3; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
    if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
      return true;
    }
  }
  return false;
}
function touchesComposition(changes, composition) {
  let touched = false;
  if (composition)
    changes.iterChangedRanges((from3, to2) => {
      if (from3 < composition.to && to2 > composition.from)
        touched = true;
    });
  return touched;
}
function groupAt(state, pos, bias = 1) {
  let categorize = state.charCategorizer(pos);
  let line3 = state.doc.lineAt(pos), linePos = pos - line3.from;
  if (line3.length == 0)
    return EditorSelection.cursor(pos);
  if (linePos == 0)
    bias = 1;
  else if (linePos == line3.length)
    bias = -1;
  let from3 = linePos, to2 = linePos;
  if (bias < 0)
    from3 = findClusterBreak(line3.text, linePos, false);
  else
    to2 = findClusterBreak(line3.text, linePos);
  let cat = categorize(line3.text.slice(from3, to2));
  while (from3 > 0) {
    let prev3 = findClusterBreak(line3.text, from3, false);
    if (categorize(line3.text.slice(prev3, from3)) != cat)
      break;
    from3 = prev3;
  }
  while (to2 < line3.length) {
    let next3 = findClusterBreak(line3.text, to2);
    if (categorize(line3.text.slice(to2, next3)) != cat)
      break;
    to2 = next3;
  }
  return EditorSelection.range(from3 + line3.from, to2 + line3.from);
}
function getdx(x7, rect) {
  return rect.left > x7 ? rect.left - x7 : Math.max(0, x7 - rect.right);
}
function getdy(y9, rect) {
  return rect.top > y9 ? rect.top - y9 : Math.max(0, y9 - rect.bottom);
}
function yOverlap(a7, b8) {
  return a7.top < b8.bottom - 1 && a7.bottom > b8.top + 1;
}
function upTop(rect, top2) {
  return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
}
function upBot(rect, bottom) {
  return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
}
function domPosAtCoords(parent, x7, y9) {
  let closest, closestRect, closestX, closestY, closestOverlap = false;
  let above, below, aboveRect, belowRect;
  for (let child = parent.firstChild; child; child = child.nextSibling) {
    let rects = clientRectsFor(child);
    for (let i3 = 0; i3 < rects.length; i3++) {
      let rect = rects[i3];
      if (closestRect && yOverlap(closestRect, rect))
        rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      let dx = getdx(x7, rect), dy = getdy(y9, rect);
      if (dx == 0 && dy == 0)
        return child.nodeType == 3 ? domPosInText(child, x7, y9) : domPosAtCoords(child, x7, y9);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
        let side = dy ? y9 < rect.top ? -1 : 1 : dx ? x7 < rect.left ? -1 : 1 : 0;
        closestOverlap = !side || (side > 0 ? i3 < rects.length - 1 : i3 > 0);
      }
      if (dx == 0) {
        if (y9 > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y9 < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y9) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y9) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest)
    return { node: parent, offset: 0 };
  let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x7));
  if (closest.nodeType == 3)
    return domPosInText(closest, clipX, y9);
  if (closestOverlap && closest.contentEditable != "false")
    return domPosAtCoords(closest, clipX, y9);
  let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x7 >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return { node: parent, offset };
}
function domPosInText(node3, x7, y9) {
  let len = node3.nodeValue.length;
  let closestOffset = -1, closestDY = 1e9, generalSide = 0;
  for (let i3 = 0; i3 < len; i3++) {
    let rects = textRange(node3, i3, i3 + 1).getClientRects();
    for (let j11 = 0; j11 < rects.length; j11++) {
      let rect = rects[j11];
      if (rect.top == rect.bottom)
        continue;
      if (!generalSide)
        generalSide = x7 - rect.left;
      let dy = (rect.top > y9 ? rect.top - y9 : y9 - rect.bottom) - 1;
      if (rect.left - 1 <= x7 && rect.right + 1 >= x7 && dy < closestDY) {
        let right = x7 >= (rect.left + rect.right) / 2, after = right;
        if (browser.chrome || browser.gecko) {
          let rectBefore = textRange(node3, i3).getBoundingClientRect();
          if (rectBefore.left == rect.right)
            after = !right;
        }
        if (dy <= 0)
          return { node: node3, offset: i3 + (after ? 1 : 0) };
        closestOffset = i3 + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return { node: node3, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node3.nodeValue.length : 0 };
}
function posAtCoords(view, coords, precise, bias = -1) {
  var _a2, _b;
  let content2 = view.contentDOM.getBoundingClientRect(), docTop = content2.top + view.viewState.paddingTop;
  let block, { docHeight } = view.viewState;
  let { x: x7, y: y9 } = coords, yOffset = y9 - docTop;
  if (yOffset < 0)
    return 0;
  if (yOffset > docHeight)
    return view.state.doc.length;
  for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
    block = view.elementAtHeight(yOffset);
    if (block.type == BlockType.Text)
      break;
    for (; ; ) {
      yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight)
        break;
      if (bounced)
        return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y9 = docTop + yOffset;
  let lineStart = block.from;
  if (lineStart < view.viewport.from)
    return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content2, block, x7, y9);
  if (lineStart > view.viewport.to)
    return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content2, block, x7, y9);
  let doc2 = view.dom.ownerDocument;
  let root = view.root.elementFromPoint ? view.root : doc2;
  let element2 = root.elementFromPoint(x7, y9);
  if (element2 && !view.contentDOM.contains(element2))
    element2 = null;
  if (!element2) {
    x7 = Math.max(content2.left + 1, Math.min(content2.right - 1, x7));
    element2 = root.elementFromPoint(x7, y9);
    if (element2 && !view.contentDOM.contains(element2))
      element2 = null;
  }
  let node3, offset = -1;
  if (element2 && ((_a2 = view.docView.nearest(element2)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
    if (doc2.caretPositionFromPoint) {
      let pos = doc2.caretPositionFromPoint(x7, y9);
      if (pos)
        ({ offsetNode: node3, offset } = pos);
    } else if (doc2.caretRangeFromPoint) {
      let range = doc2.caretRangeFromPoint(x7, y9);
      if (range) {
        ({ startContainer: node3, startOffset: offset } = range);
        if (!view.contentDOM.contains(node3) || browser.safari && isSuspiciousSafariCaretResult(node3, offset, x7) || browser.chrome && isSuspiciousChromeCaretResult(node3, offset, x7))
          node3 = void 0;
      }
    }
    if (node3)
      offset = Math.min(maxOffset(node3), offset);
  }
  if (!node3 || !view.docView.dom.contains(node3)) {
    let line3 = LineView.find(view.docView, lineStart);
    if (!line3)
      return yOffset > block.top + block.height / 2 ? block.to : block.from;
    ({ node: node3, offset } = domPosAtCoords(line3.dom, x7, y9));
  }
  let nearest = view.docView.nearest(node3);
  if (!nearest)
    return null;
  if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
    let rect = nearest.dom.getBoundingClientRect();
    return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node3, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view, contentRect, block, x7, y9) {
  let into = Math.round((x7 - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    let textHeight = view.viewState.heightOracle.textHeight;
    let line3 = Math.floor((y9 - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
    into += line3 * view.viewState.heightOracle.lineLength;
  }
  let content2 = view.state.sliceDoc(block.from, block.to);
  return block.from + findColumn(content2, into, view.state.tabSize);
}
function isSuspiciousSafariCaretResult(node3, offset, x7) {
  let len;
  if (node3.nodeType != 3 || offset != (len = node3.nodeValue.length))
    return false;
  for (let next3 = node3.nextSibling; next3; next3 = next3.nextSibling)
    if (next3.nodeType != 1 || next3.nodeName != "BR")
      return false;
  return textRange(node3, len - 1, len).getBoundingClientRect().left > x7;
}
function isSuspiciousChromeCaretResult(node3, offset, x7) {
  if (offset != 0)
    return false;
  for (let cur2 = node3; ; ) {
    let parent = cur2.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
      return false;
    if (parent.classList.contains("cm-line"))
      break;
    cur2 = parent;
  }
  let rect = node3.nodeType == 1 ? node3.getBoundingClientRect() : textRange(node3, 0, Math.max(node3.nodeValue.length, 1)).getBoundingClientRect();
  return x7 - rect.left > 5;
}
function blockAt(view, pos) {
  let line3 = view.lineBlockAt(pos);
  if (Array.isArray(line3.type))
    for (let l7 of line3.type) {
      if (l7.to > pos || l7.to == pos && (l7.to == line3.to || l7.type == BlockType.Text))
        return l7;
    }
  return line3;
}
function moveToLineBoundary(view, start, forward, includeWrap) {
  let line3 = blockAt(view, start.head);
  let coords = !includeWrap || line3.type != BlockType.Text || !(view.lineWrapping || line3.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line3.from ? start.head - 1 : start.head);
  if (coords) {
    let editorRect = view.dom.getBoundingClientRect();
    let direction = view.textDirectionAt(line3.from);
    let pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null)
      return EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  return EditorSelection.cursor(forward ? line3.to : line3.from, forward ? -1 : 1);
}
function moveByChar(view, start, forward, by) {
  let line3 = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line3);
  let direction = view.textDirectionAt(line3.from);
  for (let cur2 = start, check = null; ; ) {
    let next3 = moveVisually(line3, spans, direction, cur2, forward), char3 = movedOver;
    if (!next3) {
      if (line3.number == (forward ? view.state.doc.lines : 1))
        return cur2;
      char3 = "\n";
      line3 = view.state.doc.line(line3.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line3);
      next3 = view.visualLineSide(line3, !forward);
    }
    if (!check) {
      if (!by)
        return next3;
      check = by(char3);
    } else if (!check(char3)) {
      return cur2;
    }
    cur2 = next3;
  }
}
function byGroup(view, pos, start) {
  let categorize = view.state.charCategorizer(pos);
  let cat = categorize(start);
  return (next3) => {
    let nextCat = categorize(next3);
    if (cat == CharCategory.Space)
      cat = nextCat;
    return cat == nextCat;
  };
}
function moveVertically(view, start, forward, distance) {
  let startPos = start.head, dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0))
    return EditorSelection.cursor(startPos, start.assoc);
  let goal = start.goalColumn, startY;
  let rect = view.contentDOM.getBoundingClientRect();
  let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
  if (startCoords) {
    if (goal == null)
      goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    let line3 = view.viewState.lineBlockAt(startPos);
    if (goal == null)
      goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line3.from));
    startY = (dir < 0 ? line3.top : line3.bottom) + docTop;
  }
  let resolvedGoal = rect.left + goal;
  let dist2 = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
  for (let extra = 0; ; extra += 10) {
    let curY = startY + (dist2 + extra) * dir;
    let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
      let charRect = view.docView.coordsForChar(pos);
      let assoc = !charRect || curY < charRect.top ? -1 : 1;
      return EditorSelection.cursor(pos, assoc, void 0, goal);
    }
  }
}
function skipAtomicRanges(atoms, pos, bias) {
  for (; ; ) {
    let moved = 0;
    for (let set of atoms) {
      set.between(pos - 1, pos + 1, (from3, to2, value) => {
        if (pos > from3 && pos < to2) {
          let side = moved || bias || (pos - from3 < to2 - pos ? -1 : 1);
          pos = side < 0 ? from3 : to2;
          moved = side;
        }
      });
    }
    if (!moved)
      return pos;
  }
}
function skipAtoms(view, oldPos, pos) {
  let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f4) => f4(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
  return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
}
var LineBreakPlaceholder = "￿";
var DOMReader = class {
  constructor(points, state) {
    this.points = points;
    this.text = "";
    this.lineSeparator = state.facet(EditorState.lineSeparator);
  }
  append(text) {
    this.text += text;
  }
  lineBreak() {
    this.text += LineBreakPlaceholder;
  }
  readRange(start, end) {
    if (!start)
      return this;
    let parent = start.parentNode;
    for (let cur2 = start; ; ) {
      this.findPointBefore(parent, cur2);
      let oldLen = this.text.length;
      this.readNode(cur2);
      let next3 = cur2.nextSibling;
      if (next3 == end)
        break;
      let view = ContentView.get(cur2), nextView = ContentView.get(next3);
      if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur2)) || isBlockElement(next3) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
        this.lineBreak();
      cur2 = next3;
    }
    this.findPointBefore(parent, end);
    return this;
  }
  readTextNode(node3) {
    let text = node3.nodeValue;
    for (let point of this.points)
      if (point.node == node3)
        point.pos = this.text.length + Math.min(point.offset, text.length);
    for (let off = 0, re7 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let nextBreak = -1, breakSize = 1, m10;
      if (this.lineSeparator) {
        nextBreak = text.indexOf(this.lineSeparator, off);
        breakSize = this.lineSeparator.length;
      } else if (m10 = re7.exec(text)) {
        nextBreak = m10.index;
        breakSize = m10[0].length;
      }
      this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
      if (nextBreak < 0)
        break;
      this.lineBreak();
      if (breakSize > 1) {
        for (let point of this.points)
          if (point.node == node3 && point.pos > this.text.length)
            point.pos -= breakSize - 1;
      }
      off = nextBreak + breakSize;
    }
  }
  readNode(node3) {
    if (node3.cmIgnore)
      return;
    let view = ContentView.get(node3);
    let fromView = view && view.overrideDOMText;
    if (fromView != null) {
      this.findPointInside(node3, fromView.length);
      for (let i3 = fromView.iter(); !i3.next().done; ) {
        if (i3.lineBreak)
          this.lineBreak();
        else
          this.append(i3.value);
      }
    } else if (node3.nodeType == 3) {
      this.readTextNode(node3);
    } else if (node3.nodeName == "BR") {
      if (node3.nextSibling)
        this.lineBreak();
    } else if (node3.nodeType == 1) {
      this.readRange(node3.firstChild, null);
    }
  }
  findPointBefore(node3, next3) {
    for (let point of this.points)
      if (point.node == node3 && node3.childNodes[point.offset] == next3)
        point.pos = this.text.length;
  }
  findPointInside(node3, length3) {
    for (let point of this.points)
      if (node3.nodeType == 3 ? point.node == node3 : node3.contains(point.node))
        point.pos = this.text.length + (isAtEnd(node3, point.node, point.offset) ? length3 : 0);
  }
};
function isAtEnd(parent, node3, offset) {
  for (; ; ) {
    if (!node3 || offset < maxOffset(node3))
      return false;
    if (node3 == parent)
      return true;
    offset = domIndex(node3) + 1;
    node3 = node3.parentNode;
  }
}
var DOMPoint = class {
  constructor(node3, offset) {
    this.node = node3;
    this.offset = offset;
    this.pos = -1;
  }
};
var DOMChange = class {
  constructor(view, start, end, typeOver) {
    this.typeOver = typeOver;
    this.bounds = null;
    this.text = "";
    this.domChanged = start > -1;
    let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
    if (view.state.readOnly && start > -1) {
      this.newSel = null;
    } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
      let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
      let reader = new DOMReader(selPoints, view.state);
      reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
      this.text = reader.text;
      this.newSel = selectionFromPoints(selPoints, this.bounds.from);
    } else {
      let domSel = view.observer.selectionRange;
      let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
      let vp = view.viewport;
      if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
        let from3 = Math.min(head, anchor), to2 = Math.max(head, anchor);
        let offFrom = vp.from - from3, offTo = vp.to - to2;
        if ((offFrom == 0 || offFrom == 1 || from3 == 0) && (offTo == 0 || offTo == -1 || to2 == view.state.doc.length)) {
          head = 0;
          anchor = view.state.doc.length;
        }
      }
      this.newSel = EditorSelection.single(anchor, head);
    }
  }
};
function applyDOMChange(view, domChange) {
  let change;
  let { newSel } = domChange, sel = view.state.selection.main;
  let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
  if (domChange.bounds) {
    let { from: from3, to: to2 } = domChange.bounds;
    let preferredPos = sel.from, preferredSide = null;
    if (lastKey === 8 || browser.android && domChange.text.length < to2 - from3) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    let diff = findDiff(view.state.doc.sliceString(from3, to2, LineBreakPlaceholder), domChange.text, preferredPos - from3, preferredSide);
    if (diff) {
      if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
        diff.toB--;
      change = {
        from: from3 + diff.from,
        to: from3 + diff.toA,
        insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel)
    return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
    };
  } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
    if (newSel && change.insert.length == 2)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
    if (newSel)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  }
  if (change) {
    return applyDOMChangeInner(view, change, newSel, lastKey);
  } else if (newSel && !newSel.main.eq(sel)) {
    let scrollIntoView22 = false, userEvent = "select";
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select")
        scrollIntoView22 = true;
      userEvent = view.inputState.lastSelectionOrigin;
    }
    view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView22, userEvent });
    return true;
  } else {
    return false;
  }
}
function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
  if (browser.ios && view.inputState.flushIOSKey(change))
    return true;
  let sel = view.state.selection.main;
  if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
    return true;
  let text = change.insert.toString();
  if (view.inputState.composing >= 0)
    view.inputState.composing++;
  let defaultTr;
  let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
  if (!view.state.facet(inputHandler).some((h6) => h6(view, change.from, change.to, text, defaultInsert)))
    view.dispatch(defaultInsert());
  return true;
}
function applyDefaultInsert(view, change, newSel) {
  let tr2, startState = view.state, sel = startState.selection.main;
  if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
    let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
    let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
    tr2 = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
  } else {
    let changes = startState.changes(change);
    let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
    if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
      let replaced = view.state.sliceDoc(change.from, change.to);
      let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
      if (composition) {
        let dLen = change.insert.length - (change.to - change.from);
        compositionRange = { from: composition.from, to: composition.to - dLen };
      } else {
        compositionRange = view.state.doc.lineAt(sel.head);
      }
      let offset = sel.to - change.to, size = sel.to - sel.from;
      tr2 = startState.changeByRange((range) => {
        if (range.from == sel.from && range.to == sel.to)
          return { changes, range: mainSel || range.map(changes) };
        let to2 = range.to - offset, from3 = to2 - replaced.length;
        if (range.to - range.from != size || view.state.sliceDoc(from3, to2) != replaced || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        range.to >= compositionRange.from && range.from <= compositionRange.to)
          return { range };
        let rangeChanges = startState.changes({ from: from3, to: to2, insert: change.insert }), selOff = range.to - sel.to;
        return {
          changes: rangeChanges,
          range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
        };
      });
    } else {
      tr2 = {
        changes,
        selection: mainSel && startState.selection.replaceRange(mainSel)
      };
    }
  }
  let userEvent = "input.type";
  if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
    view.inputState.compositionPendingChange = false;
    userEvent += ".compose";
    if (view.inputState.compositionFirstChange) {
      userEvent += ".start";
      view.inputState.compositionFirstChange = false;
    }
  }
  return startState.update(tr2, { userEvent, scrollIntoView: true });
}
function findDiff(a7, b8, preferredPos, preferredSide) {
  let minLen = Math.min(a7.length, b8.length);
  let from3 = 0;
  while (from3 < minLen && a7.charCodeAt(from3) == b8.charCodeAt(from3))
    from3++;
  if (from3 == minLen && a7.length == b8.length)
    return null;
  let toA = a7.length, toB = b8.length;
  while (toA > 0 && toB > 0 && a7.charCodeAt(toA - 1) == b8.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    let adjust = Math.max(0, from3 - Math.min(toA, toB));
    preferredPos -= toA + adjust - from3;
  }
  if (toA < from3 && a7.length < b8.length) {
    let move = preferredPos <= from3 && preferredPos >= toA ? from3 - preferredPos : 0;
    from3 -= move;
    toB = from3 + (toB - toA);
    toA = from3;
  } else if (toB < from3) {
    let move = preferredPos <= from3 && preferredPos >= toB ? from3 - preferredPos : 0;
    from3 -= move;
    toA = from3 + (toA - toB);
    toB = from3;
  }
  return { from: from3, toA, toB };
}
function selectionPoints(view) {
  let result = [];
  if (view.root.activeElement != view.contentDOM)
    return result;
  let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset)
      result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base2) {
  if (points.length == 0)
    return null;
  let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
}
var InputState = class {
  setSelectionOrigin(origin) {
    this.lastSelectionOrigin = origin;
    this.lastSelectionTime = Date.now();
  }
  constructor(view) {
    this.view = view;
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.lastTouchTime = 0;
    this.lastFocusTime = 0;
    this.lastScrollTop = 0;
    this.lastScrollLeft = 0;
    this.pendingIOSKey = void 0;
    this.tabFocusMode = -1;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.handlers = /* @__PURE__ */ Object.create(null);
    this.composing = -1;
    this.compositionFirstChange = null;
    this.compositionEndedAt = 0;
    this.compositionPendingKey = false;
    this.compositionPendingChange = false;
    this.mouseSelection = null;
    this.draggedContent = null;
    this.handleEvent = this.handleEvent.bind(this);
    this.notifiedFocused = view.hasFocus;
    if (browser.safari)
      view.contentDOM.addEventListener("input", () => null);
    if (browser.gecko)
      firefoxCopyCutHack(view.contentDOM.ownerDocument);
  }
  handleEvent(event) {
    if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
      return;
    if (event.type == "keydown" && this.keydown(event))
      return;
    this.runHandlers(event.type, event);
  }
  runHandlers(type, event) {
    let handlers2 = this.handlers[type];
    if (handlers2) {
      for (let observer of handlers2.observers)
        observer(this.view, event);
      for (let handler of handlers2.handlers) {
        if (event.defaultPrevented)
          break;
        if (handler(this.view, event)) {
          event.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(plugins) {
    let handlers2 = computeHandlers(plugins), prev3 = this.handlers, dom = this.view.contentDOM;
    for (let type in handlers2)
      if (type != "scroll") {
        let passive = !handlers2[type].handlers.length;
        let exists = prev3[type];
        if (exists && passive != !exists.handlers.length) {
          dom.removeEventListener(type, this.handleEvent);
          exists = null;
        }
        if (!exists)
          dom.addEventListener(type, this.handleEvent, { passive });
      }
    for (let type in prev3)
      if (type != "scroll" && !handlers2[type])
        dom.removeEventListener(type, this.handleEvent);
    this.handlers = handlers2;
  }
  keydown(event) {
    this.lastKeyCode = event.keyCode;
    this.lastKeyTime = Date.now();
    if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
      return true;
    if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
      this.tabFocusMode = -1;
    if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
      this.view.observer.delayAndroidKey(event.key, event.keyCode);
      return true;
    }
    let pending;
    if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key2) => key2.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
      this.pendingIOSKey = pending || event;
      setTimeout(() => this.flushIOSKey(), 250);
      return true;
    }
    if (event.keyCode != 229)
      this.view.observer.forceFlush();
    return false;
  }
  flushIOSKey(change) {
    let key2 = this.pendingIOSKey;
    if (!key2)
      return false;
    if (key2.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
      return false;
    this.pendingIOSKey = void 0;
    return dispatchKey(this.view.contentDOM, key2.key, key2.keyCode, key2 instanceof KeyboardEvent ? key2 : void 0);
  }
  ignoreDuringComposition(event) {
    if (!/^key/.test(event.type))
      return false;
    if (this.composing > 0)
      return true;
    if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
      this.compositionPendingKey = false;
      return true;
    }
    return false;
  }
  startMouseSelection(mouseSelection) {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
    this.mouseSelection = mouseSelection;
  }
  update(update) {
    this.view.observer.update(update);
    if (this.mouseSelection)
      this.mouseSelection.update(update);
    if (this.draggedContent && update.docChanged)
      this.draggedContent = this.draggedContent.map(update.changes);
    if (update.transactions.length)
      this.lastKeyCode = this.lastSelectionTime = 0;
  }
  destroy() {
    if (this.mouseSelection)
      this.mouseSelection.destroy();
  }
};
function bindHandler(plugin2, handler) {
  return (view, event) => {
    try {
      return handler.call(plugin2, event, view);
    } catch (e) {
      logException(view.state, e);
    }
  };
}
function computeHandlers(plugins) {
  let result = /* @__PURE__ */ Object.create(null);
  function record(type) {
    return result[type] || (result[type] = { observers: [], handlers: [] });
  }
  for (let plugin2 of plugins) {
    let spec = plugin2.spec;
    if (spec && spec.domEventHandlers)
      for (let type in spec.domEventHandlers) {
        let f4 = spec.domEventHandlers[type];
        if (f4)
          record(type).handlers.push(bindHandler(plugin2.value, f4));
      }
    if (spec && spec.domEventObservers)
      for (let type in spec.domEventObservers) {
        let f4 = spec.domEventObservers[type];
        if (f4)
          record(type).observers.push(bindHandler(plugin2.value, f4));
      }
  }
  for (let type in handlers)
    record(type).handlers.push(handlers[type]);
  for (let type in observers)
    record(type).observers.push(observers[type]);
  return result;
}
var PendingKeys = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
];
var EmacsyPendingKeys = "dthko";
var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
var dragScrollMargin = 6;
function dragScrollSpeed(dist2) {
  return Math.max(0, dist2) * 0.7 + 8;
}
function dist(a7, b8) {
  return Math.max(Math.abs(a7.clientX - b8.clientX), Math.abs(a7.clientY - b8.clientY));
}
var MouseSelection = class {
  constructor(view, startEvent, style, mustSelect) {
    this.view = view;
    this.startEvent = startEvent;
    this.style = style;
    this.mustSelect = mustSelect;
    this.scrollSpeed = { x: 0, y: 0 };
    this.scrolling = -1;
    this.lastEvent = startEvent;
    this.scrollParents = scrollableParents(view.contentDOM);
    this.atoms = view.state.facet(atomicRanges).map((f4) => f4(view));
    let doc2 = view.contentDOM.ownerDocument;
    doc2.addEventListener("mousemove", this.move = this.move.bind(this));
    doc2.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
  }
  start(event) {
    if (this.dragging === false)
      this.select(event);
  }
  move(event) {
    if (event.buttons == 0)
      return this.destroy();
    if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
      return;
    this.select(this.lastEvent = event);
    let sx = 0, sy = 0;
    let left = 0, top2 = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
    if (this.scrollParents.x)
      ({ left, right } = this.scrollParents.x.getBoundingClientRect());
    if (this.scrollParents.y)
      ({ top: top2, bottom } = this.scrollParents.y.getBoundingClientRect());
    let margins = getScrollMargins(this.view);
    if (event.clientX - margins.left <= left + dragScrollMargin)
      sx = -dragScrollSpeed(left - event.clientX);
    else if (event.clientX + margins.right >= right - dragScrollMargin)
      sx = dragScrollSpeed(event.clientX - right);
    if (event.clientY - margins.top <= top2 + dragScrollMargin)
      sy = -dragScrollSpeed(top2 - event.clientY);
    else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
      sy = dragScrollSpeed(event.clientY - bottom);
    this.setScrollSpeed(sx, sy);
  }
  up(event) {
    if (this.dragging == null)
      this.select(this.lastEvent);
    if (!this.dragging)
      event.preventDefault();
    this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let doc2 = this.view.contentDOM.ownerDocument;
    doc2.removeEventListener("mousemove", this.move);
    doc2.removeEventListener("mouseup", this.up);
    this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(sx, sy) {
    this.scrollSpeed = { x: sx, y: sy };
    if (sx || sy) {
      if (this.scrolling < 0)
        this.scrolling = setInterval(() => this.scroll(), 50);
    } else if (this.scrolling > -1) {
      clearInterval(this.scrolling);
      this.scrolling = -1;
    }
  }
  scroll() {
    let { x: x7, y: y9 } = this.scrollSpeed;
    if (x7 && this.scrollParents.x) {
      this.scrollParents.x.scrollLeft += x7;
      x7 = 0;
    }
    if (y9 && this.scrollParents.y) {
      this.scrollParents.y.scrollTop += y9;
      y9 = 0;
    }
    if (x7 || y9)
      this.view.win.scrollBy(x7, y9);
    if (this.dragging === false)
      this.select(this.lastEvent);
  }
  skipAtoms(sel) {
    let ranges = null;
    for (let i3 = 0; i3 < sel.ranges.length; i3++) {
      let range = sel.ranges[i3], updated = null;
      if (range.empty) {
        let pos = skipAtomicRanges(this.atoms, range.from, 0);
        if (pos != range.from)
          updated = EditorSelection.cursor(pos, -1);
      } else {
        let from3 = skipAtomicRanges(this.atoms, range.from, -1);
        let to2 = skipAtomicRanges(this.atoms, range.to, 1);
        if (from3 != range.from || to2 != range.to)
          updated = EditorSelection.range(range.from == range.anchor ? from3 : to2, range.from == range.head ? from3 : to2);
      }
      if (updated) {
        if (!ranges)
          ranges = sel.ranges.slice();
        ranges[i3] = updated;
      }
    }
    return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
  }
  select(event) {
    let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
    if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
      this.view.dispatch({
        selection,
        userEvent: "select.pointer"
      });
    this.mustSelect = false;
  }
  update(update) {
    if (update.transactions.some((tr2) => tr2.isUserEvent("input.type")))
      this.destroy();
    else if (this.style.update(update))
      setTimeout(() => this.select(this.lastEvent), 20);
  }
};
function addsSelectionRange(view, event) {
  let facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  let facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  let { main } = view.state.selection;
  if (main.empty)
    return false;
  let sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0)
    return true;
  let rects = sel.getRangeAt(0).getClientRects();
  for (let i3 = 0; i3 < rects.length; i3++) {
    let rect = rects[i3];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
      return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node3 = event.target, cView; node3 != view.contentDOM; node3 = node3.parentNode)
    if (!node3 || node3.nodeType == 11 || (cView = ContentView.get(node3)) && cView.ignoreEvent(event))
      return false;
  return true;
}
var handlers = /* @__PURE__ */ Object.create(null);
var observers = /* @__PURE__ */ Object.create(null);
var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
function capturePaste(view) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function textFilter(state, facet, text) {
  for (let filter of state.facet(facet))
    text = filter(text, state);
  return text;
}
function doPaste(view, input) {
  input = textFilter(view.state, clipboardInputFilter, input);
  let { state } = view, changes, i3 = 1, text = state.toText(input);
  let byLine = text.lines == state.selection.ranges.length;
  let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r2) => r2.empty) && lastLinewiseCopy == text.toString();
  if (linewise) {
    let lastLine = -1;
    changes = state.changeByRange((range) => {
      let line3 = state.doc.lineAt(range.from);
      if (line3.from == lastLine)
        return { range };
      lastLine = line3.from;
      let insert2 = state.toText((byLine ? text.line(i3++).text : input) + state.lineBreak);
      return {
        changes: { from: line3.from, insert: insert2 },
        range: EditorSelection.cursor(range.from + insert2.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange((range) => {
      let line3 = text.line(i3++);
      return {
        changes: { from: range.from, to: range.to, insert: line3.text },
        range: EditorSelection.cursor(range.from + line3.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
observers.scroll = (view) => {
  view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
  view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
};
handlers.keydown = (view, event) => {
  view.inputState.setSelectionOrigin("select");
  if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
    view.inputState.tabFocusMode = Date.now() + 2e3;
  return false;
};
observers.touchstart = (view, e) => {
  view.inputState.lastTouchTime = Date.now();
  view.inputState.setSelectionOrigin("select.pointer");
};
observers.touchmove = (view) => {
  view.inputState.setSelectionOrigin("select.pointer");
};
handlers.mousedown = (view, event) => {
  view.observer.flush();
  if (view.inputState.lastTouchTime > Date.now() - 2e3)
    return false;
  let style = null;
  for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
    style = makeStyle(view, event);
    if (style)
      break;
  }
  if (!style && event.button == 0)
    style = basicMouseSelection(view, event);
  if (style) {
    let mustFocus = !view.hasFocus;
    view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
    if (mustFocus)
      view.observer.ignore(() => {
        focusPreventScroll(view.contentDOM);
        let active = view.root.activeElement;
        if (active && !active.contains(view.contentDOM))
          active.blur();
      });
    let mouseSel = view.inputState.mouseSelection;
    if (mouseSel) {
      mouseSel.start(event);
      return mouseSel.dragging === false;
    }
  }
  return false;
};
function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    return EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    return groupAt(view.state, pos, bias);
  } else {
    let visual = LineView.find(view.docView, pos), line3 = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    let from3 = visual ? visual.posAtStart : line3.from, to2 = visual ? visual.posAtEnd : line3.to;
    if (to2 < view.state.doc.length && to2 == line3.to)
      to2++;
    return EditorSelection.range(from3, to2);
  }
}
var inside = (x7, y9, rect) => y9 >= rect.top && y9 <= rect.bottom && x7 >= rect.left && x7 <= rect.right;
function findPositionSide(view, pos, x7, y9) {
  let line3 = LineView.find(view.docView, pos);
  if (!line3)
    return 1;
  let off = pos - line3.posAtStart;
  if (off == 0)
    return 1;
  if (off == line3.length)
    return -1;
  let before = line3.coordsAt(off, -1);
  if (before && inside(x7, y9, before))
    return -1;
  let after = line3.coordsAt(off, 1);
  if (after && inside(x7, y9, after))
    return 1;
  return before && before.bottom >= y9 ? -1 : 1;
}
function queryPos(view, event) {
  let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
}
var BadMouseDetail = browser.ie && browser.ie_version <= 11;
var lastMouseDown = null;
var lastMouseDownCount = 0;
var lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail)
    return event.detail;
  let last = lastMouseDown, lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  let start = queryPos(view, event), type = getClickType(event);
  let startSel = view.state.selection;
  return {
    update(update) {
      if (update.docChanged) {
        start.pos = update.changes.mapPos(start.pos);
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, extend2, multiple) {
      let cur2 = queryPos(view, event2), removed;
      let range = rangeForClick(view, cur2.pos, cur2.bias, type);
      if (start.pos != cur2.pos && !extend2) {
        let startRange = rangeForClick(view, start.pos, start.bias, type);
        let from3 = Math.min(startRange.from, range.from), to2 = Math.max(startRange.to, range.to);
        range = from3 < range.from ? EditorSelection.range(from3, to2) : EditorSelection.range(to2, from3);
      }
      if (extend2)
        return startSel.replaceRange(startSel.main.extend(range.from, range.to));
      else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
        return removed;
      else if (multiple)
        return startSel.addRange(range);
      else
        return EditorSelection.create([range]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (let i3 = 0; i3 < sel.ranges.length; i3++) {
    let { from: from3, to: to2 } = sel.ranges[i3];
    if (from3 <= pos && to2 >= pos)
      return EditorSelection.create(sel.ranges.slice(0, i3).concat(sel.ranges.slice(i3 + 1)), sel.mainIndex == i3 ? 0 : sel.mainIndex - (sel.mainIndex > i3 ? 1 : 0));
  }
  return null;
}
handlers.dragstart = (view, event) => {
  let { selection: { main: range } } = view.state;
  if (event.target.draggable) {
    let cView = view.docView.nearest(event.target);
    if (cView && cView.isWidget) {
      let from3 = cView.posAtStart, to2 = from3 + cView.length;
      if (from3 >= range.to || to2 <= range.from)
        range = EditorSelection.range(from3, to2);
    }
  }
  let { inputState } = view;
  if (inputState.mouseSelection)
    inputState.mouseSelection.dragging = true;
  inputState.draggedContent = range;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
    event.dataTransfer.effectAllowed = "copyMove";
  }
  return false;
};
handlers.dragend = (view) => {
  view.inputState.draggedContent = null;
  return false;
};
function dropText(view, event, text, direct) {
  text = textFilter(view.state, clipboardInputFilter, text);
  if (!text)
    return;
  let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let { draggedContent } = view.inputState;
  let del = direct && draggedContent && dragMovesSelection(view, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
  let ins = { from: dropPos, insert: text };
  let changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes,
    selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
    userEvent: del ? "move.drop" : "input.drop"
  });
  view.inputState.draggedContent = null;
}
handlers.drop = (view, event) => {
  if (!event.dataTransfer)
    return false;
  if (view.state.readOnly)
    return true;
  let files = event.dataTransfer.files;
  if (files && files.length) {
    let text = Array(files.length), read = 0;
    let finishFile = () => {
      if (++read == files.length)
        dropText(view, event, text.filter((s66) => s66 != null).join(view.state.lineBreak), false);
    };
    for (let i3 = 0; i3 < files.length; i3++) {
      let reader = new FileReader();
      reader.onerror = finishFile;
      reader.onload = () => {
        if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
          text[i3] = reader.result;
        finishFile();
      };
      reader.readAsText(files[i3]);
    }
    return true;
  } else {
    let text = event.dataTransfer.getData("Text");
    if (text) {
      dropText(view, event, text, true);
      return true;
    }
  }
  return false;
};
handlers.paste = (view, event) => {
  if (view.state.readOnly)
    return true;
  view.observer.flush();
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
    return true;
  } else {
    capturePaste(view);
    return false;
  }
};
function captureCopy(view, text) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(() => {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  let content2 = [], ranges = [], linewise = false;
  for (let range of state.selection.ranges)
    if (!range.empty) {
      content2.push(state.sliceDoc(range.from, range.to));
      ranges.push(range);
    }
  if (!content2.length) {
    let upto = -1;
    for (let { from: from3 } of state.selection.ranges) {
      let line3 = state.doc.lineAt(from3);
      if (line3.number > upto) {
        content2.push(line3.text);
        ranges.push({ from: line3.from, to: Math.min(state.doc.length, line3.to + 1) });
      }
      upto = line3.number;
    }
    linewise = true;
  }
  return { text: textFilter(state, clipboardOutputFilter, content2.join(state.lineBreak)), ranges, linewise };
}
var lastLinewiseCopy = null;
handlers.copy = handlers.cut = (view, event) => {
  let { text, ranges, linewise } = copiedRange(view.state);
  if (!text && !linewise)
    return false;
  lastLinewiseCopy = linewise ? text : null;
  if (event.type == "cut" && !view.state.readOnly)
    view.dispatch({
      changes: ranges,
      scrollIntoView: true,
      userEvent: "delete.cut"
    });
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    data.clearData();
    data.setData("text/plain", text);
    return true;
  } else {
    captureCopy(view, text);
    return false;
  }
};
var isFocusChange = /* @__PURE__ */ Annotation.define();
function focusChangeTransaction(state, focus) {
  let effects = [];
  for (let getEffect of state.facet(focusChangeEffect)) {
    let effect = getEffect(state, focus);
    if (effect)
      effects.push(effect);
  }
  return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
}
function updateForFocusChange(view) {
  setTimeout(() => {
    let focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      let tr2 = focusChangeTransaction(view.state, focus);
      if (tr2)
        view.dispatch(tr2);
      else
        view.update([]);
    }
  }, 10);
}
observers.focus = (view) => {
  view.inputState.lastFocusTime = Date.now();
  if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
    view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
    view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
  }
  updateForFocusChange(view);
};
observers.blur = (view) => {
  view.observer.clearSelectionRange();
  updateForFocusChange(view);
};
observers.compositionstart = observers.compositionupdate = (view) => {
  if (view.observer.editContext)
    return;
  if (view.inputState.compositionFirstChange == null)
    view.inputState.compositionFirstChange = true;
  if (view.inputState.composing < 0) {
    view.inputState.composing = 0;
  }
};
observers.compositionend = (view) => {
  if (view.observer.editContext)
    return;
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  view.inputState.compositionPendingKey = true;
  view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
  view.inputState.compositionFirstChange = null;
  if (browser.chrome && browser.android) {
    view.observer.flushSoon();
  } else if (view.inputState.compositionPendingChange) {
    Promise.resolve().then(() => view.observer.flush());
  } else {
    setTimeout(() => {
      if (view.inputState.composing < 0 && view.docView.hasComposition)
        view.update([]);
    }, 50);
  }
};
observers.contextmenu = (view) => {
  view.inputState.lastContextMenu = Date.now();
};
handlers.beforeinput = (view, event) => {
  var _a2, _b;
  if (event.inputType == "insertReplacementText" && view.observer.editContext) {
    let text = (_a2 = event.dataTransfer) === null || _a2 === void 0 ? void 0 : _a2.getData("text/plain"), ranges = event.getTargetRanges();
    if (text && ranges.length) {
      let r2 = ranges[0];
      let from3 = view.posAtDOM(r2.startContainer, r2.startOffset), to2 = view.posAtDOM(r2.endContainer, r2.endOffset);
      applyDOMChangeInner(view, { from: from3, to: to2, insert: view.state.toText(text) }, null);
      return true;
    }
  }
  let pending;
  if (browser.chrome && browser.android && (pending = PendingKeys.find((key2) => key2.inputType == event.inputType))) {
    view.observer.delayAndroidKey(pending.key, pending.keyCode);
    if (pending.key == "Backspace" || pending.key == "Delete") {
      let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
      setTimeout(() => {
        var _a22;
        if ((((_a22 = window.visualViewport) === null || _a22 === void 0 ? void 0 : _a22.height) || 0) > startViewHeight + 10 && view.hasFocus) {
          view.contentDOM.blur();
          view.focus();
        }
      }, 100);
    }
  }
  if (browser.ios && event.inputType == "deleteContentForward") {
    view.observer.flushSoon();
  }
  if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
    setTimeout(() => observers.compositionend(view, event), 20);
  }
  return false;
};
var appliedFirefoxHack = /* @__PURE__ */ new Set();
function firefoxCopyCutHack(doc2) {
  if (!appliedFirefoxHack.has(doc2)) {
    appliedFirefoxHack.add(doc2);
    doc2.addEventListener("copy", () => {
    });
    doc2.addEventListener("cut", () => {
    });
  }
}
var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
var heightChangeFlag = false;
function clearHeightChangeFlag() {
  heightChangeFlag = false;
}
var HeightOracle = class {
  constructor(lineWrapping) {
    this.lineWrapping = lineWrapping;
    this.doc = Text.empty;
    this.heightSamples = {};
    this.lineHeight = 14;
    this.charWidth = 7;
    this.textHeight = 14;
    this.lineLength = 30;
  }
  heightForGap(from3, to2) {
    let lines = this.doc.lineAt(to2).number - this.doc.lineAt(from3).number + 1;
    if (this.lineWrapping)
      lines += Math.max(0, Math.ceil((to2 - from3 - lines * this.lineLength * 0.5) / this.lineLength));
    return this.lineHeight * lines;
  }
  heightForLine(length3) {
    if (!this.lineWrapping)
      return this.lineHeight;
    let lines = 1 + Math.max(0, Math.ceil((length3 - this.lineLength) / (this.lineLength - 5)));
    return lines * this.lineHeight;
  }
  setDoc(doc2) {
    this.doc = doc2;
    return this;
  }
  mustRefreshForWrapping(whiteSpace) {
    return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(lineHeights) {
    let newHeight = false;
    for (let i3 = 0; i3 < lineHeights.length; i3++) {
      let h6 = lineHeights[i3];
      if (h6 < 0) {
        i3++;
      } else if (!this.heightSamples[Math.floor(h6 * 10)]) {
        newHeight = true;
        this.heightSamples[Math.floor(h6 * 10)] = true;
      }
    }
    return newHeight;
  }
  refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
    let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
    let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
    this.lineWrapping = lineWrapping;
    this.lineHeight = lineHeight;
    this.charWidth = charWidth;
    this.textHeight = textHeight;
    this.lineLength = lineLength;
    if (changed) {
      this.heightSamples = {};
      for (let i3 = 0; i3 < knownHeights.length; i3++) {
        let h6 = knownHeights[i3];
        if (h6 < 0)
          i3++;
        else
          this.heightSamples[Math.floor(h6 * 10)] = true;
      }
    }
    return changed;
  }
};
var MeasuredHeights = class {
  constructor(from3, heights) {
    this.from = from3;
    this.heights = heights;
    this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
};
var BlockInfo = class _BlockInfo {
  /**
  @internal
  */
  constructor(from3, length3, top2, height, _content) {
    this.from = from3;
    this.length = length3;
    this.top = top2;
    this.height = height;
    this._content = _content;
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length;
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height;
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof PointDecoration ? this._content.widget : null;
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  /**
  @internal
  */
  join(other) {
    let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
    return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
  }
};
var QueryType = /* @__PURE__ */ function(QueryType22) {
  QueryType22[QueryType22["ByPos"] = 0] = "ByPos";
  QueryType22[QueryType22["ByHeight"] = 1] = "ByHeight";
  QueryType22[QueryType22["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType22;
}(QueryType || (QueryType = {}));
var Epsilon = 1e-3;
var HeightMap = class _HeightMap {
  constructor(length3, height, flags = 2) {
    this.length = length3;
    this.height = height;
    this.flags = flags;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(value) {
    this.flags = (value ? 2 : 0) | this.flags & ~2;
  }
  setHeight(height) {
    if (this.height != height) {
      if (Math.abs(this.height - height) > Epsilon)
        heightChangeFlag = true;
      this.height = height;
    }
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(_from, _to, nodes) {
    return _HeightMap.of(nodes);
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(_to, result) {
    result.push(this);
  }
  decomposeRight(_from, result) {
    result.push(this);
  }
  applyChanges(decorations2, oldDoc, oracle, changes) {
    let me9 = this, doc2 = oracle.doc;
    for (let i3 = changes.length - 1; i3 >= 0; i3--) {
      let { fromA, toA, fromB, toB } = changes[i3];
      let start = me9.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
      let end = start.to >= toA ? start : me9.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
      toB += end.to - toA;
      toA = end.to;
      while (i3 > 0 && start.from <= changes[i3 - 1].toA) {
        fromA = changes[i3 - 1].fromA;
        fromB = changes[i3 - 1].fromB;
        i3--;
        if (fromA < start.from)
          start = me9.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
      }
      fromB += start.from - fromA;
      fromA = start.from;
      let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
      me9 = replace3(me9, me9.replace(fromA, toA, nodes));
    }
    return me9.updateHeight(oracle, 0);
  }
  static empty() {
    return new HeightMapText(0, 0);
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(nodes) {
    if (nodes.length == 1)
      return nodes[0];
    let i3 = 0, j11 = nodes.length, before = 0, after = 0;
    for (; ; ) {
      if (i3 == j11) {
        if (before > after * 2) {
          let split = nodes[i3 - 1];
          if (split.break)
            nodes.splice(--i3, 1, split.left, null, split.right);
          else
            nodes.splice(--i3, 1, split.left, split.right);
          j11 += 1 + split.break;
          before -= split.size;
        } else if (after > before * 2) {
          let split = nodes[j11];
          if (split.break)
            nodes.splice(j11, 1, split.left, null, split.right);
          else
            nodes.splice(j11, 1, split.left, split.right);
          j11 += 2 + split.break;
          after -= split.size;
        } else {
          break;
        }
      } else if (before < after) {
        let next3 = nodes[i3++];
        if (next3)
          before += next3.size;
      } else {
        let next3 = nodes[--j11];
        if (next3)
          after += next3.size;
      }
    }
    let brk = 0;
    if (nodes[i3 - 1] == null) {
      brk = 1;
      i3--;
    } else if (nodes[i3] == null) {
      brk = 1;
      j11++;
    }
    return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i3)), brk, _HeightMap.of(nodes.slice(j11)));
  }
};
function replace3(old, val) {
  if (old == val)
    return old;
  if (old.constructor != val.constructor)
    heightChangeFlag = true;
  return val;
}
HeightMap.prototype.size = 1;
var HeightMapBlock = class extends HeightMap {
  constructor(length3, height, deco) {
    super(length3, height);
    this.deco = deco;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.deco || 0);
  }
  lineAt(_value, _type, oracle, top2, offset) {
    return this.blockAt(0, oracle, top2, offset);
  }
  forEachLine(from3, to2, oracle, top2, offset, f4) {
    if (from3 <= offset + this.length && to2 >= offset)
      f4(this.blockAt(0, oracle, top2, offset));
  }
  updateHeight(oracle, offset = 0, _force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(measured.heights[measured.index++]);
    this.outdated = false;
    return this;
  }
  toString() {
    return `block(${this.length})`;
  }
};
var HeightMapText = class _HeightMapText extends HeightMapBlock {
  constructor(length3, height) {
    super(length3, height, null);
    this.collapsed = 0;
    this.widgetHeight = 0;
    this.breaks = 0;
  }
  blockAt(_height, _oracle, top2, offset) {
    return new BlockInfo(offset, this.length, top2, this.height, this.breaks);
  }
  replace(_from, _to, nodes) {
    let node3 = nodes[0];
    if (nodes.length == 1 && (node3 instanceof _HeightMapText || node3 instanceof HeightMapGap && node3.flags & 4) && Math.abs(this.length - node3.length) < 10) {
      if (node3 instanceof HeightMapGap)
        node3 = new _HeightMapText(node3.length, this.height);
      else
        node3.height = this.height;
      if (!this.outdated)
        node3.outdated = false;
      return node3;
    } else {
      return HeightMap.of(nodes);
    }
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    if (measured && measured.from <= offset && measured.more)
      this.setHeight(measured.heights[measured.index++]);
    else if (force || this.outdated)
      this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
    this.outdated = false;
    return this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
};
var HeightMapGap = class _HeightMapGap extends HeightMap {
  constructor(length3) {
    super(length3, 0);
  }
  heightMetrics(oracle, offset) {
    let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
    let lines = lastLine - firstLine + 1;
    let perLine, perChar = 0;
    if (oracle.lineWrapping) {
      let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
      perLine = totalPerLine / lines;
      if (this.length > lines + 1)
        perChar = (this.height - totalPerLine) / (this.length - lines - 1);
    } else {
      perLine = this.height / lines;
    }
    return { firstLine, lastLine, perLine, perChar };
  }
  blockAt(height, oracle, top2, offset) {
    let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    if (oracle.lineWrapping) {
      let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length));
      let line3 = oracle.doc.lineAt(guess), lineHeight = perLine + line3.length * perChar;
      let lineTop = Math.max(top2, height - lineHeight / 2);
      return new BlockInfo(line3.from, line3.length, lineTop, lineHeight, 0);
    } else {
      let line3 = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
      let { from: from3, length: length3 } = oracle.doc.line(firstLine + line3);
      return new BlockInfo(from3, length3, top2 + perLine * line3, perLine, 0);
    }
  }
  lineAt(value, type, oracle, top2, offset) {
    if (type == QueryType.ByHeight)
      return this.blockAt(value, oracle, top2, offset);
    if (type == QueryType.ByPosNoHeight) {
      let { from: from3, to: to2 } = oracle.doc.lineAt(value);
      return new BlockInfo(from3, to2 - from3, 0, 0, 0);
    }
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    let line3 = oracle.doc.lineAt(value), lineHeight = perLine + line3.length * perChar;
    let linesAbove = line3.number - firstLine;
    let lineTop = top2 + perLine * linesAbove + perChar * (line3.from - offset - linesAbove);
    return new BlockInfo(line3.from, line3.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
  }
  forEachLine(from3, to2, oracle, top2, offset, f4) {
    from3 = Math.max(from3, offset);
    to2 = Math.min(to2, offset + this.length);
    let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
    for (let pos = from3, lineTop = top2; pos <= to2; ) {
      let line3 = oracle.doc.lineAt(pos);
      if (pos == from3) {
        let linesAbove = line3.number - firstLine;
        lineTop += perLine * linesAbove + perChar * (from3 - offset - linesAbove);
      }
      let lineHeight = perLine + perChar * line3.length;
      f4(new BlockInfo(line3.from, line3.length, lineTop, lineHeight, 0));
      lineTop += lineHeight;
      pos = line3.to + 1;
    }
  }
  replace(from3, to2, nodes) {
    let after = this.length - to2;
    if (after > 0) {
      let last = nodes[nodes.length - 1];
      if (last instanceof _HeightMapGap)
        nodes[nodes.length - 1] = new _HeightMapGap(last.length + after);
      else
        nodes.push(null, new _HeightMapGap(after - 1));
    }
    if (from3 > 0) {
      let first = nodes[0];
      if (first instanceof _HeightMapGap)
        nodes[0] = new _HeightMapGap(from3 + first.length);
      else
        nodes.unshift(new _HeightMapGap(from3 - 1), null);
    }
    return HeightMap.of(nodes);
  }
  decomposeLeft(to2, result) {
    result.push(new _HeightMapGap(to2 - 1), null);
  }
  decomposeRight(from3, result) {
    result.push(null, new _HeightMapGap(this.length - from3 - 1));
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let end = offset + this.length;
    if (measured && measured.from <= offset + this.length && measured.more) {
      let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
      if (measured.from > offset)
        nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
      while (pos <= end && measured.more) {
        let len = oracle.doc.lineAt(pos).length;
        if (nodes.length)
          nodes.push(null);
        let height = measured.heights[measured.index++];
        if (singleHeight == -1)
          singleHeight = height;
        else if (Math.abs(height - singleHeight) >= Epsilon)
          singleHeight = -2;
        let line3 = new HeightMapText(len, height);
        line3.outdated = false;
        nodes.push(line3);
        pos += len + 1;
      }
      if (pos <= end)
        nodes.push(null, new _HeightMapGap(end - pos).updateHeight(oracle, pos));
      let result = HeightMap.of(nodes);
      if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
        heightChangeFlag = true;
      return replace3(this, result);
    } else if (force || this.outdated) {
      this.setHeight(oracle.heightForGap(offset, offset + this.length));
      this.outdated = false;
    }
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
};
var HeightMapBranch = class extends HeightMap {
  constructor(left, brk, right) {
    super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
    this.left = left;
    this.right = right;
    this.size = left.size + right.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(height, oracle, top2, offset) {
    let mid = top2 + this.left.height;
    return height < mid ? this.left.blockAt(height, oracle, top2, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
  }
  lineAt(value, type, oracle, top2, offset) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
    let base2 = left ? this.left.lineAt(value, type, oracle, top2, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
    if (this.break || (left ? base2.to < rightOffset : base2.from > rightOffset))
      return base2;
    let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
    if (left)
      return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
    else
      return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset).join(base2);
  }
  forEachLine(from3, to2, oracle, top2, offset, f4) {
    let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
    if (this.break) {
      if (from3 < rightOffset)
        this.left.forEachLine(from3, to2, oracle, top2, offset, f4);
      if (to2 >= rightOffset)
        this.right.forEachLine(from3, to2, oracle, rightTop, rightOffset, f4);
    } else {
      let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset);
      if (from3 < mid.from)
        this.left.forEachLine(from3, mid.from - 1, oracle, top2, offset, f4);
      if (mid.to >= from3 && mid.from <= to2)
        f4(mid);
      if (to2 > mid.to)
        this.right.forEachLine(mid.to + 1, to2, oracle, rightTop, rightOffset, f4);
    }
  }
  replace(from3, to2, nodes) {
    let rightStart = this.left.length + this.break;
    if (to2 < rightStart)
      return this.balanced(this.left.replace(from3, to2, nodes), this.right);
    if (from3 > this.left.length)
      return this.balanced(this.left, this.right.replace(from3 - rightStart, to2 - rightStart, nodes));
    let result = [];
    if (from3 > 0)
      this.decomposeLeft(from3, result);
    let left = result.length;
    for (let node3 of nodes)
      result.push(node3);
    if (from3 > 0)
      mergeGaps(result, left - 1);
    if (to2 < this.length) {
      let right = result.length;
      this.decomposeRight(to2, result);
      mergeGaps(result, right);
    }
    return HeightMap.of(result);
  }
  decomposeLeft(to2, result) {
    let left = this.left.length;
    if (to2 <= left)
      return this.left.decomposeLeft(to2, result);
    result.push(this.left);
    if (this.break) {
      left++;
      if (to2 >= left)
        result.push(null);
    }
    if (to2 > left)
      this.right.decomposeLeft(to2 - left, result);
  }
  decomposeRight(from3, result) {
    let left = this.left.length, right = left + this.break;
    if (from3 >= right)
      return this.right.decomposeRight(from3 - right, result);
    if (from3 < left)
      this.left.decomposeRight(from3, result);
    if (this.break && from3 < right)
      result.push(null);
    result.push(this.right);
  }
  balanced(left, right) {
    if (left.size > 2 * right.size || right.size > 2 * left.size)
      return HeightMap.of(this.break ? [left, null, right] : [left, right]);
    this.left = replace3(this.left, left);
    this.right = replace3(this.right, right);
    this.setHeight(left.height + right.height);
    this.outdated = left.outdated || right.outdated;
    this.size = left.size + right.size;
    this.length = left.length + this.break + right.length;
    return this;
  }
  updateHeight(oracle, offset = 0, force = false, measured) {
    let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
    if (measured && measured.from <= offset + left.length && measured.more)
      rebalance = left = left.updateHeight(oracle, offset, force, measured);
    else
      left.updateHeight(oracle, offset, force);
    if (measured && measured.from <= rightStart + right.length && measured.more)
      rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
    else
      right.updateHeight(oracle, rightStart, force);
    if (rebalance)
      return this.balanced(left, right);
    this.height = this.left.height + this.right.height;
    this.outdated = false;
    return this;
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
};
function mergeGaps(nodes, around) {
  let before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
    nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
var relevantWidgetHeight = 5;
var NodeBuilder = class _NodeBuilder {
  constructor(pos, oracle) {
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(_from, to2) {
    if (this.lineStart > -1) {
      let end = Math.min(to2, this.lineEnd), last = this.nodes[this.nodes.length - 1];
      if (last instanceof HeightMapText)
        last.length += end - this.pos;
      else if (end > this.pos || !this.isCovered)
        this.nodes.push(new HeightMapText(end - this.pos, -1));
      this.writtenTo = end;
      if (to2 > end) {
        this.nodes.push(null);
        this.writtenTo++;
        this.lineStart = -1;
      }
    }
    this.pos = to2;
  }
  point(from3, to2, deco) {
    if (from3 < to2 || deco.heightRelevant) {
      let height = deco.widget ? deco.widget.estimatedHeight : 0;
      let breaks = deco.widget ? deco.widget.lineBreaks : 0;
      if (height < 0)
        height = this.oracle.lineHeight;
      let len = to2 - from3;
      if (deco.block) {
        this.addBlock(new HeightMapBlock(len, height, deco));
      } else if (len || breaks || height >= relevantWidgetHeight) {
        this.addLineDeco(height, breaks, len);
      }
    } else if (to2 > from3) {
      this.span(from3, to2);
    }
    if (this.lineEnd > -1 && this.lineEnd < this.pos)
      this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: from3, to: to2 } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = from3;
    this.lineEnd = to2;
    if (this.writtenTo < from3) {
      if (this.writtenTo < from3 - 1 || this.nodes[this.nodes.length - 1] == null)
        this.nodes.push(this.blankContent(this.writtenTo, from3 - 1));
      this.nodes.push(null);
    }
    if (this.pos > from3)
      this.nodes.push(new HeightMapText(this.pos - from3, -1));
    this.writtenTo = this.pos;
  }
  blankContent(from3, to2) {
    let gap = new HeightMapGap(to2 - from3);
    if (this.oracle.doc.lineAt(from3).to == to2)
      gap.flags |= 4;
    return gap;
  }
  ensureLine() {
    this.enterLine();
    let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (last instanceof HeightMapText)
      return last;
    let line3 = new HeightMapText(0, -1);
    this.nodes.push(line3);
    return line3;
  }
  addBlock(block) {
    this.enterLine();
    let deco = block.deco;
    if (deco && deco.startSide > 0 && !this.isCovered)
      this.ensureLine();
    this.nodes.push(block);
    this.writtenTo = this.pos = this.pos + block.length;
    if (deco && deco.endSide > 0)
      this.covering = block;
  }
  addLineDeco(height, breaks, length3) {
    let line3 = this.ensureLine();
    line3.length += length3;
    line3.collapsed += length3;
    line3.widgetHeight = Math.max(line3.widgetHeight, height);
    line3.breaks += breaks;
    this.writtenTo = this.pos = this.pos + length3;
  }
  finish(from3) {
    let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
      this.nodes.push(new HeightMapText(0, -1));
    else if (this.writtenTo < this.pos || last == null)
      this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let pos = from3;
    for (let node3 of this.nodes) {
      if (node3 instanceof HeightMapText)
        node3.updateHeight(this.oracle, pos);
      pos += node3 ? node3.length : 1;
    }
    return this.nodes;
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(oracle, decorations2, from3, to2) {
    let builder = new _NodeBuilder(from3, oracle);
    RangeSet.spans(decorations2, from3, to2, builder, 0);
    return builder.finish(from3);
  }
};
function heightRelevantDecoChanges(a7, b8, diff) {
  let comp = new DecorationComparator2();
  RangeSet.compare(a7, b8, diff, comp, 0);
  return comp.changes;
}
var DecorationComparator2 = class {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(from3, to2, a7, b8) {
    if (from3 < to2 || a7 && a7.heightRelevant || b8 && b8.heightRelevant)
      addRange(from3, to2, this.changes, 5);
  }
};
function visiblePixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
  let top2 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
  for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
    if (parent.nodeType == 1) {
      let elt = parent;
      let style = window.getComputedStyle(elt);
      if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
        let parentRect = elt.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top2 = Math.max(top2, parentRect.top);
        bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
    } else if (parent.nodeType == 11) {
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect.left,
    right: Math.max(left, right) - rect.left,
    top: top2 - (rect.top + paddingTop),
    bottom: Math.max(top2, bottom) - (rect.top + paddingTop)
  };
}
function fullPixelRange(dom, paddingTop) {
  let rect = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect.right - rect.left,
    top: paddingTop,
    bottom: rect.bottom - (rect.top + paddingTop)
  };
}
var LineGap = class {
  constructor(from3, to2, size, displaySize) {
    this.from = from3;
    this.to = to2;
    this.size = size;
    this.displaySize = displaySize;
  }
  static same(a7, b8) {
    if (a7.length != b8.length)
      return false;
    for (let i3 = 0; i3 < a7.length; i3++) {
      let gA = a7[i3], gB = b8[i3];
      if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
        return false;
    }
    return true;
  }
  draw(viewState, wrapping) {
    return Decoration.replace({
      widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
    }).range(this.from, this.to);
  }
};
var LineGapWidget = class extends WidgetType {
  constructor(size, vertical) {
    super();
    this.size = size;
    this.vertical = vertical;
  }
  eq(other) {
    return other.size == this.size && other.vertical == this.vertical;
  }
  toDOM() {
    let elt = document.createElement("div");
    if (this.vertical) {
      elt.style.height = this.size + "px";
    } else {
      elt.style.width = this.size + "px";
      elt.style.height = "2px";
      elt.style.display = "inline-block";
    }
    return elt;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
};
var ViewState = class {
  constructor(state) {
    this.state = state;
    this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentDOMWidth = 0;
    this.contentDOMHeight = 0;
    this.editorHeight = 0;
    this.editorWidth = 0;
    this.scrollTop = 0;
    this.scrolledToBottom = false;
    this.scaleX = 1;
    this.scaleY = 1;
    this.scrollAnchorPos = 0;
    this.scrollAnchorHeight = -1;
    this.scaler = IdScaler;
    this.scrollTarget = null;
    this.printing = false;
    this.mustMeasureContent = true;
    this.defaultTextDirection = Direction.LTR;
    this.visibleRanges = [];
    this.mustEnforceCursorAssoc = false;
    let guessWrapping = state.facet(contentAttributes).some((v6) => typeof v6 != "function" && v6.class == "cm-lineWrapping");
    this.heightOracle = new HeightOracle(guessWrapping);
    this.stateDeco = state.facet(decorations).filter((d5) => typeof d5 != "function");
    this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    for (let i3 = 0; i3 < 2; i3++) {
      this.viewport = this.getViewport(0, null);
      if (!this.updateForViewport())
        break;
    }
    this.updateViewportLines();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
    this.computeVisibleRanges();
  }
  updateForViewport() {
    let viewports = [this.viewport], { main } = this.state.selection;
    for (let i3 = 0; i3 <= 1; i3++) {
      let pos = i3 ? main.head : main.anchor;
      if (!viewports.some(({ from: from3, to: to2 }) => pos >= from3 && pos <= to2)) {
        let { from: from3, to: to2 } = this.lineBlockAt(pos);
        viewports.push(new Viewport(from3, to2));
      }
    }
    this.viewports = viewports.sort((a7, b8) => a7.from - b8.from);
    return this.updateScaler();
  }
  updateScaler() {
    let scaler = this.scaler;
    this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
    return scaler.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [];
    this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block) => {
      this.viewportLines.push(scaleBlock(block, this.scaler));
    });
  }
  update(update, scrollTarget = null) {
    this.state = update.state;
    let prevDeco = this.stateDeco;
    this.stateDeco = this.state.facet(decorations).filter((d5) => typeof d5 != "function");
    let contentChanges = update.changedRanges;
    let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
    let prevHeight = this.heightMap.height;
    let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    clearHeightChangeFlag();
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
    if (this.heightMap.height != prevHeight || heightChangeFlag)
      update.flags |= 2;
    if (scrollAnchor) {
      this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
      this.scrollAnchorHeight = scrollAnchor.top;
    } else {
      this.scrollAnchorPos = -1;
      this.scrollAnchorHeight = this.heightMap.height;
    }
    let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
    if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
      viewport = this.getViewport(0, scrollTarget);
    let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
    this.viewport = viewport;
    update.flags |= this.updateForViewport();
    if (viewportChange || !update.changes.empty || update.flags & 2)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
    update.flags |= this.computeVisibleRanges();
    if (scrollTarget)
      this.scrollTarget = scrollTarget;
    if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
      this.mustEnforceCursorAssoc = true;
  }
  measure(view) {
    let dom = view.contentDOM, style = window.getComputedStyle(dom);
    let oracle = this.heightOracle;
    let whiteSpace = style.whiteSpace;
    this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
    let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
    let domRect = dom.getBoundingClientRect();
    let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
    this.contentDOMHeight = domRect.height;
    this.mustMeasureContent = false;
    let result = 0, bias = 0;
    if (domRect.width && domRect.height) {
      let { scaleX, scaleY } = getScale(dom, domRect);
      if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        result |= 8;
        refresh = measureContent = true;
      }
    }
    let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
    let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
    if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
      this.paddingTop = paddingTop;
      this.paddingBottom = paddingBottom;
      result |= 8 | 2;
    }
    if (this.editorWidth != view.scrollDOM.clientWidth) {
      if (oracle.lineWrapping)
        measureContent = true;
      this.editorWidth = view.scrollDOM.clientWidth;
      result |= 8;
    }
    let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
    if (this.scrollTop != scrollTop) {
      this.scrollAnchorHeight = -1;
      this.scrollTop = scrollTop;
    }
    this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
    let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
    let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
    this.pixelViewport = pixelViewport;
    let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (inView != this.inView) {
      this.inView = inView;
      if (inView)
        measureContent = true;
    }
    if (!this.inView && !this.scrollTarget)
      return 0;
    let contentWidth = domRect.width;
    if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
      this.contentDOMWidth = domRect.width;
      this.editorHeight = view.scrollDOM.clientHeight;
      result |= 8;
    }
    if (measureContent) {
      let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
      if (oracle.mustRefreshForHeights(lineHeights))
        refresh = true;
      if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
        let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
        refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
        if (refresh) {
          view.docView.minWidth = 0;
          result |= 8;
        }
      }
      if (dTop > 0 && dBottom > 0)
        bias = Math.max(dTop, dBottom);
      else if (dTop < 0 && dBottom < 0)
        bias = Math.min(dTop, dBottom);
      clearHeightChangeFlag();
      for (let vp of this.viewports) {
        let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
        this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
      }
      if (heightChangeFlag)
        result |= 2;
    }
    let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    if (viewportChange) {
      if (result & 2)
        result |= this.updateScaler();
      this.viewport = this.getViewport(bias, this.scrollTarget);
      result |= this.updateForViewport();
    }
    if (result & 2 || viewportChange)
      this.updateViewportLines();
    if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
      this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
    result |= this.computeVisibleRanges();
    if (this.mustEnforceCursorAssoc) {
      this.mustEnforceCursorAssoc = false;
      view.docView.enforceCursorAssoc();
    }
    return result;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(bias, scrollTarget) {
    let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
    let map = this.heightMap, oracle = this.heightOracle;
    let { visibleTop, visibleBottom } = this;
    let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
    if (scrollTarget) {
      let { head } = scrollTarget.range;
      if (head < viewport.from || head > viewport.to) {
        let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
        let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
        if (scrollTarget.y == "center")
          topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
        else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
          topPos = block.top;
        else
          topPos = block.bottom - viewHeight;
        viewport = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
      }
    }
    return viewport;
  }
  mapViewport(viewport, changes) {
    let from3 = changes.mapPos(viewport.from, -1), to2 = changes.mapPos(viewport.to, 1);
    return new Viewport(this.heightMap.lineAt(from3, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to2, QueryType.ByPos, this.heightOracle, 0, 0).to);
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: from3, to: to2 }, bias = 0) {
    if (!this.inView)
      return true;
    let { top: top2 } = this.heightMap.lineAt(from3, QueryType.ByPos, this.heightOracle, 0, 0);
    let { bottom } = this.heightMap.lineAt(to2, QueryType.ByPos, this.heightOracle, 0, 0);
    let { visibleTop, visibleBottom } = this;
    return (from3 == 0 || top2 <= visibleTop - Math.max(10, Math.min(
      -bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (to2 == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
      bias,
      250
      /* VP.MaxCoverMargin */
    ))) && (top2 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
  }
  mapLineGaps(gaps, changes) {
    if (!gaps.length || changes.empty)
      return gaps;
    let mapped = [];
    for (let gap of gaps)
      if (!changes.touchesRange(gap.from, gap.to))
        mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
    return mapped;
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(current, mayMeasure) {
    let wrapping = this.heightOracle.lineWrapping;
    let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
    if (this.defaultTextDirection != Direction.LTR && !wrapping)
      return [];
    let gaps = [];
    let addGap = (from3, to2, line3, structure) => {
      if (to2 - from3 < halfMargin)
        return;
      let sel = this.state.selection.main, avoid = [sel.from];
      if (!sel.empty)
        avoid.push(sel.to);
      for (let pos of avoid) {
        if (pos > from3 && pos < to2) {
          addGap(from3, pos - 10, line3, structure);
          addGap(pos + 10, to2, line3, structure);
          return;
        }
      }
      let gap = find(current, (gap2) => gap2.from >= line3.from && gap2.to <= line3.to && Math.abs(gap2.from - from3) < halfMargin && Math.abs(gap2.to - to2) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
      if (!gap) {
        if (to2 < line3.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r2) => r2.from <= to2 && r2.to >= to2)) {
          let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to2), false, true).head;
          if (lineStart > from3)
            to2 = lineStart;
        }
        let size = this.gapSize(line3, from3, to2, structure);
        let displaySize = wrapping || size < 2e6 ? size : 2e6;
        gap = new LineGap(from3, to2, size, displaySize);
      }
      gaps.push(gap);
    };
    let checkLine = (line3) => {
      if (line3.length < doubleMargin || line3.type != BlockType.Text)
        return;
      let structure = lineStructure(line3.from, line3.to, this.stateDeco);
      if (structure.total < doubleMargin)
        return;
      let target = this.scrollTarget ? this.scrollTarget.range.head : null;
      let viewFrom, viewTo;
      if (wrapping) {
        let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
        let top2, bot;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line3.height;
          top2 = targetFrac - spaceFrac;
          bot = targetFrac + spaceFrac;
        } else {
          top2 = (this.visibleTop - line3.top - marginHeight) / line3.height;
          bot = (this.visibleBottom - line3.top + marginHeight) / line3.height;
        }
        viewFrom = findPosition(structure, top2);
        viewTo = findPosition(structure, bot);
      } else {
        let totalWidth = structure.total * this.heightOracle.charWidth;
        let marginWidth = margin * this.heightOracle.charWidth;
        let horizOffset = 0;
        if (totalWidth > 2e6)
          for (let old of current) {
            if (old.from >= line3.from && old.from < line3.to && old.size != old.displaySize && old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
              horizOffset = old.size - old.displaySize;
          }
        let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
        let left, right;
        if (target != null) {
          let targetFrac = findFraction(structure, target);
          let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
          left = targetFrac - spaceFrac;
          right = targetFrac + spaceFrac;
        } else {
          left = (pxLeft - marginWidth) / totalWidth;
          right = (pxRight + marginWidth) / totalWidth;
        }
        viewFrom = findPosition(structure, left);
        viewTo = findPosition(structure, right);
      }
      if (viewFrom > line3.from)
        addGap(line3.from, viewFrom, line3, structure);
      if (viewTo < line3.to)
        addGap(viewTo, line3.to, line3, structure);
    };
    for (let line3 of this.viewportLines) {
      if (Array.isArray(line3.type))
        line3.type.forEach(checkLine);
      else
        checkLine(line3);
    }
    return gaps;
  }
  gapSize(line3, from3, to2, structure) {
    let fraction = findFraction(structure, to2) - findFraction(structure, from3);
    if (this.heightOracle.lineWrapping) {
      return line3.height * fraction;
    } else {
      return structure.total * this.heightOracle.charWidth * fraction;
    }
  }
  updateLineGaps(gaps) {
    if (!LineGap.same(gaps, this.lineGaps)) {
      this.lineGaps = gaps;
      this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
    }
  }
  computeVisibleRanges() {
    let deco = this.stateDeco;
    if (this.lineGaps.length)
      deco = deco.concat(this.lineGapDeco);
    let ranges = [];
    RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
      span(from3, to2) {
        ranges.push({ from: from3, to: to2 });
      },
      point() {
      }
    }, 20);
    let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r2, i3) => r2.from != ranges[i3].from || r2.to != ranges[i3].to);
    this.visibleRanges = ranges;
    return changed ? 4 : 0;
  }
  lineBlockAt(pos) {
    return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b8) => b8.from <= pos && b8.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(height) {
    return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((l7) => l7.top <= height && l7.bottom >= height) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(scrollTop) {
    let block = this.lineBlockAtHeight(scrollTop + 8);
    return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
  }
  elementAtHeight(height) {
    return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
};
var Viewport = class {
  constructor(from3, to2) {
    this.from = from3;
    this.to = to2;
  }
};
function lineStructure(from3, to2, stateDeco) {
  let ranges = [], pos = from3, total = 0;
  RangeSet.spans(stateDeco, from3, to2, {
    span() {
    },
    point(from22, to22) {
      if (from22 > pos) {
        ranges.push({ from: pos, to: from22 });
        total += from22 - pos;
      }
      pos = to22;
    }
  }, 20);
  if (pos < to2) {
    ranges.push({ from: pos, to: to2 });
    total += to2 - pos;
  }
  return { total, ranges };
}
function findPosition({ total, ranges }, ratio) {
  if (ratio <= 0)
    return ranges[0].from;
  if (ratio >= 1)
    return ranges[ranges.length - 1].to;
  let dist2 = Math.floor(total * ratio);
  for (let i3 = 0; ; i3++) {
    let { from: from3, to: to2 } = ranges[i3], size = to2 - from3;
    if (dist2 <= size)
      return from3 + dist2;
    dist2 -= size;
  }
}
function findFraction(structure, pos) {
  let counted = 0;
  for (let { from: from3, to: to2 } of structure.ranges) {
    if (pos <= to2) {
      counted += pos - from3;
      break;
    }
    counted += to2 - from3;
  }
  return counted / structure.total;
}
function find(array, f4) {
  for (let val of array)
    if (f4(val))
      return val;
  return void 0;
}
var IdScaler = {
  toDOM(n3) {
    return n3;
  },
  fromDOM(n3) {
    return n3;
  },
  scale: 1,
  eq(other) {
    return other == this;
  }
};
var BigScaler = class _BigScaler {
  constructor(oracle, heightMap, viewports) {
    let vpHeight = 0, base2 = 0, domBase = 0;
    this.viewports = viewports.map(({ from: from3, to: to2 }) => {
      let top2 = heightMap.lineAt(from3, QueryType.ByPos, oracle, 0, 0).top;
      let bottom = heightMap.lineAt(to2, QueryType.ByPos, oracle, 0, 0).bottom;
      vpHeight += bottom - top2;
      return { from: from3, to: to2, top: top2, bottom, domTop: 0, domBottom: 0 };
    });
    this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
    for (let obj of this.viewports) {
      obj.domTop = domBase + (obj.top - base2) * this.scale;
      domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
      base2 = obj.bottom;
    }
  }
  toDOM(n3) {
    for (let i3 = 0, base2 = 0, domBase = 0; ; i3++) {
      let vp = i3 < this.viewports.length ? this.viewports[i3] : null;
      if (!vp || n3 < vp.top)
        return domBase + (n3 - base2) * this.scale;
      if (n3 <= vp.bottom)
        return vp.domTop + (n3 - vp.top);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
  fromDOM(n3) {
    for (let i3 = 0, base2 = 0, domBase = 0; ; i3++) {
      let vp = i3 < this.viewports.length ? this.viewports[i3] : null;
      if (!vp || n3 < vp.domTop)
        return base2 + (n3 - domBase) / this.scale;
      if (n3 <= vp.domBottom)
        return vp.top + (n3 - vp.domTop);
      base2 = vp.bottom;
      domBase = vp.domBottom;
    }
  }
  eq(other) {
    if (!(other instanceof _BigScaler))
      return false;
    return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every((vp, i3) => vp.from == other.viewports[i3].from && vp.to == other.viewports[i3].to);
  }
};
function scaleBlock(block, scaler) {
  if (scaler.scale == 1)
    return block;
  let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b8) => scaleBlock(b8, scaler)) : block._content);
}
var theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
var darkTheme = /* @__PURE__ */ Facet.define({ combine: (values) => values.indexOf(true) > -1 });
var baseThemeID = /* @__PURE__ */ StyleModule.newName();
var baseLightID = /* @__PURE__ */ StyleModule.newName();
var baseDarkID = /* @__PURE__ */ StyleModule.newName();
var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
function buildTheme(main, spec, scopes) {
  return new StyleModule(spec, {
    finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, (m10) => {
        if (m10 == "&")
          return main;
        if (!scopes || !scopes[m10])
          throw new RangeError(`Unsupported selector: ${m10}`);
        return scopes[m10];
      }) : main + " " + sel;
    }
  });
}
var baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0,
    overflowAnchor: "none"
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    // https://github.com/codemirror/dev/issues/456
    boxSizing: "border-box",
    minHeight: "100%",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    // For IE
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    // For Safari, which doesn't support overflow-wrap: anywhere
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    position: "absolute",
    left: 0,
    top: 0,
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#ddd"
  },
  ".cm-dropCursor": {
    position: "absolute"
  },
  "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
    display: "block"
  },
  ".cm-iso": {
    unicodeBidi: "isolate"
  },
  ".cm-announced": {
    position: "fixed",
    top: "-10000px"
  },
  "@media print": {
    ".cm-announced": { display: "none" }
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    insetInlineStart: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    // Necessary -- prevents margin collapsing
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0,
    zIndex: 300
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace": {
    backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
    backgroundPosition: "center"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
var observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
};
var useCharData = browser.ie && browser.ie_version <= 11;
var DOMObserver = class {
  constructor(view) {
    this.view = view;
    this.active = false;
    this.editContext = null;
    this.selectionRange = new DOMSelectionState();
    this.selectionChanged = false;
    this.delayedFlush = -1;
    this.resizeTimeout = -1;
    this.queue = [];
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
    this.lastChange = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.resizeScroll = null;
    this.intersecting = false;
    this.gapIntersection = null;
    this.gaps = [];
    this.printQuery = null;
    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver((mutations) => {
      for (let mut of mutations)
        this.queue.push(mut);
      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m10) => m10.type == "childList" && m10.removedNodes.length || m10.type == "characterData" && m10.oldValue.length > m10.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (window.EditContext && view.constructor.EDIT_CONTEXT !== false && // Chrome <126 doesn't support inverted selections in edit context (#1392)
    !(browser.chrome && browser.chrome_version < 126)) {
      this.editContext = new EditContextManager(view);
      if (view.state.facet(editable))
        view.contentDOM.editContext = this.editContext.editContext;
    }
    if (useCharData)
      this.onCharData = (event) => {
        this.queue.push({
          target: event.target,
          type: "characterData",
          oldValue: event.prevValue
        });
        this.flushSoon();
      };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.onResize = this.onResize.bind(this);
    this.onPrint = this.onPrint.bind(this);
    this.onScroll = this.onScroll.bind(this);
    if (window.matchMedia)
      this.printQuery = window.matchMedia("print");
    if (typeof ResizeObserver == "function") {
      this.resizeScroll = new ResizeObserver(() => {
        var _a2;
        if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
          this.onResize();
      });
      this.resizeScroll.observe(view.scrollDOM);
    }
    this.addWindowListeners(this.win = view.win);
    this.start();
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver((entries) => {
        if (this.parentCheck < 0)
          this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
          this.intersecting = !this.intersecting;
          if (this.intersecting != this.view.inView)
            this.onScrollChanged(document.createEvent("Event"));
        }
      }, { threshold: [0, 1e-3] });
      this.intersection.observe(this.dom);
      this.gapIntersection = new IntersectionObserver((entries) => {
        if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
          this.onScrollChanged(document.createEvent("Event"));
      }, {});
    }
    this.listenForScroll();
    this.readSelectionRange();
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers("scroll", e);
    if (this.intersecting)
      this.view.measure();
  }
  onScroll(e) {
    if (this.intersecting)
      this.flush(false);
    if (this.editContext)
      this.view.requestMeasure(this.editContext.measureReq);
    this.onScrollChanged(e);
  }
  onResize() {
    if (this.resizeTimeout < 0)
      this.resizeTimeout = setTimeout(() => {
        this.resizeTimeout = -1;
        this.view.requestMeasure();
      }, 50);
  }
  onPrint(event) {
    if ((event.type == "change" || !event.type) && !event.matches)
      return;
    this.view.viewState.printing = true;
    this.view.measure();
    setTimeout(() => {
      this.view.viewState.printing = false;
      this.view.requestMeasure();
    }, 500);
  }
  updateGaps(gaps) {
    if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g8, i3) => g8 != gaps[i3]))) {
      this.gapIntersection.disconnect();
      for (let gap of gaps)
        this.gapIntersection.observe(gap);
      this.gaps = gaps;
    }
  }
  onSelectionChange(event) {
    let wasChanged = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view } = this, sel = this.selectionRange;
    if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
      return;
    let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
    if (context && context.ignoreEvent(event)) {
      if (!wasChanged)
        this.selectionChanged = false;
      return;
    }
    if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
      this.flushSoon();
    else
      this.flush(false);
  }
  readSelectionRange() {
    let { view } = this;
    let selection = getSelection(view.root);
    if (!selection)
      return false;
    let range = browser.safari && view.root.nodeType == 11 && view.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
    if (!range || this.selectionRange.eq(range))
      return false;
    let local = hasSelection(this.dom, range);
    if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
      this.view.inputState.lastFocusTime = 0;
      view.docView.updateSelection();
      return false;
    }
    this.selectionRange.setRange(range);
    if (local)
      this.selectionChanged = true;
    return true;
  }
  setSelectionRange(anchor, head) {
    this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
    this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let i3 = 0, changed = null;
    for (let dom = this.dom; dom; ) {
      if (dom.nodeType == 1) {
        if (!changed && i3 < this.scrollTargets.length && this.scrollTargets[i3] == dom)
          i3++;
        else if (!changed)
          changed = this.scrollTargets.slice(0, i3);
        if (changed)
          changed.push(dom);
        dom = dom.assignedSlot || dom.parentNode;
      } else if (dom.nodeType == 11) {
        dom = dom.host;
      } else {
        break;
      }
    }
    if (i3 < this.scrollTargets.length && !changed)
      changed = this.scrollTargets.slice(0, i3);
    if (changed) {
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      for (let dom of this.scrollTargets = changed)
        dom.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(f4) {
    if (!this.active)
      return f4();
    try {
      this.stop();
      return f4();
    } finally {
      this.start();
      this.clear();
    }
  }
  start() {
    if (this.active)
      return;
    this.observer.observe(this.dom, observeOptions);
    if (useCharData)
      this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.active = true;
  }
  stop() {
    if (!this.active)
      return;
    this.active = false;
    this.observer.disconnect();
    if (useCharData)
      this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
  }
  // Throw away any pending changes
  clear() {
    this.processRecords();
    this.queue.length = 0;
    this.selectionChanged = false;
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(key2, keyCode) {
    var _a2;
    if (!this.delayedAndroidKey) {
      let flush3 = () => {
        let key22 = this.delayedAndroidKey;
        if (key22) {
          this.clearDelayedAndroidKey();
          this.view.inputState.lastKeyCode = key22.keyCode;
          this.view.inputState.lastKeyTime = Date.now();
          let flushed = this.flush();
          if (!flushed && key22.force)
            dispatchKey(this.dom, key22.key, key22.keyCode);
        }
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush3);
    }
    if (!this.delayedAndroidKey || key2 == "Enter")
      this.delayedAndroidKey = {
        key: key2,
        keyCode,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
      };
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    this.delayedAndroidKey = null;
    this.flushingAndroidKey = -1;
  }
  flushSoon() {
    if (this.delayedFlush < 0)
      this.delayedFlush = this.view.win.requestAnimationFrame(() => {
        this.delayedFlush = -1;
        this.flush();
      });
  }
  forceFlush() {
    if (this.delayedFlush >= 0) {
      this.view.win.cancelAnimationFrame(this.delayedFlush);
      this.delayedFlush = -1;
    }
    this.flush();
  }
  pendingRecords() {
    for (let mut of this.observer.takeRecords())
      this.queue.push(mut);
    return this.queue;
  }
  processRecords() {
    let records = this.pendingRecords();
    if (records.length)
      this.queue = [];
    let from3 = -1, to2 = -1, typeOver = false;
    for (let record of records) {
      let range = this.readMutation(record);
      if (!range)
        continue;
      if (range.typeOver)
        typeOver = true;
      if (from3 == -1) {
        ({ from: from3, to: to2 } = range);
      } else {
        from3 = Math.min(range.from, from3);
        to2 = Math.max(range.to, to2);
      }
    }
    return { from: from3, to: to2, typeOver };
  }
  readChange() {
    let { from: from3, to: to2, typeOver } = this.processRecords();
    let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
    if (from3 < 0 && !newSel)
      return null;
    if (from3 > -1)
      this.lastChange = Date.now();
    this.view.inputState.lastFocusTime = 0;
    this.selectionChanged = false;
    let change = new DOMChange(this.view, from3, to2, typeOver);
    this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
    return change;
  }
  // Apply pending changes, if any
  flush(readSelection = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    if (readSelection)
      this.readSelectionRange();
    let domChange = this.readChange();
    if (!domChange) {
      this.view.requestMeasure();
      return false;
    }
    let startState = this.view.state;
    let handled = applyDOMChange(this.view, domChange);
    if (this.view.state == startState && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
      this.view.update([]);
    return handled;
  }
  readMutation(rec) {
    let cView = this.view.docView.nearest(rec.target);
    if (!cView || cView.ignoreMutation(rec))
      return null;
    cView.markDirty(rec.type == "attributes");
    if (rec.type == "attributes")
      cView.flags |= 4;
    if (rec.type == "childList") {
      let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
      let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
      return {
        from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
        to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
        typeOver: false
      };
    } else if (rec.type == "characterData") {
      return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
    } else {
      return null;
    }
  }
  setWindow(win) {
    if (win != this.win) {
      this.removeWindowListeners(this.win);
      this.win = win;
      this.addWindowListeners(this.win);
    }
  }
  addWindowListeners(win) {
    win.addEventListener("resize", this.onResize);
    if (this.printQuery) {
      if (this.printQuery.addEventListener)
        this.printQuery.addEventListener("change", this.onPrint);
      else
        this.printQuery.addListener(this.onPrint);
    } else
      win.addEventListener("beforeprint", this.onPrint);
    win.addEventListener("scroll", this.onScroll);
    win.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(win) {
    win.removeEventListener("scroll", this.onScroll);
    win.removeEventListener("resize", this.onResize);
    if (this.printQuery) {
      if (this.printQuery.removeEventListener)
        this.printQuery.removeEventListener("change", this.onPrint);
      else
        this.printQuery.removeListener(this.onPrint);
    } else
      win.removeEventListener("beforeprint", this.onPrint);
    win.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(update) {
    if (this.editContext) {
      this.editContext.update(update);
      if (update.startState.facet(editable) != update.state.facet(editable))
        update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
    }
  }
  destroy() {
    var _a2, _b, _c;
    this.stop();
    (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
    (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
    for (let dom of this.scrollTargets)
      dom.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win);
    clearTimeout(this.parentCheck);
    clearTimeout(this.resizeTimeout);
    this.win.cancelAnimationFrame(this.delayedFlush);
    this.win.cancelAnimationFrame(this.flushingAndroidKey);
    if (this.editContext) {
      this.view.contentDOM.editContext = null;
      this.editContext.destroy();
    }
  }
};
function findChild(cView, dom, dir) {
  while (dom) {
    let curView = ContentView.get(dom);
    if (curView && curView.parent == cView)
      return curView;
    let parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
function buildSelectionRangeFromRange(view, range) {
  let anchorNode = range.startContainer, anchorOffset = range.startOffset;
  let focusNode = range.endContainer, focusOffset = range.endOffset;
  let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function safariSelectionRangeHack(view, selection) {
  if (selection.getComposedRanges) {
    let range = selection.getComposedRanges(view.root)[0];
    if (range)
      return buildSelectionRangeFromRange(view, range);
  }
  let found = null;
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  view.dom.ownerDocument.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  return found ? buildSelectionRangeFromRange(view, found) : null;
}
var EditContextManager = class {
  constructor(view) {
    this.from = 0;
    this.to = 0;
    this.pendingContextChange = null;
    this.handlers = /* @__PURE__ */ Object.create(null);
    this.composing = null;
    this.resetRange(view.state);
    let context = this.editContext = new window.EditContext({
      text: view.state.doc.sliceString(this.from, this.to),
      selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
      selectionEnd: this.toContextPos(view.state.selection.main.head)
    });
    this.handlers.textupdate = (e) => {
      let { anchor } = view.state.selection.main;
      let from3 = this.toEditorPos(e.updateRangeStart), to2 = this.toEditorPos(e.updateRangeEnd);
      if (view.inputState.composing >= 0 && !this.composing)
        this.composing = { contextBase: e.updateRangeStart, editorBase: from3, drifted: false };
      let change = { from: from3, to: to2, insert: Text.of(e.text.split("\n")) };
      if (change.from == this.from && anchor < this.from)
        change.from = anchor;
      else if (change.to == this.to && anchor > this.to)
        change.to = anchor;
      if (change.from == change.to && !change.insert.length)
        return;
      this.pendingContextChange = change;
      if (!view.state.readOnly)
        applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd)));
      if (this.pendingContextChange) {
        this.revertPending(view.state);
        this.setSelection(view.state);
      }
    };
    this.handlers.characterboundsupdate = (e) => {
      let rects = [], prev3 = null;
      for (let i3 = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i3 < end; i3++) {
        let rect = view.coordsForChar(i3);
        prev3 = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev3 || new DOMRect();
        rects.push(prev3);
      }
      context.updateCharacterBounds(e.rangeStart, rects);
    };
    this.handlers.textformatupdate = (e) => {
      let deco = [];
      for (let format of e.getTextFormats()) {
        let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
        if (lineStyle != "None" && thickness != "None") {
          let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
          deco.push(Decoration.mark({ attributes: { style } }).range(this.toEditorPos(format.rangeStart), this.toEditorPos(format.rangeEnd)));
        }
      }
      view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
    };
    this.handlers.compositionstart = () => {
      if (view.inputState.composing < 0) {
        view.inputState.composing = 0;
        view.inputState.compositionFirstChange = true;
      }
    };
    this.handlers.compositionend = () => {
      view.inputState.composing = -1;
      view.inputState.compositionFirstChange = null;
      if (this.composing) {
        let { drifted } = this.composing;
        this.composing = null;
        if (drifted)
          this.reset(view.state);
      }
    };
    for (let event in this.handlers)
      context.addEventListener(event, this.handlers[event]);
    this.measureReq = { read: (view2) => {
      this.editContext.updateControlBounds(view2.contentDOM.getBoundingClientRect());
      let sel = getSelection(view2.root);
      if (sel && sel.rangeCount)
        this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(update) {
    let off = 0, abort = false, pending = this.pendingContextChange;
    update.changes.iterChanges((fromA, toA, _fromB, _toB, insert2) => {
      if (abort)
        return;
      let dLen = insert2.length - (toA - fromA);
      if (pending && toA >= pending.to) {
        if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert2)) {
          pending = this.pendingContextChange = null;
          off += dLen;
          this.to += dLen;
          return;
        } else {
          pending = null;
          this.revertPending(update.state);
        }
      }
      fromA += off;
      toA += off;
      if (toA <= this.from) {
        this.from += dLen;
        this.to += dLen;
      } else if (fromA < this.to) {
        if (fromA < this.from || toA > this.to || this.to - this.from + insert2.length > 3e4) {
          abort = true;
          return;
        }
        this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert2.toString());
        this.to += dLen;
      }
      off += dLen;
    });
    if (pending && !abort)
      this.revertPending(update.state);
    return !abort;
  }
  update(update) {
    let reverted = this.pendingContextChange;
    if (this.composing && (this.composing.drifted || update.transactions.some((tr2) => !tr2.isUserEvent("input.type") && tr2.changes.touchesRange(this.from, this.to)))) {
      this.composing.drifted = true;
      this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
    } else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
      this.pendingContextChange = null;
      this.reset(update.state);
    } else if (update.docChanged || update.selectionSet || reverted) {
      this.setSelection(update.state);
    }
    if (update.geometryChanged || update.docChanged || update.selectionSet)
      update.view.requestMeasure(this.measureReq);
  }
  resetRange(state) {
    let { head } = state.selection.main;
    this.from = Math.max(
      0,
      head - 1e4
      /* CxVp.Margin */
    );
    this.to = Math.min(
      state.doc.length,
      head + 1e4
      /* CxVp.Margin */
    );
  }
  reset(state) {
    this.resetRange(state);
    this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
    this.setSelection(state);
  }
  revertPending(state) {
    let pending = this.pendingContextChange;
    this.pendingContextChange = null;
    this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
  }
  setSelection(state) {
    let { main } = state.selection;
    let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
    let end = this.toContextPos(main.head);
    if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
      this.editContext.updateSelection(start, end);
  }
  rangeIsValid(state) {
    let { head } = state.selection.main;
    return !(this.from > 0 && head - this.from < 500 || this.to < state.doc.length && this.to - head < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(contextPos) {
    let c2 = this.composing;
    return c2 && c2.drifted ? c2.editorBase + (contextPos - c2.contextBase) : contextPos + this.from;
  }
  toContextPos(editorPos) {
    let c2 = this.composing;
    return c2 && c2.drifted ? c2.contextBase + (editorPos - c2.editorBase) : editorPos - this.from;
  }
  destroy() {
    for (let event in this.handlers)
      this.editContext.removeEventListener(event, this.handlers[event]);
  }
};
var EditorView = class _EditorView {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state;
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport;
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView;
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0;
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root;
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(config2 = {}) {
    var _a2;
    this.plugins = [];
    this.pluginMap = /* @__PURE__ */ new Map();
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    this.destroyed = false;
    this.updateState = 2;
    this.measureScheduled = -1;
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.className = "cm-announced";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    if (config2.parent)
      config2.parent.appendChild(this.dom);
    let { dispatch } = config2;
    this.dispatchTransactions = config2.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr2) => dispatch(tr2, this))) || ((trs) => this.update(trs));
    this.dispatch = this.dispatch.bind(this);
    this._root = config2.root || getRoot(config2.parent) || document;
    this.viewState = new ViewState(config2.state || EditorState.create(config2));
    if (config2.scrollTo && config2.scrollTo.is(scrollIntoView))
      this.viewState.scrollTarget = config2.scrollTo.value.clip(this.viewState.state);
    this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
    for (let plugin2 of this.plugins)
      plugin2.update(this);
    this.observer = new DOMObserver(this);
    this.inputState = new InputState(this);
    this.inputState.ensureHandlers(this.plugins);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0;
    this.requestMeasure();
    if ((_a2 = document.fonts) === null || _a2 === void 0 ? void 0 : _a2.ready)
      document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...input) {
    let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
    this.dispatchTransactions(trs, this);
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(transactions) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let redrawn = false, attrsChanged = false, update;
    let state = this.state;
    for (let tr2 of transactions) {
      if (tr2.startState != state)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      state = tr2.state;
    }
    if (this.destroyed) {
      this.viewState.state = state;
      return;
    }
    let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
    if (transactions.some((tr2) => tr2.annotation(isFocusChange))) {
      this.inputState.notifiedFocused = focus;
      focusFlag = 1;
    } else if (focus != this.inputState.notifiedFocused) {
      this.inputState.notifiedFocused = focus;
      dispatchFocus = focusChangeTransaction(state, focus);
      if (!dispatchFocus)
        focusFlag = 1;
    }
    let pendingKey = this.observer.delayedAndroidKey, domChange = null;
    if (pendingKey) {
      this.observer.clearDelayedAndroidKey();
      domChange = this.observer.readChange();
      if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
        domChange = null;
    } else {
      this.observer.clear();
    }
    if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
      return this.setState(state);
    update = ViewUpdate.create(this, state, transactions);
    update.flags |= focusFlag;
    let scrollTarget = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let tr2 of transactions) {
        if (scrollTarget)
          scrollTarget = scrollTarget.map(tr2.changes);
        if (tr2.scrollIntoView) {
          let { main } = tr2.state.selection;
          scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
        }
        for (let e of tr2.effects)
          if (e.is(scrollIntoView))
            scrollTarget = e.value.clip(this.state);
      }
      this.viewState.update(update, scrollTarget);
      this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
      if (!update.empty) {
        this.updatePlugins(update);
        this.inputState.update(update);
      }
      redrawn = this.docView.update(update);
      if (this.state.facet(styleModule) != this.styleModules)
        this.mountStyles();
      attrsChanged = this.updateAttrs();
      this.showAnnouncements(transactions);
      this.docView.updateSelection(redrawn, transactions.some((tr2) => tr2.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (update.startState.facet(theme) != update.state.facet(theme))
      this.viewState.mustMeasureContent = true;
    if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
      this.requestMeasure();
    if (redrawn)
      this.docViewUpdate();
    if (!update.empty)
      for (let listener of this.state.facet(updateListener)) {
        try {
          listener(update);
        } catch (e) {
          logException(this.state, e, "update listener");
        }
      }
    if (dispatchFocus || domChange)
      Promise.resolve().then(() => {
        if (dispatchFocus && this.state == dispatchFocus.startState)
          this.dispatch(dispatchFocus);
        if (domChange) {
          if (!applyDOMChange(this, domChange) && pendingKey.force)
            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
        }
      });
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(newState) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = newState;
      return;
    }
    this.updateState = 2;
    let hadFocus = this.hasFocus;
    try {
      for (let plugin2 of this.plugins)
        plugin2.destroy(this);
      this.viewState = new ViewState(newState);
      this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      this.pluginMap.clear();
      for (let plugin2 of this.plugins)
        plugin2.update(this);
      this.docView.destroy();
      this.docView = new DocView(this);
      this.inputState.ensureHandlers(this.plugins);
      this.mountStyles();
      this.updateAttrs();
      this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    if (hadFocus)
      this.focus();
    this.requestMeasure();
  }
  updatePlugins(update) {
    let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
    if (prevSpecs != specs) {
      let newPlugins = [];
      for (let spec of specs) {
        let found = prevSpecs.indexOf(spec);
        if (found < 0) {
          newPlugins.push(new PluginInstance(spec));
        } else {
          let plugin2 = this.plugins[found];
          plugin2.mustUpdate = update;
          newPlugins.push(plugin2);
        }
      }
      for (let plugin2 of this.plugins)
        if (plugin2.mustUpdate != update)
          plugin2.destroy(this);
      this.plugins = newPlugins;
      this.pluginMap.clear();
    } else {
      for (let p8 of this.plugins)
        p8.mustUpdate = update;
    }
    for (let i3 = 0; i3 < this.plugins.length; i3++)
      this.plugins[i3].update(this);
    if (prevSpecs != specs)
      this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let plugin2 of this.plugins) {
      let val = plugin2.value;
      if (val && val.docViewUpdate) {
        try {
          val.docViewUpdate(this);
        } catch (e) {
          logException(this.state, e, "doc view update listener");
        }
      }
    }
  }
  /**
  @internal
  */
  measure(flush3 = true) {
    if (this.destroyed)
      return;
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    if (this.observer.delayedAndroidKey) {
      this.measureScheduled = -1;
      this.requestMeasure();
      return;
    }
    this.measureScheduled = 0;
    if (flush3)
      this.observer.forceFlush();
    let updated = null;
    let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
    let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
    if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
      scrollAnchorHeight = -1;
    this.viewState.scrollAnchorHeight = -1;
    try {
      for (let i3 = 0; ; i3++) {
        if (scrollAnchorHeight < 0) {
          if (isScrolledToBottom(sDOM)) {
            scrollAnchorPos = -1;
            scrollAnchorHeight = this.viewState.heightMap.height;
          } else {
            let block = this.viewState.scrollAnchorAt(scrollTop);
            scrollAnchorPos = block.from;
            scrollAnchorHeight = block.top;
          }
        }
        this.updateState = 1;
        let changed = this.viewState.measure(this);
        if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (i3 > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let measuring = [];
        if (!(changed & 4))
          [this.measureRequests, measuring] = [measuring, this.measureRequests];
        let measured = measuring.map((m10) => {
          try {
            return m10.read(this);
          } catch (e) {
            logException(this.state, e);
            return BadMeasure;
          }
        });
        let update = ViewUpdate.create(this, this.state, []), redrawn = false;
        update.flags |= changed;
        if (!updated)
          updated = update;
        else
          updated.flags |= changed;
        this.updateState = 2;
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
          this.updateAttrs();
          redrawn = this.docView.update(update);
          if (redrawn)
            this.docViewUpdate();
        }
        for (let i22 = 0; i22 < measuring.length; i22++)
          if (measured[i22] != BadMeasure) {
            try {
              let m10 = measuring[i22];
              if (m10.write)
                m10.write(measured[i22], this);
            } catch (e) {
              logException(this.state, e);
            }
          }
        if (redrawn)
          this.docView.updateSelection(true);
        if (!update.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight) {
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget);
              this.viewState.scrollTarget = null;
              scrollAnchorHeight = -1;
              continue;
            } else {
              let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
              let diff = newAnchorHeight - scrollAnchorHeight;
              if (diff > 1 || diff < -1) {
                scrollTop = scrollTop + diff;
                sDOM.scrollTop = scrollTop / this.scaleY;
                scrollAnchorHeight = -1;
                continue;
              }
            }
          }
          break;
        }
      }
    } finally {
      this.updateState = 0;
      this.measureScheduled = -1;
    }
    if (updated && !updated.empty)
      for (let listener of this.state.facet(updateListener))
        listener(updated);
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
  }
  updateAttrs() {
    let editorAttrs = attrsFromFacet(this, editorAttributes, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    });
    let contentAttrs = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: !this.state.facet(editable) ? "false" : "true",
      class: "cm-content",
      style: `${browser.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    if (this.state.readOnly)
      contentAttrs["aria-readonly"] = "true";
    attrsFromFacet(this, contentAttributes, contentAttrs);
    let changed = this.observer.ignore(() => {
      let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
      let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
      return changedContent || changedEditor;
    });
    this.editorAttrs = editorAttrs;
    this.contentAttrs = contentAttrs;
    return changed;
  }
  showAnnouncements(trs) {
    let first = true;
    for (let tr2 of trs)
      for (let effect of tr2.effects)
        if (effect.is(_EditorView.announce)) {
          if (first)
            this.announceDOM.textContent = "";
          first = false;
          let div = this.announceDOM.appendChild(document.createElement("div"));
          div.textContent = effect.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(styleModule);
    let nonce = this.state.facet(_EditorView.cspNonce);
    StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    if (this.updateState == 0 && this.measureScheduled > -1)
      this.measure(false);
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(request) {
    if (this.measureScheduled < 0)
      this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
    if (request) {
      if (this.measureRequests.indexOf(request) > -1)
        return;
      if (request.key != null)
        for (let i3 = 0; i3 < this.measureRequests.length; i3++) {
          if (this.measureRequests[i3].key === request.key) {
            this.measureRequests[i3] = request;
            return;
          }
        }
      this.measureRequests.push(request);
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(plugin2) {
    let known = this.pluginMap.get(plugin2);
    if (known === void 0 || known && known.spec != plugin2)
      this.pluginMap.set(plugin2, known = this.plugins.find((p8) => p8.spec == plugin2) || null);
    return known && known.update(this).value;
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX;
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY;
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(height) {
    this.readMeasured();
    return this.viewState.elementAtHeight(height);
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(height) {
    this.readMeasured();
    return this.viewState.lineBlockAtHeight(height);
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(pos) {
    return this.viewState.lineBlockAt(pos);
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(start, forward, by) {
    return skipAtoms(this, start, moveByChar(this, start, forward, by));
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(start, forward) {
    return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
  }
  /**
  Get the cursor position visually at the start or end of a line.
  Note that this may differ from the _logical_ position at its
  start or end (which is simply at `line.from`/`line.to`) if text
  at the start or end goes against the line's base text direction.
  */
  visualLineSide(line3, end) {
    let order = this.bidiSpans(line3), dir = this.textDirectionAt(line3.from);
    let span = order[end ? order.length - 1 : 0];
    return EditorSelection.cursor(span.side(end, dir) + line3.from, span.forward(!end, dir) ? 1 : -1);
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(start, forward, includeWrap = true) {
    return moveToLineBoundary(this, start, forward, includeWrap);
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(start, forward, distance) {
    return skipAtoms(this, start, moveVertically(this, start, forward, distance));
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(pos) {
    return this.docView.domAtPos(pos);
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(node3, offset = 0) {
    return this.docView.posFromDOM(node3, offset);
  }
  posAtCoords(coords, precise = true) {
    this.readMeasured();
    return posAtCoords(this, coords, precise);
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(pos, side = 1) {
    this.readMeasured();
    let rect = this.docView.coordsAt(pos, side);
    if (!rect || rect.left == rect.right)
      return rect;
    let line3 = this.state.doc.lineAt(pos), order = this.bidiSpans(line3);
    let span = order[BidiSpan.find(order, pos - line3.from, -1, side)];
    return flattenRect(rect, span.dir == Direction.LTR == side > 0);
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(pos) {
    this.readMeasured();
    return this.docView.coordsForChar(pos);
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(pos) {
    let perLine = this.state.facet(perLineTextDirection);
    if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
      return this.textDirection;
    this.readMeasured();
    return this.docView.textDirectionAt(pos);
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(line3) {
    if (line3.length > MaxBidiLine)
      return trivialOrder(line3.length);
    let dir = this.textDirectionAt(line3.from), isolates;
    for (let entry of this.bidiCache) {
      if (entry.from == line3.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line3))))
        return entry.order;
    }
    if (!isolates)
      isolates = getIsolatedRanges(this, line3);
    let order = computeOrder(line3.text, dir, isolates);
    this.bidiCache.push(new CachedOrder(line3.from, line3.to, dir, isolates, true, order));
    return order;
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var _a2;
    return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      focusPreventScroll(this.contentDOM);
      this.docView.updateSelection();
    });
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(root) {
    if (this._root != root) {
      this._root = root;
      this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
      this.mountStyles();
    }
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    if (this.root.activeElement == this.contentDOM)
      this.contentDOM.blur();
    for (let plugin2 of this.plugins)
      plugin2.destroy(this);
    this.plugins = [];
    this.inputState.destroy();
    this.docView.destroy();
    this.dom.remove();
    this.observer.destroy();
    if (this.measureScheduled > -1)
      this.win.cancelAnimationFrame(this.measureScheduled);
    this.destroyed = true;
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(pos, options = {}) {
    return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop, scrollLeft } = this.scrollDOM;
    let ref = this.viewState.scrollAnchorAt(scrollTop);
    return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
  }
  /**
  Enable or disable tab-focus mode, which disables key bindings
  for Tab and Shift-Tab, letting the browser's default
  focus-changing behavior go through instead. This is useful to
  prevent trapping keyboard users in your editor.
  
  Without argument, this toggles the mode. With a boolean, it
  enables (true) or disables it (false). Given a number, it
  temporarily enables the mode until that number of milliseconds
  have passed or another non-Tab key is pressed.
  */
  setTabFocusMode(to2) {
    if (to2 == null)
      this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
    else if (typeof to2 == "boolean")
      this.inputState.tabFocusMode = to2 ? 0 : -1;
    else if (this.inputState.tabFocusMode != 0)
      this.inputState.tabFocusMode = Date.now() + to2;
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(handlers2) {
    return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(observers2) {
    return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(spec, options) {
    let prefix3 = StyleModule.newName();
    let result = [theme.of(prefix3), styleModule.of(buildTheme(`.${prefix3}`, spec))];
    if (options && options.dark)
      result.push(darkTheme.of(true));
    return result;
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(spec) {
    return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(dom) {
    var _a2;
    let content2 = dom.querySelector(".cm-content");
    let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
    return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
  }
};
EditorView.styleModule = styleModule;
EditorView.inputHandler = inputHandler;
EditorView.clipboardInputFilter = clipboardInputFilter;
EditorView.clipboardOutputFilter = clipboardOutputFilter;
EditorView.scrollHandler = scrollHandler;
EditorView.focusChangeEffect = focusChangeEffect;
EditorView.perLineTextDirection = perLineTextDirection;
EditorView.exceptionSink = exceptionSink;
EditorView.updateListener = updateListener;
EditorView.editable = editable;
EditorView.mouseSelectionStyle = mouseSelectionStyle;
EditorView.dragMovesSelection = dragMovesSelection$1;
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
EditorView.decorations = decorations;
EditorView.outerDecorations = outerDecorations;
EditorView.atomicRanges = atomicRanges;
EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
EditorView.scrollMargins = scrollMargins;
EditorView.darkTheme = darkTheme;
EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : "" });
EditorView.contentAttributes = contentAttributes;
EditorView.editorAttributes = editorAttributes;
EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
EditorView.announce = /* @__PURE__ */ StateEffect.define();
var MaxBidiLine = 4096;
var BadMeasure = {};
var CachedOrder = class _CachedOrder {
  constructor(from3, to2, dir, isolates, fresh, order) {
    this.from = from3;
    this.to = to2;
    this.dir = dir;
    this.isolates = isolates;
    this.fresh = fresh;
    this.order = order;
  }
  static update(cache3, changes) {
    if (changes.empty && !cache3.some((c2) => c2.fresh))
      return cache3;
    let result = [], lastDir = cache3.length ? cache3[cache3.length - 1].dir : Direction.LTR;
    for (let i3 = Math.max(0, cache3.length - 10); i3 < cache3.length; i3++) {
      let entry = cache3[i3];
      if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
        result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
    }
    return result;
  }
};
function attrsFromFacet(view, facet, base2) {
  for (let sources = view.state.facet(facet), i3 = sources.length - 1; i3 >= 0; i3--) {
    let source = sources[i3], value = typeof source == "function" ? source(view) : source;
    if (value)
      combineAttrs(value, base2);
  }
  return base2;
}
var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
function normalizeKeyName(name2, platform) {
  const parts = name2.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt, ctrl, shift2, meta2;
  for (let i3 = 0; i3 < parts.length - 1; ++i3) {
    const mod = parts[i3];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta2 = true;
    else if (/^a(lt)?$/i.test(mod))
      alt = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (platform == "mac")
        meta2 = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta2)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function modifiers(name2, event, shift2) {
  if (event.altKey)
    name2 = "Alt-" + name2;
  if (event.ctrlKey)
    name2 = "Ctrl-" + name2;
  if (event.metaKey)
    name2 = "Meta-" + name2;
  if (shift2 !== false && event.shiftKey)
    name2 = "Shift-" + name2;
  return name2;
}
var handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
  keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }
}));
var keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
var Keymaps = /* @__PURE__ */ new WeakMap();
function getKeymap(state) {
  let bindings = state.facet(keymap);
  let map = Keymaps.get(bindings);
  if (!map)
    Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a7, b8) => a7.concat(b8), [])));
  return map;
}
function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}
var storedPrefix = null;
var PrefixTimeout = 4e3;
function buildKeymap(bindings, platform = currentPlatform) {
  let bound = /* @__PURE__ */ Object.create(null);
  let isPrefix = /* @__PURE__ */ Object.create(null);
  let checkPrefix = (name2, is2) => {
    let current = isPrefix[name2];
    if (current == null)
      isPrefix[name2] = is2;
    else if (current != is2)
      throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
  };
  let add2 = (scope, key2, command2, preventDefault, stopPropagation) => {
    var _a2, _b;
    let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
    let parts = key2.split(/ (?!$)/).map((k5) => normalizeKeyName(k5, platform));
    for (let i3 = 1; i3 < parts.length; i3++) {
      let prefix3 = parts.slice(0, i3).join(" ");
      checkPrefix(prefix3, true);
      if (!scopeObj[prefix3])
        scopeObj[prefix3] = {
          preventDefault: true,
          stopPropagation: false,
          run: [(view) => {
            let ourObj = storedPrefix = { view, prefix: prefix3, scope };
            setTimeout(() => {
              if (storedPrefix == ourObj)
                storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
    }
    let full = parts.join(" ");
    checkPrefix(full, false);
    let binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      stopPropagation: false,
      run: ((_b = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
    });
    if (command2)
      binding.run.push(command2);
    if (preventDefault)
      binding.preventDefault = true;
    if (stopPropagation)
      binding.stopPropagation = true;
  };
  for (let b8 of bindings) {
    let scopes = b8.scope ? b8.scope.split(" ") : ["editor"];
    if (b8.any)
      for (let scope of scopes) {
        let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
        if (!scopeObj._any)
          scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
        let { any } = b8;
        for (let key2 in scopeObj)
          scopeObj[key2].run.push((view) => any(view, currentKeyEvent));
      }
    let name2 = b8[platform] || b8.key;
    if (!name2)
      continue;
    for (let scope of scopes) {
      add2(scope, name2, b8.run, b8.preventDefault, b8.stopPropagation);
      if (b8.shift)
        add2(scope, "Shift-" + name2, b8.shift, b8.preventDefault, b8.stopPropagation);
    }
  }
  return bound;
}
var currentKeyEvent = null;
function runHandlers(map, event, view, scope) {
  currentKeyEvent = event;
  let name2 = keyName(event);
  let charCode = codePointAt(name2, 0), isChar = codePointSize(charCode) == name2.length && name2 != " ";
  let prefix3 = "", handled = false, prevented = false, stopPropagation = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix3 = storedPrefix.prefix + " ";
    if (modifierCodes.indexOf(event.keyCode) < 0) {
      prevented = true;
      storedPrefix = null;
    }
  }
  let ran = /* @__PURE__ */ new Set();
  let runFor = (binding) => {
    if (binding) {
      for (let cmd2 of binding.run)
        if (!ran.has(cmd2)) {
          ran.add(cmd2);
          if (cmd2(view)) {
            if (binding.stopPropagation)
              stopPropagation = true;
            return true;
          }
        }
      if (binding.preventDefault) {
        if (binding.stopPropagation)
          stopPropagation = true;
        prevented = true;
      }
    }
    return false;
  };
  let scopeObj = map[scope], baseName, shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix3 + modifiers(name2, event, !isChar)])) {
      handled = true;
    } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
    !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
      if (runFor(scopeObj[prefix3 + modifiers(baseName, event, true)])) {
        handled = true;
      } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix3 + modifiers(shiftName, event, false)])) {
        handled = true;
      }
    } else if (isChar && event.shiftKey && runFor(scopeObj[prefix3 + modifiers(name2, event, true)])) {
      handled = true;
    }
    if (!handled && runFor(scopeObj._any))
      handled = true;
  }
  if (prevented)
    handled = true;
  if (handled && stopPropagation)
    event.stopPropagation();
  currentKeyEvent = null;
  return handled;
}
var RectangleMarker = class _RectangleMarker {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(className, left, top2, width, height) {
    this.className = className;
    this.left = left;
    this.top = top2;
    this.width = width;
    this.height = height;
  }
  draw() {
    let elt = document.createElement("div");
    elt.className = this.className;
    this.adjust(elt);
    return elt;
  }
  update(elt, prev3) {
    if (prev3.className != this.className)
      return false;
    this.adjust(elt);
    return true;
  }
  adjust(elt) {
    elt.style.left = this.left + "px";
    elt.style.top = this.top + "px";
    if (this.width != null)
      elt.style.width = this.width + "px";
    elt.style.height = this.height + "px";
  }
  eq(p8) {
    return this.left == p8.left && this.top == p8.top && this.width == p8.width && this.height == p8.height && this.className == p8.className;
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(view, className, range) {
    if (range.empty) {
      let pos = view.coordsAtPos(range.head, range.assoc || 1);
      if (!pos)
        return [];
      let base2 = getBase(view);
      return [new _RectangleMarker(className, pos.left - base2.left, pos.top - base2.top, null, pos.bottom - pos.top)];
    } else {
      return rectanglesForRange(view, className, range);
    }
  }
};
function getBase(view) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
  return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
}
function wrappedLine(view, pos, side, inside2) {
  let coords = view.coordsAtPos(pos, side * 2);
  if (!coords)
    return inside2;
  let editorRect = view.dom.getBoundingClientRect();
  let y9 = (coords.top + coords.bottom) / 2;
  let left = view.posAtCoords({ x: editorRect.left + 1, y: y9 });
  let right = view.posAtCoords({ x: editorRect.right - 1, y: y9 });
  if (left == null || right == null)
    return inside2;
  return { from: Math.max(inside2.from, Math.min(left, right)), to: Math.min(inside2.to, Math.max(left, right)) };
}
function rectanglesForRange(view, className, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to)
    return [];
  let from3 = Math.max(range.from, view.viewport.from), to2 = Math.min(range.to, view.viewport.to);
  let ltr = view.textDirection == Direction.LTR;
  let content2 = view.contentDOM, contentRect = content2.getBoundingClientRect(), base2 = getBase(view);
  let lineElt = content2.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
  let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
  let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
  let startBlock = blockAt(view, from3), endBlock = blockAt(view, to2);
  let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
  if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
    visualStart = wrappedLine(view, from3, 1, visualStart);
  if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
    visualEnd = wrappedLine(view, to2, -1, visualEnd);
  if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    let top2 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    let between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top2.bottom + view.defaultLineHeight / 2 < bottom.top)
      between.push(piece(leftSide, top2.bottom, rightSide, bottom.top));
    else if (top2.bottom < bottom.top && view.elementAtHeight((top2.bottom + bottom.top) / 2).type == BlockType.Text)
      top2.bottom = bottom.top = (top2.bottom + bottom.top) / 2;
    return pieces(top2).concat(between).concat(pieces(bottom));
  }
  function piece(left, top2, right, bottom) {
    return new RectangleMarker(
      className,
      left - base2.left,
      top2 - base2.top - 0.01,
      right - left,
      bottom - top2 + 0.01
      /* C.Epsilon */
    );
  }
  function pieces({ top: top2, bottom, horizontal }) {
    let pieces2 = [];
    for (let i3 = 0; i3 < horizontal.length; i3 += 2)
      pieces2.push(piece(horizontal[i3], top2, horizontal[i3 + 1], bottom));
    return pieces2;
  }
  function drawForLine(from22, to22, line3) {
    let top2 = 1e9, bottom = -1e9, horizontal = [];
    function addSpan(from32, fromOpen, to3, toOpen, dir) {
      let fromCoords = view.coordsAtPos(from32, from32 == line3.to ? -2 : 2);
      let toCoords = view.coordsAtPos(to3, to3 == line3.from ? 2 : -2);
      if (!fromCoords || !toCoords)
        return;
      top2 = Math.min(fromCoords.top, toCoords.top, top2);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR)
        horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
      else
        horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }
    let start = from22 !== null && from22 !== void 0 ? from22 : line3.from, end = to22 !== null && to22 !== void 0 ? to22 : line3.to;
    for (let r2 of view.visibleRanges)
      if (r2.to > start && r2.from < end) {
        for (let pos = Math.max(r2.from, start), endPos = Math.min(r2.to, end); ; ) {
          let docLine = view.state.doc.lineAt(pos);
          for (let span of view.bidiSpans(docLine)) {
            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
            if (spanFrom >= endPos)
              break;
            if (spanTo > pos)
              addSpan(Math.max(spanFrom, pos), from22 == null && spanFrom <= start, Math.min(spanTo, endPos), to22 == null && spanTo >= end, span.dir);
          }
          pos = docLine.to + 1;
          if (pos >= endPos)
            break;
        }
      }
    if (horizontal.length == 0)
      addSpan(start, from22 == null, end, to22 == null, view.textDirection);
    return { top: top2, bottom, horizontal };
  }
  function drawForWidget(block, top2) {
    let y9 = contentRect.top + (top2 ? block.top : block.bottom);
    return { top: y9, bottom: y9, horizontal: [] };
  }
}
function sameMarker(a7, b8) {
  return a7.constructor == b8.constructor && a7.eq(b8);
}
var LayerView = class {
  constructor(view, layer2) {
    this.view = view;
    this.layer = layer2;
    this.drawn = [];
    this.scaleX = 1;
    this.scaleY = 1;
    this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
    this.dom = view.scrollDOM.appendChild(document.createElement("div"));
    this.dom.classList.add("cm-layer");
    if (layer2.above)
      this.dom.classList.add("cm-layer-above");
    if (layer2.class)
      this.dom.classList.add(layer2.class);
    this.scale();
    this.dom.setAttribute("aria-hidden", "true");
    this.setOrder(view.state);
    view.requestMeasure(this.measureReq);
    if (layer2.mount)
      layer2.mount(this.dom, view);
  }
  update(update) {
    if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
      this.setOrder(update.state);
    if (this.layer.update(update, this.dom) || update.geometryChanged) {
      this.scale();
      update.view.requestMeasure(this.measureReq);
    }
  }
  docViewUpdate(view) {
    if (this.layer.updateOnDocViewUpdate !== false)
      view.requestMeasure(this.measureReq);
  }
  setOrder(state) {
    let pos = 0, order = state.facet(layerOrder);
    while (pos < order.length && order[pos] != this.layer)
      pos++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX, scaleY } = this.view;
    if (scaleX != this.scaleX || scaleY != this.scaleY) {
      this.scaleX = scaleX;
      this.scaleY = scaleY;
      this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
    }
  }
  draw(markers) {
    if (markers.length != this.drawn.length || markers.some((p8, i3) => !sameMarker(p8, this.drawn[i3]))) {
      let old = this.dom.firstChild, oldI = 0;
      for (let marker of markers) {
        if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
          old = old.nextSibling;
          oldI++;
        } else {
          this.dom.insertBefore(marker.draw(), old);
        }
      }
      while (old) {
        let next3 = old.nextSibling;
        old.remove();
        old = next3;
      }
      this.drawn = markers;
    }
  }
  destroy() {
    if (this.layer.destroy)
      this.layer.destroy(this.dom, this.view);
    this.dom.remove();
  }
};
var layerOrder = /* @__PURE__ */ Facet.define();
function layer(config2) {
  return [
    ViewPlugin.define((v6) => new LayerView(v6, config2)),
    layerOrder.of(config2)
  ];
}
var CanHidePrimary = !browser.ios;
var selectionConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      cursorBlinkRate: 1200,
      drawRangeCursor: true
    }, {
      cursorBlinkRate: (a7, b8) => Math.min(a7, b8),
      drawRangeCursor: (a7, b8) => a7 || b8
    });
  }
});
function drawSelection(config2 = {}) {
  return [
    selectionConfig.of(config2),
    cursorLayer,
    selectionLayer,
    hideNativeSelection,
    nativeSelectionHidden.of(true)
  ];
}
function configChanged(update) {
  return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
}
var cursorLayer = /* @__PURE__ */ layer({
  above: true,
  markers(view) {
    let { state } = view, conf = state.facet(selectionConfig);
    let cursors = [];
    for (let r2 of state.selection.ranges) {
      let prim = r2 == state.selection.main;
      if (r2.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
        let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
        let cursor = r2.empty ? r2 : EditorSelection.cursor(r2.head, r2.head > r2.anchor ? -1 : 1);
        for (let piece of RectangleMarker.forRange(view, className, cursor))
          cursors.push(piece);
      }
    }
    return cursors;
  },
  update(update, dom) {
    if (update.transactions.some((tr2) => tr2.selection))
      dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
    let confChange = configChanged(update);
    if (confChange)
      setBlinkRate(update.state, dom);
    return update.docChanged || update.selectionSet || confChange;
  },
  mount(dom, view) {
    setBlinkRate(view.state, dom);
  },
  class: "cm-cursorLayer"
});
function setBlinkRate(state, dom) {
  dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
}
var selectionLayer = /* @__PURE__ */ layer({
  above: false,
  markers(view) {
    return view.state.selection.ranges.map((r2) => r2.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r2)).reduce((a7, b8) => a7.concat(b8));
  },
  update(update, dom) {
    return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
  },
  class: "cm-selectionLayer"
});
var themeSpec = {
  ".cm-line": {
    "& ::selection, &::selection": { backgroundColor: "transparent !important" }
  },
  ".cm-content": {
    "& :focus": {
      caretColor: "initial !important",
      "&::selection, & ::selection": {
        backgroundColor: "Highlight !important"
      }
    }
  }
};
if (CanHidePrimary)
  themeSpec[".cm-line"].caretColor = themeSpec[".cm-content"].caretColor = "transparent !important";
var hideNativeSelection = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme(themeSpec));
var setDropCursorPos = /* @__PURE__ */ StateEffect.define({
  map(pos, mapping) {
    return pos == null ? null : mapping.mapPos(pos);
  }
});
var dropCursorPos = /* @__PURE__ */ StateField.define({
  create() {
    return null;
  },
  update(pos, tr2) {
    if (pos != null)
      pos = tr2.changes.mapPos(pos);
    return tr2.effects.reduce((pos2, e) => e.is(setDropCursorPos) ? e.value : pos2, pos);
  }
});
var drawDropCursor = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.cursor = null;
    this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(update) {
    var _a2;
    let cursorPos = update.state.field(dropCursorPos);
    if (cursorPos == null) {
      if (this.cursor != null) {
        (_a2 = this.cursor) === null || _a2 === void 0 ? void 0 : _a2.remove();
        this.cursor = null;
      }
    } else {
      if (!this.cursor) {
        this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
        this.cursor.className = "cm-dropCursor";
      }
      if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
        this.view.requestMeasure(this.measureReq);
    }
  }
  readPos() {
    let { view } = this;
    let pos = view.state.field(dropCursorPos);
    let rect = pos != null && view.coordsAtPos(pos);
    if (!rect)
      return null;
    let outer = view.scrollDOM.getBoundingClientRect();
    return {
      left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
      top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
      height: rect.bottom - rect.top
    };
  }
  drawCursor(pos) {
    if (this.cursor) {
      let { scaleX, scaleY } = this.view;
      if (pos) {
        this.cursor.style.left = pos.left / scaleX + "px";
        this.cursor.style.top = pos.top / scaleY + "px";
        this.cursor.style.height = pos.height / scaleY + "px";
      } else {
        this.cursor.style.left = "-100000px";
      }
    }
  }
  destroy() {
    if (this.cursor)
      this.cursor.remove();
  }
  setDropPos(pos) {
    if (this.view.state.field(dropCursorPos) != pos)
      this.view.dispatch({ effects: setDropCursorPos.of(pos) });
  }
}, {
  eventObservers: {
    dragover(event) {
      this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
    },
    dragleave(event) {
      if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
        this.setDropPos(null);
    },
    dragend() {
      this.setDropPos(null);
    },
    drop() {
      this.setDropPos(null);
    }
  }
});
function dropCursor() {
  return [dropCursorPos, drawDropCursor];
}
function iterMatches(doc2, re7, from3, to2, f4) {
  re7.lastIndex = 0;
  for (let cursor = doc2.iterRange(from3, to2), pos = from3, m10; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak)
      while (m10 = re7.exec(cursor.value))
        f4(pos + m10.index, m10);
  }
}
function matchRanges(view, maxLength2) {
  let visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
    return visible;
  let result = [];
  for (let { from: from3, to: to2 } of visible) {
    from3 = Math.max(view.state.doc.lineAt(from3).from, from3 - maxLength2);
    to2 = Math.min(view.state.doc.lineAt(to2).to, to2 + maxLength2);
    if (result.length && result[result.length - 1].to >= from3)
      result[result.length - 1].to = to2;
    else
      result.push({ from: from3, to: to2 });
  }
  return result;
}
var MatchDecorator = class {
  /**
  Create a decorator.
  */
  constructor(config2) {
    const { regexp, decoration, decorate, boundary, maxLength: maxLength2 = 1e3 } = config2;
    if (!regexp.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;
    if (decorate) {
      this.addMatch = (match3, view, from3, add2) => decorate(add2, from3, from3 + match3[0].length, match3, view);
    } else if (typeof decoration == "function") {
      this.addMatch = (match3, view, from3, add2) => {
        let deco = decoration(match3, view, from3);
        if (deco)
          add2(from3, from3 + match3[0].length, deco);
      };
    } else if (decoration) {
      this.addMatch = (match3, _view, from3, add2) => add2(from3, from3 + match3[0].length, decoration);
    } else {
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    }
    this.boundary = boundary;
    this.maxLength = maxLength2;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(view) {
    let build = new RangeSetBuilder(), add2 = build.add.bind(build);
    for (let { from: from3, to: to2 } of matchRanges(view, this.maxLength))
      iterMatches(view.state.doc, this.regexp, from3, to2, (from22, m10) => this.addMatch(m10, view, from22, add2));
    return build.finish();
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(update, deco) {
    let changeFrom = 1e9, changeTo = -1;
    if (update.docChanged)
      update.changes.iterChanges((_f, _t4, from3, to2) => {
        if (to2 > update.view.viewport.from && from3 < update.view.viewport.to) {
          changeFrom = Math.min(from3, changeFrom);
          changeTo = Math.max(to2, changeTo);
        }
      });
    if (update.viewportChanged || changeTo - changeFrom > 1e3)
      return this.createDeco(update.view);
    if (changeTo > -1)
      return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
    return deco;
  }
  updateRange(view, deco, updateFrom, updateTo) {
    for (let r2 of view.visibleRanges) {
      let from3 = Math.max(r2.from, updateFrom), to2 = Math.min(r2.to, updateTo);
      if (to2 > from3) {
        let fromLine = view.state.doc.lineAt(from3), toLine = fromLine.to < to2 ? view.state.doc.lineAt(to2) : fromLine;
        let start = Math.max(r2.from, fromLine.from), end = Math.min(r2.to, toLine.to);
        if (this.boundary) {
          for (; from3 > fromLine.from; from3--)
            if (this.boundary.test(fromLine.text[from3 - 1 - fromLine.from])) {
              start = from3;
              break;
            }
          for (; to2 < toLine.to; to2++)
            if (this.boundary.test(toLine.text[to2 - toLine.from])) {
              end = to2;
              break;
            }
        }
        let ranges = [], m10;
        let add2 = (from22, to22, deco2) => ranges.push(deco2.range(from22, to22));
        if (fromLine == toLine) {
          this.regexp.lastIndex = start - fromLine.from;
          while ((m10 = this.regexp.exec(fromLine.text)) && m10.index < end - fromLine.from)
            this.addMatch(m10, view, m10.index + fromLine.from, add2);
        } else {
          iterMatches(view.state.doc, this.regexp, start, end, (from22, m22) => this.addMatch(m22, view, from22, add2));
        }
        deco = deco.update({ filterFrom: start, filterTo: end, filter: (from22, to22) => from22 < start || to22 > end, add: ranges });
      }
    }
    return deco;
  }
};
var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
var Specials = /* @__PURE__ */ new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]", UnicodeRegexpSupport);
var Names = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
var _supportsTabSize = null;
function supportsTabSize() {
  var _a2;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    let styles = document.body.style;
    _supportsTabSize = ((_a2 = styles.tabSize) !== null && _a2 !== void 0 ? _a2 : styles.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
var specialCharConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    let config2 = combineConfig(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config2.replaceTabs = !supportsTabSize())
      config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
    if (config2.addSpecialChars)
      config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
    return config2;
  }
});
function highlightSpecialChars(config2 = {}) {
  return [specialCharConfig.of(config2), specialCharPlugin()];
}
var _plugin = null;
function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = /* @__PURE__ */ Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }
    makeDecorator(conf) {
      return new MatchDecorator({
        regexp: conf.specialChars,
        decoration: (m10, view, pos) => {
          let { doc: doc2 } = view.state;
          let code5 = codePointAt(m10[0], 0);
          if (code5 == 9) {
            let line3 = doc2.lineAt(pos);
            let size = view.state.tabSize, col = countColumn(line3.text, size, pos - line3.from);
            return Decoration.replace({
              widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[code5] || (this.decorationCache[code5] = Decoration.replace({ widget: new SpecialCharWidget(conf, code5) }));
        },
        boundary: conf.replaceTabs ? void 0 : /[^]/
      });
    }
    update(update) {
      let conf = update.state.facet(specialCharConfig);
      if (update.startState.facet(specialCharConfig) != conf) {
        this.decorator = this.makeDecorator(conf);
        this.decorations = this.decorator.createDeco(update.view);
      } else {
        this.decorations = this.decorator.updateDeco(update, this.decorations);
      }
    }
  }, {
    decorations: (v6) => v6.decorations
  }));
}
var DefaultPlaceholder = "•";
function placeholder$1(code5) {
  if (code5 >= 32)
    return DefaultPlaceholder;
  if (code5 == 10)
    return "␤";
  return String.fromCharCode(9216 + code5);
}
var SpecialCharWidget = class extends WidgetType {
  constructor(options, code5) {
    super();
    this.options = options;
    this.code = code5;
  }
  eq(other) {
    return other.code == this.code;
  }
  toDOM(view) {
    let ph = placeholder$1(this.code);
    let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
    let custom = this.options.render && this.options.render(this.code, desc, ph);
    if (custom)
      return custom;
    let span = document.createElement("span");
    span.textContent = ph;
    span.title = desc;
    span.setAttribute("aria-label", desc);
    span.className = "cm-specialChar";
    return span;
  }
  ignoreEvent() {
    return false;
  }
};
var TabWidget = class extends WidgetType {
  constructor(width) {
    super();
    this.width = width;
  }
  eq(other) {
    return other.width == this.width;
  }
  toDOM() {
    let span = document.createElement("span");
    span.textContent = "	";
    span.className = "cm-tab";
    span.style.width = this.width + "px";
    return span;
  }
  ignoreEvent() {
    return false;
  }
};
function highlightActiveLine() {
  return activeLineHighlighter;
}
var lineDeco = /* @__PURE__ */ Decoration.line({ class: "cm-activeLine" });
var activeLineHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.docChanged || update.selectionSet)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let lastLineStart = -1, deco = [];
    for (let r2 of view.state.selection.ranges) {
      let line3 = view.lineBlockAt(r2.head);
      if (line3.from > lastLineStart) {
        deco.push(lineDeco.range(line3.from));
        lastLineStart = line3.from;
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v6) => v6.decorations
});
var MaxOff = 2e3;
function rectangleFor(state, a7, b8) {
  let startLine = Math.min(a7.line, b8.line), endLine = Math.max(a7.line, b8.line);
  let ranges = [];
  if (a7.off > MaxOff || b8.off > MaxOff || a7.col < 0 || b8.col < 0) {
    let startOff = Math.min(a7.off, b8.off), endOff = Math.max(a7.off, b8.off);
    for (let i3 = startLine; i3 <= endLine; i3++) {
      let line3 = state.doc.line(i3);
      if (line3.length <= endOff)
        ranges.push(EditorSelection.range(line3.from + startOff, line3.to + endOff));
    }
  } else {
    let startCol = Math.min(a7.col, b8.col), endCol = Math.max(a7.col, b8.col);
    for (let i3 = startLine; i3 <= endLine; i3++) {
      let line3 = state.doc.line(i3);
      let start = findColumn(line3.text, startCol, state.tabSize, true);
      if (start < 0) {
        ranges.push(EditorSelection.cursor(line3.to));
      } else {
        let end = findColumn(line3.text, endCol, state.tabSize);
        ranges.push(EditorSelection.range(line3.from + start, line3.from + end));
      }
    }
  }
  return ranges;
}
function absoluteColumn(view, x7) {
  let ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x7) / view.defaultCharacterWidth)) : -1;
}
function getPos(view, event) {
  let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let line3 = view.state.doc.lineAt(offset), off = offset - line3.from;
  let col = off > MaxOff ? -1 : off == line3.length ? absoluteColumn(view, event.clientX) : countColumn(line3.text, view.state.tabSize, offset - line3.from);
  return { line: line3.number, col, off };
}
function rectangleSelectionStyle(view, event) {
  let start = getPos(view, event), startSel = view.state.selection;
  if (!start)
    return null;
  return {
    update(update) {
      if (update.docChanged) {
        let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
        let newLine = update.state.doc.lineAt(newStart);
        start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, _extend, multiple) {
      let cur2 = getPos(view, event2);
      if (!cur2)
        return startSel;
      let ranges = rectangleFor(view.state, start, cur2);
      if (!ranges.length)
        return startSel;
      if (multiple)
        return EditorSelection.create(ranges.concat(startSel.ranges));
      else
        return EditorSelection.create(ranges);
    }
  };
}
function rectangularSelection(options) {
  let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e) => e.altKey && e.button == 0);
  return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
}
var keys = {
  Alt: [18, (e) => !!e.altKey],
  Control: [17, (e) => !!e.ctrlKey],
  Shift: [16, (e) => !!e.shiftKey],
  Meta: [91, (e) => !!e.metaKey]
};
var showCrosshair = { style: "cursor: crosshair" };
function crosshairCursor(options = {}) {
  let [code5, getter] = keys[options.key || "Alt"];
  let plugin2 = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.isDown = false;
    }
    set(isDown) {
      if (this.isDown != isDown) {
        this.isDown = isDown;
        this.view.update([]);
      }
    }
  }, {
    eventObservers: {
      keydown(e) {
        this.set(e.keyCode == code5 || getter(e));
      },
      keyup(e) {
        if (e.keyCode == code5 || !getter(e))
          this.set(false);
      },
      mousemove(e) {
        this.set(getter(e));
      }
    }
  });
  return [
    plugin2,
    EditorView.contentAttributes.of((view) => {
      var _a2;
      return ((_a2 = view.plugin(plugin2)) === null || _a2 === void 0 ? void 0 : _a2.isDown) ? showCrosshair : null;
    })
  ];
}
var Outside = "-10000px";
var TooltipViewManager = class {
  constructor(view, facet, createTooltipView, removeTooltipView) {
    this.facet = facet;
    this.createTooltipView = createTooltipView;
    this.removeTooltipView = removeTooltipView;
    this.input = view.state.facet(facet);
    this.tooltips = this.input.filter((t3) => t3);
    let prev3 = null;
    this.tooltipViews = this.tooltips.map((t3) => prev3 = createTooltipView(t3, prev3));
  }
  update(update, above) {
    var _a2;
    let input = update.state.facet(this.facet);
    let tooltips2 = input.filter((x7) => x7);
    if (input === this.input) {
      for (let t3 of this.tooltipViews)
        if (t3.update)
          t3.update(update);
      return false;
    }
    let tooltipViews = [], newAbove = above ? [] : null;
    for (let i3 = 0; i3 < tooltips2.length; i3++) {
      let tip = tooltips2[i3], known = -1;
      if (!tip)
        continue;
      for (let i22 = 0; i22 < this.tooltips.length; i22++) {
        let other = this.tooltips[i22];
        if (other && other.create == tip.create)
          known = i22;
      }
      if (known < 0) {
        tooltipViews[i3] = this.createTooltipView(tip, i3 ? tooltipViews[i3 - 1] : null);
        if (newAbove)
          newAbove[i3] = !!tip.above;
      } else {
        let tooltipView = tooltipViews[i3] = this.tooltipViews[known];
        if (newAbove)
          newAbove[i3] = above[known];
        if (tooltipView.update)
          tooltipView.update(update);
      }
    }
    for (let t3 of this.tooltipViews)
      if (tooltipViews.indexOf(t3) < 0) {
        this.removeTooltipView(t3);
        (_a2 = t3.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t3);
      }
    if (above) {
      newAbove.forEach((val, i3) => above[i3] = val);
      above.length = newAbove.length;
    }
    this.input = input;
    this.tooltips = tooltips2;
    this.tooltipViews = tooltipViews;
    return true;
  }
};
function windowSpace(view) {
  let { win } = view;
  return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
}
var tooltipConfig = /* @__PURE__ */ Facet.define({
  combine: (values) => {
    var _a2, _b, _c;
    return {
      position: browser.ios ? "absolute" : ((_a2 = values.find((conf) => conf.position)) === null || _a2 === void 0 ? void 0 : _a2.position) || "fixed",
      parent: ((_b = values.find((conf) => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
      tooltipSpace: ((_c = values.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
    };
  }
});
var knownHeight = /* @__PURE__ */ new WeakMap();
var tooltipPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.above = [];
    this.inView = true;
    this.madeAbsolute = false;
    this.lastTransaction = 0;
    this.measureTimeout = -1;
    let config2 = view.state.facet(tooltipConfig);
    this.position = config2.position;
    this.parent = config2.parent;
    this.classes = view.themeClasses;
    this.createContainer();
    this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
    this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
    this.manager = new TooltipViewManager(view, showTooltip, (t3, p8) => this.createTooltip(t3, p8), (t3) => {
      if (this.resizeObserver)
        this.resizeObserver.unobserve(t3.dom);
      t3.dom.remove();
    });
    this.above = this.manager.tooltips.map((t3) => !!t3.above);
    this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
      if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
        this.measureSoon();
    }, { threshold: [1] }) : null;
    this.observeIntersection();
    view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
    this.maybeMeasure();
  }
  createContainer() {
    if (this.parent) {
      this.container = document.createElement("div");
      this.container.style.position = "relative";
      this.container.className = this.view.themeClasses;
      this.parent.appendChild(this.container);
    } else {
      this.container = this.view.dom;
    }
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let tooltip of this.manager.tooltipViews)
        this.intersectionObserver.observe(tooltip.dom);
    }
  }
  measureSoon() {
    if (this.measureTimeout < 0)
      this.measureTimeout = setTimeout(() => {
        this.measureTimeout = -1;
        this.maybeMeasure();
      }, 50);
  }
  update(update) {
    if (update.transactions.length)
      this.lastTransaction = Date.now();
    let updated = this.manager.update(update, this.above);
    if (updated)
      this.observeIntersection();
    let shouldMeasure = updated || update.geometryChanged;
    let newConfig = update.state.facet(tooltipConfig);
    if (newConfig.position != this.position && !this.madeAbsolute) {
      this.position = newConfig.position;
      for (let t3 of this.manager.tooltipViews)
        t3.dom.style.position = this.position;
      shouldMeasure = true;
    }
    if (newConfig.parent != this.parent) {
      if (this.parent)
        this.container.remove();
      this.parent = newConfig.parent;
      this.createContainer();
      for (let t3 of this.manager.tooltipViews)
        this.container.appendChild(t3.dom);
      shouldMeasure = true;
    } else if (this.parent && this.view.themeClasses != this.classes) {
      this.classes = this.container.className = this.view.themeClasses;
    }
    if (shouldMeasure)
      this.maybeMeasure();
  }
  createTooltip(tooltip, prev3) {
    let tooltipView = tooltip.create(this.view);
    let before = prev3 ? prev3.dom : null;
    tooltipView.dom.classList.add("cm-tooltip");
    if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let arrow = document.createElement("div");
      arrow.className = "cm-tooltip-arrow";
      tooltipView.dom.appendChild(arrow);
    }
    tooltipView.dom.style.position = this.position;
    tooltipView.dom.style.top = Outside;
    tooltipView.dom.style.left = "0px";
    this.container.insertBefore(tooltipView.dom, before);
    if (tooltipView.mount)
      tooltipView.mount(this.view);
    if (this.resizeObserver)
      this.resizeObserver.observe(tooltipView.dom);
    return tooltipView;
  }
  destroy() {
    var _a2, _b, _c;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let tooltipView of this.manager.tooltipViews) {
      tooltipView.dom.remove();
      (_a2 = tooltipView.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(tooltipView);
    }
    if (this.parent)
      this.container.remove();
    (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
    clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let scaleX = 1, scaleY = 1, makeAbsolute = false;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom } = this.manager.tooltipViews[0];
      if (browser.gecko) {
        makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
      } else if (dom.style.top == Outside && dom.style.left == "0px") {
        let rect = dom.getBoundingClientRect();
        makeAbsolute = Math.abs(rect.top + 1e4) > 1 || Math.abs(rect.left) > 1;
      }
    }
    if (makeAbsolute || this.position == "absolute") {
      if (this.parent) {
        let rect = this.parent.getBoundingClientRect();
        if (rect.width && rect.height) {
          scaleX = rect.width / this.parent.offsetWidth;
          scaleY = rect.height / this.parent.offsetHeight;
        }
      } else {
        ({ scaleX, scaleY } = this.view.viewState);
      }
    }
    let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
    return {
      visible: {
        left: visible.left + margins.left,
        top: visible.top + margins.top,
        right: visible.right - margins.right,
        bottom: visible.bottom - margins.bottom
      },
      parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
      pos: this.manager.tooltips.map((t3, i3) => {
        let tv = this.manager.tooltipViews[i3];
        return tv.getCoords ? tv.getCoords(t3.pos) : this.view.coordsAtPos(t3.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
      space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
      scaleX,
      scaleY,
      makeAbsolute
    };
  }
  writeMeasure(measured) {
    var _a2;
    if (measured.makeAbsolute) {
      this.madeAbsolute = true;
      this.position = "absolute";
      for (let t3 of this.manager.tooltipViews)
        t3.dom.style.position = "absolute";
    }
    let { visible, space: space2, scaleX, scaleY } = measured;
    let others = [];
    for (let i3 = 0; i3 < this.manager.tooltips.length; i3++) {
      let tooltip = this.manager.tooltips[i3], tView = this.manager.tooltipViews[i3], { dom } = tView;
      let pos = measured.pos[i3], size = measured.size[i3];
      if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space2.top) || pos.top >= Math.min(visible.bottom, space2.bottom) || pos.right < Math.max(visible.left, space2.left) - 0.1 || pos.left > Math.min(visible.right, space2.right) + 0.1)) {
        dom.style.top = Outside;
        continue;
      }
      let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
      let arrowHeight = arrow ? 7 : 0;
      let width = size.right - size.left, height = (_a2 = knownHeight.get(tView)) !== null && _a2 !== void 0 ? _a2 : size.bottom - size.top;
      let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
      let left = size.width > space2.right - space2.left ? ltr ? space2.left : space2.right - size.width : ltr ? Math.max(space2.left, Math.min(pos.left - (arrow ? 14 : 0) + offset.x, space2.right - width)) : Math.min(Math.max(space2.left, pos.left - width + (arrow ? 14 : 0) - offset.x), space2.right - width);
      let above = this.above[i3];
      if (!tooltip.strictSide && (above ? pos.top - height - arrowHeight - offset.y < space2.top : pos.bottom + height + arrowHeight + offset.y > space2.bottom) && above == space2.bottom - pos.bottom > pos.top - space2.top)
        above = this.above[i3] = !above;
      let spaceVert = (above ? pos.top - space2.top : space2.bottom - pos.bottom) - arrowHeight;
      if (spaceVert < height && tView.resize !== false) {
        if (spaceVert < this.view.defaultLineHeight) {
          dom.style.top = Outside;
          continue;
        }
        knownHeight.set(tView, height);
        dom.style.height = (height = spaceVert) / scaleY + "px";
      } else if (dom.style.height) {
        dom.style.height = "";
      }
      let top2 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
      let right = left + width;
      if (tView.overlap !== true) {
        for (let r2 of others)
          if (r2.left < right && r2.right > left && r2.top < top2 + height && r2.bottom > top2)
            top2 = above ? r2.top - height - 2 - arrowHeight : r2.bottom + arrowHeight + 2;
      }
      if (this.position == "absolute") {
        dom.style.top = (top2 - measured.parent.top) / scaleY + "px";
        dom.style.left = (left - measured.parent.left) / scaleX + "px";
      } else {
        dom.style.top = top2 / scaleY + "px";
        dom.style.left = left / scaleX + "px";
      }
      if (arrow) {
        let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7);
        arrow.style.left = arrowLeft / scaleX + "px";
      }
      if (tView.overlap !== true)
        others.push({ left, top: top2, right, bottom: top2 + height });
      dom.classList.toggle("cm-tooltip-above", above);
      dom.classList.toggle("cm-tooltip-below", !above);
      if (tView.positioned)
        tView.positioned(measured.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length) {
      if (this.view.inView)
        this.view.requestMeasure(this.measureReq);
      if (this.inView != this.view.inView) {
        this.inView = this.view.inView;
        if (!this.inView)
          for (let tv of this.manager.tooltipViews)
            tv.dom.style.top = Outside;
      }
    }
  }
}, {
  eventObservers: {
    scroll() {
      this.maybeMeasure();
    }
  }
});
var baseTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-tooltip": {
    zIndex: 500,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: `${7}px`,
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: `${7}px solid transparent`,
      borderRight: `${7}px solid transparent`
    },
    ".cm-tooltip-above &": {
      bottom: `-${7}px`,
      "&:before": {
        borderTop: `${7}px solid #bbb`
      },
      "&:after": {
        borderTop: `${7}px solid #f5f5f5`,
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: `-${7}px`,
      "&:before": {
        borderBottom: `${7}px solid #bbb`
      },
      "&:after": {
        borderBottom: `${7}px solid #f5f5f5`,
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
});
var noOffset = { x: 0, y: 0 };
var showTooltip = /* @__PURE__ */ Facet.define({
  enables: [tooltipPlugin, baseTheme]
});
var showHoverTooltip = /* @__PURE__ */ Facet.define({
  combine: (inputs) => inputs.reduce((a7, i3) => a7.concat(i3), [])
});
var HoverTooltipHost = class _HoverTooltipHost {
  // Needs to be static so that host tooltip instances always match
  static create(view) {
    return new _HoverTooltipHost(view);
  }
  constructor(view) {
    this.view = view;
    this.mounted = false;
    this.dom = document.createElement("div");
    this.dom.classList.add("cm-tooltip-hover");
    this.manager = new TooltipViewManager(view, showHoverTooltip, (t3, p8) => this.createHostedView(t3, p8), (t3) => t3.dom.remove());
  }
  createHostedView(tooltip, prev3) {
    let hostedView = tooltip.create(this.view);
    hostedView.dom.classList.add("cm-tooltip-section");
    this.dom.insertBefore(hostedView.dom, prev3 ? prev3.dom.nextSibling : this.dom.firstChild);
    if (this.mounted && hostedView.mount)
      hostedView.mount(this.view);
    return hostedView;
  }
  mount(view) {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.mount)
        hostedView.mount(view);
    }
    this.mounted = true;
  }
  positioned(space2) {
    for (let hostedView of this.manager.tooltipViews) {
      if (hostedView.positioned)
        hostedView.positioned(space2);
    }
  }
  update(update) {
    this.manager.update(update);
  }
  destroy() {
    var _a2;
    for (let t3 of this.manager.tooltipViews)
      (_a2 = t3.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t3);
  }
  passProp(name2) {
    let value = void 0;
    for (let view of this.manager.tooltipViews) {
      let given = view[name2];
      if (given !== void 0) {
        if (value === void 0)
          value = given;
        else if (value !== given)
          return void 0;
      }
    }
    return value;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
};
var showHoverTooltipHost = /* @__PURE__ */ showTooltip.compute([showHoverTooltip], (state) => {
  let tooltips2 = state.facet(showHoverTooltip);
  if (tooltips2.length === 0)
    return null;
  return {
    pos: Math.min(...tooltips2.map((t3) => t3.pos)),
    end: Math.max(...tooltips2.map((t3) => {
      var _a2;
      return (_a2 = t3.end) !== null && _a2 !== void 0 ? _a2 : t3.pos;
    })),
    create: HoverTooltipHost.create,
    above: tooltips2[0].above,
    arrow: tooltips2.some((t3) => t3.arrow)
  };
});
var HoverPlugin = class {
  constructor(view, source, field, setHover, hoverTime) {
    this.view = view;
    this.source = source;
    this.field = field;
    this.setHover = setHover;
    this.hoverTime = hoverTime;
    this.hoverTimeout = -1;
    this.restartTimeout = -1;
    this.pending = null;
    this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
    this.checkHover = this.checkHover.bind(this);
    view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
    view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    if (this.pending) {
      this.pending = null;
      clearTimeout(this.restartTimeout);
      this.restartTimeout = setTimeout(() => this.startHover(), 20);
    }
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    this.hoverTimeout = -1;
    if (this.active.length)
      return;
    let hovered = Date.now() - this.lastMove.time;
    if (hovered < this.hoverTime)
      this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
    else
      this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { view, lastMove } = this;
    let desc = view.docView.nearest(lastMove.target);
    if (!desc)
      return;
    let pos, side = 1;
    if (desc instanceof WidgetView) {
      pos = desc.posAtStart;
    } else {
      pos = view.posAtCoords(lastMove);
      if (pos == null)
        return;
      let posCoords = view.coordsAtPos(pos);
      if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth)
        return;
      let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find((s66) => s66.from <= pos && s66.to >= pos);
      let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
      side = lastMove.x < posCoords.left ? -rtl : rtl;
    }
    let open = this.source(view, pos, side);
    if (open === null || open === void 0 ? void 0 : open.then) {
      let pending = this.pending = { pos };
      open.then((result) => {
        if (this.pending == pending) {
          this.pending = null;
          if (result && !(Array.isArray(result) && !result.length))
            view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
        }
      }, (e) => logException(view.state, e, "hover tooltip"));
    } else if (open && !(Array.isArray(open) && !open.length)) {
      view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
    }
  }
  get tooltip() {
    let plugin2 = this.view.plugin(tooltipPlugin);
    let index = plugin2 ? plugin2.manager.tooltips.findIndex((t3) => t3.create == HoverTooltipHost.create) : -1;
    return index > -1 ? plugin2.manager.tooltipViews[index] : null;
  }
  mousemove(event) {
    var _a2, _b;
    this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
    if (this.hoverTimeout < 0)
      this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
    let { active, tooltip } = this;
    if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
      let { pos } = active[0] || this.pending, end = (_b = (_a2 = active[0]) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b !== void 0 ? _b : pos;
      if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY)) {
        this.view.dispatch({ effects: this.setHover.of([]) });
        this.pending = null;
      }
    }
  }
  mouseleave(event) {
    clearTimeout(this.hoverTimeout);
    this.hoverTimeout = -1;
    let { active } = this;
    if (active.length) {
      let { tooltip } = this;
      let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
      if (!inTooltip)
        this.view.dispatch({ effects: this.setHover.of([]) });
      else
        this.watchTooltipLeave(tooltip.dom);
    }
  }
  watchTooltipLeave(tooltip) {
    let watch = (event) => {
      tooltip.removeEventListener("mouseleave", watch);
      if (this.active.length && !this.view.dom.contains(event.relatedTarget))
        this.view.dispatch({ effects: this.setHover.of([]) });
    };
    tooltip.addEventListener("mouseleave", watch);
  }
  destroy() {
    clearTimeout(this.hoverTimeout);
    this.view.dom.removeEventListener("mouseleave", this.mouseleave);
    this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
};
var tooltipMargin = 4;
function isInTooltip(tooltip, event) {
  let { left, right, top: top2, bottom } = tooltip.getBoundingClientRect(), arrow;
  if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
    let arrowRect = arrow.getBoundingClientRect();
    top2 = Math.min(arrowRect.top, top2);
    bottom = Math.max(arrowRect.bottom, bottom);
  }
  return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin && event.clientY >= top2 - tooltipMargin && event.clientY <= bottom + tooltipMargin;
}
function isOverRange(view, from3, to2, x7, y9, margin) {
  let rect = view.scrollDOM.getBoundingClientRect();
  let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
  if (rect.left > x7 || rect.right < x7 || rect.top > y9 || Math.min(rect.bottom, docBottom) < y9)
    return false;
  let pos = view.posAtCoords({ x: x7, y: y9 }, false);
  return pos >= from3 && pos <= to2;
}
function hoverTooltip(source, options = {}) {
  let setHover = StateEffect.define();
  let hoverState = StateField.define({
    create() {
      return [];
    },
    update(value, tr2) {
      if (value.length) {
        if (options.hideOnChange && (tr2.docChanged || tr2.selection))
          value = [];
        else if (options.hideOn)
          value = value.filter((v6) => !options.hideOn(tr2, v6));
        if (tr2.docChanged) {
          let mapped = [];
          for (let tooltip of value) {
            let newPos = tr2.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
            if (newPos != null) {
              let copy3 = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
              copy3.pos = newPos;
              if (copy3.end != null)
                copy3.end = tr2.changes.mapPos(copy3.end);
              mapped.push(copy3);
            }
          }
          value = mapped;
        }
      }
      for (let effect of tr2.effects) {
        if (effect.is(setHover))
          value = effect.value;
        if (effect.is(closeHoverTooltipEffect))
          value = [];
      }
      return value;
    },
    provide: (f4) => showHoverTooltip.from(f4)
  });
  return {
    active: hoverState,
    extension: [
      hoverState,
      ViewPlugin.define((view) => new HoverPlugin(
        view,
        source,
        hoverState,
        setHover,
        options.hoverTime || 300
        /* Hover.Time */
      )),
      showHoverTooltipHost
    ]
  };
}
function getTooltip(view, tooltip) {
  let plugin2 = view.plugin(tooltipPlugin);
  if (!plugin2)
    return null;
  let found = plugin2.manager.tooltips.indexOf(tooltip);
  return found < 0 ? null : plugin2.manager.tooltipViews[found];
}
var closeHoverTooltipEffect = /* @__PURE__ */ StateEffect.define();
var panelConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    let topContainer, bottomContainer;
    for (let c2 of configs) {
      topContainer = topContainer || c2.topContainer;
      bottomContainer = bottomContainer || c2.bottomContainer;
    }
    return { topContainer, bottomContainer };
  }
});
function getPanel(view, panel) {
  let plugin2 = view.plugin(panelPlugin);
  let index = plugin2 ? plugin2.specs.indexOf(panel) : -1;
  return index > -1 ? plugin2.panels[index] : null;
}
var panelPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.input = view.state.facet(showPanel);
    this.specs = this.input.filter((s66) => s66);
    this.panels = this.specs.map((spec) => spec(view));
    let conf = view.state.facet(panelConfig);
    this.top = new PanelGroup(view, true, conf.topContainer);
    this.bottom = new PanelGroup(view, false, conf.bottomContainer);
    this.top.sync(this.panels.filter((p8) => p8.top));
    this.bottom.sync(this.panels.filter((p8) => !p8.top));
    for (let p8 of this.panels) {
      p8.dom.classList.add("cm-panel");
      if (p8.mount)
        p8.mount();
    }
  }
  update(update) {
    let conf = update.state.facet(panelConfig);
    if (this.top.container != conf.topContainer) {
      this.top.sync([]);
      this.top = new PanelGroup(update.view, true, conf.topContainer);
    }
    if (this.bottom.container != conf.bottomContainer) {
      this.bottom.sync([]);
      this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
    }
    this.top.syncClasses();
    this.bottom.syncClasses();
    let input = update.state.facet(showPanel);
    if (input != this.input) {
      let specs = input.filter((x7) => x7);
      let panels2 = [], top2 = [], bottom = [], mount = [];
      for (let spec of specs) {
        let known = this.specs.indexOf(spec), panel;
        if (known < 0) {
          panel = spec(update.view);
          mount.push(panel);
        } else {
          panel = this.panels[known];
          if (panel.update)
            panel.update(update);
        }
        panels2.push(panel);
        (panel.top ? top2 : bottom).push(panel);
      }
      this.specs = specs;
      this.panels = panels2;
      this.top.sync(top2);
      this.bottom.sync(bottom);
      for (let p8 of mount) {
        p8.dom.classList.add("cm-panel");
        if (p8.mount)
          p8.mount();
      }
    } else {
      for (let p8 of this.panels)
        if (p8.update)
          p8.update(update);
    }
  }
  destroy() {
    this.top.sync([]);
    this.bottom.sync([]);
  }
}, {
  provide: (plugin2) => EditorView.scrollMargins.of((view) => {
    let value = view.plugin(plugin2);
    return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
  })
});
var PanelGroup = class {
  constructor(view, top2, container) {
    this.view = view;
    this.top = top2;
    this.container = container;
    this.dom = void 0;
    this.classes = "";
    this.panels = [];
    this.syncClasses();
  }
  sync(panels2) {
    for (let p8 of this.panels)
      if (p8.destroy && panels2.indexOf(p8) < 0)
        p8.destroy();
    this.panels = panels2;
    this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      if (this.dom) {
        this.dom.remove();
        this.dom = void 0;
      }
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div");
      this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
      this.dom.style[this.top ? "top" : "bottom"] = "0";
      let parent = this.container || this.view.dom;
      parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
    }
    let curDOM = this.dom.firstChild;
    for (let panel of this.panels) {
      if (panel.dom.parentNode == this.dom) {
        while (curDOM != panel.dom)
          curDOM = rm(curDOM);
        curDOM = curDOM.nextSibling;
      } else {
        this.dom.insertBefore(panel.dom, curDOM);
      }
    }
    while (curDOM)
      curDOM = rm(curDOM);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!this.container || this.classes == this.view.themeClasses)
      return;
    for (let cls of this.classes.split(" "))
      if (cls)
        this.container.classList.remove(cls);
    for (let cls of (this.classes = this.view.themeClasses).split(" "))
      if (cls)
        this.container.classList.add(cls);
  }
};
function rm(node3) {
  let next3 = node3.nextSibling;
  node3.remove();
  return next3;
}
var showPanel = /* @__PURE__ */ Facet.define({
  enables: panelPlugin
});
var GutterMarker = class extends RangeValue {
  /**
  @internal
  */
  compare(other) {
    return this == other || this.constructor == other.constructor && this.eq(other);
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(other) {
    return false;
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(dom) {
  }
};
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = void 0;
GutterMarker.prototype.mapMode = MapMode.TrackBefore;
GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
GutterMarker.prototype.point = true;
var gutterLineClass = /* @__PURE__ */ Facet.define();
var gutterWidgetClass = /* @__PURE__ */ Facet.define();
var defaults = {
  class: "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: () => RangeSet.empty,
  lineMarker: () => null,
  widgetMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
};
var activeGutters = /* @__PURE__ */ Facet.define();
function gutter(config2) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config2))];
}
var unfixGutters = /* @__PURE__ */ Facet.define({
  combine: (values) => values.some((x7) => x7)
});
function gutters(config2) {
  let result = [
    gutterView
  ];
  if (config2 && config2.fixed === false)
    result.push(unfixGutters.of(true));
  return result;
}
var gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.prevViewport = view.viewport;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
    this.gutters = view.state.facet(activeGutters).map((conf) => new SingleGutterView(view, conf));
    for (let gutter2 of this.gutters)
      this.dom.appendChild(gutter2.dom);
    this.fixed = !view.state.facet(unfixGutters);
    if (this.fixed) {
      this.dom.style.position = "sticky";
    }
    this.syncGutters(false);
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
  }
  update(update) {
    if (this.updateGutters(update)) {
      let vpA = this.prevViewport, vpB = update.view.viewport;
      let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
      this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
    }
    if (update.geometryChanged) {
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
    }
    if (this.view.state.facet(unfixGutters) != !this.fixed) {
      this.fixed = !this.fixed;
      this.dom.style.position = this.fixed ? "sticky" : "";
    }
    this.prevViewport = update.view.viewport;
  }
  syncGutters(detach) {
    let after = this.dom.nextSibling;
    if (detach)
      this.dom.remove();
    let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
    let classSet = [];
    let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
    for (let line3 of this.view.viewportLineBlocks) {
      if (classSet.length)
        classSet = [];
      if (Array.isArray(line3.type)) {
        let first = true;
        for (let b8 of line3.type) {
          if (b8.type == BlockType.Text && first) {
            advanceCursor(lineClasses, classSet, b8.from);
            for (let cx3 of contexts)
              cx3.line(this.view, b8, classSet);
            first = false;
          } else if (b8.widget) {
            for (let cx3 of contexts)
              cx3.widget(this.view, b8);
          }
        }
      } else if (line3.type == BlockType.Text) {
        advanceCursor(lineClasses, classSet, line3.from);
        for (let cx3 of contexts)
          cx3.line(this.view, line3, classSet);
      } else if (line3.widget) {
        for (let cx3 of contexts)
          cx3.widget(this.view, line3);
      }
    }
    for (let cx3 of contexts)
      cx3.finish();
    if (detach)
      this.view.scrollDOM.insertBefore(this.dom, after);
  }
  updateGutters(update) {
    let prev3 = update.startState.facet(activeGutters), cur2 = update.state.facet(activeGutters);
    let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
    if (prev3 == cur2) {
      for (let gutter2 of this.gutters)
        if (gutter2.update(update))
          change = true;
    } else {
      change = true;
      let gutters2 = [];
      for (let conf of cur2) {
        let known = prev3.indexOf(conf);
        if (known < 0) {
          gutters2.push(new SingleGutterView(this.view, conf));
        } else {
          this.gutters[known].update(update);
          gutters2.push(this.gutters[known]);
        }
      }
      for (let g8 of this.gutters) {
        g8.dom.remove();
        if (gutters2.indexOf(g8) < 0)
          g8.destroy();
      }
      for (let g8 of gutters2)
        this.dom.appendChild(g8.dom);
      this.gutters = gutters2;
    }
    return change;
  }
  destroy() {
    for (let view of this.gutters)
      view.destroy();
    this.dom.remove();
  }
}, {
  provide: (plugin2) => EditorView.scrollMargins.of((view) => {
    let value = view.plugin(plugin2);
    if (!value || value.gutters.length == 0 || !value.fixed)
      return null;
    return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth * view.scaleX } : { right: value.dom.offsetWidth * view.scaleX };
  })
});
function asArray2(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos)
      collect.push(cursor.value);
    cursor.next();
  }
}
var UpdateContext = class {
  constructor(gutter2, viewport, height) {
    this.gutter = gutter2;
    this.height = height;
    this.i = 0;
    this.cursor = RangeSet.iter(gutter2.markers, viewport.from);
  }
  addElement(view, block, markers) {
    let { gutter: gutter2 } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
    if (this.i == gutter2.elements.length) {
      let newElt = new GutterElement(view, height, above, markers);
      gutter2.elements.push(newElt);
      gutter2.dom.appendChild(newElt.dom);
    } else {
      gutter2.elements[this.i].update(view, height, above, markers);
    }
    this.height = block.bottom;
    this.i++;
  }
  line(view, line3, extraMarkers) {
    let localMarkers = [];
    advanceCursor(this.cursor, localMarkers, line3.from);
    if (extraMarkers.length)
      localMarkers = localMarkers.concat(extraMarkers);
    let forLine = this.gutter.config.lineMarker(view, line3, localMarkers);
    if (forLine)
      localMarkers.unshift(forLine);
    let gutter2 = this.gutter;
    if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
      return;
    this.addElement(view, line3, localMarkers);
  }
  widget(view, block) {
    let marker = this.gutter.config.widgetMarker(view, block.widget, block), markers = marker ? [marker] : null;
    for (let cls of view.state.facet(gutterWidgetClass)) {
      let marker2 = cls(view, block.widget, block);
      if (marker2)
        (markers || (markers = [])).push(marker2);
    }
    if (markers)
      this.addElement(view, block, markers);
  }
  finish() {
    let gutter2 = this.gutter;
    while (gutter2.elements.length > this.i) {
      let last = gutter2.elements.pop();
      gutter2.dom.removeChild(last.dom);
      last.destroy();
    }
  }
};
var SingleGutterView = class {
  constructor(view, config2) {
    this.view = view;
    this.config = config2;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let prop in config2.domEventHandlers) {
      this.dom.addEventListener(prop, (event) => {
        let target = event.target, y9;
        if (target != this.dom && this.dom.contains(target)) {
          while (target.parentNode != this.dom)
            target = target.parentNode;
          let rect = target.getBoundingClientRect();
          y9 = (rect.top + rect.bottom) / 2;
        } else {
          y9 = event.clientY;
        }
        let line3 = view.lineBlockAtHeight(y9 - view.documentTop);
        if (config2.domEventHandlers[prop](view, line3, event))
          event.preventDefault();
      });
    }
    this.markers = asArray2(config2.markers(view));
    if (config2.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config2.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  update(update) {
    let prevMarkers = this.markers;
    this.markers = asArray2(this.config.markers(update.view));
    if (this.spacer && this.config.updateSpacer) {
      let updated = this.config.updateSpacer(this.spacer.markers[0], update);
      if (updated != this.spacer.markers[0])
        this.spacer.update(update.view, 0, 0, [updated]);
    }
    let vp = update.view.viewport;
    return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
  }
  destroy() {
    for (let elt of this.elements)
      elt.destroy();
  }
};
var GutterElement = class {
  constructor(view, height, above, markers) {
    this.height = -1;
    this.above = 0;
    this.markers = [];
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutterElement";
    this.update(view, height, above, markers);
  }
  update(view, height, above, markers) {
    if (this.height != height) {
      this.height = height;
      this.dom.style.height = height + "px";
    }
    if (this.above != above)
      this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
    if (!sameMarkers(this.markers, markers))
      this.setMarkers(view, markers);
  }
  setMarkers(view, markers) {
    let cls = "cm-gutterElement", domPos = this.dom.firstChild;
    for (let iNew = 0, iOld = 0; ; ) {
      let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
      if (marker) {
        let c2 = marker.elementClass;
        if (c2)
          cls += " " + c2;
        for (let i3 = iOld; i3 < this.markers.length; i3++)
          if (this.markers[i3].compare(marker)) {
            skipTo = i3;
            matched = true;
            break;
          }
      } else {
        skipTo = this.markers.length;
      }
      while (iOld < skipTo) {
        let next3 = this.markers[iOld++];
        if (next3.toDOM) {
          next3.destroy(domPos);
          let after = domPos.nextSibling;
          domPos.remove();
          domPos = after;
        }
      }
      if (!marker)
        break;
      if (marker.toDOM) {
        if (matched)
          domPos = domPos.nextSibling;
        else
          this.dom.insertBefore(marker.toDOM(view), domPos);
      }
      if (matched)
        iOld++;
    }
    this.dom.className = cls;
    this.markers = markers;
  }
  destroy() {
    this.setMarkers(null, []);
  }
};
function sameMarkers(a7, b8) {
  if (a7.length != b8.length)
    return false;
  for (let i3 = 0; i3 < a7.length; i3++)
    if (!a7[i3].compare(b8[i3]))
      return false;
  return true;
}
var lineNumberMarkers = /* @__PURE__ */ Facet.define();
var lineNumberWidgetMarker = /* @__PURE__ */ Facet.define();
var lineNumberConfig = /* @__PURE__ */ Facet.define({
  combine(values) {
    return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
      domEventHandlers(a7, b8) {
        let result = Object.assign({}, a7);
        for (let event in b8) {
          let exists = result[event], add2 = b8[event];
          result[event] = exists ? (view, line3, event2) => exists(view, line3, event2) || add2(view, line3, event2) : add2;
        }
        return result;
      }
    });
  }
});
var NumberMarker = class extends GutterMarker {
  constructor(number2) {
    super();
    this.number = number2;
  }
  eq(other) {
    return this.number == other.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
};
function formatNumber(view, number2) {
  return view.state.facet(lineNumberConfig).formatNumber(number2, view.state);
}
var lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
  class: "cm-lineNumbers",
  renderEmptyElements: false,
  markers(view) {
    return view.state.facet(lineNumberMarkers);
  },
  lineMarker(view, line3, others) {
    if (others.some((m10) => m10.toDOM))
      return null;
    return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line3.from).number));
  },
  widgetMarker: (view, widget, block) => {
    for (let m10 of view.state.facet(lineNumberWidgetMarker)) {
      let result = m10(view, widget, block);
      if (result)
        return result;
    }
    return null;
  },
  lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
  initialSpacer(view) {
    return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
  },
  updateSpacer(spacer, update) {
    let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
    return max == spacer.number ? spacer : new NumberMarker(max);
  },
  domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
}));
function lineNumbers(config2 = {}) {
  return [
    lineNumberConfig.of(config2),
    gutters(),
    lineNumberGutter
  ];
}
function maxLineNumber(lines) {
  let last = 9;
  while (last < lines)
    last = last * 10 + 9;
  return last;
}
var activeLineGutterMarker = /* @__PURE__ */ new class extends GutterMarker {
  constructor() {
    super(...arguments);
    this.elementClass = "cm-activeLineGutter";
  }
}();
var activeLineGutterHighlighter = /* @__PURE__ */ gutterLineClass.compute(["selection"], (state) => {
  let marks2 = [], last = -1;
  for (let range of state.selection.ranges) {
    let linePos = state.doc.lineAt(range.head).from;
    if (linePos > last) {
      last = linePos;
      marks2.push(activeLineGutterMarker.range(linePos));
    }
  }
  return RangeSet.of(marks2);
});
function highlightActiveLineGutter() {
  return activeLineGutterHighlighter;
}

// https://esm.sh/v135/@lezer/common@1.2.3/es2020/common.development.mjs
var DefaultBufferLength = 1024;
var nextPropID = 0;
var Range2 = class {
  constructor(from3, to2) {
    this.from = from3;
    this.to = to2;
  }
};
var NodeProp = class {
  /**
  Create a new node prop type.
  */
  constructor(config2 = {}) {
    this.id = nextPropID++;
    this.perNode = !!config2.perNode;
    this.deserialize = config2.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(match3) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    if (typeof match3 != "function")
      match3 = NodeType.match(match3);
    return (type) => {
      let result = match3(type);
      return result === void 0 ? null : [this, result];
    };
  }
};
NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
NodeProp.isolate = new NodeProp({ deserialize: (value) => {
  if (value && value != "rtl" && value != "ltr" && value != "auto")
    throw new RangeError("Invalid value for isolate: " + value);
  return value || "auto";
} });
NodeProp.contextHash = new NodeProp({ perNode: true });
NodeProp.lookAhead = new NodeProp({ perNode: true });
NodeProp.mounted = new NodeProp({ perNode: true });
var MountedTree = class {
  constructor(tree, overlay, parser2) {
    this.tree = tree;
    this.overlay = overlay;
    this.parser = parser2;
  }
  /**
  @internal
  */
  static get(tree) {
    return tree && tree.props && tree.props[NodeProp.mounted.id];
  }
};
var noProps = /* @__PURE__ */ Object.create(null);
var NodeType = class _NodeType {
  /**
  @internal
  */
  constructor(name2, props, id2, flags = 0) {
    this.name = name2;
    this.props = props;
    this.id = id2;
    this.flags = flags;
  }
  /**
  Define a node type.
  */
  static define(spec) {
    let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
    let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
    let type = new _NodeType(spec.name || "", props, spec.id, flags);
    if (spec.props)
      for (let src of spec.props) {
        if (!Array.isArray(src))
          src = src(type);
        if (src) {
          if (src[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          props[src[0].id] = src[1];
        }
      }
    return type;
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(prop) {
    return this.props[prop.id];
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0;
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0;
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(name2) {
    if (typeof name2 == "string") {
      if (this.name == name2)
        return true;
      let group = this.prop(NodeProp.group);
      return group ? group.indexOf(name2) > -1 : false;
    }
    return this.id == name2;
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(map) {
    let direct = /* @__PURE__ */ Object.create(null);
    for (let prop in map)
      for (let name2 of prop.split(" "))
        direct[name2] = map[prop];
    return (node3) => {
      for (let groups = node3.prop(NodeProp.group), i3 = -1; i3 < (groups ? groups.length : 0); i3++) {
        let found = direct[i3 < 0 ? node3.name : groups[i3]];
        if (found)
          return found;
      }
    };
  }
};
NodeType.none = new NodeType(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
);
var NodeSet = class _NodeSet {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(types2) {
    this.types = types2;
    for (let i3 = 0; i3 < types2.length; i3++)
      if (types2[i3].id != i3)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...props) {
    let newTypes = [];
    for (let type of this.types) {
      let newProps = null;
      for (let source of props) {
        let add2 = source(type);
        if (add2) {
          if (!newProps)
            newProps = Object.assign({}, type.props);
          newProps[add2[0].id] = add2[1];
        }
      }
      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
    }
    return new _NodeSet(newTypes);
  }
};
var CachedNode = /* @__PURE__ */ new WeakMap();
var CachedInnerNode = /* @__PURE__ */ new WeakMap();
var IterMode;
(function(IterMode2) {
  IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
  IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
  IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
  IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
})(IterMode || (IterMode = {}));
var Tree = class _Tree {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(type, children, positions, length3, props) {
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length3;
    this.props = null;
    if (props && props.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [prop, value] of props)
        this.props[typeof prop == "number" ? prop : prop.id] = value;
    }
  }
  /**
  @internal
  */
  toString() {
    let mounted = MountedTree.get(this);
    if (mounted && !mounted.overlay)
      return mounted.tree.toString();
    let children = "";
    for (let ch of this.children) {
      let str = ch.toString();
      if (str) {
        if (children)
          children += ",";
        children += str;
      }
    }
    return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(mode = 0) {
    return new TreeCursor(this.topNode, mode);
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(pos, side = 0, mode = 0) {
    let scope = CachedNode.get(this) || this.topNode;
    let cursor = new TreeCursor(scope);
    cursor.moveTo(pos, side);
    CachedNode.set(this, cursor._tree);
    return cursor;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new TreeNode(this, 0, 0, null);
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(pos, side = 0) {
    let node3 = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
    CachedNode.set(this, node3);
    return node3;
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(pos, side = 0) {
    let node3 = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
    CachedInnerNode.set(this, node3);
    return node3;
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(pos, side = 0) {
    return stackIterator(this, pos, side);
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(spec) {
    let { enter, leave, from: from3 = 0, to: to2 = this.length } = spec;
    let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
    for (let c2 = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
      let entered = false;
      if (c2.from <= to2 && c2.to >= from3 && (!anon && c2.type.isAnonymous || enter(c2) !== false)) {
        if (c2.firstChild())
          continue;
        entered = true;
      }
      for (; ; ) {
        if (entered && leave && (anon || !c2.type.isAnonymous))
          leave(c2);
        if (c2.nextSibling())
          break;
        if (!c2.parent())
          return;
        entered = true;
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(prop) {
    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let result = [];
    if (this.props)
      for (let id2 in this.props)
        result.push([+id2, this.props[id2]]);
    return result;
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(config2 = {}) {
    return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length3) => new _Tree(this.type, children, positions, length3, this.propValues), config2.makeTree || ((children, positions, length3) => new _Tree(NodeType.none, children, positions, length3)));
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(data) {
    return buildTree(data);
  }
};
Tree.empty = new Tree(NodeType.none, [], [], 0);
var FlatBufferCursor = class _FlatBufferCursor {
  constructor(buffer, index) {
    this.buffer = buffer;
    this.index = index;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new _FlatBufferCursor(this.buffer, this.index);
  }
};
var TreeBuffer = class _TreeBuffer {
  /**
  Create a tree buffer.
  */
  constructor(buffer, length3, set) {
    this.buffer = buffer;
    this.length = length3;
    this.set = set;
  }
  /**
  @internal
  */
  get type() {
    return NodeType.none;
  }
  /**
  @internal
  */
  toString() {
    let result = [];
    for (let index = 0; index < this.buffer.length; ) {
      result.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result.join(",");
  }
  /**
  @internal
  */
  childString(index) {
    let id2 = this.buffer[index], endIndex = this.buffer[index + 3];
    let type = this.set.types[id2], result = type.name;
    if (/\W/.test(result) && !type.isError)
      result = JSON.stringify(result);
    index += 4;
    if (endIndex == index)
      return result;
    let children = [];
    while (index < endIndex) {
      children.push(this.childString(index));
      index = this.buffer[index + 3];
    }
    return result + "(" + children.join(",") + ")";
  }
  /**
  @internal
  */
  findChild(startIndex, endIndex, dir, pos, side) {
    let { buffer } = this, pick = -1;
    for (let i3 = startIndex; i3 != endIndex; i3 = buffer[i3 + 3]) {
      if (checkSide(side, pos, buffer[i3 + 1], buffer[i3 + 2])) {
        pick = i3;
        if (dir > 0)
          break;
      }
    }
    return pick;
  }
  /**
  @internal
  */
  slice(startI, endI, from3) {
    let b8 = this.buffer;
    let copy3 = new Uint16Array(endI - startI), len = 0;
    for (let i3 = startI, j11 = 0; i3 < endI; ) {
      copy3[j11++] = b8[i3++];
      copy3[j11++] = b8[i3++] - from3;
      let to2 = copy3[j11++] = b8[i3++] - from3;
      copy3[j11++] = b8[i3++] - startI;
      len = Math.max(len, to2);
    }
    return new _TreeBuffer(copy3, len, this.set);
  }
};
function checkSide(side, pos, from3, to2) {
  switch (side) {
    case -2:
      return from3 < pos;
    case -1:
      return to2 >= pos && from3 < pos;
    case 0:
      return from3 < pos && to2 > pos;
    case 1:
      return from3 <= pos && to2 > pos;
    case 2:
      return to2 > pos;
    case 4:
      return true;
  }
}
function resolveNode(node3, pos, side, overlays) {
  var _a2;
  while (node3.from == node3.to || (side < 1 ? node3.from >= pos : node3.from > pos) || (side > -1 ? node3.to <= pos : node3.to < pos)) {
    let parent = !overlays && node3 instanceof TreeNode && node3.index < 0 ? null : node3.parent;
    if (!parent)
      return node3;
    node3 = parent;
  }
  let mode = overlays ? 0 : IterMode.IgnoreOverlays;
  if (overlays)
    for (let scan = node3, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
      if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
        node3 = parent;
    }
  for (; ; ) {
    let inner = node3.enter(pos, side, mode);
    if (!inner)
      return node3;
    node3 = inner;
  }
}
var BaseNode = class {
  cursor(mode = 0) {
    return new TreeCursor(this, mode);
  }
  getChild(type, before = null, after = null) {
    let r2 = getChildren(this, type, before, after);
    return r2.length ? r2[0] : null;
  }
  getChildren(type, before = null, after = null) {
    return getChildren(this, type, before, after);
  }
  resolve(pos, side = 0) {
    return resolveNode(this, pos, side, false);
  }
  resolveInner(pos, side = 0) {
    return resolveNode(this, pos, side, true);
  }
  matchContext(context) {
    return matchNodeContext(this.parent, context);
  }
  enterUnfinishedNodesBefore(pos) {
    let scan = this.childBefore(pos), node3 = this;
    while (scan) {
      let last = scan.lastChild;
      if (!last || last.to != scan.to)
        break;
      if (last.type.isError && last.from == last.to) {
        node3 = scan;
        scan = last.prevSibling;
      } else {
        scan = last;
      }
    }
    return node3;
  }
  get node() {
    return this;
  }
  get next() {
    return this.parent;
  }
};
var TreeNode = class _TreeNode extends BaseNode {
  constructor(_tree, from3, index, _parent) {
    super();
    this._tree = _tree;
    this.from = from3;
    this.index = index;
    this._parent = _parent;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(i3, dir, pos, side, mode = 0) {
    for (let parent = this; ; ) {
      for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i3 != e; i3 += dir) {
        let next3 = children[i3], start = positions[i3] + parent.from;
        if (!checkSide(side, pos, start, start + next3.length))
          continue;
        if (next3 instanceof TreeBuffer) {
          if (mode & IterMode.ExcludeBuffers)
            continue;
          let index = next3.findChild(0, next3.buffer.length, dir, pos - start, side);
          if (index > -1)
            return new BufferNode(new BufferContext(parent, next3, i3, start), null, index);
        } else if (mode & IterMode.IncludeAnonymous || (!next3.type.isAnonymous || hasChild(next3))) {
          let mounted;
          if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next3)) && !mounted.overlay)
            return new _TreeNode(mounted.tree, start, i3, parent);
          let inner = new _TreeNode(next3, start, i3, parent);
          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next3.children.length - 1 : 0, dir, pos, side);
        }
      }
      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
        return null;
      if (parent.index >= 0)
        i3 = parent.index + dir;
      else
        i3 = dir < 0 ? -1 : parent._parent._tree.children.length;
      parent = parent._parent;
      if (!parent)
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.nextChild(
      0,
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    let mounted;
    if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
      let rPos = pos - this.from;
      for (let { from: from3, to: to2 } of mounted.overlay) {
        if ((side > 0 ? from3 <= rPos : from3 < rPos) && (side < 0 ? to2 >= rPos : to2 > rPos))
          return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
      }
    }
    return this.nextChild(0, 1, pos, side, mode);
  }
  nextSignificantParent() {
    let val = this;
    while (val.type.isAnonymous && val._parent)
      val = val._parent;
    return val;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    ) : null;
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString();
  }
};
function getChildren(node3, type, before, after) {
  let cur2 = node3.cursor(), result = [];
  if (!cur2.firstChild())
    return result;
  if (before != null)
    for (let found = false; !found; ) {
      found = cur2.type.is(before);
      if (!cur2.nextSibling())
        return result;
    }
  for (; ; ) {
    if (after != null && cur2.type.is(after))
      return result;
    if (cur2.type.is(type))
      result.push(cur2.node);
    if (!cur2.nextSibling())
      return after == null ? result : [];
  }
}
function matchNodeContext(node3, context, i3 = context.length - 1) {
  for (let p8 = node3; i3 >= 0; p8 = p8.parent) {
    if (!p8)
      return false;
    if (!p8.type.isAnonymous) {
      if (context[i3] && context[i3] != p8.name)
        return false;
      i3--;
    }
  }
  return true;
}
var BufferContext = class {
  constructor(parent, buffer, index, start) {
    this.parent = parent;
    this.buffer = buffer;
    this.index = index;
    this.start = start;
  }
};
var BufferNode = class _BufferNode extends BaseNode {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(context, _parent, index) {
    super();
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }
  child(dir, pos, side) {
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
    return index < 0 ? null : new _BufferNode(this.context, this, index);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  childAfter(pos) {
    return this.child(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  childBefore(pos) {
    return this.child(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  enter(pos, side, mode = 0) {
    if (mode & IterMode.ExcludeBuffers)
      return null;
    let { buffer } = this.context;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
    return index < 0 ? null : new _BufferNode(this.context, this, index);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(dir) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + dir,
      dir,
      0,
      4
      /* Side.DontCare */
    );
  }
  get nextSibling() {
    let { buffer } = this.context;
    let after = buffer.buffer[this.index + 3];
    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
      return new _BufferNode(this.context, this._parent, after);
    return this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer } = this.context;
    let parentStart = this._parent ? this._parent.index + 4 : 0;
    if (this.index == parentStart)
      return this.externalSibling(-1);
    return new _BufferNode(this.context, this._parent, buffer.findChild(
      parentStart,
      this.index,
      -1,
      0,
      4
      /* Side.DontCare */
    ));
  }
  get tree() {
    return null;
  }
  toTree() {
    let children = [], positions = [];
    let { buffer } = this.context;
    let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
    if (endI > startI) {
      let from3 = buffer.buffer[this.index + 1];
      children.push(buffer.slice(startI, endI, from3));
      positions.push(0);
    }
    return new Tree(this.type, children, positions, this.to - this.from);
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index);
  }
};
function iterStack(heads) {
  if (!heads.length)
    return null;
  let pick = 0, picked = heads[0];
  for (let i3 = 1; i3 < heads.length; i3++) {
    let node3 = heads[i3];
    if (node3.from > picked.from || node3.to < picked.to) {
      picked = node3;
      pick = i3;
    }
  }
  let next3 = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
  let newHeads = heads.slice();
  if (next3)
    newHeads[pick] = next3;
  else
    newHeads.splice(pick, 1);
  return new StackIterator(newHeads, picked);
}
var StackIterator = class {
  constructor(heads, node3) {
    this.heads = heads;
    this.node = node3;
  }
  get next() {
    return iterStack(this.heads);
  }
};
function stackIterator(tree, pos, side) {
  let inner = tree.resolveInner(pos, side), layers = null;
  for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
    if (scan.index < 0) {
      let parent = scan.parent;
      (layers || (layers = [inner])).push(parent.resolve(pos, side));
      scan = parent;
    } else {
      let mount = MountedTree.get(scan.tree);
      if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
        let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
        (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
      }
    }
  }
  return layers ? iterStack(layers) : inner;
}
var TreeCursor = class {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name;
  }
  /**
  @internal
  */
  constructor(node3, mode = 0) {
    this.mode = mode;
    this.buffer = null;
    this.stack = [];
    this.index = 0;
    this.bufferNode = null;
    if (node3 instanceof TreeNode) {
      this.yieldNode(node3);
    } else {
      this._tree = node3.context.parent;
      this.buffer = node3.context;
      for (let n3 = node3._parent; n3; n3 = n3._parent)
        this.stack.unshift(n3.index);
      this.bufferNode = node3;
      this.yieldBuf(node3.index);
    }
  }
  yieldNode(node3) {
    if (!node3)
      return false;
    this._tree = node3;
    this.type = node3.type;
    this.from = node3.from;
    this.to = node3.to;
    return true;
  }
  yieldBuf(index, type) {
    this.index = index;
    let { start, buffer } = this.buffer;
    this.type = type || buffer.set.types[buffer.buffer[index]];
    this.from = start + buffer.buffer[index + 1];
    this.to = start + buffer.buffer[index + 2];
    return true;
  }
  /**
  @internal
  */
  yield(node3) {
    if (!node3)
      return false;
    if (node3 instanceof TreeNode) {
      this.buffer = null;
      return this.yieldNode(node3);
    }
    this.buffer = node3.context;
    return this.yieldBuf(node3.index, node3.type);
  }
  /**
  @internal
  */
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  /**
  @internal
  */
  enterChild(dir, pos, side) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
    let { buffer } = this.buffer;
    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
    if (index < 0)
      return false;
    this.stack.push(this.index);
    return this.yieldBuf(index);
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    );
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(pos) {
    return this.enterChild(
      1,
      pos,
      2
      /* Side.After */
    );
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(pos) {
    return this.enterChild(
      -1,
      pos,
      -2
      /* Side.Before */
    );
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(pos, side, mode = this.mode) {
    if (!this.buffer)
      return this.yield(this._tree.enter(pos, side, mode));
    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    this.buffer = null;
    return this.yieldNode(parent);
  }
  /**
  @internal
  */
  sibling(dir) {
    if (!this.buffer)
      return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
    let { buffer } = this.buffer, d5 = this.stack.length - 1;
    if (dir < 0) {
      let parentStart = d5 < 0 ? 0 : this.stack[d5] + 4;
      if (this.index != parentStart)
        return this.yieldBuf(buffer.findChild(
          parentStart,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
    } else {
      let after = buffer.buffer[this.index + 3];
      if (after < (d5 < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d5] + 3]))
        return this.yieldBuf(after);
    }
    return d5 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1);
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(dir) {
    let index, parent, { buffer } = this;
    if (buffer) {
      if (dir > 0) {
        if (this.index < buffer.buffer.buffer.length)
          return false;
      } else {
        for (let i3 = 0; i3 < this.index; i3++)
          if (buffer.buffer.buffer[i3 + 3] < this.index)
            return false;
      }
      ({ index, parent } = buffer);
    } else {
      ({ index, _parent: parent } = this._tree);
    }
    for (; parent; { index, _parent: parent } = parent) {
      if (index > -1)
        for (let i3 = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i3 != e; i3 += dir) {
          let child = parent._tree.children[i3];
          if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
            return false;
        }
    }
    return true;
  }
  move(dir, enter) {
    if (enter && this.enterChild(
      dir,
      0,
      4
      /* Side.DontCare */
    ))
      return true;
    for (; ; ) {
      if (this.sibling(dir))
        return true;
      if (this.atLastNode(dir) || !this.parent())
        return false;
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(enter = true) {
    return this.move(1, enter);
  }
  /**
  Move to the next node in a last-to-first pre-order traversal. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(enter = true) {
    return this.move(-1, enter);
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(pos, side = 0) {
    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
      if (!this.parent())
        break;
    while (this.enterChild(1, pos, side)) {
    }
    return this;
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer)
      return this._tree;
    let cache3 = this.bufferNode, result = null, depth = 0;
    if (cache3 && cache3.context == this.buffer) {
      scan:
        for (let index = this.index, d5 = this.stack.length; d5 >= 0; ) {
          for (let c2 = cache3; c2; c2 = c2._parent)
            if (c2.index == index) {
              if (index == this.index)
                return c2;
              result = c2;
              depth = d5 + 1;
              break scan;
            }
          index = this.stack[--d5];
        }
    }
    for (let i3 = depth; i3 < this.stack.length; i3++)
      result = new BufferNode(this.buffer, result, this.stack[i3]);
    return this.bufferNode = new BufferNode(this.buffer, result, this.index);
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(enter, leave) {
    for (let depth = 0; ; ) {
      let mustLeave = false;
      if (this.type.isAnonymous || enter(this) !== false) {
        if (this.firstChild()) {
          depth++;
          continue;
        }
        if (!this.type.isAnonymous)
          mustLeave = true;
      }
      for (; ; ) {
        if (mustLeave && leave)
          leave(this);
        mustLeave = this.type.isAnonymous;
        if (!depth)
          return;
        if (this.nextSibling())
          break;
        this.parent();
        depth--;
        mustLeave = true;
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(context) {
    if (!this.buffer)
      return matchNodeContext(this.node.parent, context);
    let { buffer } = this.buffer, { types: types2 } = buffer.set;
    for (let i3 = context.length - 1, d5 = this.stack.length - 1; i3 >= 0; d5--) {
      if (d5 < 0)
        return matchNodeContext(this._tree, context, i3);
      let type = types2[buffer.buffer[this.stack[d5]]];
      if (!type.isAnonymous) {
        if (context[i3] && context[i3] != type.name)
          return false;
        i3--;
      }
    }
    return true;
  }
};
function hasChild(tree) {
  return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
}
function buildTree(data) {
  var _a2;
  let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  let types2 = nodeSet.types;
  let contextHash = 0, lookAhead = 0;
  function takeNode(parentStart, minPos, children2, positions2, inRepeat, depth) {
    let { id: id2, start, end, size } = cursor;
    let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
    while (size < 0) {
      cursor.next();
      if (size == -1) {
        let node22 = reused[id2];
        children2.push(node22);
        positions2.push(start - parentStart);
        return;
      } else if (size == -3) {
        contextHash = id2;
        return;
      } else if (size == -4) {
        lookAhead = id2;
        return;
      } else {
        throw new RangeError(`Unrecognized record size: ${size}`);
      }
    }
    let type = types2[id2], node3, buffer2;
    let startPos = start - parentStart;
    if (end - start <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
      let data2 = new Uint16Array(buffer2.size - buffer2.skip);
      let endPos = cursor.pos - buffer2.size, index = data2.length;
      while (cursor.pos > endPos)
        index = copyToBuffer(buffer2.start, data2, index);
      node3 = new TreeBuffer(data2, end - buffer2.start, nodeSet);
      startPos = buffer2.start - parentStart;
    } else {
      let endPos = cursor.pos - size;
      cursor.next();
      let localChildren = [], localPositions = [];
      let localInRepeat = id2 >= minRepeatType ? id2 : -1;
      let lastGroup = 0, lastEnd = end;
      while (cursor.pos > endPos) {
        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
          if (cursor.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor.end;
          }
          cursor.next();
        } else if (depth > 2500) {
          takeFlatNode(start, endPos, localChildren, localPositions);
        } else {
          takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        let make = makeBalanced(type, contextAtStart);
        node3 = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
      } else {
        node3 = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
      }
    }
    children2.push(node3);
    positions2.push(startPos);
  }
  function takeFlatNode(parentStart, minPos, children2, positions2) {
    let nodes = [];
    let nodeCount = 0, stopAt = -1;
    while (cursor.pos > minPos) {
      let { id: id2, start, end, size } = cursor;
      if (size > 4) {
        cursor.next();
      } else if (stopAt > -1 && start < stopAt) {
        break;
      } else {
        if (stopAt < 0)
          stopAt = end - maxBufferLength;
        nodes.push(id2, start, end);
        nodeCount++;
        cursor.next();
      }
    }
    if (nodeCount) {
      let buffer2 = new Uint16Array(nodeCount * 4);
      let start = nodes[nodes.length - 2];
      for (let i3 = nodes.length - 3, j11 = 0; i3 >= 0; i3 -= 3) {
        buffer2[j11++] = nodes[i3];
        buffer2[j11++] = nodes[i3 + 1] - start;
        buffer2[j11++] = nodes[i3 + 2] - start;
        buffer2[j11++] = j11;
      }
      children2.push(new TreeBuffer(buffer2, nodes[2] - start, nodeSet));
      positions2.push(start - parentStart);
    }
  }
  function makeBalanced(type, contextHash2) {
    return (children2, positions2, length22) => {
      let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
      if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
        if (!lastI && last.type == type && last.length == length22)
          return last;
        if (lookAheadProp = last.prop(NodeProp.lookAhead))
          lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
      }
      return makeTree(type, children2, positions2, length22, lookAhead2, contextHash2);
    };
  }
  function makeRepeatLeaf(children2, positions2, base2, i3, from3, to2, type, lookAhead2, contextHash2) {
    let localChildren = [], localPositions = [];
    while (children2.length > i3) {
      localChildren.push(children2.pop());
      localPositions.push(positions2.pop() + base2 - from3);
    }
    children2.push(makeTree(nodeSet.types[type], localChildren, localPositions, to2 - from3, lookAhead2 - to2, contextHash2));
    positions2.push(from3 - base2);
  }
  function makeTree(type, children2, positions2, length22, lookAhead2, contextHash2, props) {
    if (contextHash2) {
      let pair2 = [NodeProp.contextHash, contextHash2];
      props = props ? [pair2].concat(props) : [pair2];
    }
    if (lookAhead2 > 25) {
      let pair2 = [NodeProp.lookAhead, lookAhead2];
      props = props ? [pair2].concat(props) : [pair2];
    }
    return new Tree(type, children2, positions2, length22, props);
  }
  function findBufferSize(maxSize, inRepeat) {
    let fork = cursor.fork();
    let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
    let result = { size: 0, start: 0, skip: 0 };
    scan:
      for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
        let nodeSize2 = fork.size;
        if (fork.id == inRepeat && nodeSize2 >= 0) {
          result.size = size;
          result.start = start;
          result.skip = skip;
          skip += 4;
          size += 4;
          fork.next();
          continue;
        }
        let startPos = fork.pos - nodeSize2;
        if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
          break;
        let localSkipped = fork.id >= minRepeatType ? 4 : 0;
        let nodeStart2 = fork.start;
        fork.next();
        while (fork.pos > startPos) {
          if (fork.size < 0) {
            if (fork.size == -3)
              localSkipped += 4;
            else
              break scan;
          } else if (fork.id >= minRepeatType) {
            localSkipped += 4;
          }
          fork.next();
        }
        start = nodeStart2;
        size += nodeSize2;
        skip += localSkipped;
      }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }
    return result.size > 4 ? result : void 0;
  }
  function copyToBuffer(bufferStart, buffer2, index) {
    let { id: id2, start, end, size } = cursor;
    cursor.next();
    if (size >= 0 && id2 < minRepeatType) {
      let startIndex = index;
      if (size > 4) {
        let endPos = cursor.pos - (size - 4);
        while (cursor.pos > endPos)
          index = copyToBuffer(bufferStart, buffer2, index);
      }
      buffer2[--index] = startIndex;
      buffer2[--index] = end - bufferStart;
      buffer2[--index] = start - bufferStart;
      buffer2[--index] = id2;
    } else if (size == -3) {
      contextHash = id2;
    } else if (size == -4) {
      lookAhead = id2;
    }
    return index;
  }
  let children = [], positions = [];
  while (cursor.pos > 0)
    takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
  let length3 = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types2[data.topID], children.reverse(), positions.reverse(), length3);
}
var nodeSizeCache = /* @__PURE__ */ new WeakMap();
function nodeSize(balanceType, node3) {
  if (!balanceType.isAnonymous || node3 instanceof TreeBuffer || node3.type != balanceType)
    return 1;
  let size = nodeSizeCache.get(node3);
  if (size == null) {
    size = 1;
    for (let child of node3.children) {
      if (child.type != balanceType || !(child instanceof Tree)) {
        size = 1;
        break;
      }
      size += nodeSize(balanceType, child);
    }
    nodeSizeCache.set(node3, size);
  }
  return size;
}
function balanceRange(balanceType, children, positions, from3, to2, start, length3, mkTop, mkTree) {
  let total = 0;
  for (let i3 = from3; i3 < to2; i3++)
    total += nodeSize(balanceType, children[i3]);
  let maxChild = Math.ceil(
    total * 1.5 / 8
    /* Balance.BranchFactor */
  );
  let localChildren = [], localPositions = [];
  function divide(children2, positions2, from22, to22, offset) {
    for (let i3 = from22; i3 < to22; ) {
      let groupFrom = i3, groupStart = positions2[i3], groupSize = nodeSize(balanceType, children2[i3]);
      i3++;
      for (; i3 < to22; i3++) {
        let nextSize = nodeSize(balanceType, children2[i3]);
        if (groupSize + nextSize >= maxChild)
          break;
        groupSize += nextSize;
      }
      if (i3 == groupFrom + 1) {
        if (groupSize > maxChild) {
          let only = children2[groupFrom];
          divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
          continue;
        }
        localChildren.push(children2[groupFrom]);
      } else {
        let length22 = positions2[i3 - 1] + children2[i3 - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i3, groupStart, length22, null, mkTree));
      }
      localPositions.push(groupStart + offset - start);
    }
  }
  divide(children, positions, from3, to2, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length3);
}
var NodeWeakMap = class {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
  }
  setBuffer(buffer, index, value) {
    let inner = this.map.get(buffer);
    if (!inner)
      this.map.set(buffer, inner = /* @__PURE__ */ new Map());
    inner.set(index, value);
  }
  getBuffer(buffer, index) {
    let inner = this.map.get(buffer);
    return inner && inner.get(index);
  }
  /**
  Set the value for this syntax node.
  */
  set(node3, value) {
    if (node3 instanceof BufferNode)
      this.setBuffer(node3.context.buffer, node3.index, value);
    else if (node3 instanceof TreeNode)
      this.map.set(node3.tree, value);
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(node3) {
    return node3 instanceof BufferNode ? this.getBuffer(node3.context.buffer, node3.index) : node3 instanceof TreeNode ? this.map.get(node3.tree) : void 0;
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(cursor, value) {
    if (cursor.buffer)
      this.setBuffer(cursor.buffer.buffer, cursor.index, value);
    else
      this.map.set(cursor.tree, value);
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(cursor) {
    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
  }
};
var TreeFragment = class _TreeFragment {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(from3, to2, tree, offset, openStart = false, openEnd = false) {
    this.from = from3;
    this.to = to2;
    this.tree = tree;
    this.offset = offset;
    this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0;
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0;
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(tree, fragments = [], partial = false) {
    let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
    for (let f4 of fragments)
      if (f4.to > tree.length)
        result.push(f4);
    return result;
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(fragments, changes, minGap = 128) {
    if (!changes.length)
      return fragments;
    let result = [];
    let fI = 1, nextF = fragments.length ? fragments[0] : null;
    for (let cI = 0, pos = 0, off = 0; ; cI++) {
      let nextC = cI < changes.length ? changes[cI] : null;
      let nextPos = nextC ? nextC.fromA : 1e9;
      if (nextPos - pos >= minGap)
        while (nextF && nextF.from < nextPos) {
          let cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
          }
          if (cut)
            result.push(cut);
          if (nextF.to > nextPos)
            break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
      if (!nextC)
        break;
      pos = nextC.toA;
      off = nextC.toA - nextC.toB;
    }
    return result;
  }
};
var Parser = class {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(input, fragments, ranges) {
    if (typeof input == "string")
      input = new StringInput(input);
    ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r2) => new Range2(r2.from, r2.to)) : [new Range2(0, 0)];
    return this.createParse(input, fragments || [], ranges);
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(input, fragments, ranges) {
    let parse3 = this.startParse(input, fragments, ranges);
    for (; ; ) {
      let done = parse3.advance();
      if (done)
        return done;
    }
  }
};
var StringInput = class {
  constructor(string2) {
    this.string = string2;
  }
  get length() {
    return this.string.length;
  }
  chunk(from3) {
    return this.string.slice(from3);
  }
  get lineChunks() {
    return false;
  }
  read(from3, to2) {
    return this.string.slice(from3, to2);
  }
};
var stoppedInner = new NodeProp({ perNode: true });

// https://esm.sh/v135/@lezer/highlight@1.2.1/es2020/highlight.development.mjs
var nextTagID = 0;
var Tag = class _Tag {
  /**
  @internal
  */
  constructor(name2, set, base2, modified) {
    this.name = name2;
    this.set = set;
    this.base = base2;
    this.modified = modified;
    this.id = nextTagID++;
  }
  toString() {
    let { name: name2 } = this;
    for (let mod of this.modified)
      if (mod.name)
        name2 = `${mod.name}(${name2})`;
    return name2;
  }
  static define(nameOrParent, parent) {
    let name2 = typeof nameOrParent == "string" ? nameOrParent : "?";
    if (nameOrParent instanceof _Tag)
      parent = nameOrParent;
    if (parent === null || parent === void 0 ? void 0 : parent.base)
      throw new Error("Can not derive from a modified tag");
    let tag = new _Tag(name2, [], null, []);
    tag.set.push(tag);
    if (parent)
      for (let t22 of parent.set)
        tag.set.push(t22);
    return tag;
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier(name2) {
    let mod = new Modifier(name2);
    return (tag) => {
      if (tag.modified.indexOf(mod) > -1)
        return tag;
      return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a7, b8) => a7.id - b8.id));
    };
  }
};
var nextModifierID = 0;
var Modifier = class _Modifier {
  constructor(name2) {
    this.name = name2;
    this.instances = [];
    this.id = nextModifierID++;
  }
  static get(base2, mods) {
    if (!mods.length)
      return base2;
    let exists = mods[0].instances.find((t22) => t22.base == base2 && sameArray2(mods, t22.modified));
    if (exists)
      return exists;
    let set = [], tag = new Tag(base2.name, set, base2, mods);
    for (let m10 of mods)
      m10.instances.push(tag);
    let configs = powerSet(mods);
    for (let parent of base2.set)
      if (!parent.modified.length)
        for (let config2 of configs)
          set.push(_Modifier.get(parent, config2));
    return tag;
  }
};
function sameArray2(a7, b8) {
  return a7.length == b8.length && a7.every((x7, i3) => x7 == b8[i3]);
}
function powerSet(array) {
  let sets = [[]];
  for (let i3 = 0; i3 < array.length; i3++) {
    for (let j11 = 0, e = sets.length; j11 < e; j11++) {
      sets.push(sets[j11].concat(array[i3]));
    }
  }
  return sets.sort((a7, b8) => b8.length - a7.length);
}
function styleTags(spec) {
  let byName = /* @__PURE__ */ Object.create(null);
  for (let prop in spec) {
    let tags2 = spec[prop];
    if (!Array.isArray(tags2))
      tags2 = [tags2];
    for (let part of prop.split(" "))
      if (part) {
        let pieces = [], mode = 2, rest = part;
        for (let pos = 0; ; ) {
          if (rest == "..." && pos > 0 && pos + 3 == part.length) {
            mode = 1;
            break;
          }
          let m10 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
          if (!m10)
            throw new RangeError("Invalid path: " + part);
          pieces.push(m10[0] == "*" ? "" : m10[0][0] == '"' ? JSON.parse(m10[0]) : m10[0]);
          pos += m10[0].length;
          if (pos == part.length)
            break;
          let next3 = part[pos++];
          if (pos == part.length && next3 == "!") {
            mode = 0;
            break;
          }
          if (next3 != "/")
            throw new RangeError("Invalid path: " + part);
          rest = part.slice(pos);
        }
        let last = pieces.length - 1, inner = pieces[last];
        if (!inner)
          throw new RangeError("Invalid path: " + part);
        let rule = new Rule(tags2, mode, last > 0 ? pieces.slice(0, last) : null);
        byName[inner] = rule.sort(byName[inner]);
      }
  }
  return ruleNodeProp.add(byName);
}
var ruleNodeProp = new NodeProp();
var Rule = class {
  constructor(tags2, mode, context, next3) {
    this.tags = tags2;
    this.mode = mode;
    this.context = context;
    this.next = next3;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(other) {
    if (!other || other.depth < this.depth) {
      this.next = other;
      return this;
    }
    other.next = this.sort(other.next);
    return other;
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
};
Rule.empty = new Rule([], 2, null);
function tagHighlighter(tags2, options) {
  let map = /* @__PURE__ */ Object.create(null);
  for (let style of tags2) {
    if (!Array.isArray(style.tag))
      map[style.tag.id] = style.class;
    else
      for (let tag of style.tag)
        map[tag.id] = style.class;
  }
  let { scope, all = null } = options || {};
  return {
    style: (tags3) => {
      let cls = all;
      for (let tag of tags3) {
        for (let sub of tag.set) {
          let tagClass = map[sub.id];
          if (tagClass) {
            cls = cls ? cls + " " + tagClass : tagClass;
            break;
          }
        }
      }
      return cls;
    },
    scope
  };
}
function highlightTags(highlighters, tags2) {
  let result = null;
  for (let highlighter of highlighters) {
    let value = highlighter.style(tags2);
    if (value)
      result = result ? result + " " + value : value;
  }
  return result;
}
function highlightTree(tree, highlighter, putStyle, from3 = 0, to2 = tree.length) {
  let builder = new HighlightBuilder(from3, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from3, to2, "", builder.highlighters);
  builder.flush(to2);
}
var HighlightBuilder = class {
  constructor(at4, highlighters, span) {
    this.at = at4;
    this.highlighters = highlighters;
    this.span = span;
    this.class = "";
  }
  startSpan(at4, cls) {
    if (cls != this.class) {
      this.flush(at4);
      if (at4 > this.at)
        this.at = at4;
      this.class = cls;
    }
  }
  flush(to2) {
    if (to2 > this.at && this.class)
      this.span(this.at, to2, this.class);
  }
  highlightRange(cursor, from3, to2, inheritedClass, highlighters) {
    let { type, from: start, to: end } = cursor;
    if (start >= to2 || end <= from3)
      return;
    if (type.isTop)
      highlighters = this.highlighters.filter((h6) => !h6.scope || h6.scope(type));
    let cls = inheritedClass;
    let rule = getStyleTags(cursor) || Rule.empty;
    let tagCls = highlightTags(highlighters, rule.tags);
    if (tagCls) {
      if (cls)
        cls += " ";
      cls += tagCls;
      if (rule.mode == 1)
        inheritedClass += (inheritedClass ? " " : "") + tagCls;
    }
    this.startSpan(Math.max(from3, start), cls);
    if (rule.opaque)
      return;
    let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
    if (mounted && mounted.overlay) {
      let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
      let innerHighlighters = this.highlighters.filter((h6) => !h6.scope || h6.scope(mounted.tree.type));
      let hasChild2 = cursor.firstChild();
      for (let i3 = 0, pos = start; ; i3++) {
        let next3 = i3 < mounted.overlay.length ? mounted.overlay[i3] : null;
        let nextPos = next3 ? next3.from + start : end;
        let rangeFrom = Math.max(from3, pos), rangeTo = Math.min(to2, nextPos);
        if (rangeFrom < rangeTo && hasChild2) {
          while (cursor.from < rangeTo) {
            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
            this.startSpan(Math.min(rangeTo, cursor.to), cls);
            if (cursor.to >= nextPos || !cursor.nextSibling())
              break;
          }
        }
        if (!next3 || nextPos > to2)
          break;
        pos = next3.to + start;
        if (pos > from3) {
          this.highlightRange(inner.cursor(), Math.max(from3, next3.from + start), Math.min(to2, pos), "", innerHighlighters);
          this.startSpan(Math.min(to2, pos), cls);
        }
      }
      if (hasChild2)
        cursor.parent();
    } else if (cursor.firstChild()) {
      if (mounted)
        inheritedClass = "";
      do {
        if (cursor.to <= from3)
          continue;
        if (cursor.from >= to2)
          break;
        this.highlightRange(cursor, from3, to2, inheritedClass, highlighters);
        this.startSpan(Math.min(to2, cursor.to), cls);
      } while (cursor.nextSibling());
      cursor.parent();
    }
  }
};
function getStyleTags(node3) {
  let rule = node3.type.prop(ruleNodeProp);
  while (rule && rule.context && !node3.matchContext(rule.context))
    rule = rule.next;
  return rule || null;
}
var t = Tag.define;
var comment3 = t();
var name = t();
var typeName = t(name);
var propertyName = t(name);
var literal = t();
var string = t(literal);
var number = t(literal);
var content = t();
var heading = t(content);
var keyword = t();
var operator = t();
var punctuation = t();
var bracket = t(punctuation);
var meta = t();
var tags = {
  /**
  A comment.
  */
  comment: comment3,
  /**
  A line [comment](#highlight.tags.comment).
  */
  lineComment: t(comment3),
  /**
  A block [comment](#highlight.tags.comment).
  */
  blockComment: t(comment3),
  /**
  A documentation [comment](#highlight.tags.comment).
  */
  docComment: t(comment3),
  /**
  Any kind of identifier.
  */
  name,
  /**
  The [name](#highlight.tags.name) of a variable.
  */
  variableName: t(name),
  /**
  A type [name](#highlight.tags.name).
  */
  typeName,
  /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
  tagName: t(typeName),
  /**
  A property or field [name](#highlight.tags.name).
  */
  propertyName,
  /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
  attributeName: t(propertyName),
  /**
  The [name](#highlight.tags.name) of a class.
  */
  className: t(name),
  /**
  A label [name](#highlight.tags.name).
  */
  labelName: t(name),
  /**
  A namespace [name](#highlight.tags.name).
  */
  namespace: t(name),
  /**
  The [name](#highlight.tags.name) of a macro.
  */
  macroName: t(name),
  /**
  A literal value.
  */
  literal,
  /**
  A string [literal](#highlight.tags.literal).
  */
  string,
  /**
  A documentation [string](#highlight.tags.string).
  */
  docString: t(string),
  /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
  character: t(string),
  /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
  attributeValue: t(string),
  /**
  A number [literal](#highlight.tags.literal).
  */
  number,
  /**
  An integer [number](#highlight.tags.number) literal.
  */
  integer: t(number),
  /**
  A floating-point [number](#highlight.tags.number) literal.
  */
  float: t(number),
  /**
  A boolean [literal](#highlight.tags.literal).
  */
  bool: t(literal),
  /**
  Regular expression [literal](#highlight.tags.literal).
  */
  regexp: t(literal),
  /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: t(literal),
  /**
  A color [literal](#highlight.tags.literal).
  */
  color: t(literal),
  /**
  A URL [literal](#highlight.tags.literal).
  */
  url: t(literal),
  /**
  A language keyword.
  */
  keyword,
  /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
  self: t(keyword),
  /**
  The [keyword](#highlight.tags.keyword) for null.
  */
  null: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
  atom: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
  unit: t(keyword),
  /**
  A modifier [keyword](#highlight.tags.keyword).
  */
  modifier: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: t(keyword),
  /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
  controlKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: t(keyword),
  /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
  moduleKeyword: t(keyword),
  /**
  An operator.
  */
  operator,
  /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
  derefOperator: t(operator),
  /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
  arithmeticOperator: t(operator),
  /**
  Logical [operator](#highlight.tags.operator).
  */
  logicOperator: t(operator),
  /**
  Bit [operator](#highlight.tags.operator).
  */
  bitwiseOperator: t(operator),
  /**
  Comparison [operator](#highlight.tags.operator).
  */
  compareOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
  updateOperator: t(operator),
  /**
  [Operator](#highlight.tags.operator) that defines something.
  */
  definitionOperator: t(operator),
  /**
  Type-related [operator](#highlight.tags.operator).
  */
  typeOperator: t(operator),
  /**
  Control-flow [operator](#highlight.tags.operator).
  */
  controlOperator: t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation,
  /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
  separator: t(punctuation),
  /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
  bracket,
  /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: t(bracket),
  /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  paren: t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
  brace: t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content,
  /**
  [Content](#highlight.tags.content) that represents a heading.
  */
  heading,
  /**
  A level 1 [heading](#highlight.tags.heading).
  */
  heading1: t(heading),
  /**
  A level 2 [heading](#highlight.tags.heading).
  */
  heading2: t(heading),
  /**
  A level 3 [heading](#highlight.tags.heading).
  */
  heading3: t(heading),
  /**
  A level 4 [heading](#highlight.tags.heading).
  */
  heading4: t(heading),
  /**
  A level 5 [heading](#highlight.tags.heading).
  */
  heading5: t(heading),
  /**
  A level 6 [heading](#highlight.tags.heading).
  */
  heading6: t(heading),
  /**
  A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
  */
  contentSeparator: t(content),
  /**
  [Content](#highlight.tags.content) that represents a list.
  */
  list: t(content),
  /**
  [Content](#highlight.tags.content) that represents a quote.
  */
  quote: t(content),
  /**
  [Content](#highlight.tags.content) that is emphasized.
  */
  emphasis: t(content),
  /**
  [Content](#highlight.tags.content) that is styled strong.
  */
  strong: t(content),
  /**
  [Content](#highlight.tags.content) that is part of a link.
  */
  link: t(content),
  /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: t(content),
  /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: t(),
  /**
  Deleted text.
  */
  deleted: t(),
  /**
  Changed text.
  */
  changed: t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: t(),
  /**
  Metadata or meta-instruction.
  */
  meta,
  /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: t(meta),
  /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
  processingInstruction: t(meta),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
  definition: Tag.defineModifier("definition"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
  constant: Tag.defineModifier("constant"),
  /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  function: Tag.defineModifier("function"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: Tag.defineModifier("standard"),
  /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
  local: Tag.defineModifier("local"),
  /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: Tag.defineModifier("special")
};
for (let name2 in tags) {
  let val = tags[name2];
  if (val instanceof Tag)
    val.name = name2;
}
var classHighlighter = tagHighlighter([
  { tag: tags.link, class: "tok-link" },
  { tag: tags.heading, class: "tok-heading" },
  { tag: tags.emphasis, class: "tok-emphasis" },
  { tag: tags.strong, class: "tok-strong" },
  { tag: tags.keyword, class: "tok-keyword" },
  { tag: tags.atom, class: "tok-atom" },
  { tag: tags.bool, class: "tok-bool" },
  { tag: tags.url, class: "tok-url" },
  { tag: tags.labelName, class: "tok-labelName" },
  { tag: tags.inserted, class: "tok-inserted" },
  { tag: tags.deleted, class: "tok-deleted" },
  { tag: tags.literal, class: "tok-literal" },
  { tag: tags.string, class: "tok-string" },
  { tag: tags.number, class: "tok-number" },
  { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
  { tag: tags.variableName, class: "tok-variableName" },
  { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
  { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
  { tag: tags.special(tags.variableName), class: "tok-variableName2" },
  { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
  { tag: tags.typeName, class: "tok-typeName" },
  { tag: tags.namespace, class: "tok-namespace" },
  { tag: tags.className, class: "tok-className" },
  { tag: tags.macroName, class: "tok-macroName" },
  { tag: tags.propertyName, class: "tok-propertyName" },
  { tag: tags.operator, class: "tok-operator" },
  { tag: tags.comment, class: "tok-comment" },
  { tag: tags.meta, class: "tok-meta" },
  { tag: tags.invalid, class: "tok-invalid" },
  { tag: tags.punctuation, class: "tok-punctuation" }
]);

// https://esm.sh/v135/@codemirror/language@6.10.6/es2020/language.development.mjs
var _a;
var languageDataProp = /* @__PURE__ */ new NodeProp();
function defineLanguageFacet(baseData) {
  return Facet.define({
    combine: baseData ? (values) => values.concat(baseData) : void 0
  });
}
var sublanguageProp = /* @__PURE__ */ new NodeProp();
var Language = class {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(data, parser2, extraExtensions = [], name2 = "") {
    this.data = data;
    this.name = name2;
    if (!EditorState.prototype.hasOwnProperty("tree"))
      Object.defineProperty(EditorState.prototype, "tree", { get() {
        return syntaxTree(this);
      } });
    this.parser = parser2;
    this.extension = [
      language.of(this),
      EditorState.languageData.of((state, pos, side) => {
        let top2 = topNodeAt(state, pos, side), data2 = top2.type.prop(languageDataProp);
        if (!data2)
          return [];
        let base2 = state.facet(data2), sub = top2.type.prop(sublanguageProp);
        if (sub) {
          let innerNode = top2.resolve(pos - top2.from, side);
          for (let sublang of sub)
            if (sublang.test(innerNode, state)) {
              let data3 = state.facet(sublang.facet);
              return sublang.type == "replace" ? data3 : data3.concat(base2);
            }
        }
        return base2;
      })
    ].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(state, pos, side = -1) {
    return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(state) {
    let lang = state.facet(language);
    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
      return [{ from: 0, to: state.doc.length }];
    if (!lang || !lang.allowsNesting)
      return [];
    let result = [];
    let explore = (tree, from3) => {
      if (tree.prop(languageDataProp) == this.data) {
        result.push({ from: from3, to: from3 + tree.length });
        return;
      }
      let mount = tree.prop(NodeProp.mounted);
      if (mount) {
        if (mount.tree.prop(languageDataProp) == this.data) {
          if (mount.overlay)
            for (let r2 of mount.overlay)
              result.push({ from: r2.from + from3, to: r2.to + from3 });
          else
            result.push({ from: from3, to: from3 + tree.length });
          return;
        } else if (mount.overlay) {
          let size = result.length;
          explore(mount.tree, mount.overlay[0].from + from3);
          if (result.length > size)
            return;
        }
      }
      for (let i3 = 0; i3 < tree.children.length; i3++) {
        let ch = tree.children[i3];
        if (ch instanceof Tree)
          explore(ch, tree.positions[i3] + from3);
      }
    };
    explore(syntaxTree(state), 0);
    return result;
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return true;
  }
};
Language.setState = /* @__PURE__ */ StateEffect.define();
function topNodeAt(state, pos, side) {
  let topLang = state.facet(language), tree = syntaxTree(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (let node3 = tree; node3; node3 = node3.enter(pos, side, IterMode.ExcludeBuffers))
      if (node3.type.isTop)
        tree = node3;
  }
  return tree;
}
var LRLanguage = class _LRLanguage extends Language {
  constructor(data, parser2, name2) {
    super(data, parser2, [], name2);
    this.parser = parser2;
  }
  /**
  Define a language from a parser.
  */
  static define(spec) {
    let data = defineLanguageFacet(spec.languageData);
    return new _LRLanguage(data, spec.parser.configure({
      props: [languageDataProp.add((type) => type.isTop ? data : void 0)]
    }), spec.name);
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(options, name2) {
    return new _LRLanguage(this.data, this.parser.configure(options), name2 || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
};
function syntaxTree(state) {
  let field = state.field(Language.state, false);
  return field ? field.tree : Tree.empty;
}
var DocInput = class {
  /**
  Create an input object for the given document.
  */
  constructor(doc2) {
    this.doc = doc2;
    this.cursorPos = 0;
    this.string = "";
    this.cursor = doc2.iter();
  }
  get length() {
    return this.doc.length;
  }
  syncTo(pos) {
    this.string = this.cursor.next(pos - this.cursorPos).value;
    this.cursorPos = pos + this.string.length;
    return this.cursorPos - this.string.length;
  }
  chunk(pos) {
    this.syncTo(pos);
    return this.string;
  }
  get lineChunks() {
    return true;
  }
  read(from3, to2) {
    let stringStart = this.cursorPos - this.string.length;
    if (from3 < stringStart || to2 >= this.cursorPos)
      return this.doc.sliceString(from3, to2);
    else
      return this.string.slice(from3 - stringStart, to2 - stringStart);
  }
};
var currentContext = null;
var ParseContext = class _ParseContext {
  constructor(parser2, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
    this.parser = parser2;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.treeLen = treeLen;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  static create(parser2, state, viewport) {
    return new _ParseContext(parser2, state, [], Tree.empty, 0, viewport, [], null);
  }
  startParse() {
    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
  }
  /**
  @internal
  */
  work(until, upto) {
    if (upto != null && upto >= this.state.doc.length)
      upto = void 0;
    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
      this.takeTree();
      return true;
    }
    return this.withContext(() => {
      var _a2;
      if (typeof until == "number") {
        let endTime = Date.now() + until;
        until = () => Date.now() > endTime;
      }
      if (!this.parse)
        this.parse = this.startParse();
      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
        this.parse.stopAt(upto);
      for (; ; ) {
        let done = this.parse.advance();
        if (done) {
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
          this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
          this.tree = done;
          this.parse = null;
          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        }
        if (until())
          return false;
      }
    });
  }
  /**
  @internal
  */
  takeTree() {
    let pos, tree;
    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
        this.parse.stopAt(pos);
      this.withContext(() => {
        while (!(tree = this.parse.advance())) {
        }
      });
      this.treeLen = pos;
      this.tree = tree;
      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
      this.parse = null;
    }
  }
  withContext(f4) {
    let prev3 = currentContext;
    currentContext = this;
    try {
      return f4();
    } finally {
      currentContext = prev3;
    }
  }
  withoutTempSkipped(fragments) {
    for (let r2; r2 = this.tempSkipped.pop(); )
      fragments = cutFragments(fragments, r2.from, r2.to);
    return fragments;
  }
  /**
  @internal
  */
  changes(changes, newState) {
    let { fragments, tree, treeLen, viewport, skipped } = this;
    this.takeTree();
    if (!changes.empty) {
      let ranges = [];
      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
      fragments = TreeFragment.applyChanges(fragments, ranges);
      tree = Tree.empty;
      treeLen = 0;
      viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
      if (this.skipped.length) {
        skipped = [];
        for (let r2 of this.skipped) {
          let from3 = changes.mapPos(r2.from, 1), to2 = changes.mapPos(r2.to, -1);
          if (from3 < to2)
            skipped.push({ from: from3, to: to2 });
        }
      }
    }
    return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
  }
  /**
  @internal
  */
  updateViewport(viewport) {
    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
      return false;
    this.viewport = viewport;
    let startLen = this.skipped.length;
    for (let i3 = 0; i3 < this.skipped.length; i3++) {
      let { from: from3, to: to2 } = this.skipped[i3];
      if (from3 < viewport.to && to2 > viewport.from) {
        this.fragments = cutFragments(this.fragments, from3, to2);
        this.skipped.splice(i3--, 1);
      }
    }
    if (this.skipped.length >= startLen)
      return false;
    this.reset();
    return true;
  }
  /**
  @internal
  */
  reset() {
    if (this.parse) {
      this.takeTree();
      this.parse = null;
    }
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(from3, to2) {
    this.skipped.push({ from: from3, to: to2 });
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(until) {
    return new class extends Parser {
      createParse(input, fragments, ranges) {
        let from3 = ranges[0].from, to2 = ranges[ranges.length - 1].to;
        let parser2 = {
          parsedPos: from3,
          advance() {
            let cx3 = currentContext;
            if (cx3) {
              for (let r2 of ranges)
                cx3.tempSkipped.push(r2);
              if (until)
                cx3.scheduleOn = cx3.scheduleOn ? Promise.all([cx3.scheduleOn, until]) : until;
            }
            this.parsedPos = to2;
            return new Tree(NodeType.none, [], [], to2 - from3);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
        return parser2;
      }
    }();
  }
  /**
  @internal
  */
  isDone(upto) {
    upto = Math.min(upto, this.state.doc.length);
    let frags = this.fragments;
    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return currentContext;
  }
};
function cutFragments(fragments, from3, to2) {
  return TreeFragment.applyChanges(fragments, [{ fromA: from3, toA: to2, fromB: from3, toB: to2 }]);
}
var LanguageState = class _LanguageState {
  constructor(context) {
    this.context = context;
    this.tree = context.tree;
  }
  apply(tr2) {
    if (!tr2.docChanged && this.tree == this.context.tree)
      return this;
    let newCx = this.context.changes(tr2.changes, tr2.state);
    let upto = this.context.treeLen == tr2.startState.doc.length ? void 0 : Math.max(tr2.changes.mapPos(this.context.treeLen), newCx.viewport.to);
    if (!newCx.work(20, upto))
      newCx.takeTree();
    return new _LanguageState(newCx);
  }
  static init(state) {
    let vpTo = Math.min(3e3, state.doc.length);
    let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
    if (!parseState.work(20, vpTo))
      parseState.takeTree();
    return new _LanguageState(parseState);
  }
};
Language.state = /* @__PURE__ */ StateField.define({
  create: LanguageState.init,
  update(value, tr2) {
    for (let e of tr2.effects)
      if (e.is(Language.setState))
        return e.value;
    if (tr2.startState.facet(language) != tr2.state.facet(language))
      return LanguageState.init(tr2.state);
    return value.apply(tr2);
  }
});
var requestIdle = (callback) => {
  let timeout = setTimeout(
    () => callback(),
    500
    /* Work.MaxPause */
  );
  return () => clearTimeout(timeout);
};
if (typeof requestIdleCallback != "undefined")
  requestIdle = (callback) => {
    let idle = -1, timeout = setTimeout(
      () => {
        idle = requestIdleCallback(callback, {
          timeout: 500 - 100
          /* Work.MinPause */
        });
      },
      100
      /* Work.MinPause */
    );
    return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
  };
var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
var parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
  constructor(view) {
    this.view = view;
    this.working = null;
    this.workScheduled = 0;
    this.chunkEnd = -1;
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  update(update) {
    let cx3 = this.view.state.field(Language.state).context;
    if (cx3.updateViewport(update.view.viewport) || this.view.viewport.to > cx3.treeLen)
      this.scheduleWork();
    if (update.docChanged || update.selectionSet) {
      if (this.view.hasFocus)
        this.chunkBudget += 50;
      this.scheduleWork();
    }
    this.checkAsyncSchedule(cx3);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state } = this.view, field = state.field(Language.state);
    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
      this.working = requestIdle(this.work);
  }
  work(deadline) {
    this.working = null;
    let now = Date.now();
    if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
      this.chunkEnd = now + 3e4;
      this.chunkBudget = 3e3;
    }
    if (this.chunkBudget <= 0)
      return;
    let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
    if (field.tree == field.context.tree && field.context.isDone(
      vpTo + 1e5
      /* Work.MaxParseAhead */
    ))
      return;
    let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
    let done = field.context.work(() => {
      return isInputPending && isInputPending() || Date.now() > endTime;
    }, vpTo + (viewportFirst ? 0 : 1e5));
    this.chunkBudget -= Date.now() - now;
    if (done || this.chunkBudget <= 0) {
      field.context.takeTree();
      this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
    }
    if (this.chunkBudget > 0 && !(done && !viewportFirst))
      this.scheduleWork();
    this.checkAsyncSchedule(field.context);
  }
  checkAsyncSchedule(cx3) {
    if (cx3.scheduleOn) {
      this.workScheduled++;
      cx3.scheduleOn.then(() => this.scheduleWork()).catch((err3) => logException(this.view.state, err3)).then(() => this.workScheduled--);
      cx3.scheduleOn = null;
    }
  }
  destroy() {
    if (this.working)
      this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
});
var language = /* @__PURE__ */ Facet.define({
  combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: (language2) => [
    Language.state,
    parseWorker,
    EditorView.contentAttributes.compute([language2], (state) => {
      let lang = state.facet(language2);
      return lang && lang.name ? { "data-language": lang.name } : {};
    })
  ]
});
var LanguageSupport = class {
  /**
  Create a language support object.
  */
  constructor(language2, support = []) {
    this.language = language2;
    this.support = support;
    this.extension = [language2, support];
  }
};
var indentService = /* @__PURE__ */ Facet.define();
var indentUnit = /* @__PURE__ */ Facet.define({
  combine: (values) => {
    if (!values.length)
      return "  ";
    let unit = values[0];
    if (!unit || /\S/.test(unit) || Array.from(unit).some((e) => e != unit[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
    return unit;
  }
});
function getIndentUnit(state) {
  let unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
function indentString(state, cols) {
  let result = "", ts2 = state.tabSize, ch = state.facet(indentUnit)[0];
  if (ch == "	") {
    while (cols >= ts2) {
      result += "	";
      cols -= ts2;
    }
    ch = " ";
  }
  for (let i3 = 0; i3 < cols; i3++)
    result += ch;
  return result;
}
function getIndentation(context, pos) {
  if (context instanceof EditorState)
    context = new IndentContext(context);
  for (let service of context.state.facet(indentService)) {
    let result = service(context, pos);
    if (result !== void 0)
      return result;
  }
  let tree = syntaxTree(context.state);
  return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
}
var IndentContext = class {
  /**
  Create an indent context.
  */
  constructor(state, options = {}) {
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(pos, bias = 1) {
    let line3 = this.state.doc.lineAt(pos);
    let { simulateBreak, simulateDoubleBreak } = this.options;
    if (simulateBreak != null && simulateBreak >= line3.from && simulateBreak <= line3.to) {
      if (simulateDoubleBreak && simulateBreak == pos)
        return { text: "", from: pos };
      else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
        return { text: line3.text.slice(simulateBreak - line3.from), from: simulateBreak };
      else
        return { text: line3.text.slice(0, simulateBreak - line3.from), from: line3.from };
    }
    return line3;
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(pos, bias = 1) {
    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
      return "";
    let { text, from: from3 } = this.lineAt(pos, bias);
    return text.slice(pos - from3, Math.min(text.length, pos + 100 - from3));
  }
  /**
  Find the column for the given position.
  */
  column(pos, bias = 1) {
    let { text, from: from3 } = this.lineAt(pos, bias);
    let result = this.countColumn(text, pos - from3);
    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from3) : -1;
    if (override > -1)
      result += override - this.countColumn(text, text.search(/\S|$/));
    return result;
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(line3, pos = line3.length) {
    return countColumn(line3, this.state.tabSize, pos);
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(pos, bias = 1) {
    let { text, from: from3 } = this.lineAt(pos, bias);
    let override = this.options.overrideIndentation;
    if (override) {
      let overriden = override(from3);
      if (overriden > -1)
        return overriden;
    }
    return this.countColumn(text, text.search(/\S|$/));
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
};
var indentNodeProp = /* @__PURE__ */ new NodeProp();
function syntaxIndentation(cx3, ast, pos) {
  let stack = ast.resolveStack(pos);
  let inner = stack.node.enterUnfinishedNodesBefore(pos);
  if (inner != stack.node) {
    let add2 = [];
    for (let cur2 = inner; cur2 != stack.node; cur2 = cur2.parent)
      add2.push(cur2);
    for (let i3 = add2.length - 1; i3 >= 0; i3--)
      stack = { node: add2[i3], next: stack };
  }
  return indentFor(stack, cx3, pos);
}
function indentFor(stack, cx3, pos) {
  for (let cur2 = stack; cur2; cur2 = cur2.next) {
    let strategy = indentStrategy(cur2.node);
    if (strategy)
      return strategy(TreeIndentContext.create(cx3, pos, cur2));
  }
  return 0;
}
function ignoreClosed(cx3) {
  return cx3.pos == cx3.options.simulateBreak && cx3.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  let strategy = tree.type.prop(indentNodeProp);
  if (strategy)
    return strategy;
  let first = tree.firstChild, close3;
  if (first && (close3 = first.type.prop(NodeProp.closedBy))) {
    let last = tree.lastChild, closed = last && close3.indexOf(last.name) > -1;
    return (cx3) => delimitedStrategy(cx3, true, 1, void 0, closed && !ignoreClosed(cx3) ? last.from : void 0);
  }
  return tree.parent == null ? topIndent : null;
}
function topIndent() {
  return 0;
}
var TreeIndentContext = class _TreeIndentContext extends IndentContext {
  constructor(base2, pos, context) {
    super(base2.state, base2.options);
    this.base = base2;
    this.pos = pos;
    this.context = context;
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node;
  }
  /**
  @internal
  */
  static create(base2, pos, context) {
    return new _TreeIndentContext(base2, pos, context);
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node);
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(node3) {
    let line3 = this.state.doc.lineAt(node3.from);
    for (; ; ) {
      let atBreak = node3.resolve(line3.from);
      while (atBreak.parent && atBreak.parent.from == atBreak.from)
        atBreak = atBreak.parent;
      if (isParent(atBreak, node3))
        break;
      line3 = this.state.doc.lineAt(atBreak.from);
    }
    return this.lineIndent(line3.from);
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return indentFor(this.context.next, this.base, this.pos);
  }
};
function isParent(parent, of) {
  for (let cur2 = of; cur2; cur2 = cur2.parent)
    if (parent == cur2)
      return true;
  return false;
}
function bracketedAligned(context) {
  let tree = context.node;
  let openToken = tree.childAfter(tree.from), last = tree.lastChild;
  if (!openToken)
    return null;
  let sim = context.options.simulateBreak;
  let openLine = context.state.doc.lineAt(openToken.from);
  let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (let pos = openToken.to; ; ) {
    let next3 = tree.childAfter(pos);
    if (!next3 || next3 == last)
      return null;
    if (!next3.type.isSkipped) {
      if (next3.from >= lineEnd)
        return null;
      let space2 = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
      return { from: openToken.from, to: openToken.to + space2 };
    }
    pos = next3.to;
  }
}
function delimitedIndent({ closing: closing2, align = true, units = 1 }) {
  return (context) => delimitedStrategy(context, align, units, closing2);
}
function delimitedStrategy(context, align, units, closing2, closedAt) {
  let after = context.textAfter, space2 = after.match(/^\s*/)[0].length;
  let closed = closing2 && after.slice(space2, space2 + closing2.length) == closing2 || closedAt == context.pos + space2;
  let aligned = align ? bracketedAligned(context) : null;
  if (aligned)
    return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
var flatIndent = (context) => context.baseIndent;
function continuedIndent({ except, units = 1 } = {}) {
  return (context) => {
    let matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}
var DontIndentBeyond = 200;
function indentOnInput() {
  return EditorState.transactionFilter.of((tr2) => {
    if (!tr2.docChanged || !tr2.isUserEvent("input.type") && !tr2.isUserEvent("input.complete"))
      return tr2;
    let rules = tr2.startState.languageDataAt("indentOnInput", tr2.startState.selection.main.head);
    if (!rules.length)
      return tr2;
    let doc2 = tr2.newDoc, { head } = tr2.newSelection.main, line3 = doc2.lineAt(head);
    if (head > line3.from + DontIndentBeyond)
      return tr2;
    let lineStart = doc2.sliceString(line3.from, head);
    if (!rules.some((r2) => r2.test(lineStart)))
      return tr2;
    let { state } = tr2, last = -1, changes = [];
    for (let { head: head2 } of state.selection.ranges) {
      let line22 = state.doc.lineAt(head2);
      if (line22.from == last)
        continue;
      last = line22.from;
      let indent3 = getIndentation(state, line22.from);
      if (indent3 == null)
        continue;
      let cur2 = /^\s*/.exec(line22.text)[0];
      let norm = indentString(state, indent3);
      if (cur2 != norm)
        changes.push({ from: line22.from, to: line22.from + cur2.length, insert: norm });
    }
    return changes.length ? [tr2, { changes, sequential: true }] : tr2;
  });
}
var foldService = /* @__PURE__ */ Facet.define();
var foldNodeProp = /* @__PURE__ */ new NodeProp();
function foldInside(node3) {
  let first = node3.firstChild, last = node3.lastChild;
  return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node3.to : last.from } : null;
}
function syntaxFolding(state, start, end) {
  let tree = syntaxTree(state);
  if (tree.length < end)
    return null;
  let stack = tree.resolveStack(end, 1);
  let found = null;
  for (let iter2 = stack; iter2; iter2 = iter2.next) {
    let cur2 = iter2.node;
    if (cur2.to <= end || cur2.from > end)
      continue;
    if (found && cur2.from < start)
      break;
    let prop = cur2.type.prop(foldNodeProp);
    if (prop && (cur2.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur2))) {
      let value = prop(cur2, state);
      if (value && value.from <= end && value.from >= start && value.to > end)
        found = value;
    }
  }
  return found;
}
function isUnfinished(node3) {
  let ch = node3.lastChild;
  return ch && ch.to == node3.to && ch.type.isError;
}
function foldable(state, lineStart, lineEnd) {
  for (let service of state.facet(foldService)) {
    let result = service(state, lineStart, lineEnd);
    if (result)
      return result;
  }
  return syntaxFolding(state, lineStart, lineEnd);
}
function mapRange(range, mapping) {
  let from3 = mapping.mapPos(range.from, 1), to2 = mapping.mapPos(range.to, -1);
  return from3 >= to2 ? void 0 : { from: from3, to: to2 };
}
var foldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
var unfoldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
function selectedLines(view) {
  let lines = [];
  for (let { head } of view.state.selection.ranges) {
    if (lines.some((l7) => l7.from <= head && l7.to >= head))
      continue;
    lines.push(view.lineBlockAt(head));
  }
  return lines;
}
var foldState = /* @__PURE__ */ StateField.define({
  create() {
    return Decoration.none;
  },
  update(folded, tr2) {
    folded = folded.map(tr2.changes);
    for (let e of tr2.effects) {
      if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
        let { preparePlaceholder } = tr2.state.facet(foldConfig);
        let widget = !preparePlaceholder ? foldWidget : Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr2.state, e.value)) });
        folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
      } else if (e.is(unfoldEffect)) {
        folded = folded.update({
          filter: (from3, to2) => e.value.from != from3 || e.value.to != to2,
          filterFrom: e.value.from,
          filterTo: e.value.to
        });
      }
    }
    if (tr2.selection) {
      let onSelection = false, { head } = tr2.selection.main;
      folded.between(head, head, (a7, b8) => {
        if (a7 < head && b8 > head)
          onSelection = true;
      });
      if (onSelection)
        folded = folded.update({
          filterFrom: head,
          filterTo: head,
          filter: (a7, b8) => b8 <= head || a7 >= head
        });
    }
    return folded;
  },
  provide: (f4) => EditorView.decorations.from(f4),
  toJSON(folded, state) {
    let ranges = [];
    folded.between(0, state.doc.length, (from3, to2) => {
      ranges.push(from3, to2);
    });
    return ranges;
  },
  fromJSON(value) {
    if (!Array.isArray(value) || value.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let ranges = [];
    for (let i3 = 0; i3 < value.length; ) {
      let from3 = value[i3++], to2 = value[i3++];
      if (typeof from3 != "number" || typeof to2 != "number")
        throw new RangeError("Invalid JSON for fold state");
      ranges.push(foldWidget.range(from3, to2));
    }
    return Decoration.set(ranges, true);
  }
});
function findFold(state, from3, to2) {
  var _a2;
  let found = null;
  (_a2 = state.field(foldState, false)) === null || _a2 === void 0 ? void 0 : _a2.between(from3, to2, (from22, to22) => {
    if (!found || found.from > from22)
      found = { from: from22, to: to22 };
  });
  return found;
}
function foldExists(folded, from3, to2) {
  let found = false;
  folded.between(from3, from3, (a7, b8) => {
    if (a7 == from3 && b8 == to2)
      found = true;
  });
  return found;
}
function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
}
var foldCode = (view) => {
  for (let line3 of selectedLines(view)) {
    let range = foldable(view.state, line3.from, line3.to);
    if (range) {
      view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
      return true;
    }
  }
  return false;
};
var unfoldCode = (view) => {
  if (!view.state.field(foldState, false))
    return false;
  let effects = [];
  for (let line3 of selectedLines(view)) {
    let folded = findFold(view.state, line3.from, line3.to);
    if (folded)
      effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
  }
  if (effects.length)
    view.dispatch({ effects });
  return effects.length > 0;
};
function announceFold(view, range, fold = true) {
  let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
  return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
}
var foldAll = (view) => {
  let { state } = view, effects = [];
  for (let pos = 0; pos < state.doc.length; ) {
    let line3 = view.lineBlockAt(pos), range = foldable(state, line3.from, line3.to);
    if (range)
      effects.push(foldEffect.of(range));
    pos = (range ? view.lineBlockAt(range.to) : line3).to + 1;
  }
  if (effects.length)
    view.dispatch({ effects: maybeEnable(view.state, effects) });
  return !!effects.length;
};
var unfoldAll = (view) => {
  let field = view.state.field(foldState, false);
  if (!field || !field.size)
    return false;
  let effects = [];
  field.between(0, view.state.doc.length, (from3, to2) => {
    effects.push(unfoldEffect.of({ from: from3, to: to2 }));
  });
  view.dispatch({ effects });
  return true;
};
var foldKeymap = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
  { key: "Ctrl-Alt-[", run: foldAll },
  { key: "Ctrl-Alt-]", run: unfoldAll }
];
var defaultConfig = {
  placeholderDOM: null,
  preparePlaceholder: null,
  placeholderText: "…"
};
var foldConfig = /* @__PURE__ */ Facet.define({
  combine(values) {
    return combineConfig(values, defaultConfig);
  }
});
function codeFolding(config2) {
  let result = [foldState, baseTheme$12];
  if (config2)
    result.push(foldConfig.of(config2));
  return result;
}
function widgetToDOM(view, prepared) {
  let { state } = view, conf = state.facet(foldConfig);
  let onclick = (event) => {
    let line3 = view.lineBlockAt(view.posAtDOM(event.target));
    let folded = findFold(view.state, line3.from, line3.to);
    if (folded)
      view.dispatch({ effects: unfoldEffect.of(folded) });
    event.preventDefault();
  };
  if (conf.placeholderDOM)
    return conf.placeholderDOM(view, onclick, prepared);
  let element2 = document.createElement("span");
  element2.textContent = conf.placeholderText;
  element2.setAttribute("aria-label", state.phrase("folded code"));
  element2.title = state.phrase("unfold");
  element2.className = "cm-foldPlaceholder";
  element2.onclick = onclick;
  return element2;
}
var foldWidget = /* @__PURE__ */ Decoration.replace({ widget: /* @__PURE__ */ new class extends WidgetType {
  toDOM(view) {
    return widgetToDOM(view, null);
  }
}() });
var PreparedFoldWidget = class extends WidgetType {
  constructor(value) {
    super();
    this.value = value;
  }
  eq(other) {
    return this.value == other.value;
  }
  toDOM(view) {
    return widgetToDOM(view, this.value);
  }
};
var foldGutterDefaults = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => false
};
var FoldMarker = class extends GutterMarker {
  constructor(config2, open) {
    super();
    this.config = config2;
    this.open = open;
  }
  eq(other) {
    return this.config == other.config && this.open == other.open;
  }
  toDOM(view) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let span = document.createElement("span");
    span.textContent = this.open ? this.config.openText : this.config.closedText;
    span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
    return span;
  }
};
function foldGutter(config2 = {}) {
  let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config2);
  let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
  let markers = ViewPlugin.fromClass(class {
    constructor(view) {
      this.from = view.viewport.from;
      this.markers = this.buildMarkers(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update))
        this.markers = this.buildMarkers(update.view);
    }
    buildMarkers(view) {
      let builder = new RangeSetBuilder();
      for (let line3 of view.viewportLineBlocks) {
        let mark = findFold(view.state, line3.from, line3.to) ? canUnfold : foldable(view.state, line3.from, line3.to) ? canFold : null;
        if (mark)
          builder.add(line3.from, line3.from, mark);
      }
      return builder.finish();
    }
  });
  let { domEventHandlers } = fullConfig;
  return [
    markers,
    gutter({
      class: "cm-foldGutter",
      markers(view) {
        var _a2;
        return ((_a2 = view.plugin(markers)) === null || _a2 === void 0 ? void 0 : _a2.markers) || RangeSet.empty;
      },
      initialSpacer() {
        return new FoldMarker(fullConfig, false);
      },
      domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line3, event) => {
        if (domEventHandlers.click && domEventHandlers.click(view, line3, event))
          return true;
        let folded = findFold(view.state, line3.from, line3.to);
        if (folded) {
          view.dispatch({ effects: unfoldEffect.of(folded) });
          return true;
        }
        let range = foldable(view.state, line3.from, line3.to);
        if (range) {
          view.dispatch({ effects: foldEffect.of(range) });
          return true;
        }
        return false;
      } })
    }),
    codeFolding()
  ];
}
var baseTheme$12 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
var HighlightStyle = class _HighlightStyle {
  constructor(specs, options) {
    this.specs = specs;
    let modSpec;
    function def(spec) {
      let cls = StyleModule.newName();
      (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
      return cls;
    }
    const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
    const scopeOpt = options.scope;
    this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
    this.style = tagHighlighter(specs.map((style) => ({
      tag: style.tag,
      class: style.class || def(Object.assign({}, style, { tag: null }))
    })), {
      all
    }).style;
    this.module = modSpec ? new StyleModule(modSpec) : null;
    this.themeType = options.themeType;
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(specs, options) {
    return new _HighlightStyle(specs, options || {});
  }
};
var highlighterFacet = /* @__PURE__ */ Facet.define();
var fallbackHighlighter = /* @__PURE__ */ Facet.define({
  combine(values) {
    return values.length ? [values[0]] : null;
  }
});
function getHighlighters(state) {
  let main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
function syntaxHighlighting(highlighter, options) {
  let ext = [treeHighlighter], themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module)
      ext.push(EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback)
    ext.push(fallbackHighlighter.of(highlighter));
  else if (themeType)
    ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));
  else
    ext.push(highlighterFacet.of(highlighter));
  return ext;
}
var TreeHighlighter = class {
  constructor(view) {
    this.markCache = /* @__PURE__ */ Object.create(null);
    this.tree = syntaxTree(view.state);
    this.decorations = this.buildDeco(view, getHighlighters(view.state));
    this.decoratedTo = view.viewport.to;
  }
  update(update) {
    let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
    let styleChange = highlighters != getHighlighters(update.startState);
    let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
    if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
      this.decorations = this.decorations.map(update.changes);
      this.decoratedTo = decoratedToMapped;
    } else if (tree != this.tree || update.viewportChanged || styleChange) {
      this.tree = tree;
      this.decorations = this.buildDeco(update.view, highlighters);
      this.decoratedTo = viewport.to;
    }
  }
  buildDeco(view, highlighters) {
    if (!highlighters || !this.tree.length)
      return Decoration.none;
    let builder = new RangeSetBuilder();
    for (let { from: from3, to: to2 } of view.visibleRanges) {
      highlightTree(this.tree, highlighters, (from22, to22, style) => {
        builder.add(from22, to22, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
      }, from3, to2);
    }
    return builder.finish();
  }
};
var treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
  decorations: (v6) => v6.decorations
}));
var defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
  {
    tag: tags.meta,
    color: "#404740"
  },
  {
    tag: tags.link,
    textDecoration: "underline"
  },
  {
    tag: tags.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: tags.emphasis,
    fontStyle: "italic"
  },
  {
    tag: tags.strong,
    fontWeight: "bold"
  },
  {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: tags.keyword,
    color: "#708"
  },
  {
    tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
    color: "#219"
  },
  {
    tag: [tags.literal, tags.inserted],
    color: "#164"
  },
  {
    tag: [tags.string, tags.deleted],
    color: "#a11"
  },
  {
    tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ tags.definition(tags.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ tags.local(tags.variableName),
    color: "#30a"
  },
  {
    tag: [tags.typeName, tags.namespace],
    color: "#085"
  },
  {
    tag: tags.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ tags.definition(tags.propertyName),
    color: "#00c"
  },
  {
    tag: tags.comment,
    color: "#940"
  },
  {
    tag: tags.invalid,
    color: "#f00"
  }
]);
var baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
});
var DefaultScanDist = 1e4;
var DefaultBrackets = "()[]{}";
var bracketMatchingConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist,
      renderMatch: defaultRenderMatch
    });
  }
});
var matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" });
var nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
function defaultRenderMatch(match3) {
  let decorations2 = [];
  let mark = match3.matched ? matchingMark : nonmatchingMark;
  decorations2.push(mark.range(match3.start.from, match3.start.to));
  if (match3.end)
    decorations2.push(mark.range(match3.end.from, match3.end.to));
  return decorations2;
}
var bracketMatchingState = /* @__PURE__ */ StateField.define({
  create() {
    return Decoration.none;
  },
  update(deco, tr2) {
    if (!tr2.docChanged && !tr2.selection)
      return deco;
    let decorations2 = [];
    let config2 = tr2.state.facet(bracketMatchingConfig);
    for (let range of tr2.state.selection.ranges) {
      if (!range.empty)
        continue;
      let match3 = matchBrackets(tr2.state, range.head, -1, config2) || range.head > 0 && matchBrackets(tr2.state, range.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr2.state, range.head, 1, config2) || range.head < tr2.state.doc.length && matchBrackets(tr2.state, range.head + 1, -1, config2));
      if (match3)
        decorations2 = decorations2.concat(config2.renderMatch(match3, tr2.state));
    }
    return Decoration.set(decorations2, true);
  },
  provide: (f4) => EditorView.decorations.from(f4)
});
var bracketMatchingUnique = [
  bracketMatchingState,
  baseTheme2
];
function bracketMatching(config2 = {}) {
  return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
}
var bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
function matchingNodes(node3, dir, brackets) {
  let byProp = node3.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
  if (byProp)
    return byProp;
  if (node3.name.length == 1) {
    let index = brackets.indexOf(node3.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
      return [brackets[index + dir]];
  }
  return null;
}
function findHandle(node3) {
  let hasHandle = node3.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node3.node) : node3;
}
function matchBrackets(state, pos, dir, config2 = {}) {
  let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets = config2.brackets || DefaultBrackets;
  let tree = syntaxTree(state), node3 = tree.resolveInner(pos, dir);
  for (let cur2 = node3; cur2; cur2 = cur2.parent) {
    let matches = matchingNodes(cur2.type, dir, brackets);
    if (matches && cur2.from < cur2.to) {
      let handle = findHandle(cur2);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
        return matchMarkedBrackets(state, pos, dir, cur2, handle, matches, brackets);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node3.type, maxScanDistance, brackets);
}
function matchMarkedBrackets(_state, _pos, dir, token3, handle, matching, brackets) {
  let parent = token3.parent, firstToken = { from: handle.from, to: handle.to };
  let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor && (dir < 0 ? cursor.childBefore(token3.from) : cursor.childAfter(token3.to)))
    do {
      if (dir < 0 ? cursor.to <= token3.from : cursor.from >= token3.to) {
        if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
          let endHandle = findHandle(cursor);
          return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
        } else if (matchingNodes(cursor.type, dir, brackets)) {
          depth++;
        } else if (matchingNodes(cursor.type, -dir, brackets)) {
          if (depth == 0) {
            let endHandle = findHandle(cursor);
            return {
              start: firstToken,
              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
              matched: false
            };
          }
          depth--;
        }
      }
    } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return { start: firstToken, matched: false };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  let bracket2 = brackets.indexOf(startCh);
  if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
    return null;
  let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
  let iter2 = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
  for (let distance = 0; !iter2.next().done && distance <= maxScanDistance; ) {
    let text = iter2.value;
    if (dir < 0)
      distance += text.length;
    let basePos = pos + distance * dir;
    for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
      let found = brackets.indexOf(text[pos2]);
      if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
        continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
      } else {
        depth--;
      }
    }
    if (dir > 0)
      distance += text.length;
  }
  return iter2.done ? { start: startToken, matched: false } : null;
}
var noTokens = /* @__PURE__ */ Object.create(null);
var typeArray = [NodeType.none];
var warned = [];
var byTag = /* @__PURE__ */ Object.create(null);
var defaultTable = /* @__PURE__ */ Object.create(null);
for (let [legacyName, name2] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1)
    return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  let tags$1 = [];
  for (let name22 of tagStr.split(" ")) {
    let found = [];
    for (let part of name22.split(".")) {
      let value = extra[part] || tags[part];
      if (!value) {
        warnForPart(part, `Unknown highlighting tag ${part}`);
      } else if (typeof value == "function") {
        if (!found.length)
          warnForPart(part, `Modifier ${part} used at start of tag`);
        else
          found = found.map(value);
      } else {
        if (found.length)
          warnForPart(part, `Tag ${part} used as modifier`);
        else
          found = Array.isArray(value) ? value : [value];
      }
    }
    for (let tag of found)
      tags$1.push(tag);
  }
  if (!tags$1.length)
    return 0;
  let name2 = tagStr.replace(/ /g, "_"), key2 = name2 + " " + tags$1.map((t3) => t3.id);
  let known = byTag[key2];
  if (known)
    return known.id;
  let type = byTag[key2] = NodeType.define({
    id: typeArray.length,
    name: name2,
    props: [styleTags({ [name2]: tags$1 })]
  });
  typeArray.push(type);
  return type.id;
}
var marks = {
  rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
  ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
  auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
};

// https://esm.sh/v135/@codemirror/commands@6.7.1/es2020/commands.development.mjs
var toggleComment = (target) => {
  let { state } = target, line3 = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line3.from);
  return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
};
function command(f4, option) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let tr2 = f4(option, state);
    if (!tr2)
      return false;
    dispatch(state.update(tr2));
    return true;
  };
}
var toggleLineComment = /* @__PURE__ */ command(
  changeLineComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockComment = /* @__PURE__ */ command(
  changeBlockComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockCommentByLine = /* @__PURE__ */ command(
  (o2, s66) => changeBlockComment(o2, s66, selectedLineRanges(s66)),
  0
  /* CommentOption.Toggle */
);
function getConfig(state, pos) {
  let data = state.languageDataAt("commentTokens", pos);
  return data.length ? data[0] : {};
}
var SearchMargin = 50;
function findBlockComment(state, { open, close: close3 }, from3, to2) {
  let textBefore = state.sliceDoc(from3 - SearchMargin, from3);
  let textAfter = state.sliceDoc(to2, to2 + SearchMargin);
  let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
  let beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close3.length) == close3) {
    return {
      open: { pos: from3 - spaceBefore, margin: spaceBefore && 1 },
      close: { pos: to2 + spaceAfter, margin: spaceAfter && 1 }
    };
  }
  let startText, endText;
  if (to2 - from3 <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from3, to2);
  } else {
    startText = state.sliceDoc(from3, from3 + SearchMargin);
    endText = state.sliceDoc(to2 - SearchMargin, to2);
  }
  let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
  let endOff = endText.length - endSpace - close3.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close3.length) == close3) {
    return {
      open: {
        pos: from3 + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to2 - endSpace - close3.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  let ranges = [];
  for (let r2 of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r2.from);
    let toLine = r2.to <= fromLine.to ? fromLine : state.doc.lineAt(r2.to);
    if (toLine.from > fromLine.from && toLine.from == r2.to)
      toLine = r2.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r2.to - 1);
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last].to > fromLine.from)
      ranges[last].to = toLine.to;
    else
      ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
  }
  return ranges;
}
function changeBlockComment(option, state, ranges = state.selection.ranges) {
  let tokens = ranges.map((r2) => getConfig(state, r2.from).block);
  if (!tokens.every((c2) => c2))
    return null;
  let comments = ranges.map((r2, i3) => findBlockComment(state, tokens[i3], r2.from, r2.to));
  if (option != 2 && !comments.every((c2) => c2)) {
    return { changes: state.changes(ranges.map((range, i3) => {
      if (comments[i3])
        return [];
      return [{ from: range.from, insert: tokens[i3].open + " " }, { from: range.to, insert: " " + tokens[i3].close }];
    })) };
  } else if (option != 1 && comments.some((c2) => c2)) {
    let changes = [];
    for (let i3 = 0, comment4; i3 < comments.length; i3++)
      if (comment4 = comments[i3]) {
        let token3 = tokens[i3], { open, close: close3 } = comment4;
        changes.push({ from: open.pos - token3.open.length, to: open.pos + open.margin }, { from: close3.pos - close3.margin, to: close3.pos + token3.close.length });
      }
    return { changes };
  }
  return null;
}
function changeLineComment(option, state, ranges = state.selection.ranges) {
  let lines = [];
  let prevLine = -1;
  for (let { from: from3, to: to2 } of ranges) {
    let startI = lines.length, minIndent = 1e9;
    let token3 = getConfig(state, from3).line;
    if (!token3)
      continue;
    for (let pos = from3; pos <= to2; ) {
      let line3 = state.doc.lineAt(pos);
      if (line3.from > prevLine && (from3 == to2 || to2 > line3.from)) {
        prevLine = line3.from;
        let indent3 = /^\s*/.exec(line3.text)[0].length;
        let empty2 = indent3 == line3.length;
        let comment4 = line3.text.slice(indent3, indent3 + token3.length) == token3 ? indent3 : -1;
        if (indent3 < line3.text.length && indent3 < minIndent)
          minIndent = indent3;
        lines.push({ line: line3, comment: comment4, token: token3, indent: indent3, empty: empty2, single: false });
      }
      pos = line3.to + 1;
    }
    if (minIndent < 1e9) {
      for (let i3 = startI; i3 < lines.length; i3++)
        if (lines[i3].indent < lines[i3].line.text.length)
          lines[i3].indent = minIndent;
    }
    if (lines.length == startI + 1)
      lines[startI].single = true;
  }
  if (option != 2 && lines.some((l7) => l7.comment < 0 && (!l7.empty || l7.single))) {
    let changes = [];
    for (let { line: line3, token: token3, indent: indent3, empty: empty2, single } of lines)
      if (single || !empty2)
        changes.push({ from: line3.from + indent3, insert: token3 + " " });
    let changeSet = state.changes(changes);
    return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
  } else if (option != 1 && lines.some((l7) => l7.comment >= 0)) {
    let changes = [];
    for (let { line: line3, comment: comment4, token: token3 } of lines)
      if (comment4 >= 0) {
        let from3 = line3.from + comment4, to2 = from3 + token3.length;
        if (line3.text[to2 - line3.from] == " ")
          to2++;
        changes.push({ from: from3, to: to2 });
      }
    return { changes };
  }
  return null;
}
var fromHistory = /* @__PURE__ */ Annotation.define();
var isolateHistory = /* @__PURE__ */ Annotation.define();
var invertedEffects = /* @__PURE__ */ Facet.define();
var historyConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (_t4, isAdjacent2) => isAdjacent2
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (a7, b8) => (tr2, adj) => a7(tr2, adj) || b8(tr2, adj)
    });
  }
});
var historyField_ = /* @__PURE__ */ StateField.define({
  create() {
    return HistoryState.empty;
  },
  update(state, tr2) {
    let config2 = tr2.state.facet(historyConfig);
    let fromHist = tr2.annotation(fromHistory);
    if (fromHist) {
      let item = HistEvent.fromTransaction(tr2, fromHist.selection), from3 = fromHist.side;
      let other = from3 == 0 ? state.undone : state.done;
      if (item)
        other = updateBranch(other, other.length, config2.minDepth, item);
      else
        other = addSelection(other, tr2.startState.selection);
      return new HistoryState(from3 == 0 ? fromHist.rest : other, from3 == 0 ? other : fromHist.rest);
    }
    let isolate = tr2.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before")
      state = state.isolate();
    if (tr2.annotation(Transaction.addToHistory) === false)
      return !tr2.changes.empty ? state.addMapping(tr2.changes.desc) : state;
    let event = HistEvent.fromTransaction(tr2);
    let time = tr2.annotation(Transaction.time), userEvent = tr2.annotation(Transaction.userEvent);
    if (event)
      state = state.addChanges(event, time, userEvent, config2, tr2);
    else if (tr2.selection)
      state = state.addSelection(tr2.startState.selection, time, userEvent, config2.newGroupDelay);
    if (isolate == "full" || isolate == "after")
      state = state.isolate();
    return state;
  },
  toJSON(value) {
    return { done: value.done.map((e) => e.toJSON()), undone: value.undone.map((e) => e.toJSON()) };
  },
  fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }
});
function history(config2 = {}) {
  return [
    historyField_,
    historyConfig.of(config2),
    EditorView.domEventHandlers({
      beforeinput(e, view) {
        let command2 = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
        if (!command2)
          return false;
        e.preventDefault();
        return command2(view);
      }
    })
  ];
}
function cmd(side, selection) {
  return function({ state, dispatch }) {
    if (!selection && state.readOnly)
      return false;
    let historyState = state.field(historyField_, false);
    if (!historyState)
      return false;
    let tr2 = historyState.pop(side, state, selection);
    if (!tr2)
      return false;
    dispatch(tr2);
    return true;
  };
}
var undo = /* @__PURE__ */ cmd(0, false);
var redo = /* @__PURE__ */ cmd(1, false);
var undoSelection = /* @__PURE__ */ cmd(0, true);
var redoSelection = /* @__PURE__ */ cmd(1, true);
var HistEvent = class _HistEvent {
  constructor(changes, effects, mapped, startSelection, selectionsAfter) {
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  setSelAfter(after) {
    return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
  }
  toJSON() {
    var _a2, _b, _c;
    return {
      changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
      mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
      startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s66) => s66.toJSON())
    };
  }
  static fromJSON(json) {
    return new _HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(tr2, selection) {
    let effects = none2;
    for (let invert of tr2.startState.facet(invertedEffects)) {
      let result = invert(tr2);
      if (result.length)
        effects = effects.concat(result);
    }
    if (!effects.length && tr2.changes.empty)
      return null;
    return new _HistEvent(tr2.changes.invert(tr2.startState.doc), effects, void 0, selection || tr2.startState.selection, none2);
  }
  static selection(selections) {
    return new _HistEvent(void 0, none2, void 0, void 0, selections);
  }
};
function updateBranch(branch, to2, maxLen, newEvent) {
  let start = to2 + 1 > maxLen + 20 ? to2 - maxLen - 1 : 0;
  let newBranch = branch.slice(start, to2);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a7, b8) {
  let ranges = [], isAdjacent2 = false;
  a7.iterChangedRanges((f4, t3) => ranges.push(f4, t3));
  b8.iterChangedRanges((_f, _t4, f4, t3) => {
    for (let i3 = 0; i3 < ranges.length; ) {
      let from3 = ranges[i3++], to2 = ranges[i3++];
      if (t3 >= from3 && f4 <= to2)
        isAdjacent2 = true;
    }
  });
  return isAdjacent2;
}
function eqSelectionShape(a7, b8) {
  return a7.ranges.length == b8.ranges.length && a7.ranges.filter((r2, i3) => r2.empty != b8.ranges[i3].empty).length === 0;
}
function conc(a7, b8) {
  return !a7.length ? b8 : !b8.length ? a7 : a7.concat(b8);
}
var none2 = [];
var MaxSelectionsPerEvent = 200;
function addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    let lastEvent = branch[branch.length - 1];
    let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection))
      return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
function popSelection(branch) {
  let last = branch[branch.length - 1];
  let newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
}
function addMappingToBranch(branch, mapping) {
  if (!branch.length)
    return branch;
  let length3 = branch.length, selections = none2;
  while (length3) {
    let event = mapEvent(branch[length3 - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      let result = branch.slice(0, length3);
      result[length3 - 1] = event;
      return result;
    } else {
      mapping = event.mapped;
      length3--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none2;
}
function mapEvent(event, mapping, extraSelections) {
  let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s66) => s66.map(mapping)) : none2, extraSelections);
  if (!event.changes)
    return HistEvent.selection(selections);
  let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/;
var HistoryState = class _HistoryState {
  constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  isolate() {
    return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
  }
  addChanges(event, time, userEvent, config2, tr2) {
    let done = this.done, lastEvent = done[done.length - 1];
    if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr2, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
    userEvent == "input.type.compose")) {
      done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none2));
    } else {
      done = updateBranch(done, done.length, config2.minDepth, event);
    }
    return new _HistoryState(done, none2, time, userEvent);
  }
  addSelection(selection, time, userEvent, newGroupDelay) {
    let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none2;
    if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
      return this;
    return new _HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
  }
  addMapping(mapping) {
    return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
  }
  pop(side, state, onlySelection) {
    let branch = side == 0 ? this.done : this.undone;
    if (branch.length == 0)
      return null;
    let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
    if (onlySelection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
        userEvent: side == 0 ? "select.undo" : "select.redo",
        scrollIntoView: true
      });
    } else if (!event.changes) {
      return null;
    } else {
      let rest = branch.length == 1 ? none2 : branch.slice(0, branch.length - 1);
      if (event.mapped)
        rest = addMappingToBranch(rest, event.mapped);
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({ side, rest, selection }),
        filter: false,
        userEvent: side == 0 ? "undo" : "redo",
        scrollIntoView: true
      });
    }
  }
};
HistoryState.empty = /* @__PURE__ */ new HistoryState(none2, none2);
var historyKeymap = [
  { key: "Mod-z", run: undo, preventDefault: true },
  { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
  { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
  { key: "Mod-u", run: undoSelection, preventDefault: true },
  { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
];
function updateSel(sel, by) {
  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection) {
  return state.update({ selection, scrollIntoView: true, userEvent: "select" });
}
function moveSel({ state, dispatch }, how) {
  let selection = updateSel(state.selection, how);
  if (selection.eq(state.selection, true))
    return false;
  dispatch(setSel(state, selection));
  return true;
}
function rangeEnd(range, forward) {
  return EditorSelection.cursor(forward ? range.to : range.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
}
var cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
var cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
function cursorByGroup(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
}
var cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
var cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? /* @__PURE__ */ new Intl.Segmenter(void 0, { granularity: "word" }) : null;
function interestingNode(state, node3, bracketProp) {
  if (node3.type.prop(bracketProp))
    return true;
  let len = node3.to - node3.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node3.from, node3.to))) || node3.firstChild;
}
function moveBySyntax(state, start, forward) {
  let pos = syntaxTree(state).resolveInner(start.head);
  let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
  for (let at4 = start.head; ; ) {
    let next3 = forward ? pos.childAfter(at4) : pos.childBefore(at4);
    if (!next3)
      break;
    if (interestingNode(state, next3, bracketProp))
      pos = next3;
    else
      at4 = forward ? next3.to : next3.from;
  }
  let bracket2 = pos.type.prop(bracketProp), match3, newPos;
  if (bracket2 && (match3 = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match3.matched)
    newPos = forward ? match3.end.to : match3.end.from;
  else
    newPos = forward ? pos.to : pos.from;
  return EditorSelection.cursor(newPos, forward ? -1 : 1);
}
var cursorSyntaxLeft = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var cursorSyntaxRight = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function cursorByLine(view, forward) {
  return moveSel(view, (range) => {
    if (!range.empty)
      return rangeEnd(range, forward);
    let moved = view.moveVertically(range, forward);
    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
  });
}
var cursorLineUp = (view) => cursorByLine(view, false);
var cursorLineDown = (view) => cursorByLine(view, true);
function pageInfo(view) {
  let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
  let marginTop = 0, marginBottom = 0, height;
  if (selfScroll) {
    for (let source of view.state.facet(EditorView.scrollMargins)) {
      let margins = source(view);
      if (margins === null || margins === void 0 ? void 0 : margins.top)
        marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
      if (margins === null || margins === void 0 ? void 0 : margins.bottom)
        marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop,
    marginBottom,
    selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view, forward) {
  let page = pageInfo(view);
  let { state } = view, selection = updateSel(state.selection, (range) => {
    return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
  });
  if (selection.eq(state.selection))
    return false;
  let effect;
  if (page.selfScroll) {
    let startPos = view.coordsAtPos(state.selection.main.head);
    let scrollRect = view.scrollDOM.getBoundingClientRect();
    let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
      effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
  }
  view.dispatch(setSel(state, selection), { effects: effect });
  return true;
}
var cursorPageUp = (view) => cursorByPage(view, false);
var cursorPageDown = (view) => cursorByPage(view, true);
function moveByLineBoundary(view, start, forward) {
  let line3 = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line3.to : line3.from))
    moved = view.moveToLineBoundary(start, forward, false);
  if (!forward && moved.head == line3.from && line3.length) {
    let space2 = /^\s*/.exec(view.state.sliceDoc(line3.from, Math.min(line3.from + 100, line3.to)))[0].length;
    if (space2 && start.head != line3.from + space2)
      moved = EditorSelection.cursor(line3.from + space2);
  }
  return moved;
}
var cursorLineBoundaryForward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, true));
var cursorLineBoundaryBackward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, false));
var cursorLineBoundaryLeft = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var cursorLineBoundaryRight = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var cursorLineStart = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
var cursorLineEnd = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
function toMatchingBracket(state, dispatch, extend2) {
  let found = false, selection = updateSel(state.selection, (range) => {
    let matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
    if (!matching || !matching.end)
      return range;
    found = true;
    let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
    return extend2 ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
  });
  if (!found)
    return false;
  dispatch(setSel(state, selection));
  return true;
}
var cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
function extendSel(target, how) {
  let selection = updateSel(target.state.selection, (range) => {
    let head = how(range);
    return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
  });
  if (selection.eq(target.state.selection))
    return false;
  target.dispatch(setSel(target.state, selection));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, (range) => view.moveByChar(range, forward));
}
var selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
var selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
function selectByGroup(view, forward) {
  return extendSel(view, (range) => view.moveByGroup(range, forward));
}
var selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
var selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
var selectSyntaxLeft = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var selectSyntaxRight = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function selectByLine(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward));
}
var selectLineUp = (view) => selectByLine(view, false);
var selectLineDown = (view) => selectByLine(view, true);
function selectByPage(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward, pageInfo(view).height));
}
var selectPageUp = (view) => selectByPage(view, false);
var selectPageDown = (view) => selectByPage(view, true);
var selectLineBoundaryForward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, true));
var selectLineBoundaryBackward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, false));
var selectLineBoundaryLeft = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var selectLineBoundaryRight = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var selectLineStart = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from));
var selectLineEnd = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to));
var cursorDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: 0 }));
  return true;
};
var cursorDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.doc.length }));
  return true;
};
var selectDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
  return true;
};
var selectDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
  return true;
};
var selectAll = ({ state, dispatch }) => {
  dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
  return true;
};
var selectLine = ({ state, dispatch }) => {
  let ranges = selectedLineBlocks(state).map(({ from: from3, to: to2 }) => EditorSelection.range(from3, Math.min(to2 + 1, state.doc.length)));
  dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
  return true;
};
var selectParentSyntax = ({ state, dispatch }) => {
  let selection = updateSel(state.selection, (range) => {
    let tree = syntaxTree(state), stack = tree.resolveStack(range.from, 1);
    if (range.empty) {
      let stackBefore = tree.resolveStack(range.from, -1);
      if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
        stack = stackBefore;
    }
    for (let cur2 = stack; cur2; cur2 = cur2.next) {
      let { node: node3 } = cur2;
      if ((node3.from < range.from && node3.to >= range.to || node3.to > range.to && node3.from <= range.from) && cur2.next)
        return EditorSelection.range(node3.to, node3.from);
    }
    return range;
  });
  if (selection.eq(state.selection))
    return false;
  dispatch(setSel(state, selection));
  return true;
};
var simplifySelection = ({ state, dispatch }) => {
  let cur2 = state.selection, selection = null;
  if (cur2.ranges.length > 1)
    selection = EditorSelection.create([cur2.main]);
  else if (!cur2.main.empty)
    selection = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
  if (!selection)
    return false;
  dispatch(setSel(state, selection));
  return true;
};
function deleteBy(target, by) {
  if (target.state.readOnly)
    return false;
  let event = "delete.selection", { state } = target;
  let changes = state.changeByRange((range) => {
    let { from: from3, to: to2 } = range;
    if (from3 == to2) {
      let towards = by(range);
      if (towards < from3) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from3) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from3 = Math.min(from3, towards);
      to2 = Math.max(to2, towards);
    } else {
      from3 = skipAtomic(target, from3, false);
      to2 = skipAtomic(target, to2, true);
    }
    return from3 == to2 ? { range } : { changes: { from: from3, to: to2 }, range: EditorSelection.cursor(from3, from3 < range.head ? -1 : 1) };
  });
  if (changes.changes.empty)
    return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView)
    for (let ranges of target.state.facet(EditorView.atomicRanges).map((f4) => f4(target)))
      ranges.between(pos, pos, (from3, to2) => {
        if (from3 < pos && to2 > pos)
          pos = forward ? to2 : from3;
      });
  return pos;
}
var deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range) => {
  let pos = range.from, { state } = target, line3 = state.doc.lineAt(pos), before, targetPos;
  if (byIndentUnit && !forward && pos > line3.from && pos < line3.from + 200 && !/[^ \t]/.test(before = line3.text.slice(0, pos - line3.from))) {
    if (before[before.length - 1] == "	")
      return pos - 1;
    let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
    for (let i3 = 0; i3 < drop && before[before.length - 1 - i3] == " "; i3++)
      pos--;
    targetPos = pos;
  } else {
    targetPos = findClusterBreak(line3.text, pos - line3.from, forward, forward) + line3.from;
    if (targetPos == pos && line3.number != (forward ? state.doc.lines : 1))
      targetPos += forward ? 1 : -1;
    else if (!forward && /[\ufe00-\ufe0f]/.test(line3.text.slice(targetPos - line3.from, pos - line3.from)))
      targetPos = findClusterBreak(line3.text, targetPos - line3.from, false, false) + line3.from;
  }
  return targetPos;
});
var deleteCharBackward = (view) => deleteByChar(view, false, true);
var deleteCharForward = (view) => deleteByChar(view, true, false);
var deleteByGroup = (target, forward) => deleteBy(target, (range) => {
  let pos = range.head, { state } = target, line3 = state.doc.lineAt(pos);
  let categorize = state.charCategorizer(pos);
  for (let cat = null; ; ) {
    if (pos == (forward ? line3.to : line3.from)) {
      if (pos == range.head && line3.number != (forward ? state.doc.lines : 1))
        pos += forward ? 1 : -1;
      break;
    }
    let next3 = findClusterBreak(line3.text, pos - line3.from, forward) + line3.from;
    let nextChar2 = line3.text.slice(Math.min(pos, next3) - line3.from, Math.max(pos, next3) - line3.from);
    let nextCat = categorize(nextChar2);
    if (cat != null && nextCat != cat)
      break;
    if (nextChar2 != " " || pos != range.head)
      cat = nextCat;
    pos = next3;
  }
  return pos;
});
var deleteGroupBackward = (target) => deleteByGroup(target, false);
var deleteGroupForward = (target) => deleteByGroup(target, true);
var deleteToLineEnd = (view) => deleteBy(view, (range) => {
  let lineEnd = view.lineBlockAt(range.head).to;
  return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
});
var deleteLineBoundaryBackward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, false).head;
  return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
});
var deleteLineBoundaryForward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, true).head;
  return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
});
var splitLine = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    return {
      changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
      range: EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
  return true;
};
var transposeChars = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    if (!range.empty || range.from == 0 || range.from == state.doc.length)
      return { range };
    let pos = range.from, line3 = state.doc.lineAt(pos);
    let from3 = pos == line3.from ? pos - 1 : findClusterBreak(line3.text, pos - line3.from, false) + line3.from;
    let to2 = pos == line3.to ? pos + 1 : findClusterBreak(line3.text, pos - line3.from, true) + line3.from;
    return {
      changes: { from: from3, to: to2, insert: state.doc.slice(pos, to2).append(state.doc.slice(from3, pos)) },
      range: EditorSelection.cursor(to2)
    };
  });
  if (changes.changes.empty)
    return false;
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
  return true;
};
function selectedLineBlocks(state) {
  let blocks = [], upto = -1;
  for (let range of state.selection.ranges) {
    let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
    if (!range.empty && range.to == endLine.from)
      endLine = state.doc.lineAt(range.to - 1);
    if (upto >= startLine.number) {
      let prev3 = blocks[blocks.length - 1];
      prev3.to = endLine.to;
      prev3.ranges.push(range);
    } else {
      blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
    }
    upto = endLine.number + 1;
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [], ranges = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward ? block.to == state.doc.length : block.from == 0)
      continue;
    let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
    let size = nextLine.length + 1;
    if (forward) {
      changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
      for (let r2 of block.ranges)
        ranges.push(EditorSelection.range(Math.min(state.doc.length, r2.anchor + size), Math.min(state.doc.length, r2.head + size)));
    } else {
      changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
      for (let r2 of block.ranges)
        ranges.push(EditorSelection.range(r2.anchor - size, r2.head - size));
    }
  }
  if (!changes.length)
    return false;
  dispatch(state.update({
    changes,
    scrollIntoView: true,
    selection: EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
var moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
var moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
function copyLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [];
  for (let block of selectedLineBlocks(state)) {
    if (forward)
      changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
    else
      changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
  }
  dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
  return true;
}
var copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
var copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
var deleteLine = (view) => {
  if (view.state.readOnly)
    return false;
  let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from: from3, to: to2 }) => {
    if (from3 > 0)
      from3--;
    else if (to2 < state.doc.length)
      to2++;
    return { from: from3, to: to2 };
  }));
  let selection = updateSel(state.selection, (range) => {
    let dist2 = void 0;
    if (view.lineWrapping) {
      let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
      if (pos)
        dist2 = block.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
    }
    return view.moveVertically(range, true, dist2);
  }).map(changes);
  view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
    return { from: pos, to: pos };
  let context = syntaxTree(state).resolveInner(pos);
  let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
    return { from: before.to, to: after.from };
  return null;
}
var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
function newlineAndIndent(atEof) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      let { from: from3, to: to2 } = range, line3 = state.doc.lineAt(from3);
      let explode = !atEof && from3 == to2 && isBetweenBrackets(state, from3);
      if (atEof)
        from3 = to2 = (to2 <= line3.to ? line3 : state.doc.lineAt(to2)).to;
      let cx3 = new IndentContext(state, { simulateBreak: from3, simulateDoubleBreak: !!explode });
      let indent3 = getIndentation(cx3, from3);
      if (indent3 == null)
        indent3 = countColumn(/^\s*/.exec(state.doc.lineAt(from3).text)[0], state.tabSize);
      while (to2 < line3.to && /\s/.test(line3.text[to2 - line3.from]))
        to2++;
      if (explode)
        ({ from: from3, to: to2 } = explode);
      else if (from3 > line3.from && from3 < line3.from + 100 && !/\S/.test(line3.text.slice(0, from3)))
        from3 = line3.from;
      let insert2 = ["", indentString(state, indent3)];
      if (explode)
        insert2.push(indentString(state, cx3.lineIndent(line3.from, -1)));
      return {
        changes: { from: from3, to: to2, insert: Text.of(insert2) },
        range: EditorSelection.cursor(from3 + 1 + insert2[1].length)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
}
function changeBySelectedLine(state, f4) {
  let atLine = -1;
  return state.changeByRange((range) => {
    let changes = [];
    for (let pos = range.from; pos <= range.to; ) {
      let line3 = state.doc.lineAt(pos);
      if (line3.number > atLine && (range.empty || range.to > line3.from)) {
        f4(line3, changes, range);
        atLine = line3.number;
      }
      pos = line3.to + 1;
    }
    let changeSet = state.changes(changes);
    return {
      changes,
      range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
var indentSelection = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let updated = /* @__PURE__ */ Object.create(null);
  let context = new IndentContext(state, { overrideIndentation: (start) => {
    let found = updated[start];
    return found == null ? -1 : found;
  } });
  let changes = changeBySelectedLine(state, (line3, changes2, range) => {
    let indent3 = getIndentation(context, line3.from);
    if (indent3 == null)
      return;
    if (!/\S/.test(line3.text))
      indent3 = 0;
    let cur2 = /^\s*/.exec(line3.text)[0];
    let norm = indentString(state, indent3);
    if (cur2 != norm || range.from < line3.from + cur2.length) {
      updated[line3.from] = indent3;
      changes2.push({ from: line3.from, to: line3.from + cur2.length, insert: norm });
    }
  });
  if (!changes.changes.empty)
    dispatch(state.update(changes, { userEvent: "indent" }));
  return true;
};
var indentMore = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line3, changes) => {
    changes.push({ from: line3.from, insert: state.facet(indentUnit) });
  }), { userEvent: "input.indent" }));
  return true;
};
var indentLess = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line3, changes) => {
    let space2 = /^\s*/.exec(line3.text)[0];
    if (!space2)
      return;
    let col = countColumn(space2, state.tabSize), keep = 0;
    let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
    while (keep < space2.length && keep < insert2.length && space2.charCodeAt(keep) == insert2.charCodeAt(keep))
      keep++;
    changes.push({ from: line3.from + keep, to: line3.from + space2.length, insert: insert2.slice(keep) });
  }), { userEvent: "delete.dedent" }));
  return true;
};
var toggleTabFocusMode = (view) => {
  view.setTabFocusMode();
  return true;
};
var emacsStyleKeymap = [
  { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
  { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
  { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
  { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
  { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
  { key: "Ctrl-d", run: deleteCharForward },
  { key: "Ctrl-h", run: deleteCharBackward },
  { key: "Ctrl-k", run: deleteToLineEnd },
  { key: "Ctrl-Alt-h", run: deleteGroupBackward },
  { key: "Ctrl-o", run: splitLine },
  { key: "Ctrl-t", run: transposeChars },
  { key: "Ctrl-v", run: cursorPageDown }
];
var standardKeymap = /* @__PURE__ */ [
  { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
  { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
  { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
  { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
  { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
  { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
  { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
  { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
  { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
  { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
  { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
  { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
  { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
  { key: "Mod-a", run: selectAll },
  { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
  { key: "Delete", run: deleteCharForward },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
  { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
  { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
  { mac: "Mod-Delete", run: deleteLineBoundaryForward }
].concat(/* @__PURE__ */ emacsStyleKeymap.map((b8) => ({ mac: b8.key, run: b8.run, shift: b8.shift })));
var defaultKeymap = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
  { key: "Alt-ArrowUp", run: moveLineUp },
  { key: "Shift-Alt-ArrowUp", run: copyLineUp },
  { key: "Alt-ArrowDown", run: moveLineDown },
  { key: "Shift-Alt-ArrowDown", run: copyLineDown },
  { key: "Escape", run: simplifySelection },
  { key: "Mod-Enter", run: insertBlankLine },
  { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
  { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
  { key: "Mod-[", run: indentLess },
  { key: "Mod-]", run: indentMore },
  { key: "Mod-Alt-\\", run: indentSelection },
  { key: "Shift-Mod-k", run: deleteLine },
  { key: "Shift-Mod-\\", run: cursorMatchingBracket },
  { key: "Mod-/", run: toggleComment },
  { key: "Alt-A", run: toggleBlockComment },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode }
].concat(standardKeymap);

// https://esm.sh/v135/crelt@1.0.6/es2020/crelt.development.mjs
function crelt() {
  var elt = arguments[0];
  if (typeof elt == "string")
    elt = document.createElement(elt);
  var i3 = 1, next3 = arguments[1];
  if (next3 && typeof next3 == "object" && next3.nodeType == null && !Array.isArray(next3)) {
    for (var name2 in next3)
      if (Object.prototype.hasOwnProperty.call(next3, name2)) {
        var value = next3[name2];
        if (typeof value == "string")
          elt.setAttribute(name2, value);
        else if (value != null)
          elt[name2] = value;
      }
    i3++;
  }
  for (; i3 < arguments.length; i3++)
    add(elt, arguments[i3]);
  return elt;
}
function add(elt, child) {
  if (typeof child == "string") {
    elt.appendChild(document.createTextNode(child));
  } else if (child == null) {
  } else if (child.nodeType != null) {
    elt.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i3 = 0; i3 < child.length; i3++)
      add(elt, child[i3]);
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}

// https://esm.sh/v135/@codemirror/search@6.5.8/es2020/search.development.mjs
var basicNormalize = typeof String.prototype.normalize == "function" ? (x7) => x7.normalize("NFKD") : (x7) => x7;
var SearchCursor = class {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(text, query, from3 = 0, to2 = text.length, normalize, test) {
    this.test = test;
    this.value = { from: 0, to: 0 };
    this.done = false;
    this.matches = [];
    this.buffer = "";
    this.bufferPos = 0;
    this.iter = text.iterRange(from3, to2);
    this.bufferStart = from3;
    this.normalize = normalize ? (x7) => normalize(basicNormalize(x7)) : basicNormalize;
    this.query = this.normalize(query);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      this.bufferStart += this.buffer.length;
      this.iter.next();
      if (this.iter.done)
        return -1;
      this.bufferPos = 0;
      this.buffer = this.iter.value;
    }
    return codePointAt(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    while (this.matches.length)
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let next3 = this.peek();
      if (next3 < 0) {
        this.done = true;
        return this;
      }
      let str = fromCodePoint(next3), start = this.bufferStart + this.bufferPos;
      this.bufferPos += codePointSize(next3);
      let norm = this.normalize(str);
      if (norm.length)
        for (let i3 = 0, pos = start; ; i3++) {
          let code5 = norm.charCodeAt(i3);
          let match3 = this.match(code5, pos, this.bufferPos + this.bufferStart);
          if (i3 == norm.length - 1) {
            if (match3) {
              this.value = match3;
              return this;
            }
            break;
          }
          if (pos == start && i3 < str.length && str.charCodeAt(i3) == code5)
            pos++;
        }
    }
  }
  match(code5, pos, end) {
    let match3 = null;
    for (let i3 = 0; i3 < this.matches.length; i3 += 2) {
      let index = this.matches[i3], keep = false;
      if (this.query.charCodeAt(index) == code5) {
        if (index == this.query.length - 1) {
          match3 = { from: this.matches[i3 + 1], to: end };
        } else {
          this.matches[i3]++;
          keep = true;
        }
      }
      if (!keep) {
        this.matches.splice(i3, 2);
        i3 -= 2;
      }
    }
    if (this.query.charCodeAt(0) == code5) {
      if (this.query.length == 1)
        match3 = { from: pos, to: end };
      else
        this.matches.push(1, pos);
    }
    if (match3 && this.test && !this.test(match3.from, match3.to, this.buffer, this.bufferStart))
      match3 = null;
    return match3;
  }
};
if (typeof Symbol != "undefined")
  SearchCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
var empty = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") };
var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
var RegExpCursor = class {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(text, query, options, from3 = 0, to2 = text.length) {
    this.text = text;
    this.to = to2;
    this.curLine = "";
    this.done = false;
    this.value = empty;
    if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
      return new MultilineRegExpCursor(text, query, options, from3, to2);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.iter = text.iter();
    let startLine = text.lineAt(from3);
    this.curLineStart = startLine.from;
    this.matchPos = toCharEnd(text, from3);
    this.getLine(this.curLineStart);
  }
  getLine(skip) {
    this.iter.next(skip);
    if (this.iter.lineBreak) {
      this.curLine = "";
    } else {
      this.curLine = this.iter.value;
      if (this.curLineStart + this.curLine.length > this.to)
        this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
      this.iter.next();
    }
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1;
    if (this.curLineStart > this.to)
      this.curLine = "";
    else
      this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let off = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = off;
      let match3 = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (match3) {
        let from3 = this.curLineStart + match3.index, to2 = from3 + match3[0].length;
        this.matchPos = toCharEnd(this.text, to2 + (from3 == to2 ? 1 : 0));
        if (from3 == this.curLineStart + this.curLine.length)
          this.nextLine();
        if ((from3 < to2 || from3 > this.value.to) && (!this.test || this.test(from3, to2, match3))) {
          this.value = { from: from3, to: to2, match: match3 };
          return this;
        }
        off = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to) {
        this.nextLine();
        off = 0;
      } else {
        this.done = true;
        return this;
      }
    }
  }
};
var flattened = /* @__PURE__ */ new WeakMap();
var FlattenedDoc = class _FlattenedDoc {
  constructor(from3, text) {
    this.from = from3;
    this.text = text;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(doc2, from3, to2) {
    let cached = flattened.get(doc2);
    if (!cached || cached.from >= to2 || cached.to <= from3) {
      let flat = new _FlattenedDoc(from3, doc2.sliceString(from3, to2));
      flattened.set(doc2, flat);
      return flat;
    }
    if (cached.from == from3 && cached.to == to2)
      return cached;
    let { text, from: cachedFrom } = cached;
    if (cachedFrom > from3) {
      text = doc2.sliceString(from3, cachedFrom) + text;
      cachedFrom = from3;
    }
    if (cached.to < to2)
      text += doc2.sliceString(cached.to, to2);
    flattened.set(doc2, new _FlattenedDoc(cachedFrom, text));
    return new _FlattenedDoc(from3, text.slice(from3 - cachedFrom, to2 - cachedFrom));
  }
};
var MultilineRegExpCursor = class {
  constructor(text, query, options, from3, to2) {
    this.text = text;
    this.to = to2;
    this.done = false;
    this.value = empty;
    this.matchPos = toCharEnd(text, from3);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.flat = FlattenedDoc.get(text, from3, this.chunkEnd(
      from3 + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(pos) {
    return pos >= this.to ? this.to : this.text.lineAt(pos).to;
  }
  next() {
    for (; ; ) {
      let off = this.re.lastIndex = this.matchPos - this.flat.from;
      let match3 = this.re.exec(this.flat.text);
      if (match3 && !match3[0] && match3.index == off) {
        this.re.lastIndex = off + 1;
        match3 = this.re.exec(this.flat.text);
      }
      if (match3) {
        let from3 = this.flat.from + match3.index, to2 = from3 + match3[0].length;
        if ((this.flat.to >= this.to || match3.index + match3[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from3, to2, match3))) {
          this.value = { from: from3, to: to2, match: match3 };
          this.matchPos = toCharEnd(this.text, to2 + (from3 == to2 ? 1 : 0));
          return this;
        }
      }
      if (this.flat.to == this.to) {
        this.done = true;
        return this;
      }
      this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
};
if (typeof Symbol != "undefined") {
  RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
function validRegExp(source) {
  try {
    new RegExp(source, baseFlags);
    return true;
  } catch (_a2) {
    return false;
  }
}
function toCharEnd(text, pos) {
  if (pos >= text.length)
    return pos;
  let line3 = text.lineAt(pos), next3;
  while (pos < line3.to && (next3 = line3.text.charCodeAt(pos - line3.from)) >= 56320 && next3 < 57344)
    pos++;
  return pos;
}
function createLineDialog(view) {
  let line3 = String(view.state.doc.lineAt(view.state.selection.main.head).number);
  let input = crelt("input", { class: "cm-textfield", name: "line", value: line3 });
  let dom = crelt("form", {
    class: "cm-gotoLine",
    onkeydown: (event) => {
      if (event.keyCode == 27) {
        event.preventDefault();
        view.dispatch({ effects: dialogEffect.of(false) });
        view.focus();
      } else if (event.keyCode == 13) {
        event.preventDefault();
        go2();
      }
    },
    onsubmit: (event) => {
      event.preventDefault();
      go2();
    }
  }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
  function go2() {
    let match3 = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
    if (!match3)
      return;
    let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
    let [, sign, ln2, cl, percent] = match3;
    let col = cl ? +cl.slice(1) : 0;
    let line22 = ln2 ? +ln2 : startLine.number;
    if (ln2 && percent) {
      let pc = line22 / 100;
      if (sign)
        pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
      line22 = Math.round(state.doc.lines * pc);
    } else if (ln2 && sign) {
      line22 = line22 * (sign == "-" ? -1 : 1) + startLine.number;
    }
    let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line22)));
    let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
    view.dispatch({
      effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: "center" })],
      selection
    });
    view.focus();
  }
  return { dom };
}
var dialogEffect = /* @__PURE__ */ StateEffect.define();
var dialogField = /* @__PURE__ */ StateField.define({
  create() {
    return true;
  },
  update(value, tr2) {
    for (let e of tr2.effects)
      if (e.is(dialogEffect))
        value = e.value;
    return value;
  },
  provide: (f4) => showPanel.from(f4, (val) => val ? createLineDialog : null)
});
var gotoLine = (view) => {
  let panel = getPanel(view, createLineDialog);
  if (!panel) {
    let effects = [dialogEffect.of(true)];
    if (view.state.field(dialogField, false) == null)
      effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$13]));
    view.dispatch({ effects });
    panel = getPanel(view, createLineDialog);
  }
  if (panel)
    panel.dom.querySelector("input").select();
  return true;
};
var baseTheme$13 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": { fontSize: "80%" }
  }
});
var defaultHighlightOptions = {
  highlightWordAroundCursor: false,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: false
};
var highlightConfig = /* @__PURE__ */ Facet.define({
  combine(options) {
    return combineConfig(options, defaultHighlightOptions, {
      highlightWordAroundCursor: (a7, b8) => a7 || b8,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function highlightSelectionMatches(options) {
  let ext = [defaultTheme, matchHighlighter];
  if (options)
    ext.push(highlightConfig.of(options));
  return ext;
}
var matchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch" });
var mainMatchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function insideWordBoundaries(check, state, from3, to2) {
  return (from3 == 0 || check(state.sliceDoc(from3 - 1, from3)) != CharCategory.Word) && (to2 == state.doc.length || check(state.sliceDoc(to2, to2 + 1)) != CharCategory.Word);
}
function insideWord(check, state, from3, to2) {
  return check(state.sliceDoc(from3, from3 + 1)) == CharCategory.Word && check(state.sliceDoc(to2 - 1, to2)) == CharCategory.Word;
}
var matchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.selectionSet || update.docChanged || update.viewportChanged)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let conf = view.state.facet(highlightConfig);
    let { state } = view, sel = state.selection;
    if (sel.ranges.length > 1)
      return Decoration.none;
    let range = sel.main, query, check = null;
    if (range.empty) {
      if (!conf.highlightWordAroundCursor)
        return Decoration.none;
      let word = state.wordAt(range.head);
      if (!word)
        return Decoration.none;
      check = state.charCategorizer(range.head);
      query = state.sliceDoc(word.from, word.to);
    } else {
      let len = range.to - range.from;
      if (len < conf.minSelectionLength || len > 200)
        return Decoration.none;
      if (conf.wholeWords) {
        query = state.sliceDoc(range.from, range.to);
        check = state.charCategorizer(range.head);
        if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to)))
          return Decoration.none;
      } else {
        query = state.sliceDoc(range.from, range.to);
        if (!query)
          return Decoration.none;
      }
    }
    let deco = [];
    for (let part of view.visibleRanges) {
      let cursor = new SearchCursor(state.doc, query, part.from, part.to);
      while (!cursor.next().done) {
        let { from: from3, to: to2 } = cursor.value;
        if (!check || insideWordBoundaries(check, state, from3, to2)) {
          if (range.empty && from3 <= range.from && to2 >= range.to)
            deco.push(mainMatchDeco.range(from3, to2));
          else if (from3 >= range.to || to2 <= range.from)
            deco.push(matchDeco.range(from3, to2));
          if (deco.length > conf.maxMatches)
            return Decoration.none;
        }
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v6) => v6.decorations
});
var defaultTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
});
var selectWord = ({ state, dispatch }) => {
  let { selection } = state;
  let newSel = EditorSelection.create(selection.ranges.map((range) => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
  if (newSel.eq(selection))
    return false;
  dispatch(state.update({ selection: newSel }));
  return true;
};
function findNextOccurrence(state, query) {
  let { main, ranges } = state.selection;
  let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
  for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to); ; ) {
    cursor.next();
    if (cursor.done) {
      if (cycled)
        return null;
      cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
      cycled = true;
    } else {
      if (cycled && ranges.some((r2) => r2.from == cursor.value.from))
        continue;
      if (fullWord) {
        let word2 = state.wordAt(cursor.value.from);
        if (!word2 || word2.from != cursor.value.from || word2.to != cursor.value.to)
          continue;
      }
      return cursor.value;
    }
  }
}
var selectNextOccurrence = ({ state, dispatch }) => {
  let { ranges } = state.selection;
  if (ranges.some((sel) => sel.from === sel.to))
    return selectWord({ state, dispatch });
  let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
  if (state.selection.ranges.some((r2) => state.sliceDoc(r2.from, r2.to) != searchedText))
    return false;
  let range = findNextOccurrence(state, searchedText);
  if (!range)
    return false;
  dispatch(state.update({
    selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
    effects: EditorView.scrollIntoView(range.to)
  }));
  return true;
};
var searchConfigFacet = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      top: false,
      caseSensitive: false,
      literal: false,
      regexp: false,
      wholeWord: false,
      createPanel: (view) => new SearchPanel(view),
      scrollToMatch: (range) => EditorView.scrollIntoView(range)
    });
  }
});
var SearchQuery = class {
  /**
  Create a query object.
  */
  constructor(config2) {
    this.search = config2.search;
    this.caseSensitive = !!config2.caseSensitive;
    this.literal = !!config2.literal;
    this.regexp = !!config2.regexp;
    this.replace = config2.replace || "";
    this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
    this.unquoted = this.unquote(this.search);
    this.wholeWord = !!config2.wholeWord;
  }
  /**
  @internal
  */
  unquote(text) {
    return this.literal ? text : text.replace(/\\([nrt\\])/g, (_7, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(other) {
    return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(state, from3 = 0, to2) {
    let st6 = state.doc ? state : EditorState.create({ doc: state });
    if (to2 == null)
      to2 = st6.doc.length;
    return this.regexp ? regexpCursor(this, st6, from3, to2) : stringCursor(this, st6, from3, to2);
  }
};
var QueryType2 = class {
  constructor(spec) {
    this.spec = spec;
  }
};
function stringCursor(spec, state, from3, to2) {
  return new SearchCursor(state.doc, spec.unquoted, from3, to2, spec.caseSensitive ? void 0 : (x7) => x7.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : void 0);
}
function stringWordTest(doc2, categorizer) {
  return (from3, to2, buf, bufPos) => {
    if (bufPos > from3 || bufPos + buf.length < to2) {
      bufPos = Math.max(0, from3 - 2);
      buf = doc2.sliceString(bufPos, Math.min(doc2.length, to2 + 2));
    }
    return (categorizer(charBefore(buf, from3 - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from3 - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to2 - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to2 - bufPos)) != CharCategory.Word);
  };
}
var StringQuery = class extends QueryType2 {
  constructor(spec) {
    super(spec);
  }
  nextMatch(state, curFrom, curTo) {
    let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
    if (cursor.done) {
      let end = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);
      cursor = stringCursor(this.spec, state, 0, end).nextOverlapping();
    }
    return cursor.done || cursor.value.from == curFrom && cursor.value.to == curTo ? null : cursor.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(state, from3, to2) {
    for (let pos = to2; ; ) {
      let start = Math.max(from3, pos - 1e4 - this.spec.unquoted.length);
      let cursor = stringCursor(this.spec, state, start, pos), range = null;
      while (!cursor.nextOverlapping().done)
        range = cursor.value;
      if (range)
        return range;
      if (start == from3)
        return null;
      pos -= 1e4;
    }
  }
  prevMatch(state, curFrom, curTo) {
    let found = this.prevMatchInRange(state, 0, curFrom);
    if (!found)
      found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);
    return found && (found.from != curFrom || found.to != curTo) ? found : null;
  }
  getReplacement(_result) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(state, limit) {
    let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor.value);
    }
    return ranges;
  }
  highlight(state, from3, to2, add2) {
    let cursor = stringCursor(this.spec, state, Math.max(0, from3 - this.spec.unquoted.length), Math.min(to2 + this.spec.unquoted.length, state.doc.length));
    while (!cursor.next().done)
      add2(cursor.value.from, cursor.value.to);
  }
};
function regexpCursor(spec, state, from3, to2) {
  return new RegExpCursor(state.doc, spec.search, {
    ignoreCase: !spec.caseSensitive,
    test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : void 0
  }, from3, to2);
}
function charBefore(str, index) {
  return str.slice(findClusterBreak(str, index, false), index);
}
function charAfter(str, index) {
  return str.slice(index, findClusterBreak(str, index));
}
function regexpWordTest(categorizer) {
  return (_from, _to, match3) => !match3[0].length || (categorizer(charBefore(match3.input, match3.index)) != CharCategory.Word || categorizer(charAfter(match3.input, match3.index)) != CharCategory.Word) && (categorizer(charAfter(match3.input, match3.index + match3[0].length)) != CharCategory.Word || categorizer(charBefore(match3.input, match3.index + match3[0].length)) != CharCategory.Word);
}
var RegExpQuery = class extends QueryType2 {
  nextMatch(state, curFrom, curTo) {
    let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
    if (cursor.done)
      cursor = regexpCursor(this.spec, state, 0, curFrom).next();
    return cursor.done ? null : cursor.value;
  }
  prevMatchInRange(state, from3, to2) {
    for (let size = 1; ; size++) {
      let start = Math.max(
        from3,
        to2 - size * 1e4
        /* FindPrev.ChunkSize */
      );
      let cursor = regexpCursor(this.spec, state, start, to2), range = null;
      while (!cursor.next().done)
        range = cursor.value;
      if (range && (start == from3 || range.from > start + 10))
        return range;
      if (start == from3)
        return null;
    }
  }
  prevMatch(state, curFrom, curTo) {
    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
  }
  getReplacement(result) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (m10, i3) => i3 == "$" ? "$" : i3 == "&" ? result.match[0] : i3 != "0" && +i3 < result.match.length ? result.match[i3] : m10);
  }
  matchAll(state, limit) {
    let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor.value);
    }
    return ranges;
  }
  highlight(state, from3, to2, add2) {
    let cursor = regexpCursor(this.spec, state, Math.max(
      0,
      from3 - 250
      /* RegExp.HighlightMargin */
    ), Math.min(to2 + 250, state.doc.length));
    while (!cursor.next().done)
      add2(cursor.value.from, cursor.value.to);
  }
};
var setSearchQuery = /* @__PURE__ */ StateEffect.define();
var togglePanel = /* @__PURE__ */ StateEffect.define();
var searchState = /* @__PURE__ */ StateField.define({
  create(state) {
    return new SearchState(defaultQuery(state).create(), null);
  },
  update(value, tr2) {
    for (let effect of tr2.effects) {
      if (effect.is(setSearchQuery))
        value = new SearchState(effect.value.create(), value.panel);
      else if (effect.is(togglePanel))
        value = new SearchState(value.query, effect.value ? createSearchPanel : null);
    }
    return value;
  },
  provide: (f4) => showPanel.from(f4, (val) => val.panel)
});
var SearchState = class {
  constructor(query, panel) {
    this.query = query;
    this.panel = panel;
  }
};
var matchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch" });
var selectedMatchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
var searchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.decorations = this.highlight(view.state.field(searchState));
  }
  update(update) {
    let state = update.state.field(searchState);
    if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
      this.decorations = this.highlight(state);
  }
  highlight({ query, panel }) {
    if (!panel || !query.spec.valid)
      return Decoration.none;
    let { view } = this;
    let builder = new RangeSetBuilder();
    for (let i3 = 0, ranges = view.visibleRanges, l7 = ranges.length; i3 < l7; i3++) {
      let { from: from3, to: to2 } = ranges[i3];
      while (i3 < l7 - 1 && to2 > ranges[i3 + 1].from - 2 * 250)
        to2 = ranges[++i3].to;
      query.highlight(view.state, from3, to2, (from22, to22) => {
        let selected = view.state.selection.ranges.some((r2) => r2.from == from22 && r2.to == to22);
        builder.add(from22, to22, selected ? selectedMatchMark : matchMark);
      });
    }
    return builder.finish();
  }
}, {
  decorations: (v6) => v6.decorations
});
function searchCommand(f4) {
  return (view) => {
    let state = view.state.field(searchState, false);
    return state && state.query.spec.valid ? f4(view, state) : openSearchPanel(view);
  };
}
var findNext = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { to: to2 } = view.state.selection.main;
  let next3 = query.nextMatch(view.state, to2, to2);
  if (!next3)
    return false;
  let selection = EditorSelection.single(next3.from, next3.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection,
    effects: [announceMatch(view, next3), config2.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var findPrevious = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { state } = view, { from: from3 } = state.selection.main;
  let prev3 = query.prevMatch(state, from3, from3);
  if (!prev3)
    return false;
  let selection = EditorSelection.single(prev3.from, prev3.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection,
    effects: [announceMatch(view, prev3), config2.scrollToMatch(selection.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var selectMatches = /* @__PURE__ */ searchCommand((view, { query }) => {
  let ranges = query.matchAll(view.state, 1e3);
  if (!ranges || !ranges.length)
    return false;
  view.dispatch({
    selection: EditorSelection.create(ranges.map((r2) => EditorSelection.range(r2.from, r2.to))),
    userEvent: "select.search.matches"
  });
  return true;
});
var selectSelectionMatches = ({ state, dispatch }) => {
  let sel = state.selection;
  if (sel.ranges.length > 1 || sel.main.empty)
    return false;
  let { from: from3, to: to2 } = sel.main;
  let ranges = [], main = 0;
  for (let cur2 = new SearchCursor(state.doc, state.sliceDoc(from3, to2)); !cur2.next().done; ) {
    if (ranges.length > 1e3)
      return false;
    if (cur2.value.from == from3)
      main = ranges.length;
    ranges.push(EditorSelection.range(cur2.value.from, cur2.value.to));
  }
  dispatch(state.update({
    selection: EditorSelection.create(ranges, main),
    userEvent: "select.search.matches"
  }));
  return true;
};
var replaceNext = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { state } = view, { from: from3, to: to2 } = state.selection.main;
  if (state.readOnly)
    return false;
  let match3 = query.nextMatch(state, from3, from3);
  if (!match3)
    return false;
  let next3 = match3;
  let changes = [], selection, replacement;
  let effects = [];
  if (next3.from == from3 && next3.to == to2) {
    replacement = state.toText(query.getReplacement(next3));
    changes.push({ from: next3.from, to: next3.to, insert: replacement });
    next3 = query.nextMatch(state, next3.from, next3.to);
    effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from3).number) + "."));
  }
  if (next3) {
    let off = changes.length == 0 || changes[0].from >= match3.to ? 0 : match3.to - match3.from - replacement.length;
    selection = EditorSelection.single(next3.from - off, next3.to - off);
    effects.push(announceMatch(view, next3));
    effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
  }
  view.dispatch({
    changes,
    selection,
    effects,
    userEvent: "input.replace"
  });
  return true;
});
var replaceAll = /* @__PURE__ */ searchCommand((view, { query }) => {
  if (view.state.readOnly)
    return false;
  let changes = query.matchAll(view.state, 1e9).map((match3) => {
    let { from: from3, to: to2 } = match3;
    return { from: from3, to: to2, insert: query.getReplacement(match3) };
  });
  if (!changes.length)
    return false;
  let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
  view.dispatch({
    changes,
    effects: EditorView.announce.of(announceText),
    userEvent: "input.replace.all"
  });
  return true;
});
function createSearchPanel(view) {
  return view.state.facet(searchConfigFacet).createPanel(view);
}
function defaultQuery(state, fallback) {
  var _a2, _b, _c, _d, _e6;
  let sel = state.selection.main;
  let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
  if (fallback && !selText)
    return fallback;
  let config2 = state.facet(searchConfigFacet);
  return new SearchQuery({
    search: ((_a2 = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a2 !== void 0 ? _a2 : config2.literal) ? selText : selText.replace(/\n/g, "\\n"),
    caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config2.caseSensitive,
    literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config2.literal,
    regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config2.regexp,
    wholeWord: (_e6 = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e6 !== void 0 ? _e6 : config2.wholeWord
  });
}
function getSearchInput(view) {
  let panel = getPanel(view, createSearchPanel);
  return panel && panel.dom.querySelector("[main-field]");
}
function selectSearchInput(view) {
  let input = getSearchInput(view);
  if (input && input == view.root.activeElement)
    input.select();
}
var openSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (state && state.panel) {
    let searchInput = getSearchInput(view);
    if (searchInput && searchInput != view.root.activeElement) {
      let query = defaultQuery(view.state, state.query.spec);
      if (query.valid)
        view.dispatch({ effects: setSearchQuery.of(query) });
      searchInput.focus();
      searchInput.select();
    }
  } else {
    view.dispatch({ effects: [
      togglePanel.of(true),
      state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
    ] });
  }
  return true;
};
var closeSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (!state || !state.panel)
    return false;
  let panel = getPanel(view, createSearchPanel);
  if (panel && panel.dom.contains(view.root.activeElement))
    view.focus();
  view.dispatch({ effects: togglePanel.of(false) });
  return true;
};
var searchKeymap = [
  { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
  { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: selectSelectionMatches },
  { key: "Mod-Alt-g", run: gotoLine },
  { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
];
var SearchPanel = class {
  constructor(view) {
    this.view = view;
    let query = this.query = view.state.field(searchState).query.spec;
    this.commit = this.commit.bind(this);
    this.searchField = crelt("input", {
      value: query.search,
      placeholder: phrase(view, "Find"),
      "aria-label": phrase(view, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.replaceField = crelt("input", {
      value: query.replace,
      placeholder: phrase(view, "Replace"),
      "aria-label": phrase(view, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.caseField = crelt("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: query.caseSensitive,
      onchange: this.commit
    });
    this.reField = crelt("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: query.regexp,
      onchange: this.commit
    });
    this.wordField = crelt("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: query.wholeWord,
      onchange: this.commit
    });
    function button(name2, onclick, content2) {
      return crelt("button", { class: "cm-button", name: name2, onclick, type: "button" }, content2);
    }
    this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
      this.searchField,
      button("next", () => findNext(view), [phrase(view, "next")]),
      button("prev", () => findPrevious(view), [phrase(view, "previous")]),
      button("select", () => selectMatches(view), [phrase(view, "all")]),
      crelt("label", null, [this.caseField, phrase(view, "match case")]),
      crelt("label", null, [this.reField, phrase(view, "regexp")]),
      crelt("label", null, [this.wordField, phrase(view, "by word")]),
      ...view.state.readOnly ? [] : [
        crelt("br"),
        this.replaceField,
        button("replace", () => replaceNext(view), [phrase(view, "replace")]),
        button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
      ],
      crelt("button", {
        name: "close",
        onclick: () => closeSearchPanel(view),
        "aria-label": phrase(view, "close"),
        type: "button"
      }, ["×"])
    ]);
  }
  commit() {
    let query = new SearchQuery({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    if (!query.eq(this.query)) {
      this.query = query;
      this.view.dispatch({ effects: setSearchQuery.of(query) });
    }
  }
  keydown(e) {
    if (runScopeHandlers(this.view, e, "search-panel")) {
      e.preventDefault();
    } else if (e.keyCode == 13 && e.target == this.searchField) {
      e.preventDefault();
      (e.shiftKey ? findPrevious : findNext)(this.view);
    } else if (e.keyCode == 13 && e.target == this.replaceField) {
      e.preventDefault();
      replaceNext(this.view);
    }
  }
  update(update) {
    for (let tr2 of update.transactions)
      for (let effect of tr2.effects) {
        if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
          this.setQuery(effect.value);
      }
  }
  setQuery(query) {
    this.query = query;
    this.searchField.value = query.search;
    this.replaceField.value = query.replace;
    this.caseField.checked = query.caseSensitive;
    this.reField.checked = query.regexp;
    this.wordField.checked = query.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(searchConfigFacet).top;
  }
};
function phrase(view, phrase2) {
  return view.state.phrase(phrase2);
}
var AnnounceMargin = 30;
var Break = /[\s\.,:;?!]/;
function announceMatch(view, { from: from3, to: to2 }) {
  let line3 = view.state.doc.lineAt(from3), lineEnd = view.state.doc.lineAt(to2).to;
  let start = Math.max(line3.from, from3 - AnnounceMargin), end = Math.min(lineEnd, to2 + AnnounceMargin);
  let text = view.state.sliceDoc(start, end);
  if (start != line3.from) {
    for (let i3 = 0; i3 < AnnounceMargin; i3++)
      if (!Break.test(text[i3 + 1]) && Break.test(text[i3])) {
        text = text.slice(i3);
        break;
      }
  }
  if (end != lineEnd) {
    for (let i3 = text.length - 1; i3 > text.length - AnnounceMargin; i3--)
      if (!Break.test(text[i3 - 1]) && Break.test(text[i3])) {
        text = text.slice(0, i3);
        break;
      }
  }
  return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line3.number}.`);
}
var baseTheme3 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
});
var searchExtensions = [
  searchState,
  /* @__PURE__ */ Prec.low(searchHighlighter),
  baseTheme3
];

// https://esm.sh/v135/@codemirror/autocomplete@6.18.3/es2020/autocomplete.development.mjs
var CompletionContext = class {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(state, pos, explicit, view) {
    this.state = state;
    this.pos = pos;
    this.explicit = explicit;
    this.view = view;
    this.abortListeners = [];
    this.abortOnDocChange = false;
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(types2) {
    let token3 = syntaxTree(this.state).resolveInner(this.pos, -1);
    while (token3 && types2.indexOf(token3.name) < 0)
      token3 = token3.parent;
    return token3 ? {
      from: token3.from,
      to: this.pos,
      text: this.state.sliceDoc(token3.from, this.pos),
      type: token3.type
    } : null;
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(expr) {
    let line3 = this.state.doc.lineAt(this.pos);
    let start = Math.max(line3.from, this.pos - 250);
    let str = line3.text.slice(start - line3.from, this.pos - line3.from);
    let found = str.search(ensureAnchor(expr, false));
    return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null;
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  
  By default, running queries will not be aborted for regular
  typing or backspacing, on the assumption that they are likely to
  return a result with a
  [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
  allows the result to be used after all. Passing `onDocChange:
  true` will cause this query to be aborted for any document
  change.
  */
  addEventListener(type, listener, options) {
    if (type == "abort" && this.abortListeners) {
      this.abortListeners.push(listener);
      if (options && options.onDocChange)
        this.abortOnDocChange = true;
    }
  }
};
function toSet(chars) {
  let flat = Object.keys(chars).join("");
  let words = /\w/.test(flat);
  if (words)
    flat = flat.replace(/\w/g, "");
  return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
}
function prefixMatch(options) {
  let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
  for (let { label } of options) {
    first[label[0]] = true;
    for (let i3 = 1; i3 < label.length; i3++)
      rest[label[i3]] = true;
  }
  let source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
function completeFromList(list) {
  let options = list.map((o2) => typeof o2 == "string" ? { label: o2 } : o2);
  let [validFor, match3] = options.every((o2) => /^\w+$/.test(o2.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
  return (context) => {
    let token3 = context.matchBefore(match3);
    return token3 || context.explicit ? { from: token3 ? token3.from : context.pos, options, validFor } : null;
  };
}
function ifNotIn(nodes, source) {
  return (context) => {
    for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1)
        return null;
      if (pos.type.isTop)
        break;
    }
    return source(context);
  };
}
var Option2 = class {
  constructor(completion, source, match3, score2) {
    this.completion = completion;
    this.source = source;
    this.match = match3;
    this.score = score2;
  }
};
function cur(state) {
  return state.selection.main.from;
}
function ensureAnchor(expr, start) {
  var _a2;
  let { source } = expr;
  let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd)
    return expr;
  return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a2 = expr.flags) !== null && _a2 !== void 0 ? _a2 : expr.ignoreCase ? "i" : "");
}
var pickedCompletion = /* @__PURE__ */ Annotation.define();
function insertCompletionText(state, text, from3, to2) {
  let { main } = state.selection, fromOff = from3 - main.from, toOff = to2 - main.from;
  return Object.assign(Object.assign({}, state.changeByRange((range) => {
    if (range != main && from3 != to2 && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from3, to2))
      return { range };
    let lines = state.toText(text);
    return {
      changes: { from: range.from + fromOff, to: to2 == main.from ? range.to : range.from + toOff, insert: lines },
      range: EditorSelection.cursor(range.from + fromOff + lines.length)
    };
  })), { scrollIntoView: true, userEvent: "input.complete" });
}
var SourceCache = /* @__PURE__ */ new WeakMap();
function asSource(source) {
  if (!Array.isArray(source))
    return source;
  let known = SourceCache.get(source);
  if (!known)
    SourceCache.set(source, known = completeFromList(source));
  return known;
}
var startCompletionEffect = /* @__PURE__ */ StateEffect.define();
var closeCompletionEffect = /* @__PURE__ */ StateEffect.define();
var FuzzyMatcher = class {
  constructor(pattern) {
    this.pattern = pattern;
    this.chars = [];
    this.folded = [];
    this.any = [];
    this.precise = [];
    this.byWord = [];
    this.score = 0;
    this.matched = [];
    for (let p8 = 0; p8 < pattern.length; ) {
      let char3 = codePointAt(pattern, p8), size = codePointSize(char3);
      this.chars.push(char3);
      let part = pattern.slice(p8, p8 + size), upper = part.toUpperCase();
      this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
      p8 += size;
    }
    this.astral = pattern.length != this.chars.length;
  }
  ret(score2, matched) {
    this.score = score2;
    this.matched = matched;
    return this;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(word) {
    if (this.pattern.length == 0)
      return this.ret(-100, []);
    if (word.length < this.pattern.length)
      return null;
    let { chars, folded, any, precise, byWord } = this;
    if (chars.length == 1) {
      let first = codePointAt(word, 0), firstSize = codePointSize(first);
      let score2 = firstSize == word.length ? 0 : -100;
      if (first == chars[0])
        ;
      else if (first == folded[0])
        score2 += -200;
      else
        return null;
      return this.ret(score2, [0, firstSize]);
    }
    let direct = word.indexOf(this.pattern);
    if (direct == 0)
      return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
    let len = chars.length, anyTo = 0;
    if (direct < 0) {
      for (let i3 = 0, e = Math.min(word.length, 200); i3 < e && anyTo < len; ) {
        let next3 = codePointAt(word, i3);
        if (next3 == chars[anyTo] || next3 == folded[anyTo])
          any[anyTo++] = i3;
        i3 += codePointSize(next3);
      }
      if (anyTo < len)
        return null;
    }
    let preciseTo = 0;
    let byWordTo = 0, byWordFolded = false;
    let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
    let hasLower = /[a-z]/.test(word), wordAdjacent = true;
    for (let i3 = 0, e = Math.min(word.length, 200), prevType = 0; i3 < e && byWordTo < len; ) {
      let next3 = codePointAt(word, i3);
      if (direct < 0) {
        if (preciseTo < len && next3 == chars[preciseTo])
          precise[preciseTo++] = i3;
        if (adjacentTo < len) {
          if (next3 == chars[adjacentTo] || next3 == folded[adjacentTo]) {
            if (adjacentTo == 0)
              adjacentStart = i3;
            adjacentEnd = i3 + 1;
            adjacentTo++;
          } else {
            adjacentTo = 0;
          }
        }
      }
      let ch, type = next3 < 255 ? next3 >= 48 && next3 <= 57 || next3 >= 97 && next3 <= 122 ? 2 : next3 >= 65 && next3 <= 90 ? 1 : 0 : (ch = fromCodePoint(next3)) != ch.toLowerCase() ? 1 : ch != ch.toUpperCase() ? 2 : 0;
      if (!i3 || type == 1 && hasLower || prevType == 0 && type != 0) {
        if (chars[byWordTo] == next3 || folded[byWordTo] == next3 && (byWordFolded = true))
          byWord[byWordTo++] = i3;
        else if (byWord.length)
          wordAdjacent = false;
      }
      prevType = type;
      i3 += codePointSize(next3);
    }
    if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
      return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
    if (adjacentTo == len && adjacentStart == 0)
      return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
    if (direct > -1)
      return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
    if (adjacentTo == len)
      return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
    if (byWordTo == len)
      return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
    return chars.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
  }
  result(score2, positions, word) {
    let result = [], i3 = 0;
    for (let pos of positions) {
      let to2 = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
      if (i3 && result[i3 - 1] == pos)
        result[i3 - 1] = to2;
      else {
        result[i3++] = pos;
        result[i3++] = to2;
      }
    }
    return this.ret(score2 - word.length, result);
  }
};
var StrictMatcher = class {
  constructor(pattern) {
    this.pattern = pattern;
    this.matched = [];
    this.score = 0;
    this.folded = pattern.toLowerCase();
  }
  match(word) {
    if (word.length < this.pattern.length)
      return null;
    let start = word.slice(0, this.pattern.length);
    let match3 = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 : null;
    if (match3 == null)
      return null;
    this.matched = [0, start.length];
    this.score = match3 + (word.length == this.pattern.length ? 0 : -100);
    return this;
  }
};
var completionConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      activateOnTyping: true,
      activateOnCompletion: () => false,
      activateOnTypingDelay: 100,
      selectOnOpen: true,
      override: null,
      closeOnBlur: true,
      maxRenderedOptions: 100,
      defaultKeymap: true,
      tooltipClass: () => "",
      optionClass: () => "",
      aboveCursor: false,
      icons: true,
      addToOptions: [],
      positionInfo: defaultPositionInfo,
      filterStrict: false,
      compareCompletions: (a7, b8) => a7.label.localeCompare(b8.label),
      interactionDelay: 75,
      updateSyncTime: 100
    }, {
      defaultKeymap: (a7, b8) => a7 && b8,
      closeOnBlur: (a7, b8) => a7 && b8,
      icons: (a7, b8) => a7 && b8,
      tooltipClass: (a7, b8) => (c2) => joinClass(a7(c2), b8(c2)),
      optionClass: (a7, b8) => (c2) => joinClass(a7(c2), b8(c2)),
      addToOptions: (a7, b8) => a7.concat(b8),
      filterStrict: (a7, b8) => a7 || b8
    });
  }
});
function joinClass(a7, b8) {
  return a7 ? b8 ? a7 + " " + b8 : a7 : b8;
}
function defaultPositionInfo(view, list, option, info, space2, tooltip) {
  let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
  let side = "top", offset, maxWidth;
  let spaceLeft = list.left - space2.left, spaceRight = space2.right - list.right;
  let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
  if (left && spaceLeft < Math.min(infoWidth, spaceRight))
    left = false;
  else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
    left = true;
  if (infoWidth <= (left ? spaceLeft : spaceRight)) {
    offset = Math.max(space2.top, Math.min(option.top, space2.bottom - infoHeight)) - list.top;
    maxWidth = Math.min(400, left ? spaceLeft : spaceRight);
  } else {
    narrow = true;
    maxWidth = Math.min(
      400,
      (rtl ? list.right : space2.right - list.left) - 30
      /* Info.Margin */
    );
    let spaceBelow = space2.bottom - list.bottom;
    if (spaceBelow >= infoHeight || spaceBelow > list.top) {
      offset = option.bottom - list.top;
    } else {
      side = "bottom";
      offset = list.bottom - option.top;
    }
  }
  let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
  let scaleX = (list.right - list.left) / tooltip.offsetWidth;
  return {
    style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
    class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
  };
}
function optionContent(config2) {
  let content2 = config2.addToOptions.slice();
  if (config2.icons)
    content2.push({
      render(completion) {
        let icon = document.createElement("div");
        icon.classList.add("cm-completionIcon");
        if (completion.type)
          icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
        icon.setAttribute("aria-hidden", "true");
        return icon;
      },
      position: 20
    });
  content2.push({
    render(completion, _s2, _v, match3) {
      let labelElt = document.createElement("span");
      labelElt.className = "cm-completionLabel";
      let label = completion.displayLabel || completion.label, off = 0;
      for (let j11 = 0; j11 < match3.length; ) {
        let from3 = match3[j11++], to2 = match3[j11++];
        if (from3 > off)
          labelElt.appendChild(document.createTextNode(label.slice(off, from3)));
        let span = labelElt.appendChild(document.createElement("span"));
        span.appendChild(document.createTextNode(label.slice(from3, to2)));
        span.className = "cm-completionMatchedText";
        off = to2;
      }
      if (off < label.length)
        labelElt.appendChild(document.createTextNode(label.slice(off)));
      return labelElt;
    },
    position: 50
  }, {
    render(completion) {
      if (!completion.detail)
        return null;
      let detailElt = document.createElement("span");
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = completion.detail;
      return detailElt;
    },
    position: 80
  });
  return content2.sort((a7, b8) => a7.position - b8.position).map((a7) => a7.render);
}
function rangeAroundSelected(total, selected, max) {
  if (total <= max)
    return { from: 0, to: total };
  if (selected < 0)
    selected = 0;
  if (selected <= total >> 1) {
    let off2 = Math.floor(selected / max);
    return { from: off2 * max, to: (off2 + 1) * max };
  }
  let off = Math.floor((total - selected) / max);
  return { from: total - (off + 1) * max, to: total - off * max };
}
var CompletionTooltip = class {
  constructor(view, stateField, applyCompletion2) {
    this.view = view;
    this.stateField = stateField;
    this.applyCompletion = applyCompletion2;
    this.info = null;
    this.infoDestroy = null;
    this.placeInfoReq = {
      read: () => this.measureInfo(),
      write: (pos) => this.placeInfo(pos),
      key: this
    };
    this.space = null;
    this.currentClass = "";
    let cState = view.state.field(stateField);
    let { options, selected } = cState.open;
    let config2 = view.state.facet(completionConfig);
    this.optionContent = optionContent(config2);
    this.optionClass = config2.optionClass;
    this.tooltipClass = config2.tooltipClass;
    this.range = rangeAroundSelected(options.length, selected, config2.maxRenderedOptions);
    this.dom = document.createElement("div");
    this.dom.className = "cm-tooltip-autocomplete";
    this.updateTooltipClass(view.state);
    this.dom.addEventListener("mousedown", (e) => {
      let { options: options2 } = view.state.field(stateField).open;
      for (let dom = e.target, match3; dom && dom != this.dom; dom = dom.parentNode) {
        if (dom.nodeName == "LI" && (match3 = /-(\d+)$/.exec(dom.id)) && +match3[1] < options2.length) {
          this.applyCompletion(view, options2[+match3[1]]);
          e.preventDefault();
          return;
        }
      }
    });
    this.dom.addEventListener("focusout", (e) => {
      let state = view.state.field(this.stateField, false);
      if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM)
        view.dispatch({ effects: closeCompletionEffect.of(null) });
    });
    this.showOptions(options, cState.id);
  }
  mount() {
    this.updateSel();
  }
  showOptions(options, id2) {
    if (this.list)
      this.list.remove();
    this.list = this.dom.appendChild(this.createListBox(options, id2, this.range));
    this.list.addEventListener("scroll", () => {
      if (this.info)
        this.view.requestMeasure(this.placeInfoReq);
    });
  }
  update(update) {
    var _a2;
    let cState = update.state.field(this.stateField);
    let prevState = update.startState.field(this.stateField);
    this.updateTooltipClass(update.state);
    if (cState != prevState) {
      let { options, selected, disabled } = cState.open;
      if (!prevState.open || prevState.open.options != options) {
        this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
        this.showOptions(options, cState.id);
      }
      this.updateSel();
      if (disabled != ((_a2 = prevState.open) === null || _a2 === void 0 ? void 0 : _a2.disabled))
        this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
    }
  }
  updateTooltipClass(state) {
    let cls = this.tooltipClass(state);
    if (cls != this.currentClass) {
      for (let c2 of this.currentClass.split(" "))
        if (c2)
          this.dom.classList.remove(c2);
      for (let c2 of cls.split(" "))
        if (c2)
          this.dom.classList.add(c2);
      this.currentClass = cls;
    }
  }
  positioned(space2) {
    this.space = space2;
    if (this.info)
      this.view.requestMeasure(this.placeInfoReq);
  }
  updateSel() {
    let cState = this.view.state.field(this.stateField), open = cState.open;
    if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
      this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
      this.showOptions(open.options, cState.id);
    }
    if (this.updateSelectedOption(open.selected)) {
      this.destroyInfo();
      let { completion } = open.options[open.selected];
      let { info } = completion;
      if (!info)
        return;
      let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
      if (!infoResult)
        return;
      if ("then" in infoResult) {
        infoResult.then((obj) => {
          if (obj && this.view.state.field(this.stateField, false) == cState)
            this.addInfoPane(obj, completion);
        }).catch((e) => logException(this.view.state, e, "completion info"));
      } else {
        this.addInfoPane(infoResult, completion);
      }
    }
  }
  addInfoPane(content2, completion) {
    this.destroyInfo();
    let wrap = this.info = document.createElement("div");
    wrap.className = "cm-tooltip cm-completionInfo";
    if (content2.nodeType != null) {
      wrap.appendChild(content2);
      this.infoDestroy = null;
    } else {
      let { dom, destroy } = content2;
      wrap.appendChild(dom);
      this.infoDestroy = destroy || null;
    }
    this.dom.appendChild(wrap);
    this.view.requestMeasure(this.placeInfoReq);
  }
  updateSelectedOption(selected) {
    let set = null;
    for (let opt = this.list.firstChild, i3 = this.range.from; opt; opt = opt.nextSibling, i3++) {
      if (opt.nodeName != "LI" || !opt.id) {
        i3--;
      } else if (i3 == selected) {
        if (!opt.hasAttribute("aria-selected")) {
          opt.setAttribute("aria-selected", "true");
          set = opt;
        }
      } else {
        if (opt.hasAttribute("aria-selected"))
          opt.removeAttribute("aria-selected");
      }
    }
    if (set)
      scrollIntoView2(this.list, set);
    return set;
  }
  measureInfo() {
    let sel = this.dom.querySelector("[aria-selected]");
    if (!sel || !this.info)
      return null;
    let listRect = this.dom.getBoundingClientRect();
    let infoRect = this.info.getBoundingClientRect();
    let selRect = sel.getBoundingClientRect();
    let space2 = this.space;
    if (!space2) {
      let win = this.dom.ownerDocument.defaultView || window;
      space2 = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
    }
    if (selRect.top > Math.min(space2.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space2.top, listRect.top) + 10)
      return null;
    return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space2, this.dom);
  }
  placeInfo(pos) {
    if (this.info) {
      if (pos) {
        if (pos.style)
          this.info.style.cssText = pos.style;
        this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
      } else {
        this.info.style.cssText = "top: -1e6px";
      }
    }
  }
  createListBox(options, id2, range) {
    const ul = document.createElement("ul");
    ul.id = id2;
    ul.setAttribute("role", "listbox");
    ul.setAttribute("aria-expanded", "true");
    ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
    let curSection = null;
    for (let i3 = range.from; i3 < range.to; i3++) {
      let { completion, match: match3 } = options[i3], { section } = completion;
      if (section) {
        let name2 = typeof section == "string" ? section : section.name;
        if (name2 != curSection && (i3 > range.from || range.from == 0)) {
          curSection = name2;
          if (typeof section != "string" && section.header) {
            ul.appendChild(section.header(section));
          } else {
            let header = ul.appendChild(document.createElement("completion-section"));
            header.textContent = name2;
          }
        }
      }
      const li2 = ul.appendChild(document.createElement("li"));
      li2.id = id2 + "-" + i3;
      li2.setAttribute("role", "option");
      let cls = this.optionClass(completion);
      if (cls)
        li2.className = cls;
      for (let source of this.optionContent) {
        let node3 = source(completion, this.view.state, this.view, match3);
        if (node3)
          li2.appendChild(node3);
      }
    }
    if (range.from)
      ul.classList.add("cm-completionListIncompleteTop");
    if (range.to < options.length)
      ul.classList.add("cm-completionListIncompleteBottom");
    return ul;
  }
  destroyInfo() {
    if (this.info) {
      if (this.infoDestroy)
        this.infoDestroy();
      this.info.remove();
      this.info = null;
    }
  }
  destroy() {
    this.destroyInfo();
  }
};
function completionTooltip(stateField, applyCompletion2) {
  return (view) => new CompletionTooltip(view, stateField, applyCompletion2);
}
function scrollIntoView2(container, element2) {
  let parent = container.getBoundingClientRect();
  let self2 = element2.getBoundingClientRect();
  let scaleY = parent.height / container.offsetHeight;
  if (self2.top < parent.top)
    container.scrollTop -= (parent.top - self2.top) / scaleY;
  else if (self2.bottom > parent.bottom)
    container.scrollTop += (self2.bottom - parent.bottom) / scaleY;
}
function score(option) {
  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
}
function sortOptions(active, state) {
  let options = [];
  let sections = null;
  let addOption = (option) => {
    options.push(option);
    let { section } = option.completion;
    if (section) {
      if (!sections)
        sections = [];
      let name2 = typeof section == "string" ? section : section.name;
      if (!sections.some((s66) => s66.name == name2))
        sections.push(typeof section == "string" ? { name: name2 } : section);
    }
  };
  let conf = state.facet(completionConfig);
  for (let a7 of active)
    if (a7.hasResult()) {
      let getMatch = a7.result.getMatch;
      if (a7.result.filter === false) {
        for (let option of a7.result.options) {
          addOption(new Option2(option, a7.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
        }
      } else {
        let pattern = state.sliceDoc(a7.from, a7.to), match3;
        let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
        for (let option of a7.result.options)
          if (match3 = matcher.match(option.label)) {
            let matched = !option.displayLabel ? match3.matched : getMatch ? getMatch(option, match3.matched) : [];
            addOption(new Option2(option, a7.source, matched, match3.score + (option.boost || 0)));
          }
      }
    }
  if (sections) {
    let sectionOrder = /* @__PURE__ */ Object.create(null), pos = 0;
    let cmp = (a7, b8) => {
      var _a2, _b;
      return ((_a2 = a7.rank) !== null && _a2 !== void 0 ? _a2 : 1e9) - ((_b = b8.rank) !== null && _b !== void 0 ? _b : 1e9) || (a7.name < b8.name ? -1 : 1);
    };
    for (let s66 of sections.sort(cmp)) {
      pos -= 1e5;
      sectionOrder[s66.name] = pos;
    }
    for (let option of options) {
      let { section } = option.completion;
      if (section)
        option.score += sectionOrder[typeof section == "string" ? section : section.name];
    }
  }
  let result = [], prev3 = null;
  let compare2 = conf.compareCompletions;
  for (let opt of options.sort((a7, b8) => b8.score - a7.score || compare2(a7.completion, b8.completion))) {
    let cur2 = opt.completion;
    if (!prev3 || prev3.label != cur2.label || prev3.detail != cur2.detail || prev3.type != null && cur2.type != null && prev3.type != cur2.type || prev3.apply != cur2.apply || prev3.boost != cur2.boost)
      result.push(opt);
    else if (score(opt.completion) > score(prev3))
      result[result.length - 1] = opt;
    prev3 = opt.completion;
  }
  return result;
}
var CompletionDialog = class _CompletionDialog {
  constructor(options, attrs, tooltip, timestamp, selected, disabled) {
    this.options = options;
    this.attrs = attrs;
    this.tooltip = tooltip;
    this.timestamp = timestamp;
    this.selected = selected;
    this.disabled = disabled;
  }
  setSelected(selected, id2) {
    return selected == this.selected || selected >= this.options.length ? this : new _CompletionDialog(this.options, makeAttrs(id2, selected), this.tooltip, this.timestamp, selected, this.disabled);
  }
  static build(active, state, id2, prev3, conf, didSetActive) {
    if (prev3 && !didSetActive && active.some((s66) => s66.isPending))
      return prev3.setDisabled();
    let options = sortOptions(active, state);
    if (!options.length)
      return prev3 && active.some((a7) => a7.isPending) ? prev3.setDisabled() : null;
    let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
    if (prev3 && prev3.selected != selected && prev3.selected != -1) {
      let selectedValue = prev3.options[prev3.selected].completion;
      for (let i3 = 0; i3 < options.length; i3++)
        if (options[i3].completion == selectedValue) {
          selected = i3;
          break;
        }
    }
    return new _CompletionDialog(options, makeAttrs(id2, selected), {
      pos: active.reduce((a7, b8) => b8.hasResult() ? Math.min(a7, b8.from) : a7, 1e8),
      create: createTooltip,
      above: conf.aboveCursor
    }, prev3 ? prev3.timestamp : Date.now(), selected, false);
  }
  map(changes) {
    return new _CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
  }
  setDisabled() {
    return new _CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
  }
};
var CompletionState = class _CompletionState {
  constructor(active, id2, open) {
    this.active = active;
    this.id = id2;
    this.open = open;
  }
  static start() {
    return new _CompletionState(none3, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
  }
  update(tr2) {
    let { state } = tr2, conf = state.facet(completionConfig);
    let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
    let active = sources.map((source) => {
      let value = this.active.find((s66) => s66.source == source) || new ActiveSource(
        source,
        this.active.some(
          (a7) => a7.state != 0
          /* State.Inactive */
        ) ? 1 : 0
        /* State.Inactive */
      );
      return value.update(tr2, conf);
    });
    if (active.length == this.active.length && active.every((a7, i3) => a7 == this.active[i3]))
      active = this.active;
    let open = this.open, didSet = tr2.effects.some((e) => e.is(setActiveEffect));
    if (open && tr2.docChanged)
      open = open.map(tr2.changes);
    if (tr2.selection || active.some((a7) => a7.hasResult() && tr2.changes.touchesRange(a7.from, a7.to)) || !sameResults(active, this.active) || didSet)
      open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
    else if (open && open.disabled && !active.some((a7) => a7.isPending))
      open = null;
    if (!open && active.every((a7) => !a7.isPending) && active.some((a7) => a7.hasResult()))
      active = active.map((a7) => a7.hasResult() ? new ActiveSource(
        a7.source,
        0
        /* State.Inactive */
      ) : a7);
    for (let effect of tr2.effects)
      if (effect.is(setSelectedEffect))
        open = open && open.setSelected(effect.value, this.id);
    return active == this.active && open == this.open ? this : new _CompletionState(active, this.id, open);
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null;
  }
  get attrs() {
    return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs2;
  }
};
function sameResults(a7, b8) {
  if (a7 == b8)
    return true;
  for (let iA = 0, iB = 0; ; ) {
    while (iA < a7.length && !a7[iA].hasResult())
      iA++;
    while (iB < b8.length && !b8[iB].hasResult())
      iB++;
    let endA = iA == a7.length, endB = iB == b8.length;
    if (endA || endB)
      return endA == endB;
    if (a7[iA++].result != b8[iB++].result)
      return false;
  }
}
var baseAttrs = {
  "aria-autocomplete": "list"
};
var noAttrs2 = {};
function makeAttrs(id2, selected) {
  let result = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": id2
  };
  if (selected > -1)
    result["aria-activedescendant"] = id2 + "-" + selected;
  return result;
}
var none3 = [];
function getUpdateType(tr2, conf) {
  if (tr2.isUserEvent("input.complete")) {
    let completion = tr2.annotation(pickedCompletion);
    if (completion && conf.activateOnCompletion(completion))
      return 4 | 8;
  }
  let typing = tr2.isUserEvent("input.type");
  return typing && conf.activateOnTyping ? 4 | 1 : typing ? 1 : tr2.isUserEvent("delete.backward") ? 2 : tr2.selection ? 8 : tr2.docChanged ? 16 : 0;
}
var ActiveSource = class _ActiveSource {
  constructor(source, state, explicit = false) {
    this.source = source;
    this.state = state;
    this.explicit = explicit;
  }
  hasResult() {
    return false;
  }
  get isPending() {
    return this.state == 1;
  }
  update(tr2, conf) {
    let type = getUpdateType(tr2, conf), value = this;
    if (type & 8 || type & 16 && this.touches(tr2))
      value = new _ActiveSource(
        value.source,
        0
        /* State.Inactive */
      );
    if (type & 4 && value.state == 0)
      value = new _ActiveSource(
        this.source,
        1
        /* State.Pending */
      );
    value = value.updateFor(tr2, type);
    for (let effect of tr2.effects) {
      if (effect.is(startCompletionEffect))
        value = new _ActiveSource(value.source, 1, effect.value);
      else if (effect.is(closeCompletionEffect))
        value = new _ActiveSource(
          value.source,
          0
          /* State.Inactive */
        );
      else if (effect.is(setActiveEffect)) {
        for (let active of effect.value)
          if (active.source == value.source)
            value = active;
      }
    }
    return value;
  }
  updateFor(tr2, type) {
    return this.map(tr2.changes);
  }
  map(changes) {
    return this;
  }
  touches(tr2) {
    return tr2.changes.touchesRange(cur(tr2.state));
  }
};
var ActiveResult = class _ActiveResult extends ActiveSource {
  constructor(source, explicit, limit, result, from3, to2) {
    super(source, 3, explicit);
    this.limit = limit;
    this.result = result;
    this.from = from3;
    this.to = to2;
  }
  hasResult() {
    return true;
  }
  updateFor(tr2, type) {
    var _a2;
    if (!(type & 3))
      return this.map(tr2.changes);
    let result = this.result;
    if (result.map && !tr2.changes.empty)
      result = result.map(result, tr2.changes);
    let from3 = tr2.changes.mapPos(this.from), to2 = tr2.changes.mapPos(this.to, 1);
    let pos = cur(tr2.state);
    if (pos > to2 || !result || type & 2 && (cur(tr2.startState) == this.from || pos < this.limit))
      return new ActiveSource(
        this.source,
        type & 4 ? 1 : 0
        /* State.Inactive */
      );
    let limit = tr2.changes.mapPos(this.limit);
    if (checkValid(result.validFor, tr2.state, from3, to2))
      return new _ActiveResult(this.source, this.explicit, limit, result, from3, to2);
    if (result.update && (result = result.update(result, from3, to2, new CompletionContext(tr2.state, pos, false))))
      return new _ActiveResult(this.source, this.explicit, limit, result, result.from, (_a2 = result.to) !== null && _a2 !== void 0 ? _a2 : cur(tr2.state));
    return new ActiveSource(this.source, 1, this.explicit);
  }
  map(mapping) {
    if (mapping.empty)
      return this;
    let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
    if (!result)
      return new ActiveSource(
        this.source,
        0
        /* State.Inactive */
      );
    return new _ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
  }
  touches(tr2) {
    return tr2.changes.touchesRange(this.from, this.to);
  }
};
function checkValid(validFor, state, from3, to2) {
  if (!validFor)
    return false;
  let text = state.sliceDoc(from3, to2);
  return typeof validFor == "function" ? validFor(text, from3, to2, state) : ensureAnchor(validFor, true).test(text);
}
var setActiveEffect = /* @__PURE__ */ StateEffect.define({
  map(sources, mapping) {
    return sources.map((s66) => s66.map(mapping));
  }
});
var setSelectedEffect = /* @__PURE__ */ StateEffect.define();
var completionState = /* @__PURE__ */ StateField.define({
  create() {
    return CompletionState.start();
  },
  update(value, tr2) {
    return value.update(tr2);
  },
  provide: (f4) => [
    showTooltip.from(f4, (val) => val.tooltip),
    EditorView.contentAttributes.from(f4, (state) => state.attrs)
  ]
});
function applyCompletion(view, option) {
  const apply = option.completion.apply || option.completion.label;
  let result = view.state.field(completionState).active.find((a7) => a7.source == option.source);
  if (!(result instanceof ActiveResult))
    return false;
  if (typeof apply == "string")
    view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
  else
    apply(view, option.completion, result.from, result.to);
  return true;
}
var createTooltip = /* @__PURE__ */ completionTooltip(completionState, applyCompletion);
function moveCompletionSelection(forward, by = "option") {
  return (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
      return false;
    let step = 1, tooltip;
    if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
      step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
    let { length: length3 } = cState.open.options;
    let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length3 - 1;
    if (selected < 0)
      selected = by == "page" ? 0 : length3 - 1;
    else if (selected >= length3)
      selected = by == "page" ? length3 - 1 : 0;
    view.dispatch({ effects: setSelectedEffect.of(selected) });
    return true;
  };
}
var acceptCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
    return false;
  return applyCompletion(view, cState.open.options[cState.open.selected]);
};
var startCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (!cState)
    return false;
  view.dispatch({ effects: startCompletionEffect.of(true) });
  return true;
};
var closeCompletion = (view) => {
  let cState = view.state.field(completionState, false);
  if (!cState || !cState.active.some(
    (a7) => a7.state != 0
    /* State.Inactive */
  ))
    return false;
  view.dispatch({ effects: closeCompletionEffect.of(null) });
  return true;
};
var RunningQuery = class {
  constructor(active, context) {
    this.active = active;
    this.context = context;
    this.time = Date.now();
    this.updates = [];
    this.done = void 0;
  }
};
var MaxUpdateCount = 50;
var MinAbortTime = 1e3;
var completionPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.debounceUpdate = -1;
    this.running = [];
    this.debounceAccept = -1;
    this.pendingStart = false;
    this.composing = 0;
    for (let active of view.state.field(completionState).active)
      if (active.isPending)
        this.startQuery(active);
  }
  update(update) {
    let cState = update.state.field(completionState);
    let conf = update.state.facet(completionConfig);
    if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
      return;
    let doesReset = update.transactions.some((tr2) => {
      let type = getUpdateType(tr2, conf);
      return type & 8 || (tr2.selection || tr2.docChanged) && !(type & 3);
    });
    for (let i3 = 0; i3 < this.running.length; i3++) {
      let query = this.running[i3];
      if (doesReset || query.context.abortOnDocChange && update.docChanged || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
        for (let handler of query.context.abortListeners) {
          try {
            handler();
          } catch (e) {
            logException(this.view.state, e);
          }
        }
        query.context.abortListeners = null;
        this.running.splice(i3--, 1);
      } else {
        query.updates.push(...update.transactions);
      }
    }
    if (this.debounceUpdate > -1)
      clearTimeout(this.debounceUpdate);
    if (update.transactions.some((tr2) => tr2.effects.some((e) => e.is(startCompletionEffect))))
      this.pendingStart = true;
    let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
    this.debounceUpdate = cState.active.some((a7) => a7.isPending && !this.running.some((q7) => q7.active.source == a7.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
    if (this.composing != 0)
      for (let tr2 of update.transactions) {
        if (tr2.isUserEvent("input.type"))
          this.composing = 2;
        else if (this.composing == 2 && tr2.selection)
          this.composing = 3;
      }
  }
  startUpdate() {
    this.debounceUpdate = -1;
    this.pendingStart = false;
    let { state } = this.view, cState = state.field(completionState);
    for (let active of cState.active) {
      if (active.isPending && !this.running.some((r2) => r2.active.source == active.source))
        this.startQuery(active);
    }
    if (this.running.length && cState.open && cState.open.disabled)
      this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
  }
  startQuery(active) {
    let { state } = this.view, pos = cur(state);
    let context = new CompletionContext(state, pos, active.explicit, this.view);
    let pending = new RunningQuery(active, context);
    this.running.push(pending);
    Promise.resolve(active.source(context)).then((result) => {
      if (!pending.context.aborted) {
        pending.done = result || null;
        this.scheduleAccept();
      }
    }, (err3) => {
      this.view.dispatch({ effects: closeCompletionEffect.of(null) });
      logException(this.view.state, err3);
    });
  }
  scheduleAccept() {
    if (this.running.every((q7) => q7.done !== void 0))
      this.accept();
    else if (this.debounceAccept < 0)
      this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
  }
  // For each finished query in this.running, try to create a result
  // or, if appropriate, restart the query.
  accept() {
    var _a2;
    if (this.debounceAccept > -1)
      clearTimeout(this.debounceAccept);
    this.debounceAccept = -1;
    let updated = [];
    let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
    for (let i3 = 0; i3 < this.running.length; i3++) {
      let query = this.running[i3];
      if (query.done === void 0)
        continue;
      this.running.splice(i3--, 1);
      if (query.done) {
        let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
        let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
        let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a2 = query.done.to) !== null && _a2 !== void 0 ? _a2 : pos);
        for (let tr2 of query.updates)
          active = active.update(tr2, conf);
        if (active.hasResult()) {
          updated.push(active);
          continue;
        }
      }
      let current = cState.active.find((a7) => a7.source == query.active.source);
      if (current && current.isPending) {
        if (query.done == null) {
          let active = new ActiveSource(
            query.active.source,
            0
            /* State.Inactive */
          );
          for (let tr2 of query.updates)
            active = active.update(tr2, conf);
          if (!active.isPending)
            updated.push(active);
        } else {
          this.startQuery(current);
        }
      }
    }
    if (updated.length || cState.open && cState.open.disabled)
      this.view.dispatch({ effects: setActiveEffect.of(updated) });
  }
}, {
  eventHandlers: {
    blur(event) {
      let state = this.view.state.field(completionState, false);
      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
        let dialog = state.open && getTooltip(this.view, state.open.tooltip);
        if (!dialog || !dialog.dom.contains(event.relatedTarget))
          setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
      }
    },
    compositionstart() {
      this.composing = 1;
    },
    compositionend() {
      if (this.composing == 3) {
        setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
      }
      this.composing = 0;
    }
  }
});
var windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
var commitCharacters = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.domEventHandlers({
  keydown(event, view) {
    let field = view.state.field(completionState, false);
    if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
      return false;
    let option = field.open.options[field.open.selected];
    let result = field.active.find((a7) => a7.source == option.source);
    let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
    if (commitChars && commitChars.indexOf(event.key) > -1)
      applyCompletion(view, option);
    return false;
  }
}));
var baseTheme4 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "hidden auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      minWidth: "250px",
      maxHeight: "10em",
      height: "100%",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li, & > completion-section": {
        padding: "1px 3px",
        lineHeight: 1.2
      },
      "& > li": {
        overflowX: "hidden",
        textOverflow: "ellipsis",
        cursor: "pointer"
      },
      "& > completion-section": {
        display: "list-item",
        borderBottom: "1px solid silver",
        paddingLeft: "0.5em",
        opacity: 0.7
      }
    }
  },
  "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#17c",
    color: "white"
  },
  "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#777"
  },
  "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
    background: "#347",
    color: "white"
  },
  "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
    background: "#444"
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: `${400}px`,
    boxSizing: "border-box",
    whiteSpace: "pre-line"
  },
  ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
  ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
  ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
  ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
  "&light .cm-snippetField": { backgroundColor: "#00000022" },
  "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    display: "inline-block",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6",
    boxSizing: "content-box"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": { content: "'ƒ'" }
  },
  ".cm-completionIcon-class": {
    "&:after": { content: "'○'" }
  },
  ".cm-completionIcon-interface": {
    "&:after": { content: "'◌'" }
  },
  ".cm-completionIcon-variable": {
    "&:after": { content: "'𝑥'" }
  },
  ".cm-completionIcon-constant": {
    "&:after": { content: "'𝐶'" }
  },
  ".cm-completionIcon-type": {
    "&:after": { content: "'𝑡'" }
  },
  ".cm-completionIcon-enum": {
    "&:after": { content: "'∪'" }
  },
  ".cm-completionIcon-property": {
    "&:after": { content: "'□'" }
  },
  ".cm-completionIcon-keyword": {
    "&:after": { content: "'🔑︎'" }
    // Disable emoji rendering
  },
  ".cm-completionIcon-namespace": {
    "&:after": { content: "'▢'" }
  },
  ".cm-completionIcon-text": {
    "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
  }
});
var FieldPos = class {
  constructor(field, line3, from3, to2) {
    this.field = field;
    this.line = line3;
    this.from = from3;
    this.to = to2;
  }
};
var FieldRange = class _FieldRange {
  constructor(field, from3, to2) {
    this.field = field;
    this.from = from3;
    this.to = to2;
  }
  map(changes) {
    let from3 = changes.mapPos(this.from, -1, MapMode.TrackDel);
    let to2 = changes.mapPos(this.to, 1, MapMode.TrackDel);
    return from3 == null || to2 == null ? null : new _FieldRange(this.field, from3, to2);
  }
};
var Snippet = class _Snippet {
  constructor(lines, fieldPositions) {
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }
  instantiate(state, pos) {
    let text = [], lineStart = [pos];
    let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
    for (let line3 of this.lines) {
      if (text.length) {
        let indent3 = baseIndent, tabs = /^\t*/.exec(line3)[0].length;
        for (let i3 = 0; i3 < tabs; i3++)
          indent3 += state.facet(indentUnit);
        lineStart.push(pos + indent3.length - tabs);
        line3 = indent3 + line3.slice(tabs);
      }
      text.push(line3);
      pos += line3.length + 1;
    }
    let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
    return { text, ranges };
  }
  static parse(template) {
    let fields = [];
    let lines = [], positions = [], m10;
    for (let line3 of template.split(/\r\n?|\n/)) {
      while (m10 = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line3)) {
        let seq = m10[1] ? +m10[1] : null, rawName = m10[2] || m10[3] || "", found = -1;
        let name2 = rawName.replace(/\\[{}]/g, (m22) => m22[1]);
        for (let i3 = 0; i3 < fields.length; i3++) {
          if (seq != null ? fields[i3].seq == seq : name2 ? fields[i3].name == name2 : false)
            found = i3;
        }
        if (found < 0) {
          let i3 = 0;
          while (i3 < fields.length && (seq == null || fields[i3].seq != null && fields[i3].seq < seq))
            i3++;
          fields.splice(i3, 0, { seq, name: name2 });
          found = i3;
          for (let pos of positions)
            if (pos.field >= found)
              pos.field++;
        }
        positions.push(new FieldPos(found, lines.length, m10.index, m10.index + name2.length));
        line3 = line3.slice(0, m10.index) + rawName + line3.slice(m10.index + m10[0].length);
      }
      line3 = line3.replace(/\\([{}])/g, (_7, brace, index) => {
        for (let pos of positions)
          if (pos.line == lines.length && pos.from > index) {
            pos.from--;
            pos.to--;
          }
        return brace;
      });
      lines.push(line3);
    }
    return new _Snippet(lines, positions);
  }
};
var fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
  toDOM() {
    let span = document.createElement("span");
    span.className = "cm-snippetFieldPosition";
    return span;
  }
  ignoreEvent() {
    return false;
  }
}() });
var fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
var ActiveSnippet = class _ActiveSnippet {
  constructor(ranges, active) {
    this.ranges = ranges;
    this.active = active;
    this.deco = Decoration.set(ranges.map((r2) => (r2.from == r2.to ? fieldMarker : fieldRange).range(r2.from, r2.to)));
  }
  map(changes) {
    let ranges = [];
    for (let r2 of this.ranges) {
      let mapped = r2.map(changes);
      if (!mapped)
        return null;
      ranges.push(mapped);
    }
    return new _ActiveSnippet(ranges, this.active);
  }
  selectionInsideField(sel) {
    return sel.ranges.every((range) => this.ranges.some((r2) => r2.field == this.active && r2.from <= range.from && r2.to >= range.to));
  }
};
var setActive = /* @__PURE__ */ StateEffect.define({
  map(value, changes) {
    return value && value.map(changes);
  }
});
var moveToField = /* @__PURE__ */ StateEffect.define();
var snippetState = /* @__PURE__ */ StateField.define({
  create() {
    return null;
  },
  update(value, tr2) {
    for (let effect of tr2.effects) {
      if (effect.is(setActive))
        return effect.value;
      if (effect.is(moveToField) && value)
        return new ActiveSnippet(value.ranges, effect.value);
    }
    if (value && tr2.docChanged)
      value = value.map(tr2.changes);
    if (value && tr2.selection && !value.selectionInsideField(tr2.selection))
      value = null;
    return value;
  },
  provide: (f4) => EditorView.decorations.from(f4, (val) => val ? val.deco : Decoration.none)
});
function fieldSelection(ranges, field) {
  return EditorSelection.create(ranges.filter((r2) => r2.field == field).map((r2) => EditorSelection.range(r2.from, r2.to)));
}
function snippet(template) {
  let snippet2 = Snippet.parse(template);
  return (editor, completion, from3, to2) => {
    let { text, ranges } = snippet2.instantiate(editor.state, from3);
    let spec = {
      changes: { from: from3, to: to2, insert: Text.of(text) },
      scrollIntoView: true,
      annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : void 0
    };
    if (ranges.length)
      spec.selection = fieldSelection(ranges, 0);
    if (ranges.some((r2) => r2.field > 0)) {
      let active = new ActiveSnippet(ranges, 0);
      let effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === void 0)
        effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme4]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return ({ state, dispatch }) => {
    let active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0)
      return false;
    let next3 = active.active + dir, last = dir > 0 && !active.ranges.some((r2) => r2.field == next3 + dir);
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next3),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next3)),
      scrollIntoView: true
    }));
    return true;
  };
}
var clearSnippet = ({ state, dispatch }) => {
  let active = state.field(snippetState, false);
  if (!active)
    return false;
  dispatch(state.update({ effects: setActive.of(null) }));
  return true;
};
var nextSnippetField = /* @__PURE__ */ moveField(1);
var prevSnippetField = /* @__PURE__ */ moveField(-1);
var defaultSnippetKeymap = [
  { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
  { key: "Escape", run: clearSnippet }
];
var snippetKeymap = /* @__PURE__ */ Facet.define({
  combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
var addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
}
var snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
  mousedown(event, view) {
    let active = view.state.field(snippetState, false), pos;
    if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
      return false;
    let match3 = active.ranges.find((r2) => r2.from <= pos && r2.to >= pos);
    if (!match3 || match3.field == active.active)
      return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match3.field),
      effects: setActive.of(active.ranges.some((r2) => r2.field > match3.field) ? new ActiveSnippet(active.ranges, match3.field) : null),
      scrollIntoView: true
    });
    return true;
  }
});
var defaults2 = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}:;>",
  stringPrefixes: []
};
var closeBracketEffect = /* @__PURE__ */ StateEffect.define({
  map(value, mapping) {
    let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
    return mapped == null ? void 0 : mapped;
  }
});
var closedBracket = /* @__PURE__ */ new class extends RangeValue {
}();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
var bracketState = /* @__PURE__ */ StateField.define({
  create() {
    return RangeSet.empty;
  },
  update(value, tr2) {
    value = value.map(tr2.changes);
    if (tr2.selection) {
      let line3 = tr2.state.doc.lineAt(tr2.selection.main.head);
      value = value.update({ filter: (from3) => from3 >= line3.from && from3 <= line3.to });
    }
    for (let effect of tr2.effects)
      if (effect.is(closeBracketEffect))
        value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
    return value;
  }
});
function closeBrackets() {
  return [inputHandler2, bracketState];
}
var definedClosing = "()[]{}<>";
function closing(ch) {
  for (let i3 = 0; i3 < definedClosing.length; i3 += 2)
    if (definedClosing.charCodeAt(i3) == ch)
      return definedClosing.charAt(i3 + 1);
  return fromCodePoint(ch < 128 ? ch : ch + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults2;
}
var android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
var inputHandler2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to2, insert2) => {
  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
    return false;
  let sel = view.state.selection.main;
  if (insert2.length > 2 || insert2.length == 2 && codePointSize(codePointAt(insert2, 0)) == 1 || from3 != sel.from || to2 != sel.to)
    return false;
  let tr2 = insertBracket(view.state, insert2);
  if (!tr2)
    return false;
  view.dispatch(tr2);
  return true;
});
var deleteBracketPair = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults2.brackets;
  let dont = null, changes = state.changeByRange((range) => {
    if (range.empty) {
      let before = prevChar(state.doc, range.head);
      for (let token3 of tokens) {
        if (token3 == before && nextChar(state.doc, range.head) == closing(codePointAt(token3, 0)))
          return {
            changes: { from: range.head - token3.length, to: range.head + token3.length },
            range: EditorSelection.cursor(range.head - token3.length)
          };
      }
    }
    return { range: dont = range };
  });
  if (!dont)
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
  return !dont;
};
var closeBracketsKeymap = [
  { key: "Backspace", run: deleteBracketPair }
];
function insertBracket(state, bracket2) {
  let conf = config(state, state.selection.main.head);
  let tokens = conf.brackets || defaults2.brackets;
  for (let tok of tokens) {
    let closed = closing(codePointAt(tok, 0));
    if (bracket2 == tok)
      return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults2.before);
    if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
      return handleClose(state, tok, closed);
  }
  return null;
}
function closedBracketAt(state, pos) {
  let found = false;
  state.field(bracketState).between(0, state.doc.length, (from3) => {
    if (from3 == pos)
      found = true;
  });
  return found;
}
function nextChar(doc2, pos) {
  let next3 = doc2.sliceString(pos, pos + 2);
  return next3.slice(0, codePointSize(codePointAt(next3, 0)));
}
function prevChar(doc2, pos) {
  let prev3 = doc2.sliceString(pos - 2, pos);
  return codePointSize(codePointAt(prev3, 0)) == prev3.length ? prev3 : prev3.slice(1);
}
function handleOpen(state, open, close3, closeBefore) {
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: open, from: range.from }, { insert: close3, from: range.to }],
        effects: closeBracketEffect.of(range.to + open.length),
        range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
      };
    let next3 = nextChar(state.doc, range.head);
    if (!next3 || /\s/.test(next3) || closeBefore.indexOf(next3) > -1)
      return {
        changes: { insert: open + close3, from: range.head },
        effects: closeBracketEffect.of(range.head + open.length),
        range: EditorSelection.cursor(range.head + open.length)
      };
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleClose(state, _open, close3) {
  let dont = null, changes = state.changeByRange((range) => {
    if (range.empty && nextChar(state.doc, range.head) == close3)
      return {
        changes: { from: range.head, to: range.head + close3.length, insert: close3 },
        range: EditorSelection.cursor(range.head + close3.length)
      };
    return dont = { range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleSame(state, token3, allowTriple, config2) {
  let stringPrefixes = config2.stringPrefixes || defaults2.stringPrefixes;
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: token3, from: range.from }, { insert: token3, from: range.to }],
        effects: closeBracketEffect.of(range.to + token3.length),
        range: EditorSelection.range(range.anchor + token3.length, range.head + token3.length)
      };
    let pos = range.head, next3 = nextChar(state.doc, pos), start;
    if (next3 == token3) {
      if (nodeStart(state, pos)) {
        return {
          changes: { insert: token3 + token3, from: pos },
          effects: closeBracketEffect.of(pos + token3.length),
          range: EditorSelection.cursor(pos + token3.length)
        };
      } else if (closedBracketAt(state, pos)) {
        let isTriple = allowTriple && state.sliceDoc(pos, pos + token3.length * 3) == token3 + token3 + token3;
        let content2 = isTriple ? token3 + token3 + token3 : token3;
        return {
          changes: { from: pos, to: pos + content2.length, insert: content2 },
          range: EditorSelection.cursor(pos + content2.length)
        };
      }
    } else if (allowTriple && state.sliceDoc(pos - 2 * token3.length, pos) == token3 + token3 && (start = canStartStringAt(state, pos - 2 * token3.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
      return {
        changes: { insert: token3 + token3 + token3 + token3, from: pos },
        effects: closeBracketEffect.of(pos + token3.length),
        range: EditorSelection.cursor(pos + token3.length)
      };
    } else if (state.charCategorizer(pos)(next3) != CharCategory.Word) {
      if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token3, stringPrefixes))
        return {
          changes: { insert: token3 + token3, from: pos },
          effects: closeBracketEffect.of(pos + token3.length),
          range: EditorSelection.cursor(pos + token3.length)
        };
    }
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function nodeStart(state, pos) {
  let tree = syntaxTree(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}
function probablyInString(state, pos, quoteToken, prefixes) {
  let node3 = syntaxTree(state).resolveInner(pos, -1);
  let maxPrefix = prefixes.reduce((m10, p8) => Math.max(m10, p8.length), 0);
  for (let i3 = 0; i3 < 5; i3++) {
    let start = state.sliceDoc(node3.from, Math.min(node3.to, node3.from + quoteToken.length + maxPrefix));
    let quotePos = start.indexOf(quoteToken);
    if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
      let first = node3.firstChild;
      while (first && first.from == node3.from && first.to - first.from > quoteToken.length + quotePos) {
        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
          return false;
        first = first.firstChild;
      }
      return true;
    }
    let parent = node3.to == pos && node3.parent;
    if (!parent)
      break;
    node3 = parent;
  }
  return false;
}
function canStartStringAt(state, pos, prefixes) {
  let charCat = state.charCategorizer(pos);
  if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
    return pos;
  for (let prefix3 of prefixes) {
    let start = pos - prefix3.length;
    if (state.sliceDoc(start, pos) == prefix3 && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
      return start;
  }
  return -1;
}
function autocompletion(config2 = {}) {
  return [
    commitCharacters,
    completionState,
    completionConfig.of(config2),
    completionPlugin,
    completionKeymapExt,
    baseTheme4
  ];
}
var completionKeymap = [
  { key: "Ctrl-Space", run: startCompletion },
  { mac: "Alt-`", run: startCompletion },
  { key: "Escape", run: closeCompletion },
  { key: "ArrowDown", run: /* @__PURE__ */ moveCompletionSelection(true) },
  { key: "ArrowUp", run: /* @__PURE__ */ moveCompletionSelection(false) },
  { key: "PageDown", run: /* @__PURE__ */ moveCompletionSelection(true, "page") },
  { key: "PageUp", run: /* @__PURE__ */ moveCompletionSelection(false, "page") },
  { key: "Enter", run: acceptCompletion }
];
var completionKeymapExt = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

// https://esm.sh/v135/@codemirror/lint@6.8.4/es2020/lint.development.mjs
var SelectedDiagnostic = class {
  constructor(from3, to2, diagnostic) {
    this.from = from3;
    this.to = to2;
    this.diagnostic = diagnostic;
  }
};
var LintState = class _LintState {
  constructor(diagnostics, panel, selected) {
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }
  static init(diagnostics, panel, state) {
    let markedDiagnostics = diagnostics;
    let diagnosticFilter = state.facet(lintConfig).markerFilter;
    if (diagnosticFilter)
      markedDiagnostics = diagnosticFilter(markedDiagnostics, state);
    let sorted = diagnostics.slice().sort((a7, b8) => a7.from - b8.from || a7.to - b8.to);
    let deco = new RangeSetBuilder(), active = [], pos = 0;
    for (let i3 = 0; ; ) {
      let next3 = i3 == sorted.length ? null : sorted[i3];
      if (!next3 && !active.length)
        break;
      let from3, to2;
      if (active.length) {
        from3 = pos;
        to2 = active.reduce((p8, d5) => Math.min(p8, d5.to), next3 && next3.from > from3 ? next3.from : 1e8);
      } else {
        from3 = next3.from;
        to2 = next3.to;
        active.push(next3);
        i3++;
      }
      while (i3 < sorted.length) {
        let next22 = sorted[i3];
        if (next22.from == from3 && (next22.to > next22.from || next22.to == from3)) {
          active.push(next22);
          i3++;
          to2 = Math.min(next22.to, to2);
        } else {
          to2 = Math.min(next22.from, to2);
          break;
        }
      }
      let sev = maxSeverity(active);
      if (active.some((d5) => d5.from == d5.to || d5.from == d5.to - 1 && state.doc.lineAt(d5.from).to == d5.from)) {
        deco.add(from3, from3, Decoration.widget({
          widget: new DiagnosticWidget(sev),
          diagnostics: active.slice()
        }));
      } else {
        let markClass = active.reduce((c2, d5) => d5.markClass ? c2 + " " + d5.markClass : c2, "");
        deco.add(from3, to2, Decoration.mark({
          class: "cm-lintRange cm-lintRange-" + sev + markClass,
          diagnostics: active.slice(),
          inclusiveEnd: active.some((a7) => a7.to > to2)
        }));
      }
      pos = to2;
      for (let i22 = 0; i22 < active.length; i22++)
        if (active[i22].to <= pos)
          active.splice(i22--, 1);
    }
    let set = deco.finish();
    return new _LintState(set, panel, findDiagnostic(set));
  }
};
function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
  let found = null;
  diagnostics.between(after, 1e9, (from3, to2, { spec }) => {
    if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
      return;
    if (!found)
      found = new SelectedDiagnostic(from3, to2, diagnostic || spec.diagnostics[0]);
    else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
      return false;
    else
      found = new SelectedDiagnostic(found.from, to2, found.diagnostic);
  });
  return found;
}
function hideTooltip(tr2, tooltip) {
  let from3 = tooltip.pos, to2 = tooltip.end || from3;
  let result = tr2.state.facet(lintConfig).hideOn(tr2, from3, to2);
  if (result != null)
    return result;
  let line3 = tr2.startState.doc.lineAt(tooltip.pos);
  return !!(tr2.effects.some((e) => e.is(setDiagnosticsEffect)) || tr2.changes.touchesRange(line3.from, Math.max(line3.to, to2)));
}
function maybeEnableLint(state, effects) {
  return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
}
var setDiagnosticsEffect = /* @__PURE__ */ StateEffect.define();
var togglePanel2 = /* @__PURE__ */ StateEffect.define();
var movePanelSelection = /* @__PURE__ */ StateEffect.define();
var lintState = /* @__PURE__ */ StateField.define({
  create() {
    return new LintState(Decoration.none, null, null);
  },
  update(value, tr2) {
    if (tr2.docChanged && value.diagnostics.size) {
      let mapped = value.diagnostics.map(tr2.changes), selected = null, panel = value.panel;
      if (value.selected) {
        let selPos = tr2.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }
      if (!mapped.size && panel && tr2.state.facet(lintConfig).autoPanel)
        panel = null;
      value = new LintState(mapped, panel, selected);
    }
    for (let effect of tr2.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        let panel = !tr2.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
        value = LintState.init(effect.value, panel, tr2.state);
      } else if (effect.is(togglePanel2)) {
        value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
      } else if (effect.is(movePanelSelection)) {
        value = new LintState(value.diagnostics, value.panel, effect.value);
      }
    }
    return value;
  },
  provide: (f4) => [
    showPanel.from(f4, (val) => val.panel),
    EditorView.decorations.from(f4, (s66) => s66.diagnostics)
  ]
});
var activeMark = /* @__PURE__ */ Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
function lintTooltip(view, pos, side) {
  let { diagnostics } = view.state.field(lintState);
  let found, start = -1, end = -1;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from3, to2, { spec }) => {
    if (pos >= from3 && pos <= to2 && (from3 == to2 || (pos > from3 || side > 0) && (pos < to2 || side < 0))) {
      found = spec.diagnostics;
      start = from3;
      end = to2;
      return false;
    }
  });
  let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
  if (found && diagnosticFilter)
    found = diagnosticFilter(found, view.state);
  if (!found)
    return null;
  return {
    pos: start,
    end,
    above: view.state.doc.lineAt(start).to < end,
    create() {
      return { dom: diagnosticsTooltip(view, found) };
    }
  };
}
function diagnosticsTooltip(view, diagnostics) {
  return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d5) => renderDiagnostic(view, d5, false)));
}
var openLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel2.of(true)]) });
  let panel = getPanel(view, LintPanel.open);
  if (panel)
    panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
var closeLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    return false;
  view.dispatch({ effects: togglePanel2.of(false) });
  return true;
};
var nextDiagnostic = (view) => {
  let field = view.state.field(lintState, false);
  if (!field)
    return false;
  let sel = view.state.selection.main, next3 = field.diagnostics.iter(sel.to + 1);
  if (!next3.value) {
    next3 = field.diagnostics.iter(0);
    if (!next3.value || next3.from == sel.from && next3.to == sel.to)
      return false;
  }
  view.dispatch({ selection: { anchor: next3.from, head: next3.to }, scrollIntoView: true });
  return true;
};
var lintKeymap = [
  { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
  { key: "F8", run: nextDiagnostic }
];
var lintConfig = /* @__PURE__ */ Facet.define({
  combine(input) {
    return Object.assign({ sources: input.map((i3) => i3.source).filter((x7) => x7 != null) }, combineConfig(input.map((i3) => i3.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (a7, b8) => !a7 ? b8 : !b8 ? a7 : (u5) => a7(u5) || b8(u5)
    }));
  }
});
function assignKeys(actions) {
  let assigned = [];
  if (actions)
    actions:
      for (let { name: name2 } of actions) {
        for (let i3 = 0; i3 < name2.length; i3++) {
          let ch = name2[i3];
          if (/[a-zA-Z]/.test(ch) && !assigned.some((c2) => c2.toLowerCase() == ch.toLowerCase())) {
            assigned.push(ch);
            continue actions;
          }
        }
        assigned.push("");
      }
  return assigned;
}
function renderDiagnostic(view, diagnostic, inPanel) {
  var _a2;
  let keys2 = inPanel ? assignKeys(diagnostic.actions) : [];
  return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a2 = diagnostic.actions) === null || _a2 === void 0 ? void 0 : _a2.map((action, i3) => {
    let fired = false, click = (e) => {
      e.preventDefault();
      if (fired)
        return;
      fired = true;
      let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
      if (found)
        action.apply(view, found.from, found.to);
    };
    let { name: name2 } = action, keyIndex = keys2[i3] ? name2.indexOf(keys2[i3]) : -1;
    let nameElt = keyIndex < 0 ? name2 : [
      name2.slice(0, keyIndex),
      crelt("u", name2.slice(keyIndex, keyIndex + 1)),
      name2.slice(keyIndex + 1)
    ];
    return crelt("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys2[i3]})"`}.`
    }, nameElt);
  }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
}
var DiagnosticWidget = class extends WidgetType {
  constructor(sev) {
    super();
    this.sev = sev;
  }
  eq(other) {
    return other.sev == this.sev;
  }
  toDOM() {
    return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
  }
};
var PanelItem = class {
  constructor(view, diagnostic) {
    this.diagnostic = diagnostic;
    this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
    this.dom = renderDiagnostic(view, diagnostic, true);
    this.dom.id = this.id;
    this.dom.setAttribute("role", "option");
  }
};
var LintPanel = class _LintPanel {
  constructor(view) {
    this.view = view;
    this.items = [];
    let onkeydown = (event) => {
      if (event.keyCode == 27) {
        closeLintPanel(this.view);
        this.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      } else if (event.keyCode == 36) {
        this.moveSelection(0);
      } else if (event.keyCode == 35) {
        this.moveSelection(this.items.length - 1);
      } else if (event.keyCode == 13) {
        this.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic } = this.items[this.selectedIndex], keys2 = assignKeys(diagnostic.actions);
        for (let i3 = 0; i3 < keys2.length; i3++)
          if (keys2[i3].toUpperCase().charCodeAt(0) == event.keyCode) {
            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
            if (found)
              diagnostic.actions[i3].apply(view, found.from, found.to);
          }
      } else {
        return;
      }
      event.preventDefault();
    };
    let onclick = (event) => {
      for (let i3 = 0; i3 < this.items.length; i3++) {
        if (this.items[i3].dom.contains(event.target))
          this.moveSelection(i3);
      }
    };
    this.list = crelt("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown,
      onclick
    });
    this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => closeLintPanel(this.view)
    }, "×"));
    this.update();
  }
  get selectedIndex() {
    let selected = this.view.state.field(lintState).selected;
    if (!selected)
      return -1;
    for (let i3 = 0; i3 < this.items.length; i3++)
      if (this.items[i3].diagnostic == selected.diagnostic)
        return i3;
    return -1;
  }
  update() {
    let { diagnostics, selected } = this.view.state.field(lintState);
    let i3 = 0, needsSync = false, newSelectedItem = null;
    let seen = /* @__PURE__ */ new Set();
    diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
      for (let diagnostic of spec.diagnostics) {
        if (seen.has(diagnostic))
          continue;
        seen.add(diagnostic);
        let found = -1, item;
        for (let j11 = i3; j11 < this.items.length; j11++)
          if (this.items[j11].diagnostic == diagnostic) {
            found = j11;
            break;
          }
        if (found < 0) {
          item = new PanelItem(this.view, diagnostic);
          this.items.splice(i3, 0, item);
          needsSync = true;
        } else {
          item = this.items[found];
          if (found > i3) {
            this.items.splice(i3, found - i3);
            needsSync = true;
          }
        }
        if (selected && item.diagnostic == selected.diagnostic) {
          if (!item.dom.hasAttribute("aria-selected")) {
            item.dom.setAttribute("aria-selected", "true");
            newSelectedItem = item;
          }
        } else if (item.dom.hasAttribute("aria-selected")) {
          item.dom.removeAttribute("aria-selected");
        }
        i3++;
      }
    });
    while (i3 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
      needsSync = true;
      this.items.pop();
    }
    if (this.items.length == 0) {
      this.items.push(new PanelItem(this.view, {
        from: -1,
        to: -1,
        severity: "info",
        message: this.view.state.phrase("No diagnostics")
      }));
      needsSync = true;
    }
    if (newSelectedItem) {
      this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
      this.view.requestMeasure({
        key: this,
        read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
        write: ({ sel, panel }) => {
          let scaleY = panel.height / this.list.offsetHeight;
          if (sel.top < panel.top)
            this.list.scrollTop -= (panel.top - sel.top) / scaleY;
          else if (sel.bottom > panel.bottom)
            this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
        }
      });
    } else if (this.selectedIndex < 0) {
      this.list.removeAttribute("aria-activedescendant");
    }
    if (needsSync)
      this.sync();
  }
  sync() {
    let domPos = this.list.firstChild;
    function rm2() {
      let prev3 = domPos;
      domPos = prev3.nextSibling;
      prev3.remove();
    }
    for (let item of this.items) {
      if (item.dom.parentNode == this.list) {
        while (domPos != item.dom)
          rm2();
        domPos = item.dom.nextSibling;
      } else {
        this.list.insertBefore(item.dom, domPos);
      }
    }
    while (domPos)
      rm2();
  }
  moveSelection(selectedIndex) {
    if (this.selectedIndex < 0)
      return;
    let field = this.view.state.field(lintState);
    let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
    if (!selection)
      return;
    this.view.dispatch({
      selection: { anchor: selection.from, head: selection.to },
      scrollIntoView: true,
      effects: movePanelSelection.of(selection)
    });
  }
  static open(view) {
    return new _LintPanel(view);
  }
};
function svg(content2, attrs = `viewBox="0 0 40 40"`) {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content2)}</svg>')`;
}
function underline(color) {
  return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
}
var baseTheme5 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ underline("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ underline("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ underline("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ underline("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function severityWeight(sev) {
  return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
}
function maxSeverity(diagnostics) {
  let sev = "hint", weight = 1;
  for (let d5 of diagnostics) {
    let w9 = severityWeight(d5.severity);
    if (w9 > weight) {
      weight = w9;
      sev = d5.severity;
    }
  }
  return sev;
}
var lintExtensions = [
  lintState,
  /* @__PURE__ */ EditorView.decorations.compute([lintState], (state) => {
    let { selected, panel } = state.field(lintState);
    return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
      activeMark.range(selected.from, selected.to)
    ]);
  }),
  /* @__PURE__ */ hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
  baseTheme5
];

// https://esm.sh/v135/codemirror@6.0.1/es2020/codemirror.development.mjs
var basicSetup = /* @__PURE__ */ (() => [
  lineNumbers(),
  highlightActiveLineGutter(),
  highlightSpecialChars(),
  history(),
  foldGutter(),
  drawSelection(),
  dropCursor(),
  EditorState.allowMultipleSelections.of(true),
  indentOnInput(),
  syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
  bracketMatching(),
  closeBrackets(),
  autocompletion(),
  rectangularSelection(),
  crosshairCursor(),
  highlightActiveLine(),
  highlightSelectionMatches(),
  keymap.of([
    ...closeBracketsKeymap,
    ...defaultKeymap,
    ...searchKeymap,
    ...historyKeymap,
    ...foldKeymap,
    ...completionKeymap,
    ...lintKeymap
  ])
])();

// https://esm.sh/v135/@codemirror/state@6.4.1/es2022/state.mjs
var m7 = class s {
  lineAt(e) {
    if (e < 0 || e > this.length) throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, false, 1, 0);
  }
  line(e) {
    if (e < 1 || e > this.lines) throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, true, 1, 0);
  }
  replace(e, t3, n3) {
    [e, t3] = $(this, e, t3);
    let i3 = [];
    return this.decompose(0, e, i3, 2), n3.length && n3.decompose(0, n3.length, i3, 3), this.decompose(t3, this.length, i3, 1), N4.from(i3, this.length - (t3 - e) + n3.length);
  }
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  slice(e, t3 = this.length) {
    [e, t3] = $(this, e, t3);
    let n3 = [];
    return this.decompose(e, t3, n3, 0), N4.from(n3, t3 - e);
  }
  eq(e) {
    if (e == this) return true;
    if (e.length != this.length || e.lines != this.lines) return false;
    let t3 = this.scanIdentical(e, 1), n3 = this.length - this.scanIdentical(e, -1), i3 = new B5(this), r2 = new B5(e);
    for (let l7 = t3, h6 = t3; ; ) {
      if (i3.next(l7), r2.next(l7), l7 = 0, i3.lineBreak != r2.lineBreak || i3.done != r2.done || i3.value != r2.value) return false;
      if (h6 += i3.value.length, i3.done || h6 >= n3) return true;
    }
  }
  iter(e = 1) {
    return new B5(this, e);
  }
  iterRange(e, t3 = this.length) {
    return new Y5(this, e, t3);
  }
  iterLines(e, t3) {
    let n3;
    if (e == null) n3 = this.iter();
    else {
      t3 == null && (t3 = this.lines + 1);
      let i3 = this.line(e).from;
      n3 = this.iterRange(i3, Math.max(i3, t3 == this.lines + 1 ? this.length : t3 <= 1 ? 0 : this.line(t3 - 1).to));
    }
    return new _3(n3);
  }
  toString() {
    return this.sliceString(0);
  }
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  constructor() {
  }
  static of(e) {
    if (e.length == 0) throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? s.empty : e.length <= 32 ? new k3(e) : N4.from(k3.split(e, []));
  }
};
var k3 = class s2 extends m7 {
  constructor(e, t3 = He5(e)) {
    super(), this.text = e, this.length = t3;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t3, n3, i3) {
    for (let r2 = 0; ; r2++) {
      let l7 = this.text[r2], h6 = i3 + l7.length;
      if ((t3 ? n3 : h6) >= e) return new fe6(i3, h6, n3, l7);
      i3 = h6 + 1, n3++;
    }
  }
  decompose(e, t3, n3, i3) {
    let r2 = e <= 0 && t3 >= this.length ? this : new s2(Ae3(this.text, e, t3), Math.min(t3, this.length) - Math.max(0, e));
    if (i3 & 1) {
      let l7 = n3.pop(), h6 = X4(r2.text, l7.text.slice(), 0, r2.length);
      if (h6.length <= 32) n3.push(new s2(h6, l7.length + r2.length));
      else {
        let a7 = h6.length >> 1;
        n3.push(new s2(h6.slice(0, a7)), new s2(h6.slice(a7)));
      }
    } else n3.push(r2);
  }
  replace(e, t3, n3) {
    if (!(n3 instanceof s2)) return super.replace(e, t3, n3);
    [e, t3] = $(this, e, t3);
    let i3 = X4(this.text, X4(n3.text, Ae3(this.text, 0, e)), t3), r2 = this.length + n3.length - (t3 - e);
    return i3.length <= 32 ? new s2(i3, r2) : N4.from(s2.split(i3, []), r2);
  }
  sliceString(e, t3 = this.length, n3 = `
`) {
    [e, t3] = $(this, e, t3);
    let i3 = "";
    for (let r2 = 0, l7 = 0; r2 <= t3 && l7 < this.text.length; l7++) {
      let h6 = this.text[l7], a7 = r2 + h6.length;
      r2 > e && l7 && (i3 += n3), e < a7 && t3 > r2 && (i3 += h6.slice(Math.max(0, e - r2), t3 - r2)), r2 = a7 + 1;
    }
    return i3;
  }
  flatten(e) {
    for (let t3 of this.text) e.push(t3);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t3) {
    let n3 = [], i3 = -1;
    for (let r2 of e) n3.push(r2), i3 += r2.length + 1, n3.length == 32 && (t3.push(new s2(n3, i3)), n3 = [], i3 = -1);
    return i3 > -1 && t3.push(new s2(n3, i3)), t3;
  }
};
var N4 = class s3 extends m7 {
  constructor(e, t3) {
    super(), this.children = e, this.length = t3, this.lines = 0;
    for (let n3 of e) this.lines += n3.lines;
  }
  lineInner(e, t3, n3, i3) {
    for (let r2 = 0; ; r2++) {
      let l7 = this.children[r2], h6 = i3 + l7.length, a7 = n3 + l7.lines - 1;
      if ((t3 ? a7 : h6) >= e) return l7.lineInner(e, t3, n3, i3);
      i3 = h6 + 1, n3 = a7 + 1;
    }
  }
  decompose(e, t3, n3, i3) {
    for (let r2 = 0, l7 = 0; l7 <= t3 && r2 < this.children.length; r2++) {
      let h6 = this.children[r2], a7 = l7 + h6.length;
      if (e <= a7 && t3 >= l7) {
        let o2 = i3 & ((l7 <= e ? 1 : 0) | (a7 >= t3 ? 2 : 0));
        l7 >= e && a7 <= t3 && !o2 ? n3.push(h6) : h6.decompose(e - l7, t3 - l7, n3, o2);
      }
      l7 = a7 + 1;
    }
  }
  replace(e, t3, n3) {
    if ([e, t3] = $(this, e, t3), n3.lines < this.lines) for (let i3 = 0, r2 = 0; i3 < this.children.length; i3++) {
      let l7 = this.children[i3], h6 = r2 + l7.length;
      if (e >= r2 && t3 <= h6) {
        let a7 = l7.replace(e - r2, t3 - r2, n3), o2 = this.lines - l7.lines + a7.lines;
        if (a7.lines < o2 >> 4 && a7.lines > o2 >> 6) {
          let f4 = this.children.slice();
          return f4[i3] = a7, new s3(f4, this.length - (t3 - e) + n3.length);
        }
        return super.replace(r2, h6, a7);
      }
      r2 = h6 + 1;
    }
    return super.replace(e, t3, n3);
  }
  sliceString(e, t3 = this.length, n3 = `
`) {
    [e, t3] = $(this, e, t3);
    let i3 = "";
    for (let r2 = 0, l7 = 0; r2 < this.children.length && l7 <= t3; r2++) {
      let h6 = this.children[r2], a7 = l7 + h6.length;
      l7 > e && r2 && (i3 += n3), e < a7 && t3 > l7 && (i3 += h6.sliceString(e - l7, t3 - l7, n3)), l7 = a7 + 1;
    }
    return i3;
  }
  flatten(e) {
    for (let t3 of this.children) t3.flatten(e);
  }
  scanIdentical(e, t3) {
    if (!(e instanceof s3)) return 0;
    let n3 = 0, [i3, r2, l7, h6] = t3 > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; i3 += t3, r2 += t3) {
      if (i3 == l7 || r2 == h6) return n3;
      let a7 = this.children[i3], o2 = e.children[r2];
      if (a7 != o2) return n3 + a7.scanIdentical(o2, t3);
      n3 += a7.length + 1;
    }
  }
  static from(e, t3 = e.reduce((n3, i3) => n3 + i3.length + 1, -1)) {
    let n3 = 0;
    for (let c2 of e) n3 += c2.lines;
    if (n3 < 32) {
      let c2 = [];
      for (let g8 of e) g8.flatten(c2);
      return new k3(c2, t3);
    }
    let i3 = Math.max(32, n3 >> 5), r2 = i3 << 1, l7 = i3 >> 1, h6 = [], a7 = 0, o2 = -1, f4 = [];
    function u5(c2) {
      let g8;
      if (c2.lines > r2 && c2 instanceof s3) for (let P5 of c2.children) u5(P5);
      else c2.lines > l7 && (a7 > l7 || !a7) ? (d5(), h6.push(c2)) : c2 instanceof k3 && a7 && (g8 = f4[f4.length - 1]) instanceof k3 && c2.lines + g8.lines <= 32 ? (a7 += c2.lines, o2 += c2.length + 1, f4[f4.length - 1] = new k3(g8.text.concat(c2.text), g8.length + 1 + c2.length)) : (a7 + c2.lines > i3 && d5(), a7 += c2.lines, o2 += c2.length + 1, f4.push(c2));
    }
    function d5() {
      a7 != 0 && (h6.push(f4.length == 1 ? f4[0] : s3.from(f4, o2)), o2 = -1, a7 = f4.length = 0);
    }
    for (let c2 of e) u5(c2);
    return d5(), h6.length == 1 ? h6[0] : new s3(h6, t3);
  }
};
m7.empty = new k3([""], 0);
function He5(s66) {
  let e = -1;
  for (let t3 of s66) e += t3.length + 1;
  return e;
}
function X4(s66, e, t3 = 0, n3 = 1e9) {
  for (let i3 = 0, r2 = 0, l7 = true; r2 < s66.length && i3 <= n3; r2++) {
    let h6 = s66[r2], a7 = i3 + h6.length;
    a7 >= t3 && (a7 > n3 && (h6 = h6.slice(0, n3 - i3)), i3 < t3 && (h6 = h6.slice(t3 - i3)), l7 ? (e[e.length - 1] += h6, l7 = false) : e.push(h6)), i3 = a7 + 1;
  }
  return e;
}
function Ae3(s66, e, t3) {
  return X4(s66, [""], e, t3);
}
var B5 = class {
  constructor(e, t3 = 1) {
    this.dir = t3, this.done = false, this.lineBreak = false, this.value = "", this.nodes = [e], this.offsets = [t3 > 0 ? 1 : (e instanceof k3 ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t3) {
    for (this.done = this.lineBreak = false; ; ) {
      let n3 = this.nodes.length - 1, i3 = this.nodes[n3], r2 = this.offsets[n3], l7 = r2 >> 1, h6 = i3 instanceof k3 ? i3.text.length : i3.children.length;
      if (l7 == (t3 > 0 ? h6 : 0)) {
        if (n3 == 0) return this.done = true, this.value = "", this;
        t3 > 0 && this.offsets[n3 - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((r2 & 1) == (t3 > 0 ? 0 : 1)) {
        if (this.offsets[n3] += t3, e == 0) return this.lineBreak = true, this.value = `
`, this;
        e--;
      } else if (i3 instanceof k3) {
        let a7 = i3.text[l7 + (t3 < 0 ? -1 : 0)];
        if (this.offsets[n3] += t3, a7.length > Math.max(0, e)) return this.value = e == 0 ? a7 : t3 > 0 ? a7.slice(e) : a7.slice(0, a7.length - e), this;
        e -= a7.length;
      } else {
        let a7 = i3.children[l7 + (t3 < 0 ? -1 : 0)];
        e > a7.length ? (e -= a7.length, this.offsets[n3] += t3) : (t3 < 0 && this.offsets[n3]--, this.nodes.push(a7), this.offsets.push(t3 > 0 ? 1 : (a7 instanceof k3 ? a7.text.length : a7.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
};
var Y5 = class {
  constructor(e, t3, n3) {
    this.value = "", this.done = false, this.cursor = new B5(e, t3 > n3 ? -1 : 1), this.pos = t3 > n3 ? e.length : 0, this.from = Math.min(t3, n3), this.to = Math.max(t3, n3);
  }
  nextInner(e, t3) {
    if (t3 < 0 ? this.pos <= this.from : this.pos >= this.to) return this.value = "", this.done = true, this;
    e += Math.max(0, t3 < 0 ? this.pos - this.to : this.from - this.pos);
    let n3 = t3 < 0 ? this.pos - this.from : this.to - this.pos;
    e > n3 && (e = n3), n3 -= e;
    let { value: i3 } = this.cursor.next(e);
    return this.pos += (i3.length + e) * t3, this.value = i3.length <= n3 ? i3 : t3 < 0 ? i3.slice(i3.length - n3) : i3.slice(0, n3), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
};
var _3 = class {
  constructor(e) {
    this.inner = e, this.afterBreak = true, this.value = "", this.done = false;
  }
  next(e = 0) {
    let { done: t3, lineBreak: n3, value: i3 } = this.inner.next(e);
    return t3 && this.afterBreak ? (this.value = "", this.afterBreak = false) : t3 ? (this.done = true, this.value = "") : n3 ? this.afterBreak ? this.value = "" : (this.afterBreak = true, this.next()) : (this.value = i3, this.afterBreak = false), this;
  }
  get lineBreak() {
    return false;
  }
};
typeof Symbol < "u" && (m7.prototype[Symbol.iterator] = function() {
  return this.iter();
}, B5.prototype[Symbol.iterator] = Y5.prototype[Symbol.iterator] = _3.prototype[Symbol.iterator] = function() {
  return this;
});
var fe6 = class {
  constructor(e, t3, n3, i3) {
    this.from = e, this.to = t3, this.number = n3, this.text = i3;
  }
  get length() {
    return this.to - this.from;
  }
};
function $(s66, e, t3) {
  return e = Math.max(0, Math.min(s66.length, e)), [e, Math.max(e, Math.min(s66.length, t3))];
}
var D5 = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s66) => s66 ? parseInt(s66, 36) : 1);
for (let s66 = 1; s66 < D5.length; s66++) D5[s66] += D5[s66 - 1];
function Ze3(s66) {
  for (let e = 1; e < D5.length; e += 2) if (D5[e] > s66) return D5[e - 1] <= s66;
  return false;
}
function Ee6(s66) {
  return s66 >= 127462 && s66 <= 127487;
}
var be4 = 8205;
function ee(s66, e, t3 = true, n3 = true) {
  return (t3 ? Fe5 : Ke2)(s66, e, n3);
}
function Fe5(s66, e, t3) {
  if (e == s66.length) return e;
  e && Je3(s66.charCodeAt(e)) && Le2(s66.charCodeAt(e - 1)) && e--;
  let n3 = ae6(s66, e);
  for (e += Oe5(n3); e < s66.length; ) {
    let i3 = ae6(s66, e);
    if (n3 == be4 || i3 == be4 || t3 && Ze3(i3)) e += Oe5(i3), n3 = i3;
    else if (Ee6(i3)) {
      let r2 = 0, l7 = e - 2;
      for (; l7 >= 0 && Ee6(ae6(s66, l7)); ) r2++, l7 -= 2;
      if (r2 % 2 == 0) break;
      e += 2;
    } else break;
  }
  return e;
}
function Ke2(s66, e, t3) {
  for (; e > 0; ) {
    let n3 = Fe5(s66, e - 2, t3);
    if (n3 < e) return n3;
    e--;
  }
  return 0;
}
function Je3(s66) {
  return s66 >= 56320 && s66 < 57344;
}
function Le2(s66) {
  return s66 >= 55296 && s66 < 56320;
}
function ae6(s66, e) {
  let t3 = s66.charCodeAt(e);
  if (!Le2(t3) || e + 1 == s66.length) return t3;
  let n3 = s66.charCodeAt(e + 1);
  return Je3(n3) ? (t3 - 55296 << 10) + (n3 - 56320) + 65536 : t3;
}
function Oe5(s66) {
  return s66 < 65536 ? 1 : 2;
}
var ue5 = /\r\n?|\n/;
var E6 = function(s66) {
  return s66[s66.Simple = 0] = "Simple", s66[s66.TrackDel = 1] = "TrackDel", s66[s66.TrackBefore = 2] = "TrackBefore", s66[s66.TrackAfter = 3] = "TrackAfter", s66;
}(E6 || (E6 = {}));
var C5 = class s4 {
  constructor(e) {
    this.sections = e;
  }
  get length() {
    let e = 0;
    for (let t3 = 0; t3 < this.sections.length; t3 += 2) e += this.sections[t3];
    return e;
  }
  get newLength() {
    let e = 0;
    for (let t3 = 0; t3 < this.sections.length; t3 += 2) {
      let n3 = this.sections[t3 + 1];
      e += n3 < 0 ? this.sections[t3] : n3;
    }
    return e;
  }
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  iterGaps(e) {
    for (let t3 = 0, n3 = 0, i3 = 0; t3 < this.sections.length; ) {
      let r2 = this.sections[t3++], l7 = this.sections[t3++];
      l7 < 0 ? (e(n3, i3, r2), i3 += r2) : i3 += l7, n3 += r2;
    }
  }
  iterChangedRanges(e, t3 = false) {
    ce6(this, e, t3);
  }
  get invertedDesc() {
    let e = [];
    for (let t3 = 0; t3 < this.sections.length; ) {
      let n3 = this.sections[t3++], i3 = this.sections[t3++];
      i3 < 0 ? e.push(n3, i3) : e.push(i3, n3);
    }
    return new s4(e);
  }
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : Ne3(this, e);
  }
  mapDesc(e, t3 = false) {
    return e.empty ? this : de5(this, e, t3);
  }
  mapPos(e, t3 = -1, n3 = E6.Simple) {
    let i3 = 0, r2 = 0;
    for (let l7 = 0; l7 < this.sections.length; ) {
      let h6 = this.sections[l7++], a7 = this.sections[l7++], o2 = i3 + h6;
      if (a7 < 0) {
        if (o2 > e) return r2 + (e - i3);
        r2 += h6;
      } else {
        if (n3 != E6.Simple && o2 >= e && (n3 == E6.TrackDel && i3 < e && o2 > e || n3 == E6.TrackBefore && i3 < e || n3 == E6.TrackAfter && o2 > e)) return null;
        if (o2 > e || o2 == e && t3 < 0 && !h6) return e == i3 || t3 < 0 ? r2 : r2 + a7;
        r2 += a7;
      }
      i3 = o2;
    }
    if (e > i3) throw new RangeError(`Position ${e} is out of range for changeset of length ${i3}`);
    return r2;
  }
  touchesRange(e, t3 = e) {
    for (let n3 = 0, i3 = 0; n3 < this.sections.length && i3 <= t3; ) {
      let r2 = this.sections[n3++], l7 = this.sections[n3++], h6 = i3 + r2;
      if (l7 >= 0 && i3 <= t3 && h6 >= e) return i3 < e && h6 > t3 ? "cover" : true;
      i3 = h6;
    }
    return false;
  }
  toString() {
    let e = "";
    for (let t3 = 0; t3 < this.sections.length; ) {
      let n3 = this.sections[t3++], i3 = this.sections[t3++];
      e += (e ? " " : "") + n3 + (i3 >= 0 ? ":" + i3 : "");
    }
    return e;
  }
  toJSON() {
    return this.sections;
  }
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t3) => typeof t3 != "number")) throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new s4(e);
  }
  static create(e) {
    return new s4(e);
  }
};
var A5 = class s5 extends C5 {
  constructor(e, t3) {
    super(e), this.inserted = t3;
  }
  apply(e) {
    if (this.length != e.length) throw new RangeError("Applying change set to a document with the wrong length");
    return ce6(this, (t3, n3, i3, r2, l7) => e = e.replace(i3, i3 + (n3 - t3), l7), false), e;
  }
  mapDesc(e, t3 = false) {
    return de5(this, e, t3, true);
  }
  invert(e) {
    let t3 = this.sections.slice(), n3 = [];
    for (let i3 = 0, r2 = 0; i3 < t3.length; i3 += 2) {
      let l7 = t3[i3], h6 = t3[i3 + 1];
      if (h6 >= 0) {
        t3[i3] = h6, t3[i3 + 1] = l7;
        let a7 = i3 >> 1;
        for (; n3.length < a7; ) n3.push(m7.empty);
        n3.push(l7 ? e.slice(r2, r2 + l7) : m7.empty);
      }
      r2 += l7;
    }
    return new s5(t3, n3);
  }
  compose(e) {
    return this.empty ? e : e.empty ? this : Ne3(this, e, true);
  }
  map(e, t3 = false) {
    return e.empty ? this : de5(this, e, t3, true);
  }
  iterChanges(e, t3 = false) {
    ce6(this, e, t3);
  }
  get desc() {
    return C5.create(this.sections);
  }
  filter(e) {
    let t3 = [], n3 = [], i3 = [], r2 = new F5(this);
    e: for (let l7 = 0, h6 = 0; ; ) {
      let a7 = l7 == e.length ? 1e9 : e[l7++];
      for (; h6 < a7 || h6 == a7 && r2.len == 0; ) {
        if (r2.done) break e;
        let f4 = Math.min(r2.len, a7 - h6);
        w5(i3, f4, -1);
        let u5 = r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0;
        w5(t3, f4, u5), u5 > 0 && b4(n3, t3, r2.text), r2.forward(f4), h6 += f4;
      }
      let o2 = e[l7++];
      for (; h6 < o2; ) {
        if (r2.done) break e;
        let f4 = Math.min(r2.len, o2 - h6);
        w5(t3, f4, -1), w5(i3, f4, r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0), r2.forward(f4), h6 += f4;
      }
    }
    return { changes: new s5(t3, n3), filtered: C5.create(i3) };
  }
  toJSON() {
    let e = [];
    for (let t3 = 0; t3 < this.sections.length; t3 += 2) {
      let n3 = this.sections[t3], i3 = this.sections[t3 + 1];
      i3 < 0 ? e.push(n3) : i3 == 0 ? e.push([n3]) : e.push([n3].concat(this.inserted[t3 >> 1].toJSON()));
    }
    return e;
  }
  static of(e, t3, n3) {
    let i3 = [], r2 = [], l7 = 0, h6 = null;
    function a7(f4 = false) {
      if (!f4 && !i3.length) return;
      l7 < t3 && w5(i3, t3 - l7, -1);
      let u5 = new s5(i3, r2);
      h6 = h6 ? h6.compose(u5.map(h6)) : u5, i3 = [], r2 = [], l7 = 0;
    }
    function o2(f4) {
      if (Array.isArray(f4)) for (let u5 of f4) o2(u5);
      else if (f4 instanceof s5) {
        if (f4.length != t3) throw new RangeError(`Mismatched change set length (got ${f4.length}, expected ${t3})`);
        a7(), h6 = h6 ? h6.compose(f4.map(h6)) : f4;
      } else {
        let { from: u5, to: d5 = u5, insert: c2 } = f4;
        if (u5 > d5 || u5 < 0 || d5 > t3) throw new RangeError(`Invalid change range ${u5} to ${d5} (in doc of length ${t3})`);
        let g8 = c2 ? typeof c2 == "string" ? m7.of(c2.split(n3 || ue5)) : c2 : m7.empty, P5 = g8.length;
        if (u5 == d5 && P5 == 0) return;
        u5 < l7 && a7(), u5 > l7 && w5(i3, u5 - l7, -1), w5(i3, d5 - u5, P5), b4(r2, i3, g8), l7 = d5;
      }
    }
    return o2(e), a7(!h6), h6;
  }
  static empty(e) {
    return new s5(e ? [e, -1] : [], []);
  }
  static fromJSON(e) {
    if (!Array.isArray(e)) throw new RangeError("Invalid JSON representation of ChangeSet");
    let t3 = [], n3 = [];
    for (let i3 = 0; i3 < e.length; i3++) {
      let r2 = e[i3];
      if (typeof r2 == "number") t3.push(r2, -1);
      else {
        if (!Array.isArray(r2) || typeof r2[0] != "number" || r2.some((l7, h6) => h6 && typeof l7 != "string")) throw new RangeError("Invalid JSON representation of ChangeSet");
        if (r2.length == 1) t3.push(r2[0], 0);
        else {
          for (; n3.length < i3; ) n3.push(m7.empty);
          n3[i3] = m7.of(r2.slice(1)), t3.push(r2[0], n3[i3].length);
        }
      }
    }
    return new s5(t3, n3);
  }
  static createSet(e, t3) {
    return new s5(e, t3);
  }
};
function w5(s66, e, t3, n3 = false) {
  if (e == 0 && t3 <= 0) return;
  let i3 = s66.length - 2;
  i3 >= 0 && t3 <= 0 && t3 == s66[i3 + 1] ? s66[i3] += e : e == 0 && s66[i3] == 0 ? s66[i3 + 1] += t3 : n3 ? (s66[i3] += e, s66[i3 + 1] += t3) : s66.push(e, t3);
}
function b4(s66, e, t3) {
  if (t3.length == 0) return;
  let n3 = e.length - 2 >> 1;
  if (n3 < s66.length) s66[s66.length - 1] = s66[s66.length - 1].append(t3);
  else {
    for (; s66.length < n3; ) s66.push(m7.empty);
    s66.push(t3);
  }
}
function ce6(s66, e, t3) {
  let n3 = s66.inserted;
  for (let i3 = 0, r2 = 0, l7 = 0; l7 < s66.sections.length; ) {
    let h6 = s66.sections[l7++], a7 = s66.sections[l7++];
    if (a7 < 0) i3 += h6, r2 += h6;
    else {
      let o2 = i3, f4 = r2, u5 = m7.empty;
      for (; o2 += h6, f4 += a7, a7 && n3 && (u5 = u5.append(n3[l7 - 2 >> 1])), !(t3 || l7 == s66.sections.length || s66.sections[l7 + 1] < 0); ) h6 = s66.sections[l7++], a7 = s66.sections[l7++];
      e(i3, o2, r2, f4, u5), i3 = o2, r2 = f4;
    }
  }
}
function de5(s66, e, t3, n3 = false) {
  let i3 = [], r2 = n3 ? [] : null, l7 = new F5(s66), h6 = new F5(e);
  for (let a7 = -1; ; ) if (l7.ins == -1 && h6.ins == -1) {
    let o2 = Math.min(l7.len, h6.len);
    w5(i3, o2, -1), l7.forward(o2), h6.forward(o2);
  } else if (h6.ins >= 0 && (l7.ins < 0 || a7 == l7.i || l7.off == 0 && (h6.len < l7.len || h6.len == l7.len && !t3))) {
    let o2 = h6.len;
    for (w5(i3, h6.ins, -1); o2; ) {
      let f4 = Math.min(l7.len, o2);
      l7.ins >= 0 && a7 < l7.i && l7.len <= f4 && (w5(i3, 0, l7.ins), r2 && b4(r2, i3, l7.text), a7 = l7.i), l7.forward(f4), o2 -= f4;
    }
    h6.next();
  } else if (l7.ins >= 0) {
    let o2 = 0, f4 = l7.len;
    for (; f4; ) if (h6.ins == -1) {
      let u5 = Math.min(f4, h6.len);
      o2 += u5, f4 -= u5, h6.forward(u5);
    } else if (h6.ins == 0 && h6.len < f4) f4 -= h6.len, h6.next();
    else break;
    w5(i3, o2, a7 < l7.i ? l7.ins : 0), r2 && a7 < l7.i && b4(r2, i3, l7.text), a7 = l7.i, l7.forward(l7.len - f4);
  } else {
    if (l7.done && h6.done) return r2 ? A5.createSet(i3, r2) : C5.create(i3);
    throw new Error("Mismatched change set lengths");
  }
}
function Ne3(s66, e, t3 = false) {
  let n3 = [], i3 = t3 ? [] : null, r2 = new F5(s66), l7 = new F5(e);
  for (let h6 = false; ; ) {
    if (r2.done && l7.done) return i3 ? A5.createSet(n3, i3) : C5.create(n3);
    if (r2.ins == 0) w5(n3, r2.len, 0, h6), r2.next();
    else if (l7.len == 0 && !l7.done) w5(n3, 0, l7.ins, h6), i3 && b4(i3, n3, l7.text), l7.next();
    else {
      if (r2.done || l7.done) throw new Error("Mismatched change set lengths");
      {
        let a7 = Math.min(r2.len2, l7.len), o2 = n3.length;
        if (r2.ins == -1) {
          let f4 = l7.ins == -1 ? -1 : l7.off ? 0 : l7.ins;
          w5(n3, a7, f4, h6), i3 && f4 && b4(i3, n3, l7.text);
        } else l7.ins == -1 ? (w5(n3, r2.off ? 0 : r2.len, a7, h6), i3 && b4(i3, n3, r2.textBit(a7))) : (w5(n3, r2.off ? 0 : r2.len, l7.off ? 0 : l7.ins, h6), i3 && !l7.off && b4(i3, n3, l7.text));
        h6 = (r2.ins > a7 || l7.ins >= 0 && l7.len > a7) && (h6 || n3.length > o2), r2.forward2(a7), l7.forward(a7);
      }
    }
  }
}
var F5 = class {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t3 = this.i - 2 >> 1;
    return t3 >= e.length ? m7.empty : e[t3];
  }
  textBit(e) {
    let { inserted: t3 } = this.set, n3 = this.i - 2 >> 1;
    return n3 >= t3.length && !e ? m7.empty : t3[n3].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
};
var L5 = class s6 {
  constructor(e, t3, n3) {
    this.from = e, this.to = t3, this.flags = n3;
  }
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  get empty() {
    return this.from == this.to;
  }
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  map(e, t3 = -1) {
    let n3, i3;
    return this.empty ? n3 = i3 = e.mapPos(this.from, t3) : (n3 = e.mapPos(this.from, 1), i3 = e.mapPos(this.to, -1)), n3 == this.from && i3 == this.to ? this : new s6(n3, i3, this.flags);
  }
  extend(e, t3 = e) {
    if (e <= this.anchor && t3 >= this.anchor) return x4.range(e, t3);
    let n3 = Math.abs(e - this.anchor) > Math.abs(t3 - this.anchor) ? e : t3;
    return x4.range(this.anchor, n3);
  }
  eq(e, t3 = false) {
    return this.anchor == e.anchor && this.head == e.head && (!t3 || !this.empty || this.assoc == e.assoc);
  }
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
    return x4.range(e.anchor, e.head);
  }
  static create(e, t3, n3) {
    return new s6(e, t3, n3);
  }
};
var x4 = class s7 {
  constructor(e, t3) {
    this.ranges = e, this.mainIndex = t3;
  }
  map(e, t3 = -1) {
    return e.empty ? this : s7.create(this.ranges.map((n3) => n3.map(e, t3)), this.mainIndex);
  }
  eq(e, t3 = false) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex) return false;
    for (let n3 = 0; n3 < this.ranges.length; n3++) if (!this.ranges[n3].eq(e.ranges[n3], t3)) return false;
    return true;
  }
  get main() {
    return this.ranges[this.mainIndex];
  }
  asSingle() {
    return this.ranges.length == 1 ? this : new s7([this.main], 0);
  }
  addRange(e, t3 = true) {
    return s7.create([e].concat(this.ranges), t3 ? 0 : this.mainIndex + 1);
  }
  replaceRange(e, t3 = this.mainIndex) {
    let n3 = this.ranges.slice();
    return n3[t3] = e, s7.create(n3, this.mainIndex);
  }
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
    return new s7(e.ranges.map((t3) => L5.fromJSON(t3)), e.main);
  }
  static single(e, t3 = e) {
    return new s7([s7.range(e, t3)], 0);
  }
  static create(e, t3 = 0) {
    if (e.length == 0) throw new RangeError("A selection needs at least one range");
    for (let n3 = 0, i3 = 0; i3 < e.length; i3++) {
      let r2 = e[i3];
      if (r2.empty ? r2.from <= n3 : r2.from < n3) return s7.normalized(e.slice(), t3);
      n3 = r2.to;
    }
    return new s7(e, t3);
  }
  static cursor(e, t3 = 0, n3, i3) {
    return L5.create(e, e, (t3 == 0 ? 0 : t3 < 0 ? 8 : 16) | (n3 == null ? 7 : Math.min(6, n3)) | (i3 ?? 16777215) << 6);
  }
  static range(e, t3, n3, i3) {
    let r2 = (n3 ?? 16777215) << 6 | (i3 == null ? 7 : Math.min(6, i3));
    return t3 < e ? L5.create(t3, e, 48 | r2) : L5.create(e, t3, (t3 > e ? 8 : 0) | r2);
  }
  static normalized(e, t3 = 0) {
    let n3 = e[t3];
    e.sort((i3, r2) => i3.from - r2.from), t3 = e.indexOf(n3);
    for (let i3 = 1; i3 < e.length; i3++) {
      let r2 = e[i3], l7 = e[i3 - 1];
      if (r2.empty ? r2.from <= l7.to : r2.from < l7.to) {
        let h6 = l7.from, a7 = Math.max(r2.to, l7.to);
        i3 <= t3 && t3--, e.splice(--i3, 2, r2.anchor > r2.head ? s7.range(a7, h6) : s7.range(h6, a7));
      }
    }
    return new s7(e, t3);
  }
};
function De4(s66, e) {
  for (let t3 of s66.ranges) if (t3.to > e) throw new RangeError("Selection points outside of document");
}
var Ie6 = 0;
var y4 = class s8 {
  constructor(e, t3, n3, i3, r2) {
    this.combine = e, this.compareInput = t3, this.compare = n3, this.isStatic = i3, this.id = Ie6++, this.default = e([]), this.extensions = typeof r2 == "function" ? r2(this) : r2;
  }
  get reader() {
    return this;
  }
  static define(e = {}) {
    return new s8(e.combine || ((t3) => t3), e.compareInput || ((t3, n3) => t3 === n3), e.compare || (e.combine ? (t3, n3) => t3 === n3 : Pe2), !!e.static, e.enables);
  }
  of(e) {
    return new V4([], this, 0, e);
  }
  compute(e, t3) {
    if (this.isStatic) throw new Error("Can't compute a static facet");
    return new V4(e, this, 1, t3);
  }
  computeN(e, t3) {
    if (this.isStatic) throw new Error("Can't compute a static facet");
    return new V4(e, this, 2, t3);
  }
  from(e, t3) {
    return t3 || (t3 = (n3) => n3), this.compute([e], (n3) => t3(n3.field(e)));
  }
};
function Pe2(s66, e) {
  return s66 == e || s66.length == e.length && s66.every((t3, n3) => t3 === e[n3]);
}
var V4 = class {
  constructor(e, t3, n3, i3) {
    this.dependencies = e, this.facet = t3, this.type = n3, this.value = i3, this.id = Ie6++;
  }
  dynamicSlot(e) {
    var t3;
    let n3 = this.value, i3 = this.facet.compareInput, r2 = this.id, l7 = e[r2] >> 1, h6 = this.type == 2, a7 = false, o2 = false, f4 = [];
    for (let u5 of this.dependencies) u5 == "doc" ? a7 = true : u5 == "selection" ? o2 = true : ((t3 = e[u5.id]) !== null && t3 !== void 0 ? t3 : 1) & 1 || f4.push(e[u5.id]);
    return { create(u5) {
      return u5.values[l7] = n3(u5), 1;
    }, update(u5, d5) {
      if (a7 && d5.docChanged || o2 && (d5.docChanged || d5.selection) || ge7(u5, f4)) {
        let c2 = n3(u5);
        if (h6 ? !Te5(c2, u5.values[l7], i3) : !i3(c2, u5.values[l7])) return u5.values[l7] = c2, 1;
      }
      return 0;
    }, reconfigure: (u5, d5) => {
      let c2, g8 = d5.config.address[r2];
      if (g8 != null) {
        let P5 = se5(d5, g8);
        if (this.dependencies.every((p8) => p8 instanceof y4 ? d5.facet(p8) === u5.facet(p8) : p8 instanceof z6 ? d5.field(p8, false) == u5.field(p8, false) : true) || (h6 ? Te5(c2 = n3(u5), P5, i3) : i3(c2 = n3(u5), P5))) return u5.values[l7] = P5, 0;
      } else c2 = n3(u5);
      return u5.values[l7] = c2, 1;
    } };
  }
};
function Te5(s66, e, t3) {
  if (s66.length != e.length) return false;
  for (let n3 = 0; n3 < s66.length; n3++) if (!t3(s66[n3], e[n3])) return false;
  return true;
}
function ge7(s66, e) {
  let t3 = false;
  for (let n3 of e) j7(s66, n3) & 1 && (t3 = true);
  return t3;
}
function Qe3(s66, e, t3) {
  let n3 = t3.map((a7) => s66[a7.id]), i3 = t3.map((a7) => a7.type), r2 = n3.filter((a7) => !(a7 & 1)), l7 = s66[e.id] >> 1;
  function h6(a7) {
    let o2 = [];
    for (let f4 = 0; f4 < n3.length; f4++) {
      let u5 = se5(a7, n3[f4]);
      if (i3[f4] == 2) for (let d5 of u5) o2.push(d5);
      else o2.push(u5);
    }
    return e.combine(o2);
  }
  return { create(a7) {
    for (let o2 of n3) j7(a7, o2);
    return a7.values[l7] = h6(a7), 1;
  }, update(a7, o2) {
    if (!ge7(a7, r2)) return 0;
    let f4 = h6(a7);
    return e.compare(f4, a7.values[l7]) ? 0 : (a7.values[l7] = f4, 1);
  }, reconfigure(a7, o2) {
    let f4 = ge7(a7, n3), u5 = o2.config.facets[e.id], d5 = o2.facet(e);
    if (u5 && !f4 && Pe2(t3, u5)) return a7.values[l7] = d5, 0;
    let c2 = h6(a7);
    return e.compare(c2, d5) ? (a7.values[l7] = d5, 0) : (a7.values[l7] = c2, 1);
  } };
}
var Me2 = y4.define({ static: true });
var z6 = class s9 {
  constructor(e, t3, n3, i3, r2) {
    this.id = e, this.createF = t3, this.updateF = n3, this.compareF = i3, this.spec = r2, this.provides = void 0;
  }
  static define(e) {
    let t3 = new s9(Ie6++, e.create, e.update, e.compare || ((n3, i3) => n3 === i3), e);
    return e.provide && (t3.provides = e.provide(t3)), t3;
  }
  create(e) {
    let t3 = e.facet(Me2).find((n3) => n3.field == this);
    return (t3?.create || this.createF)(e);
  }
  slot(e) {
    let t3 = e[this.id] >> 1;
    return { create: (n3) => (n3.values[t3] = this.create(n3), 1), update: (n3, i3) => {
      let r2 = n3.values[t3], l7 = this.updateF(r2, i3);
      return this.compareF(r2, l7) ? 0 : (n3.values[t3] = l7, 1);
    }, reconfigure: (n3, i3) => i3.config.address[this.id] != null ? (n3.values[t3] = i3.field(this), 0) : (n3.values[t3] = this.create(n3), 1) };
  }
  init(e) {
    return [this, Me2.of({ field: this, create: e })];
  }
  get extension() {
    return this;
  }
};
var M4 = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function U7(s66) {
  return (e) => new te3(e, s66);
}
var ht3 = { highest: U7(M4.highest), high: U7(M4.high), default: U7(M4.default), low: U7(M4.low), lowest: U7(M4.lowest) };
var te3 = class {
  constructor(e, t3) {
    this.inner = e, this.prec = t3;
  }
};
var ne5 = class s10 {
  of(e) {
    return new G5(this, e);
  }
  reconfigure(e) {
    return s10.reconfigure.of({ compartment: this, extension: e });
  }
  get(e) {
    return e.config.compartments.get(this);
  }
};
var G5 = class {
  constructor(e, t3) {
    this.compartment = e, this.inner = t3;
  }
};
var ie7 = class s11 {
  constructor(e, t3, n3, i3, r2, l7) {
    for (this.base = e, this.compartments = t3, this.dynamicSlots = n3, this.address = i3, this.staticValues = r2, this.facets = l7, this.statusTemplate = []; this.statusTemplate.length < n3.length; ) this.statusTemplate.push(0);
  }
  staticFacet(e) {
    let t3 = this.address[e.id];
    return t3 == null ? e.default : this.staticValues[t3 >> 1];
  }
  static resolve(e, t3, n3) {
    let i3 = [], r2 = /* @__PURE__ */ Object.create(null), l7 = /* @__PURE__ */ new Map();
    for (let d5 of Xe4(e, t3, l7)) d5 instanceof z6 ? i3.push(d5) : (r2[d5.facet.id] || (r2[d5.facet.id] = [])).push(d5);
    let h6 = /* @__PURE__ */ Object.create(null), a7 = [], o2 = [];
    for (let d5 of i3) h6[d5.id] = o2.length << 1, o2.push((c2) => d5.slot(c2));
    let f4 = n3?.config.facets;
    for (let d5 in r2) {
      let c2 = r2[d5], g8 = c2[0].facet, P5 = f4 && f4[d5] || [];
      if (c2.every((p8) => p8.type == 0)) if (h6[g8.id] = a7.length << 1 | 1, Pe2(P5, c2)) a7.push(n3.facet(g8));
      else {
        let p8 = g8.combine(c2.map((he8) => he8.value));
        a7.push(n3 && g8.compare(p8, n3.facet(g8)) ? n3.facet(g8) : p8);
      }
      else {
        for (let p8 of c2) p8.type == 0 ? (h6[p8.id] = a7.length << 1 | 1, a7.push(p8.value)) : (h6[p8.id] = o2.length << 1, o2.push((he8) => p8.dynamicSlot(he8)));
        h6[g8.id] = o2.length << 1, o2.push((p8) => Qe3(p8, g8, c2));
      }
    }
    let u5 = o2.map((d5) => d5(h6));
    return new s11(e, l7, u5, h6, a7, r2);
  }
};
function Xe4(s66, e, t3) {
  let n3 = [[], [], [], [], []], i3 = /* @__PURE__ */ new Map();
  function r2(l7, h6) {
    let a7 = i3.get(l7);
    if (a7 != null) {
      if (a7 <= h6) return;
      let o2 = n3[a7].indexOf(l7);
      o2 > -1 && n3[a7].splice(o2, 1), l7 instanceof G5 && t3.delete(l7.compartment);
    }
    if (i3.set(l7, h6), Array.isArray(l7)) for (let o2 of l7) r2(o2, h6);
    else if (l7 instanceof G5) {
      if (t3.has(l7.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
      let o2 = e.get(l7.compartment) || l7.inner;
      t3.set(l7.compartment, o2), r2(o2, h6);
    } else if (l7 instanceof te3) r2(l7.inner, l7.prec);
    else if (l7 instanceof z6) n3[h6].push(l7), l7.provides && r2(l7.provides, h6);
    else if (l7 instanceof V4) n3[h6].push(l7), l7.facet.extensions && r2(l7.facet.extensions, M4.default);
    else {
      let o2 = l7.extension;
      if (!o2) throw new Error(`Unrecognized extension value in extension set (${l7}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      r2(o2, h6);
    }
  }
  return r2(s66, M4.default), n3.reduce((l7, h6) => l7.concat(h6));
}
function j7(s66, e) {
  if (e & 1) return 2;
  let t3 = e >> 1, n3 = s66.status[t3];
  if (n3 == 4) throw new Error("Cyclic dependency between fields and/or facets");
  if (n3 & 2) return n3;
  s66.status[t3] = 4;
  let i3 = s66.computeSlot(s66, s66.config.dynamicSlots[t3]);
  return s66.status[t3] = 2 | i3;
}
function se5(s66, e) {
  return e & 1 ? s66.config.staticValues[e >> 1] : s66.values[e >> 1];
}
var Ve6 = y4.define();
var pe4 = y4.define({ combine: (s66) => s66.some((e) => e), static: true });
var qe3 = y4.define({ combine: (s66) => s66.length ? s66[0] : void 0, static: true });
var $e3 = y4.define();
var ze4 = y4.define();
var We3 = y4.define();
var Ue6 = y4.define({ combine: (s66) => s66.length ? s66[0] : false });
var J4 = class {
  constructor(e, t3) {
    this.type = e, this.value = t3;
  }
  static define() {
    return new me6();
  }
};
var me6 = class {
  of(e) {
    return new J4(this, e);
  }
};
var we5 = class {
  constructor(e) {
    this.map = e;
  }
  of(e) {
    return new v3(this, e);
  }
};
var v3 = class s12 {
  constructor(e, t3) {
    this.type = e, this.value = t3;
  }
  map(e) {
    let t3 = this.type.map(this.value, e);
    return t3 === void 0 ? void 0 : t3 == this.value ? this : new s12(this.type, t3);
  }
  is(e) {
    return this.type == e;
  }
  static define(e = {}) {
    return new we5(e.map || ((t3) => t3));
  }
  static mapEffects(e, t3) {
    if (!e.length) return e;
    let n3 = [];
    for (let i3 of e) {
      let r2 = i3.map(t3);
      r2 && n3.push(r2);
    }
    return n3;
  }
};
v3.reconfigure = v3.define();
v3.appendConfig = v3.define();
var S3 = class s13 {
  constructor(e, t3, n3, i3, r2, l7) {
    this.startState = e, this.changes = t3, this.selection = n3, this.effects = i3, this.annotations = r2, this.scrollIntoView = l7, this._doc = null, this._state = null, n3 && De4(n3, t3.newLength), r2.some((h6) => h6.type == s13.time) || (this.annotations = r2.concat(s13.time.of(Date.now())));
  }
  static create(e, t3, n3, i3, r2, l7) {
    return new s13(e, t3, n3, i3, r2, l7);
  }
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  annotation(e) {
    for (let t3 of this.annotations) if (t3.type == e) return t3.value;
  }
  get docChanged() {
    return !this.changes.empty;
  }
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  isUserEvent(e) {
    let t3 = this.annotation(s13.userEvent);
    return !!(t3 && (t3 == e || t3.length > e.length && t3.slice(0, e.length) == e && t3[e.length] == "."));
  }
};
S3.time = J4.define();
S3.userEvent = J4.define();
S3.addToHistory = J4.define();
S3.remote = J4.define();
function Ye4(s66, e) {
  let t3 = [];
  for (let n3 = 0, i3 = 0; ; ) {
    let r2, l7;
    if (n3 < s66.length && (i3 == e.length || e[i3] >= s66[n3])) r2 = s66[n3++], l7 = s66[n3++];
    else if (i3 < e.length) r2 = e[i3++], l7 = e[i3++];
    else return t3;
    !t3.length || t3[t3.length - 1] < r2 ? t3.push(r2, l7) : t3[t3.length - 1] < l7 && (t3[t3.length - 1] = l7);
  }
}
function je5(s66, e, t3) {
  var n3;
  let i3, r2, l7;
  return t3 ? (i3 = e.changes, r2 = A5.empty(e.changes.length), l7 = s66.changes.compose(e.changes)) : (i3 = e.changes.map(s66.changes), r2 = s66.changes.mapDesc(e.changes, true), l7 = s66.changes.compose(i3)), { changes: l7, selection: e.selection ? e.selection.map(r2) : (n3 = s66.selection) === null || n3 === void 0 ? void 0 : n3.map(i3), effects: v3.mapEffects(s66.effects, i3).concat(v3.mapEffects(e.effects, r2)), annotations: s66.annotations.length ? s66.annotations.concat(e.annotations) : e.annotations, scrollIntoView: s66.scrollIntoView || e.scrollIntoView };
}
function ve4(s66, e, t3) {
  let n3 = e.selection, i3 = q5(e.annotations);
  return e.userEvent && (i3 = i3.concat(S3.userEvent.of(e.userEvent))), { changes: e.changes instanceof A5 ? e.changes : A5.of(e.changes || [], t3, s66.facet(qe3)), selection: n3 && (n3 instanceof x4 ? n3 : x4.single(n3.anchor, n3.head)), effects: q5(e.effects), annotations: i3, scrollIntoView: !!e.scrollIntoView };
}
function Ge5(s66, e, t3) {
  let n3 = ve4(s66, e.length ? e[0] : {}, s66.doc.length);
  e.length && e[0].filter === false && (t3 = false);
  for (let r2 = 1; r2 < e.length; r2++) {
    e[r2].filter === false && (t3 = false);
    let l7 = !!e[r2].sequential;
    n3 = je5(n3, ve4(s66, e[r2], l7 ? n3.changes.newLength : s66.doc.length), l7);
  }
  let i3 = S3.create(s66, n3.changes, n3.selection, n3.effects, n3.annotations, n3.scrollIntoView);
  return et3(t3 ? _e4(i3) : i3);
}
function _e4(s66) {
  let e = s66.startState, t3 = true;
  for (let i3 of e.facet($e3)) {
    let r2 = i3(s66);
    if (r2 === false) {
      t3 = false;
      break;
    }
    Array.isArray(r2) && (t3 = t3 === true ? r2 : Ye4(t3, r2));
  }
  if (t3 !== true) {
    let i3, r2;
    if (t3 === false) r2 = s66.changes.invertedDesc, i3 = A5.empty(e.doc.length);
    else {
      let l7 = s66.changes.filter(t3);
      i3 = l7.changes, r2 = l7.filtered.mapDesc(l7.changes).invertedDesc;
    }
    s66 = S3.create(e, i3, s66.selection && s66.selection.map(r2), v3.mapEffects(s66.effects, r2), s66.annotations, s66.scrollIntoView);
  }
  let n3 = e.facet(ze4);
  for (let i3 = n3.length - 1; i3 >= 0; i3--) {
    let r2 = n3[i3](s66);
    r2 instanceof S3 ? s66 = r2 : Array.isArray(r2) && r2.length == 1 && r2[0] instanceof S3 ? s66 = r2[0] : s66 = Ge5(e, q5(r2), false);
  }
  return s66;
}
function et3(s66) {
  let e = s66.startState, t3 = e.facet(We3), n3 = s66;
  for (let i3 = t3.length - 1; i3 >= 0; i3--) {
    let r2 = t3[i3](s66);
    r2 && Object.keys(r2).length && (n3 = je5(n3, ve4(e, r2, s66.changes.newLength), true));
  }
  return n3 == s66 ? s66 : S3.create(e, s66.changes, s66.selection, n3.effects, n3.annotations, n3.scrollIntoView);
}
var tt3 = [];
function q5(s66) {
  return s66 == null ? tt3 : Array.isArray(s66) ? s66 : [s66];
}
var O2 = function(s66) {
  return s66[s66.Word = 0] = "Word", s66[s66.Space = 1] = "Space", s66[s66.Other = 2] = "Other", s66;
}(O2 || (O2 = {}));
var nt3 = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var xe3;
try {
  xe3 = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function it2(s66) {
  if (xe3) return xe3.test(s66);
  for (let e = 0; e < s66.length; e++) {
    let t3 = s66[e];
    if (/\w/.test(t3) || t3 > "" && (t3.toUpperCase() != t3.toLowerCase() || nt3.test(t3))) return true;
  }
  return false;
}
function st3(s66) {
  return (e) => {
    if (!/\S/.test(e)) return O2.Space;
    if (it2(e)) return O2.Word;
    for (let t3 = 0; t3 < s66.length; t3++) if (e.indexOf(s66[t3]) > -1) return O2.Word;
    return O2.Other;
  };
}
var I4 = class s14 {
  constructor(e, t3, n3, i3, r2, l7) {
    this.config = e, this.doc = t3, this.selection = n3, this.values = i3, this.status = e.statusTemplate.slice(), this.computeSlot = r2, l7 && (l7._state = this);
    for (let h6 = 0; h6 < this.config.dynamicSlots.length; h6++) j7(this, h6 << 1);
    this.computeSlot = null;
  }
  field(e, t3 = true) {
    let n3 = this.config.address[e.id];
    if (n3 == null) {
      if (t3) throw new RangeError("Field is not present in this state");
      return;
    }
    return j7(this, n3), se5(this, n3);
  }
  update(...e) {
    return Ge5(this, e, true);
  }
  applyTransaction(e) {
    let t3 = this.config, { base: n3, compartments: i3 } = t3;
    for (let h6 of e.effects) h6.is(ne5.reconfigure) ? (t3 && (i3 = /* @__PURE__ */ new Map(), t3.compartments.forEach((a7, o2) => i3.set(o2, a7)), t3 = null), i3.set(h6.value.compartment, h6.value.extension)) : h6.is(v3.reconfigure) ? (t3 = null, n3 = h6.value) : h6.is(v3.appendConfig) && (t3 = null, n3 = q5(n3).concat(h6.value));
    let r2;
    t3 ? r2 = e.startState.values.slice() : (t3 = ie7.resolve(n3, i3, this), r2 = new s14(t3, this.doc, this.selection, t3.dynamicSlots.map(() => null), (a7, o2) => o2.reconfigure(a7, this), null).values);
    let l7 = e.startState.facet(pe4) ? e.newSelection : e.newSelection.asSingle();
    new s14(t3, e.newDoc, l7, r2, (h6, a7) => a7.update(h6, e), e);
  }
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t3) => ({ changes: { from: t3.from, to: t3.to, insert: e }, range: x4.cursor(t3.from + e.length) }));
  }
  changeByRange(e) {
    let t3 = this.selection, n3 = e(t3.ranges[0]), i3 = this.changes(n3.changes), r2 = [n3.range], l7 = q5(n3.effects);
    for (let h6 = 1; h6 < t3.ranges.length; h6++) {
      let a7 = e(t3.ranges[h6]), o2 = this.changes(a7.changes), f4 = o2.map(i3);
      for (let d5 = 0; d5 < h6; d5++) r2[d5] = r2[d5].map(f4);
      let u5 = i3.mapDesc(o2, true);
      r2.push(a7.range.map(u5)), i3 = i3.compose(f4), l7 = v3.mapEffects(l7, f4).concat(v3.mapEffects(q5(a7.effects), u5));
    }
    return { changes: i3, selection: x4.create(r2, t3.mainIndex), effects: l7 };
  }
  changes(e = []) {
    return e instanceof A5 ? e : A5.of(e, this.doc.length, this.facet(s14.lineSeparator));
  }
  toText(e) {
    return m7.of(e.split(this.facet(s14.lineSeparator) || ue5));
  }
  sliceDoc(e = 0, t3 = this.doc.length) {
    return this.doc.sliceString(e, t3, this.lineBreak);
  }
  facet(e) {
    let t3 = this.config.address[e.id];
    return t3 == null ? e.default : (j7(this, t3), se5(this, t3));
  }
  toJSON(e) {
    let t3 = { doc: this.sliceDoc(), selection: this.selection.toJSON() };
    if (e) for (let n3 in e) {
      let i3 = e[n3];
      i3 instanceof z6 && this.config.address[i3.id] != null && (t3[n3] = i3.spec.toJSON(this.field(e[n3]), this));
    }
    return t3;
  }
  static fromJSON(e, t3 = {}, n3) {
    if (!e || typeof e.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
    let i3 = [];
    if (n3) {
      for (let r2 in n3) if (Object.prototype.hasOwnProperty.call(e, r2)) {
        let l7 = n3[r2], h6 = e[r2];
        i3.push(l7.init((a7) => l7.spec.fromJSON(h6, a7)));
      }
    }
    return s14.create({ doc: e.doc, selection: x4.fromJSON(e.selection), extensions: t3.extensions ? i3.concat([t3.extensions]) : i3 });
  }
  static create(e = {}) {
    let t3 = ie7.resolve(e.extensions || [], /* @__PURE__ */ new Map()), n3 = e.doc instanceof m7 ? e.doc : m7.of((e.doc || "").split(t3.staticFacet(s14.lineSeparator) || ue5)), i3 = e.selection ? e.selection instanceof x4 ? e.selection : x4.single(e.selection.anchor, e.selection.head) : x4.single(0);
    return De4(i3, n3.length), t3.staticFacet(pe4) || (i3 = i3.asSingle()), new s14(t3, n3, i3, t3.dynamicSlots.map(() => null), (r2, l7) => l7.create(r2), null);
  }
  get tabSize() {
    return this.facet(s14.tabSize);
  }
  get lineBreak() {
    return this.facet(s14.lineSeparator) || `
`;
  }
  get readOnly() {
    return this.facet(Ue6);
  }
  phrase(e, ...t3) {
    for (let n3 of this.facet(s14.phrases)) if (Object.prototype.hasOwnProperty.call(n3, e)) {
      e = n3[e];
      break;
    }
    return t3.length && (e = e.replace(/\$(\$|\d*)/g, (n3, i3) => {
      if (i3 == "$") return "$";
      let r2 = +(i3 || 1);
      return !r2 || r2 > t3.length ? n3 : t3[r2 - 1];
    })), e;
  }
  languageDataAt(e, t3, n3 = -1) {
    let i3 = [];
    for (let r2 of this.facet(Ve6)) for (let l7 of r2(this, t3, n3)) Object.prototype.hasOwnProperty.call(l7, e) && i3.push(l7[e]);
    return i3;
  }
  charCategorizer(e) {
    return st3(this.languageDataAt("wordChars", e).join(""));
  }
  wordAt(e) {
    let { text: t3, from: n3, length: i3 } = this.doc.lineAt(e), r2 = this.charCategorizer(e), l7 = e - n3, h6 = e - n3;
    for (; l7 > 0; ) {
      let a7 = ee(t3, l7, false);
      if (r2(t3.slice(a7, l7)) != O2.Word) break;
      l7 = a7;
    }
    for (; h6 < i3; ) {
      let a7 = ee(t3, h6);
      if (r2(t3.slice(h6, a7)) != O2.Word) break;
      h6 = a7;
    }
    return l7 == h6 ? null : x4.range(l7 + n3, h6 + n3);
  }
};
I4.allowMultipleSelections = pe4;
I4.tabSize = y4.define({ combine: (s66) => s66.length ? s66[0] : 4 });
I4.lineSeparator = qe3;
I4.readOnly = Ue6;
I4.phrases = y4.define({ compare(s66, e) {
  let t3 = Object.keys(s66), n3 = Object.keys(e);
  return t3.length == n3.length && t3.every((i3) => s66[i3] == e[i3]);
} });
I4.languageData = Ve6;
I4.changeFilter = $e3;
I4.transactionFilter = ze4;
I4.transactionExtender = We3;
ne5.reconfigure = v3.define();
function at2(s66, e, t3 = {}) {
  let n3 = {};
  for (let i3 of s66) for (let r2 of Object.keys(i3)) {
    let l7 = i3[r2], h6 = n3[r2];
    if (h6 === void 0) n3[r2] = l7;
    else if (!(h6 === l7 || l7 === void 0)) if (Object.hasOwnProperty.call(t3, r2)) n3[r2] = t3[r2](h6, l7);
    else throw new Error("Config merge conflict for field " + r2);
  }
  for (let i3 in e) n3[i3] === void 0 && (n3[i3] = e[i3]);
  return n3;
}
var W7 = class {
  eq(e) {
    return this == e;
  }
  range(e, t3 = e) {
    return H6.create(e, t3, this);
  }
};
W7.prototype.startSide = W7.prototype.endSide = 0;
W7.prototype.point = false;
W7.prototype.mapMode = E6.TrackDel;
var H6 = class s15 {
  constructor(e, t3, n3) {
    this.from = e, this.to = t3, this.value = n3;
  }
  static create(e, t3, n3) {
    return new s15(e, t3, n3);
  }
};
function ke5(s66, e) {
  return s66.from - e.from || s66.value.startSide - e.value.startSide;
}
var ye6 = class s16 {
  constructor(e, t3, n3, i3) {
    this.from = e, this.to = t3, this.value = n3, this.maxPoint = i3;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  findIndex(e, t3, n3, i3 = 0) {
    let r2 = n3 ? this.to : this.from;
    for (let l7 = i3, h6 = r2.length; ; ) {
      if (l7 == h6) return l7;
      let a7 = l7 + h6 >> 1, o2 = r2[a7] - e || (n3 ? this.value[a7].endSide : this.value[a7].startSide) - t3;
      if (a7 == l7) return o2 >= 0 ? l7 : h6;
      o2 >= 0 ? h6 = a7 : l7 = a7 + 1;
    }
  }
  between(e, t3, n3, i3) {
    for (let r2 = this.findIndex(t3, -1e9, true), l7 = this.findIndex(n3, 1e9, false, r2); r2 < l7; r2++) if (i3(this.from[r2] + e, this.to[r2] + e, this.value[r2]) === false) return false;
  }
  map(e, t3) {
    let n3 = [], i3 = [], r2 = [], l7 = -1, h6 = -1;
    for (let a7 = 0; a7 < this.value.length; a7++) {
      let o2 = this.value[a7], f4 = this.from[a7] + e, u5 = this.to[a7] + e, d5, c2;
      if (f4 == u5) {
        let g8 = t3.mapPos(f4, o2.startSide, o2.mapMode);
        if (g8 == null || (d5 = c2 = g8, o2.startSide != o2.endSide && (c2 = t3.mapPos(f4, o2.endSide), c2 < d5))) continue;
      } else if (d5 = t3.mapPos(f4, o2.startSide), c2 = t3.mapPos(u5, o2.endSide), d5 > c2 || d5 == c2 && o2.startSide > 0 && o2.endSide <= 0) continue;
      (c2 - d5 || o2.endSide - o2.startSide) < 0 || (l7 < 0 && (l7 = d5), o2.point && (h6 = Math.max(h6, c2 - d5)), n3.push(o2), i3.push(d5 - l7), r2.push(c2 - l7));
    }
    return { mapped: n3.length ? new s16(i3, r2, n3, h6) : null, pos: l7 };
  }
};
var T = class s17 {
  constructor(e, t3, n3, i3) {
    this.chunkPos = e, this.chunk = t3, this.nextLayer = n3, this.maxPoint = i3;
  }
  static create(e, t3, n3, i3) {
    return new s17(e, t3, n3, i3);
  }
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  get size() {
    if (this.isEmpty) return 0;
    let e = this.nextLayer.size;
    for (let t3 of this.chunk) e += t3.value.length;
    return e;
  }
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  update(e) {
    let { add: t3 = [], sort: n3 = false, filterFrom: i3 = 0, filterTo: r2 = this.length } = e, l7 = e.filter;
    if (t3.length == 0 && !l7) return this;
    if (n3 && (t3 = t3.slice().sort(ke5)), this.isEmpty) return t3.length ? s17.of(t3) : this;
    let h6 = new le3(this, null, -1).goto(0), a7 = 0, o2 = [], f4 = new re4();
    for (; h6.value || a7 < t3.length; ) if (a7 < t3.length && (h6.from - t3[a7].from || h6.startSide - t3[a7].value.startSide) >= 0) {
      let u5 = t3[a7++];
      f4.addInner(u5.from, u5.to, u5.value) || o2.push(u5);
    } else h6.rangeIndex == 1 && h6.chunkIndex < this.chunk.length && (a7 == t3.length || this.chunkEnd(h6.chunkIndex) < t3[a7].from) && (!l7 || i3 > this.chunkEnd(h6.chunkIndex) || r2 < this.chunkPos[h6.chunkIndex]) && f4.addChunk(this.chunkPos[h6.chunkIndex], this.chunk[h6.chunkIndex]) ? h6.nextChunk() : ((!l7 || i3 > h6.to || r2 < h6.from || l7(h6.from, h6.to, h6.value)) && (f4.addInner(h6.from, h6.to, h6.value) || o2.push(H6.create(h6.from, h6.to, h6.value))), h6.next());
    return f4.finishInner(this.nextLayer.isEmpty && !o2.length ? s17.empty : this.nextLayer.update({ add: o2, filter: l7, filterFrom: i3, filterTo: r2 }));
  }
  map(e) {
    if (e.empty || this.isEmpty) return this;
    let t3 = [], n3 = [], i3 = -1;
    for (let l7 = 0; l7 < this.chunk.length; l7++) {
      let h6 = this.chunkPos[l7], a7 = this.chunk[l7], o2 = e.touchesRange(h6, h6 + a7.length);
      if (o2 === false) i3 = Math.max(i3, a7.maxPoint), t3.push(a7), n3.push(e.mapPos(h6));
      else if (o2 === true) {
        let { mapped: f4, pos: u5 } = a7.map(h6, e);
        f4 && (i3 = Math.max(i3, f4.maxPoint), t3.push(f4), n3.push(u5));
      }
    }
    let r2 = this.nextLayer.map(e);
    return t3.length == 0 ? r2 : new s17(n3, t3, r2 || s17.empty, i3);
  }
  between(e, t3, n3) {
    if (!this.isEmpty) {
      for (let i3 = 0; i3 < this.chunk.length; i3++) {
        let r2 = this.chunkPos[i3], l7 = this.chunk[i3];
        if (t3 >= r2 && e <= r2 + l7.length && l7.between(r2, e - r2, t3 - r2, n3) === false) return;
      }
      this.nextLayer.between(e, t3, n3);
    }
  }
  iter(e = 0) {
    return Z3.from([this]).goto(e);
  }
  get isEmpty() {
    return this.nextLayer == this;
  }
  static iter(e, t3 = 0) {
    return Z3.from(e).goto(t3);
  }
  static compare(e, t3, n3, i3, r2 = -1) {
    let l7 = e.filter((u5) => u5.maxPoint > 0 || !u5.isEmpty && u5.maxPoint >= r2), h6 = t3.filter((u5) => u5.maxPoint > 0 || !u5.isEmpty && u5.maxPoint >= r2), a7 = Re3(l7, h6, n3), o2 = new R2(l7, a7, r2), f4 = new R2(h6, a7, r2);
    n3.iterGaps((u5, d5, c2) => Be5(o2, u5, f4, d5, c2, i3)), n3.empty && n3.length == 0 && Be5(o2, 0, f4, 0, 0, i3);
  }
  static eq(e, t3, n3 = 0, i3) {
    i3 == null && (i3 = 999999999);
    let r2 = e.filter((f4) => !f4.isEmpty && t3.indexOf(f4) < 0), l7 = t3.filter((f4) => !f4.isEmpty && e.indexOf(f4) < 0);
    if (r2.length != l7.length) return false;
    if (!r2.length) return true;
    let h6 = Re3(r2, l7), a7 = new R2(r2, h6, 0).goto(n3), o2 = new R2(l7, h6, 0).goto(n3);
    for (; ; ) {
      if (a7.to != o2.to || !Se5(a7.active, o2.active) || a7.point && (!o2.point || !a7.point.eq(o2.point))) return false;
      if (a7.to > i3) return true;
      a7.next(), o2.next();
    }
  }
  static spans(e, t3, n3, i3, r2 = -1) {
    let l7 = new R2(e, null, r2).goto(t3), h6 = t3, a7 = l7.openStart;
    for (; ; ) {
      let o2 = Math.min(l7.to, n3);
      if (l7.point) {
        let f4 = l7.activeForPoint(l7.to), u5 = l7.pointFrom < t3 ? f4.length + 1 : l7.point.startSide < 0 ? f4.length : Math.min(f4.length, a7);
        i3.point(h6, o2, l7.point, f4, u5, l7.pointRank), a7 = Math.min(l7.openEnd(o2), f4.length);
      } else o2 > h6 && (i3.span(h6, o2, l7.active, a7), a7 = l7.openEnd(o2));
      if (l7.to > n3) return a7 + (l7.point && l7.to > n3 ? 1 : 0);
      h6 = l7.to, l7.next();
    }
  }
  static of(e, t3 = false) {
    let n3 = new re4();
    for (let i3 of e instanceof H6 ? [e] : t3 ? rt3(e) : e) n3.add(i3.from, i3.to, i3.value);
    return n3.finish();
  }
  static join(e) {
    if (!e.length) return s17.empty;
    let t3 = e[e.length - 1];
    for (let n3 = e.length - 2; n3 >= 0; n3--) for (let i3 = e[n3]; i3 != s17.empty; i3 = i3.nextLayer) t3 = new s17(i3.chunkPos, i3.chunk, t3, Math.max(i3.maxPoint, t3.maxPoint));
    return t3;
  }
};
T.empty = new T([], [], null, -1);
function rt3(s66) {
  if (s66.length > 1) for (let e = s66[0], t3 = 1; t3 < s66.length; t3++) {
    let n3 = s66[t3];
    if (ke5(e, n3) > 0) return s66.slice().sort(ke5);
    e = n3;
  }
  return s66;
}
T.empty.nextLayer = T.empty;
var re4 = class s18 {
  finishChunk(e) {
    this.chunks.push(new ye6(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  add(e, t3, n3) {
    this.addInner(e, t3, n3) || (this.nextLayer || (this.nextLayer = new s18())).add(e, t3, n3);
  }
  addInner(e, t3, n3) {
    let i3 = e - this.lastTo || n3.startSide - this.last.endSide;
    if (i3 <= 0 && (e - this.lastFrom || n3.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return i3 < 0 ? false : (this.from.length == 250 && this.finishChunk(true), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t3 - this.chunkStart), this.last = n3, this.lastFrom = e, this.lastTo = t3, this.value.push(n3), n3.point && (this.maxPoint = Math.max(this.maxPoint, t3 - e)), true);
  }
  addChunk(e, t3) {
    if ((e - this.lastTo || t3.value[0].startSide - this.last.endSide) < 0) return false;
    this.from.length && this.finishChunk(true), this.setMaxPoint = Math.max(this.setMaxPoint, t3.maxPoint), this.chunks.push(t3), this.chunkPos.push(e);
    let n3 = t3.value.length - 1;
    return this.last = t3.value[n3], this.lastFrom = t3.from[n3] + e, this.lastTo = t3.to[n3] + e, true;
  }
  finish() {
    return this.finishInner(T.empty);
  }
  finishInner(e) {
    if (this.from.length && this.finishChunk(false), this.chunks.length == 0) return e;
    let t3 = T.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t3;
  }
};
function Re3(s66, e, t3) {
  let n3 = /* @__PURE__ */ new Map();
  for (let r2 of s66) for (let l7 = 0; l7 < r2.chunk.length; l7++) r2.chunk[l7].maxPoint <= 0 && n3.set(r2.chunk[l7], r2.chunkPos[l7]);
  let i3 = /* @__PURE__ */ new Set();
  for (let r2 of e) for (let l7 = 0; l7 < r2.chunk.length; l7++) {
    let h6 = n3.get(r2.chunk[l7]);
    h6 != null && (t3 ? t3.mapPos(h6) : h6) == r2.chunkPos[l7] && !t3?.touchesRange(h6, h6 + r2.chunk[l7].length) && i3.add(r2.chunk[l7]);
  }
  return i3;
}
var le3 = class {
  constructor(e, t3, n3, i3 = 0) {
    this.layer = e, this.skip = t3, this.minPoint = n3, this.rank = i3;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t3 = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t3, false), this;
  }
  gotoInner(e, t3, n3) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let i3 = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(i3) || this.layer.chunkEnd(this.chunkIndex) < e || i3.maxPoint < this.minPoint)) break;
      this.chunkIndex++, n3 = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let i3 = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t3, true);
      (!n3 || this.rangeIndex < i3) && this.setRangeIndex(i3);
    }
    this.next();
  }
  forward(e, t3) {
    (this.to - e || this.endSide - t3) < 0 && this.gotoInner(e, t3, true);
  }
  next() {
    for (; ; ) if (this.chunkIndex == this.layer.chunk.length) {
      this.from = this.to = 1e9, this.value = null;
      break;
    } else {
      let e = this.layer.chunkPos[this.chunkIndex], t3 = this.layer.chunk[this.chunkIndex], n3 = e + t3.from[this.rangeIndex];
      if (this.from = n3, this.to = e + t3.to[this.rangeIndex], this.value = t3.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
    }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip) for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); ) this.chunkIndex++;
      this.rangeIndex = 0;
    } else this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
};
var Z3 = class s19 {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t3 = null, n3 = -1) {
    let i3 = [];
    for (let r2 = 0; r2 < e.length; r2++) for (let l7 = e[r2]; !l7.isEmpty; l7 = l7.nextLayer) l7.maxPoint >= n3 && i3.push(new le3(l7, t3, n3, r2));
    return i3.length == 1 ? i3[0] : new s19(i3);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t3 = -1e9) {
    for (let n3 of this.heap) n3.goto(e, t3);
    for (let n3 = this.heap.length >> 1; n3 >= 0; n3--) oe4(this.heap, n3);
    return this.next(), this;
  }
  forward(e, t3) {
    for (let n3 of this.heap) n3.forward(e, t3);
    for (let n3 = this.heap.length >> 1; n3 >= 0; n3--) oe4(this.heap, n3);
    (this.to - e || this.value.endSide - t3) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0) this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), oe4(this.heap, 0);
    }
  }
};
function oe4(s66, e) {
  for (let t3 = s66[e]; ; ) {
    let n3 = (e << 1) + 1;
    if (n3 >= s66.length) break;
    let i3 = s66[n3];
    if (n3 + 1 < s66.length && i3.compare(s66[n3 + 1]) >= 0 && (i3 = s66[n3 + 1], n3++), t3.compare(i3) < 0) break;
    s66[n3] = t3, s66[e] = i3, e = n3;
  }
}
var R2 = class {
  constructor(e, t3, n3) {
    this.minPoint = n3, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = Z3.from(e, t3, n3);
  }
  goto(e, t3 = -1e9) {
    return this.cursor.goto(e, t3), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t3, this.openStart = -1, this.next(), this;
  }
  forward(e, t3) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t3) < 0; ) this.removeActive(this.minActive);
    this.cursor.forward(e, t3);
  }
  removeActive(e) {
    K3(this.active, e), K3(this.activeTo, e), K3(this.activeRank, e), this.minActive = Ce3(this.active, this.activeTo);
  }
  addActive(e) {
    let t3 = 0, { value: n3, to: i3, rank: r2 } = this.cursor;
    for (; t3 < this.activeRank.length && (r2 - this.activeRank[t3] || i3 - this.activeTo[t3]) > 0; ) t3++;
    Q2(this.active, t3, n3), Q2(this.activeTo, t3, i3), Q2(this.activeRank, t3, r2), e && Q2(e, t3, this.cursor.from), this.minActive = Ce3(this.active, this.activeTo);
  }
  next() {
    let e = this.to, t3 = this.point;
    this.point = null;
    let n3 = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let i3 = this.minActive;
      if (i3 > -1 && (this.activeTo[i3] - this.cursor.from || this.active[i3].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[i3] > e) {
          this.to = this.activeTo[i3], this.endSide = this.active[i3].endSide;
          break;
        }
        this.removeActive(i3), n3 && K3(n3, i3);
      } else if (this.cursor.value) if (this.cursor.from > e) {
        this.to = this.cursor.from, this.endSide = this.cursor.startSide;
        break;
      } else {
        let r2 = this.cursor.value;
        if (!r2.point) this.addActive(n3), this.cursor.next();
        else if (t3 && this.cursor.to == this.to && this.cursor.from < this.cursor.to) this.cursor.next();
        else {
          this.point = r2, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = r2.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
          break;
        }
      }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (n3) {
      this.openStart = 0;
      for (let i3 = n3.length - 1; i3 >= 0 && n3[i3] < e; i3--) this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length) return this.active;
    let t3 = [];
    for (let n3 = this.active.length - 1; n3 >= 0 && !(this.activeRank[n3] < this.pointRank); n3--) (this.activeTo[n3] > e || this.activeTo[n3] == e && this.active[n3].endSide >= this.point.endSide) && t3.push(this.active[n3]);
    return t3.reverse();
  }
  openEnd(e) {
    let t3 = 0;
    for (let n3 = this.activeTo.length - 1; n3 >= 0 && this.activeTo[n3] > e; n3--) t3++;
    return t3;
  }
};
function Be5(s66, e, t3, n3, i3, r2) {
  s66.goto(e), t3.goto(n3);
  let l7 = n3 + i3, h6 = n3, a7 = n3 - e;
  for (; ; ) {
    let o2 = s66.to + a7 - t3.to || s66.endSide - t3.endSide, f4 = o2 < 0 ? s66.to + a7 : t3.to, u5 = Math.min(f4, l7);
    if (s66.point || t3.point ? s66.point && t3.point && (s66.point == t3.point || s66.point.eq(t3.point)) && Se5(s66.activeForPoint(s66.to), t3.activeForPoint(t3.to)) || r2.comparePoint(h6, u5, s66.point, t3.point) : u5 > h6 && !Se5(s66.active, t3.active) && r2.compareRange(h6, u5, s66.active, t3.active), f4 > l7) break;
    h6 = f4, o2 <= 0 && s66.next(), o2 >= 0 && t3.next();
  }
}
function Se5(s66, e) {
  if (s66.length != e.length) return false;
  for (let t3 = 0; t3 < s66.length; t3++) if (s66[t3] != e[t3] && !s66[t3].eq(e[t3])) return false;
  return true;
}
function K3(s66, e) {
  for (let t3 = e, n3 = s66.length - 1; t3 < n3; t3++) s66[t3] = s66[t3 + 1];
  s66.pop();
}
function Q2(s66, e, t3) {
  for (let n3 = s66.length - 1; n3 >= e; n3--) s66[n3 + 1] = s66[n3];
  s66[e] = t3;
}
function Ce3(s66, e) {
  let t3 = -1, n3 = 1e9;
  for (let i3 = 0; i3 < e.length; i3++) (e[i3] - n3 || s66[i3].endSide - s66[t3].endSide) < 0 && (t3 = i3, n3 = e[i3]);
  return t3;
}
function ft2(s66, e, t3, n3) {
  for (let i3 = 0, r2 = 0; ; ) {
    if (r2 >= e) return i3;
    if (i3 == s66.length) break;
    r2 += s66.charCodeAt(i3) == 9 ? t3 - r2 % t3 : 1, i3 = ee(s66, i3);
  }
  return n3 === true ? -1 : s66.length;
}

// https://esm.sh/v135/style-mod@4.1.2/es2022/style-mod.mjs
var c = "ͼ";
var w6 = typeof Symbol > "u" ? "__" + c : Symbol.for(c);
var S4 = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var T2 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
var b5 = class {
  constructor(e, i3) {
    this.rules = [];
    let { finish: l7 } = i3 || {};
    function n3(t3) {
      return /^@/.test(t3) ? [t3] : t3.split(/,\s*/);
    }
    function s66(t3, a7, h6, f4) {
      let p8 = [], u5 = /^@(\w+)\b/.exec(t3[0]), m10 = u5 && u5[1] == "keyframes";
      if (u5 && a7 == null) return h6.push(t3[0] + ";");
      for (let o2 in a7) {
        let r2 = a7[o2];
        if (/&/.test(o2)) s66(o2.split(/,\s*/).map((d5) => t3.map((y9) => d5.replace(/&/, y9))).reduce((d5, y9) => d5.concat(y9)), r2, h6);
        else if (r2 && typeof r2 == "object") {
          if (!u5) throw new RangeError("The value of a property (" + o2 + ") should be a primitive value.");
          s66(n3(o2), r2, p8, m10);
        } else r2 != null && p8.push(o2.replace(/_.*/, "").replace(/[A-Z]/g, (d5) => "-" + d5.toLowerCase()) + ": " + r2 + ";");
      }
      (p8.length || m10) && h6.push((l7 && !u5 && !f4 ? t3.map(l7) : t3).join(", ") + " {" + p8.join(" ") + "}");
    }
    for (let t3 in e) s66(n3(t3), e[t3], this.rules);
  }
  getRules() {
    return this.rules.join(`
`);
  }
  static newName() {
    let e = T2[w6] || 1;
    return T2[w6] = e + 1, c + e.toString(36);
  }
  static mount(e, i3, l7) {
    let n3 = e[S4], s66 = l7 && l7.nonce;
    n3 ? s66 && n3.setNonce(s66) : n3 = new g5(e, s66), n3.mount(Array.isArray(i3) ? i3 : [i3], e);
  }
};
var x5 = /* @__PURE__ */ new Map();
var g5 = class {
  constructor(e, i3) {
    let l7 = e.ownerDocument || e, n3 = l7.defaultView;
    if (!e.head && e.adoptedStyleSheets && n3.CSSStyleSheet) {
      let s66 = x5.get(l7);
      if (s66) return e[S4] = s66;
      this.sheet = new n3.CSSStyleSheet(), x5.set(l7, this);
    } else this.styleTag = l7.createElement("style"), i3 && this.styleTag.setAttribute("nonce", i3);
    this.modules = [], e[S4] = this;
  }
  mount(e, i3) {
    let l7 = this.sheet, n3 = 0, s66 = 0;
    for (let t3 = 0; t3 < e.length; t3++) {
      let a7 = e[t3], h6 = this.modules.indexOf(a7);
      if (h6 < s66 && h6 > -1 && (this.modules.splice(h6, 1), s66--, h6 = -1), h6 == -1) {
        if (this.modules.splice(s66++, 0, a7), l7) for (let f4 = 0; f4 < a7.rules.length; f4++) l7.insertRule(a7.rules[f4], n3++);
      } else {
        for (; s66 < h6; ) n3 += this.modules[s66++].rules.length;
        n3 += a7.rules.length, s66++;
      }
    }
    if (l7) i3.adoptedStyleSheets.indexOf(this.sheet) < 0 && (i3.adoptedStyleSheets = [this.sheet, ...i3.adoptedStyleSheets]);
    else {
      let t3 = "";
      for (let h6 = 0; h6 < this.modules.length; h6++) t3 += this.modules[h6].getRules() + `
`;
      this.styleTag.textContent = t3;
      let a7 = i3.head || i3;
      this.styleTag.parentNode != a7 && a7.insertBefore(this.styleTag, a7.firstChild);
    }
  }
  setNonce(e) {
    this.styleTag && this.styleTag.getAttribute("nonce") != e && this.styleTag.setAttribute("nonce", e);
  }
};

// https://esm.sh/v135/w3c-keyname@2.2.8/es2022/w3c-keyname.mjs
var t2 = { 8: "Backspace", 9: "Tab", 10: "Enter", 12: "NumLock", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 44: "PrintScreen", 45: "Insert", 46: "Delete", 59: ";", 61: "=", 91: "Meta", 92: "Meta", 106: "*", 107: "+", 108: ",", 109: "-", 110: ".", 111: "/", 144: "NumLock", 145: "ScrollLock", 160: "Shift", 161: "Shift", 162: "Control", 163: "Control", 164: "Alt", 165: "Alt", 173: "-", 186: ";", 187: "=", 188: ",", 189: "-", 190: ".", 191: "/", 192: "`", 219: "[", 220: "\\", 221: "]", 222: "'" };
var i2 = { 48: ")", 49: "!", 50: "@", 51: "#", 52: "$", 53: "%", 54: "^", 55: "&", 56: "*", 57: "(", 59: ":", 61: "+", 173: "_", 186: ":", 187: "+", 188: "<", 189: "_", 190: ">", 191: "?", 192: "~", 219: "{", 220: "|", 221: "}", 222: '"' };
var n = typeof navigator < "u" && /Mac/.test(navigator.platform);
var y5 = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (r = 0; r < 10; r++) t2[48 + r] = t2[96 + r] = String(r);
var r;
for (r = 1; r <= 24; r++) t2[r + 111] = "F" + r;
var r;
for (r = 65; r <= 90; r++) t2[r] = String.fromCharCode(r + 32), i2[r] = String.fromCharCode(r);
var r;
for (a4 in t2) i2.hasOwnProperty(a4) || (i2[a4] = t2[a4]);
var a4;
function g6(o2) {
  var f4 = n && o2.metaKey && o2.shiftKey && !o2.ctrlKey && !o2.altKey || y5 && o2.shiftKey && o2.key && o2.key.length == 1 || o2.key == "Unidentified", e = !f4 && o2.key || (o2.shiftKey ? i2 : t2)[o2.keyCode] || o2.key || "Unidentified";
  return e == "Esc" && (e = "Escape"), e == "Del" && (e = "Delete"), e == "Left" && (e = "ArrowLeft"), e == "Up" && (e = "ArrowUp"), e == "Right" && (e = "ArrowRight"), e == "Down" && (e = "ArrowDown"), e;
}

// https://esm.sh/v135/@codemirror/view@6.35.0/es2022/view.mjs?target=es2020&dev
function jt(s66) {
  let t3;
  return s66.nodeType == 11 ? t3 = s66.getSelection ? s66 : s66.ownerDocument : t3 = s66, t3.getSelection();
}
function Xe5(s66, t3) {
  return t3 ? s66 == t3 || s66.contains(t3.nodeType != 1 ? t3.parentNode : t3) : false;
}
function ue6(s66, t3) {
  if (!t3.anchorNode) return false;
  try {
    return Xe5(s66, t3.anchorNode);
  } catch {
    return false;
  }
}
function At(s66) {
  return s66.nodeType == 3 ? pt3(s66, 0, s66.nodeValue.length).getClientRects() : s66.nodeType == 1 ? s66.getClientRects() : [];
}
function Vt(s66, t3, e, i3) {
  return e ? _i(s66, t3, e, i3, -1) || _i(s66, t3, e, i3, 1) : false;
}
function ut3(s66) {
  for (var t3 = 0; ; t3++) if (s66 = s66.previousSibling, !s66) return t3;
}
function xe4(s66) {
  return s66.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(s66.nodeName);
}
function _i(s66, t3, e, i3, n3) {
  for (; ; ) {
    if (s66 == e && t3 == i3) return true;
    if (t3 == (n3 < 0 ? 0 : U8(s66))) {
      if (s66.nodeName == "DIV") return false;
      let o2 = s66.parentNode;
      if (!o2 || o2.nodeType != 1) return false;
      t3 = ut3(s66) + (n3 < 0 ? 0 : 1), s66 = o2;
    } else if (s66.nodeType == 1) {
      if (s66 = s66.childNodes[t3 + (n3 < 0 ? -1 : 0)], s66.nodeType == 1 && s66.contentEditable == "false") return false;
      t3 = n3 < 0 ? U8(s66) : 0;
    } else return false;
  }
}
function U8(s66) {
  return s66.nodeType == 3 ? s66.nodeValue.length : s66.childNodes.length;
}
function te4(s66, t3) {
  let e = t3 ? s66.left : s66.right;
  return { left: e, right: e, top: s66.top, bottom: s66.bottom };
}
function to(s66) {
  let t3 = s66.visualViewport;
  return t3 ? { left: 0, right: t3.width, top: 0, bottom: t3.height } : { left: 0, right: s66.innerWidth, top: 0, bottom: s66.innerHeight };
}
function Fs(s66, t3) {
  let e = t3.width / s66.offsetWidth, i3 = t3.height / s66.offsetHeight;
  return (e > 0.995 && e < 1.005 || !isFinite(e) || Math.abs(t3.width - s66.offsetWidth) < 1) && (e = 1), (i3 > 0.995 && i3 < 1.005 || !isFinite(i3) || Math.abs(t3.height - s66.offsetHeight) < 1) && (i3 = 1), { scaleX: e, scaleY: i3 };
}
function eo(s66, t3, e, i3, n3, o2, r2, l7) {
  let h6 = s66.ownerDocument, c2 = h6.defaultView || window;
  for (let a7 = s66, f4 = false; a7 && !f4; ) if (a7.nodeType == 1) {
    let d5, u5 = a7 == h6.body, p8 = 1, g8 = 1;
    if (u5) d5 = to(c2);
    else {
      if (/^(fixed|sticky)$/.test(getComputedStyle(a7).position) && (f4 = true), a7.scrollHeight <= a7.clientHeight && a7.scrollWidth <= a7.clientWidth) {
        a7 = a7.assignedSlot || a7.parentNode;
        continue;
      }
      let w9 = a7.getBoundingClientRect();
      ({ scaleX: p8, scaleY: g8 } = Fs(a7, w9)), d5 = { left: w9.left, right: w9.left + a7.clientWidth * p8, top: w9.top, bottom: w9.top + a7.clientHeight * g8 };
    }
    let b8 = 0, m10 = 0;
    if (n3 == "nearest") t3.top < d5.top ? (m10 = -(d5.top - t3.top + r2), e > 0 && t3.bottom > d5.bottom + m10 && (m10 = t3.bottom - d5.bottom + m10 + r2)) : t3.bottom > d5.bottom && (m10 = t3.bottom - d5.bottom + r2, e < 0 && t3.top - m10 < d5.top && (m10 = -(d5.top + m10 - t3.top + r2)));
    else {
      let w9 = t3.bottom - t3.top, v6 = d5.bottom - d5.top;
      m10 = (n3 == "center" && w9 <= v6 ? t3.top + w9 / 2 - v6 / 2 : n3 == "start" || n3 == "center" && e < 0 ? t3.top - r2 : t3.bottom - v6 + r2) - d5.top;
    }
    if (i3 == "nearest" ? t3.left < d5.left ? (b8 = -(d5.left - t3.left + o2), e > 0 && t3.right > d5.right + b8 && (b8 = t3.right - d5.right + b8 + o2)) : t3.right > d5.right && (b8 = t3.right - d5.right + o2, e < 0 && t3.left < d5.left + b8 && (b8 = -(d5.left + b8 - t3.left + o2))) : b8 = (i3 == "center" ? t3.left + (t3.right - t3.left) / 2 - (d5.right - d5.left) / 2 : i3 == "start" == l7 ? t3.left - o2 : t3.right - (d5.right - d5.left) + o2) - d5.left, b8 || m10) if (u5) c2.scrollBy(b8, m10);
    else {
      let w9 = 0, v6 = 0;
      if (m10) {
        let x7 = a7.scrollTop;
        a7.scrollTop += m10 / g8, v6 = (a7.scrollTop - x7) * g8;
      }
      if (b8) {
        let x7 = a7.scrollLeft;
        a7.scrollLeft += b8 / p8, w9 = (a7.scrollLeft - x7) * p8;
      }
      t3 = { left: t3.left - w9, top: t3.top - v6, right: t3.right - w9, bottom: t3.bottom - v6 }, w9 && Math.abs(w9 - b8) < 1 && (i3 = "nearest"), v6 && Math.abs(v6 - m10) < 1 && (n3 = "nearest");
    }
    if (u5) break;
    a7 = a7.assignedSlot || a7.parentNode;
  } else if (a7.nodeType == 11) a7 = a7.host;
  else break;
}
function io(s66) {
  let t3 = s66.ownerDocument, e, i3;
  for (let n3 = s66.parentNode; n3 && !(n3 == t3.body || e && i3); ) if (n3.nodeType == 1) !i3 && n3.scrollHeight > n3.clientHeight && (i3 = n3), !e && n3.scrollWidth > n3.clientWidth && (e = n3), n3 = n3.assignedSlot || n3.parentNode;
  else if (n3.nodeType == 11) n3 = n3.host;
  else break;
  return { x: e, y: i3 };
}
var Ge6 = class {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(t3) {
    return this.anchorNode == t3.anchorNode && this.anchorOffset == t3.anchorOffset && this.focusNode == t3.focusNode && this.focusOffset == t3.focusOffset;
  }
  setRange(t3) {
    let { anchorNode: e, focusNode: i3 } = t3;
    this.set(e, Math.min(t3.anchorOffset, e ? U8(e) : 0), i3, Math.min(t3.focusOffset, i3 ? U8(i3) : 0));
  }
  set(t3, e, i3, n3) {
    this.anchorNode = t3, this.anchorOffset = e, this.focusNode = i3, this.focusOffset = n3;
  }
};
var yt2 = null;
function Ws(s66) {
  if (s66.setActive) return s66.setActive();
  if (yt2) return s66.focus(yt2);
  let t3 = [];
  for (let e = s66; e && (t3.push(e, e.scrollTop, e.scrollLeft), e != e.ownerDocument); e = e.parentNode) ;
  if (s66.focus(yt2 == null ? { get preventScroll() {
    return yt2 = { preventScroll: true }, true;
  } } : void 0), !yt2) {
    yt2 = false;
    for (let e = 0; e < t3.length; ) {
      let i3 = t3[e++], n3 = t3[e++], o2 = t3[e++];
      i3.scrollTop != n3 && (i3.scrollTop = n3), i3.scrollLeft != o2 && (i3.scrollLeft = o2);
    }
  }
}
var Xi;
function pt3(s66, t3, e = t3) {
  let i3 = Xi || (Xi = document.createRange());
  return i3.setEnd(s66, e), i3.setStart(s66, t3), i3;
}
function Mt(s66, t3, e, i3) {
  let n3 = { key: t3, code: t3, keyCode: e, which: e, cancelable: true };
  i3 && ({ altKey: n3.altKey, ctrlKey: n3.ctrlKey, shiftKey: n3.shiftKey, metaKey: n3.metaKey } = i3);
  let o2 = new KeyboardEvent("keydown", n3);
  o2.synthetic = true, s66.dispatchEvent(o2);
  let r2 = new KeyboardEvent("keyup", n3);
  return r2.synthetic = true, s66.dispatchEvent(r2), o2.defaultPrevented || r2.defaultPrevented;
}
function so(s66) {
  for (; s66; ) {
    if (s66 && (s66.nodeType == 9 || s66.nodeType == 11 && s66.host)) return s66;
    s66 = s66.assignedSlot || s66.parentNode;
  }
  return null;
}
function zs(s66) {
  for (; s66.attributes.length; ) s66.removeAttributeNode(s66.attributes[0]);
}
function no(s66, t3) {
  let e = t3.focusNode, i3 = t3.focusOffset;
  if (!e || t3.anchorNode != e || t3.anchorOffset != i3) return false;
  for (i3 = Math.min(i3, U8(e)); ; ) if (i3) {
    if (e.nodeType != 1) return false;
    let n3 = e.childNodes[i3 - 1];
    n3.contentEditable == "false" ? i3-- : (e = n3, i3 = U8(e));
  } else {
    if (e == s66) return true;
    i3 = ut3(e), e = e.parentNode;
  }
}
function Is(s66) {
  return s66.scrollTop > Math.max(1, s66.scrollHeight - s66.clientHeight - 4);
}
function Ks(s66, t3) {
  for (let e = s66, i3 = t3; ; ) {
    if (e.nodeType == 3 && i3 > 0) return { node: e, offset: i3 };
    if (e.nodeType == 1 && i3 > 0) {
      if (e.contentEditable == "false") return null;
      e = e.childNodes[i3 - 1], i3 = U8(e);
    } else if (e.parentNode && !xe4(e)) i3 = ut3(e), e = e.parentNode;
    else return null;
  }
}
function qs(s66, t3) {
  for (let e = s66, i3 = t3; ; ) {
    if (e.nodeType == 3 && i3 < e.nodeValue.length) return { node: e, offset: i3 };
    if (e.nodeType == 1 && i3 < e.childNodes.length) {
      if (e.contentEditable == "false") return null;
      e = e.childNodes[i3], i3 = 0;
    } else if (e.parentNode && !xe4(e)) i3 = ut3(e) + 1, e = e.parentNode;
    else return null;
  }
}
var V5 = class s20 {
  constructor(t3, e, i3 = true) {
    this.node = t3, this.offset = e, this.precise = i3;
  }
  static before(t3, e) {
    return new s20(t3.parentNode, ut3(t3), e);
  }
  static after(t3, e) {
    return new s20(t3.parentNode, ut3(t3) + 1, e);
  }
};
var Fi = [];
var R3 = class s21 {
  constructor() {
    this.parent = null, this.dom = null, this.flags = 2;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(t3) {
    let e = this.posAtStart;
    for (let i3 of this.children) {
      if (i3 == t3) return e;
      e += i3.length + i3.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(t3) {
    return this.posBefore(t3) + t3.length;
  }
  sync(t3, e) {
    if (this.flags & 2) {
      let i3 = this.dom, n3 = null, o2;
      for (let r2 of this.children) {
        if (r2.flags & 7) {
          if (!r2.dom && (o2 = n3 ? n3.nextSibling : i3.firstChild)) {
            let l7 = s21.get(o2);
            (!l7 || !l7.parent && l7.canReuseDOM(r2)) && r2.reuseDOM(o2);
          }
          r2.sync(t3, e), r2.flags &= -8;
        }
        if (o2 = n3 ? n3.nextSibling : i3.firstChild, e && !e.written && e.node == i3 && o2 != r2.dom && (e.written = true), r2.dom.parentNode == i3) for (; o2 && o2 != r2.dom; ) o2 = Gi(o2);
        else i3.insertBefore(r2.dom, o2);
        n3 = r2.dom;
      }
      for (o2 = n3 ? n3.nextSibling : i3.firstChild, o2 && e && e.node == i3 && (e.written = true); o2; ) o2 = Gi(o2);
    } else if (this.flags & 1) for (let i3 of this.children) i3.flags & 7 && (i3.sync(t3, e), i3.flags &= -8);
  }
  reuseDOM(t3) {
  }
  localPosFromDOM(t3, e) {
    let i3;
    if (t3 == this.dom) i3 = this.dom.childNodes[e];
    else {
      let n3 = U8(t3) == 0 ? 0 : e == 0 ? -1 : 1;
      for (; ; ) {
        let o2 = t3.parentNode;
        if (o2 == this.dom) break;
        n3 == 0 && o2.firstChild != o2.lastChild && (t3 == o2.firstChild ? n3 = -1 : n3 = 1), t3 = o2;
      }
      n3 < 0 ? i3 = t3 : i3 = t3.nextSibling;
    }
    if (i3 == this.dom.firstChild) return 0;
    for (; i3 && !s21.get(i3); ) i3 = i3.nextSibling;
    if (!i3) return this.length;
    for (let n3 = 0, o2 = 0; ; n3++) {
      let r2 = this.children[n3];
      if (r2.dom == i3) return o2;
      o2 += r2.length + r2.breakAfter;
    }
  }
  domBoundsAround(t3, e, i3 = 0) {
    let n3 = -1, o2 = -1, r2 = -1, l7 = -1;
    for (let h6 = 0, c2 = i3, a7 = i3; h6 < this.children.length; h6++) {
      let f4 = this.children[h6], d5 = c2 + f4.length;
      if (c2 < t3 && d5 > e) return f4.domBoundsAround(t3, e, c2);
      if (d5 >= t3 && n3 == -1 && (n3 = h6, o2 = c2), c2 > e && f4.dom.parentNode == this.dom) {
        r2 = h6, l7 = a7;
        break;
      }
      a7 = d5, c2 = d5 + f4.breakAfter;
    }
    return { from: o2, to: l7 < 0 ? i3 + this.length : l7, startDOM: (n3 ? this.children[n3 - 1].dom.nextSibling : null) || this.dom.firstChild, endDOM: r2 < this.children.length && r2 >= 0 ? this.children[r2].dom : null };
  }
  markDirty(t3 = false) {
    this.flags |= 2, this.markParentsDirty(t3);
  }
  markParentsDirty(t3) {
    for (let e = this.parent; e; e = e.parent) {
      if (t3 && (e.flags |= 2), e.flags & 1) return;
      e.flags |= 1, t3 = false;
    }
  }
  setParent(t3) {
    this.parent != t3 && (this.parent = t3, this.flags & 7 && this.markParentsDirty(true));
  }
  setDOM(t3) {
    this.dom != t3 && (this.dom && (this.dom.cmView = null), this.dom = t3, t3.cmView = this);
  }
  get rootView() {
    for (let t3 = this; ; ) {
      let e = t3.parent;
      if (!e) return t3;
      t3 = e;
    }
  }
  replaceChildren(t3, e, i3 = Fi) {
    this.markDirty();
    for (let n3 = t3; n3 < e; n3++) {
      let o2 = this.children[n3];
      o2.parent == this && i3.indexOf(o2) < 0 && o2.destroy();
    }
    i3.length < 250 ? this.children.splice(t3, e - t3, ...i3) : this.children = [].concat(this.children.slice(0, t3), i3, this.children.slice(e));
    for (let n3 = 0; n3 < i3.length; n3++) i3[n3].setParent(this);
  }
  ignoreMutation(t3) {
    return false;
  }
  ignoreEvent(t3) {
    return false;
  }
  childCursor(t3 = this.length) {
    return new ve5(this.children, t3, this.children.length);
  }
  childPos(t3, e = 1) {
    return this.childCursor().findPos(t3, e);
  }
  toString() {
    let t3 = this.constructor.name.replace("View", "");
    return t3 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (t3 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(t3) {
    return t3.cmView;
  }
  get isEditable() {
    return true;
  }
  get isWidget() {
    return false;
  }
  get isHidden() {
    return false;
  }
  merge(t3, e, i3, n3, o2, r2) {
    return false;
  }
  become(t3) {
    return false;
  }
  canReuseDOM(t3) {
    return t3.constructor == this.constructor && !((this.flags | t3.flags) & 8);
  }
  getSide() {
    return 0;
  }
  destroy() {
    for (let t3 of this.children) t3.parent == this && t3.destroy();
    this.parent = null;
  }
};
R3.prototype.breakAfter = 0;
function Gi(s66) {
  let t3 = s66.nextSibling;
  return s66.parentNode.removeChild(s66), t3;
}
var ve5 = class {
  constructor(t3, e, i3) {
    this.children = t3, this.pos = e, this.i = i3, this.off = 0;
  }
  findPos(t3, e = 1) {
    for (; ; ) {
      if (t3 > this.pos || t3 == this.pos && (e > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) return this.off = t3 - this.pos, this;
      let i3 = this.children[--this.i];
      this.pos -= i3.length + i3.breakAfter;
    }
  }
};
function js(s66, t3, e, i3, n3, o2, r2, l7, h6) {
  let { children: c2 } = s66, a7 = c2.length ? c2[t3] : null, f4 = o2.length ? o2[o2.length - 1] : null, d5 = f4 ? f4.breakAfter : r2;
  if (!(t3 == i3 && a7 && !r2 && !d5 && o2.length < 2 && a7.merge(e, n3, o2.length ? f4 : null, e == 0, l7, h6))) {
    if (i3 < c2.length) {
      let u5 = c2[i3];
      u5 && (n3 < u5.length || u5.breakAfter && f4?.breakAfter) ? (t3 == i3 && (u5 = u5.split(n3), n3 = 0), !d5 && f4 && u5.merge(0, n3, f4, true, 0, h6) ? o2[o2.length - 1] = u5 : ((n3 || u5.children.length && !u5.children[0].length) && u5.merge(0, n3, null, false, 0, h6), o2.push(u5))) : u5?.breakAfter && (f4 ? f4.breakAfter = 1 : r2 = 1), i3++;
    }
    for (a7 && (a7.breakAfter = r2, e > 0 && (!r2 && o2.length && a7.merge(e, a7.length, o2[0], false, l7, 0) ? a7.breakAfter = o2.shift().breakAfter : (e < a7.length || a7.children.length && a7.children[a7.children.length - 1].length == 0) && a7.merge(e, a7.length, null, false, l7, 0), t3++)); t3 < i3 && o2.length; ) if (c2[i3 - 1].become(o2[o2.length - 1])) i3--, o2.pop(), h6 = o2.length ? 0 : l7;
    else if (c2[t3].become(o2[0])) t3++, o2.shift(), l7 = o2.length ? 0 : h6;
    else break;
    !o2.length && t3 && i3 < c2.length && !c2[t3 - 1].breakAfter && c2[i3].merge(0, 0, c2[t3 - 1], false, l7, h6) && t3--, (t3 < i3 || o2.length) && s66.replaceChildren(t3, i3, o2);
  }
}
function Ys(s66, t3, e, i3, n3, o2) {
  let r2 = s66.childCursor(), { i: l7, off: h6 } = r2.findPos(e, 1), { i: c2, off: a7 } = r2.findPos(t3, -1), f4 = t3 - e;
  for (let d5 of i3) f4 += d5.length;
  s66.length += f4, js(s66, c2, a7, l7, h6, i3, 0, n3, o2);
}
var W8 = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" };
var $e4 = typeof document < "u" ? document : { documentElement: { style: {} } };
var Ue7 = /Edge\/(\d+)/.exec(W8.userAgent);
var _s = /MSIE \d/.test(W8.userAgent);
var Qe4 = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(W8.userAgent);
var Ne4 = !!(_s || Qe4 || Ue7);
var $i = !Ne4 && /gecko\/(\d+)/i.test(W8.userAgent);
var ze5 = !Ne4 && /Chrome\/(\d+)/.exec(W8.userAgent);
var Ui = "webkitFontSmoothing" in $e4.documentElement.style;
var Xs = !Ne4 && /Apple Computer/.test(W8.vendor);
var Qi = Xs && (/Mobile\/\w+/.test(W8.userAgent) || W8.maxTouchPoints > 2);
var y6 = { mac: Qi || /Mac/.test(W8.platform), windows: /Win/.test(W8.platform), linux: /Linux|X11/.test(W8.platform), ie: Ne4, ie_version: _s ? $e4.documentMode || 6 : Qe4 ? +Qe4[1] : Ue7 ? +Ue7[1] : 0, gecko: $i, gecko_version: $i ? +(/Firefox\/(\d+)/.exec(W8.userAgent) || [0, 0])[1] : 0, chrome: !!ze5, chrome_version: ze5 ? +ze5[1] : 0, ios: Qi, android: /Android\b/.test(W8.userAgent), webkit: Ui, safari: Xs, webkit_version: Ui ? +(/\bAppleWebKit\/(\d+)/.exec(W8.userAgent) || [0, 0])[1] : 0, tabSize: $e4.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size" };
var oo = 256;
var Q3 = class s22 extends R3 {
  constructor(t3) {
    super(), this.text = t3;
  }
  get length() {
    return this.text.length;
  }
  createDOM(t3) {
    this.setDOM(t3 || document.createTextNode(this.text));
  }
  sync(t3, e) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (e && e.node == this.dom && (e.written = true), this.dom.nodeValue = this.text);
  }
  reuseDOM(t3) {
    t3.nodeType == 3 && this.createDOM(t3);
  }
  merge(t3, e, i3) {
    return this.flags & 8 || i3 && (!(i3 instanceof s22) || this.length - (e - t3) + i3.length > oo || i3.flags & 8) ? false : (this.text = this.text.slice(0, t3) + (i3 ? i3.text : "") + this.text.slice(e), this.markDirty(), true);
  }
  split(t3) {
    let e = new s22(this.text.slice(t3));
    return this.text = this.text.slice(0, t3), this.markDirty(), e.flags |= this.flags & 8, e;
  }
  localPosFromDOM(t3, e) {
    return t3 == this.dom ? e : e ? this.text.length : 0;
  }
  domAtPos(t3) {
    return new V5(this.dom, t3);
  }
  domBoundsAround(t3, e, i3) {
    return { from: i3, to: i3 + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(t3, e) {
    return ro(this.dom, t3, e);
  }
};
var rt4 = class s23 extends R3 {
  constructor(t3, e = [], i3 = 0) {
    super(), this.mark = t3, this.children = e, this.length = i3;
    for (let n3 of e) n3.setParent(this);
  }
  setAttrs(t3) {
    if (zs(t3), this.mark.class && (t3.className = this.mark.class), this.mark.attrs) for (let e in this.mark.attrs) t3.setAttribute(e, this.mark.attrs[e]);
    return t3;
  }
  canReuseDOM(t3) {
    return super.canReuseDOM(t3) && !((this.flags | t3.flags) & 8);
  }
  reuseDOM(t3) {
    t3.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(t3), this.flags |= 6);
  }
  sync(t3, e) {
    this.dom ? this.flags & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(t3, e);
  }
  merge(t3, e, i3, n3, o2, r2) {
    return i3 && (!(i3 instanceof s23 && i3.mark.eq(this.mark)) || t3 && o2 <= 0 || e < this.length && r2 <= 0) ? false : (Ys(this, t3, e, i3 ? i3.children.slice() : [], o2 - 1, r2 - 1), this.markDirty(), true);
  }
  split(t3) {
    let e = [], i3 = 0, n3 = -1, o2 = 0;
    for (let l7 of this.children) {
      let h6 = i3 + l7.length;
      h6 > t3 && e.push(i3 < t3 ? l7.split(t3 - i3) : l7), n3 < 0 && i3 >= t3 && (n3 = o2), i3 = h6, o2++;
    }
    let r2 = this.length - t3;
    return this.length = t3, n3 > -1 && (this.children.length = n3, this.markDirty()), new s23(this.mark, e, r2);
  }
  domAtPos(t3) {
    return Gs(this, t3);
  }
  coordsAt(t3, e) {
    return Us(this, t3, e);
  }
};
function ro(s66, t3, e) {
  let i3 = s66.nodeValue.length;
  t3 > i3 && (t3 = i3);
  let n3 = t3, o2 = t3, r2 = 0;
  t3 == 0 && e < 0 || t3 == i3 && e >= 0 ? y6.chrome || y6.gecko || (t3 ? (n3--, r2 = 1) : o2 < i3 && (o2++, r2 = -1)) : e < 0 ? n3-- : o2 < i3 && o2++;
  let l7 = pt3(s66, n3, o2).getClientRects();
  if (!l7.length) return null;
  let h6 = l7[(r2 ? r2 < 0 : e >= 0) ? 0 : l7.length - 1];
  return y6.safari && !r2 && h6.width == 0 && (h6 = Array.prototype.find.call(l7, (c2) => c2.width) || h6), r2 ? te4(h6, r2 < 0) : h6 || null;
}
var Yt = class s24 extends R3 {
  static create(t3, e, i3) {
    return new s24(t3, e, i3);
  }
  constructor(t3, e, i3) {
    super(), this.widget = t3, this.length = e, this.side = i3, this.prevWidget = null;
  }
  split(t3) {
    let e = s24.create(this.widget, this.length - t3, this.side);
    return this.length -= t3, e;
  }
  sync(t3) {
    (!this.dom || !this.widget.updateDOM(this.dom, t3)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(t3)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  getSide() {
    return this.side;
  }
  merge(t3, e, i3, n3, o2, r2) {
    return i3 && (!(i3 instanceof s24) || !this.widget.compare(i3.widget) || t3 > 0 && o2 <= 0 || e < this.length && r2 <= 0) ? false : (this.length = t3 + (i3 ? i3.length : 0) + (this.length - e), true);
  }
  become(t3) {
    return t3 instanceof s24 && t3.side == this.side && this.widget.constructor == t3.widget.constructor ? (this.widget.compare(t3.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t3.widget, this.length = t3.length, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t3) {
    return this.widget.ignoreEvent(t3);
  }
  get overrideDOMText() {
    if (this.length == 0) return m7.empty;
    let t3 = this;
    for (; t3.parent; ) t3 = t3.parent;
    let { view: e } = t3, i3 = e && e.state.doc, n3 = this.posAtStart;
    return i3 ? i3.slice(n3, n3 + this.length) : m7.empty;
  }
  domAtPos(t3) {
    return (this.length ? t3 == 0 : this.side > 0) ? V5.before(this.dom) : V5.after(this.dom, t3 == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t3, e) {
    let i3 = this.widget.coordsAt(this.dom, t3, e);
    if (i3) return i3;
    let n3 = this.dom.getClientRects(), o2 = null;
    if (!n3.length) return null;
    let r2 = this.side ? this.side < 0 : t3 > 0;
    for (let l7 = r2 ? n3.length - 1 : 0; o2 = n3[l7], !(t3 > 0 ? l7 == 0 : l7 == n3.length - 1 || o2.top < o2.bottom); l7 += r2 ? -1 : 1) ;
    return te4(o2, !r2);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  get isHidden() {
    return this.widget.isHidden;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
};
var _t3 = class s25 extends R3 {
  constructor(t3) {
    super(), this.side = t3;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(t3) {
    return t3 instanceof s25 && t3.side == this.side;
  }
  split() {
    return new s25(this.side);
  }
  sync() {
    if (!this.dom) {
      let t3 = document.createElement("img");
      t3.className = "cm-widgetBuffer", t3.setAttribute("aria-hidden", "true"), this.setDOM(t3);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(t3) {
    return this.side > 0 ? V5.before(this.dom) : V5.after(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t3) {
    return this.dom.getBoundingClientRect();
  }
  get overrideDOMText() {
    return m7.empty;
  }
  get isHidden() {
    return true;
  }
};
Q3.prototype.children = Yt.prototype.children = _t3.prototype.children = Fi;
function Gs(s66, t3) {
  let e = s66.dom, { children: i3 } = s66, n3 = 0;
  for (let o2 = 0; n3 < i3.length; n3++) {
    let r2 = i3[n3], l7 = o2 + r2.length;
    if (!(l7 == o2 && r2.getSide() <= 0)) {
      if (t3 > o2 && t3 < l7 && r2.dom.parentNode == e) return r2.domAtPos(t3 - o2);
      if (t3 <= o2) break;
      o2 = l7;
    }
  }
  for (let o2 = n3; o2 > 0; o2--) {
    let r2 = i3[o2 - 1];
    if (r2.dom.parentNode == e) return r2.domAtPos(r2.length);
  }
  for (let o2 = n3; o2 < i3.length; o2++) {
    let r2 = i3[o2];
    if (r2.dom.parentNode == e) return r2.domAtPos(0);
  }
  return new V5(e, 0);
}
function $s(s66, t3, e) {
  let i3, { children: n3 } = s66;
  e > 0 && t3 instanceof rt4 && n3.length && (i3 = n3[n3.length - 1]) instanceof rt4 && i3.mark.eq(t3.mark) ? $s(i3, t3.children[0], e - 1) : (n3.push(t3), t3.setParent(s66)), s66.length += t3.length;
}
function Us(s66, t3, e) {
  let i3 = null, n3 = -1, o2 = null, r2 = -1;
  function l7(c2, a7) {
    for (let f4 = 0, d5 = 0; f4 < c2.children.length && d5 <= a7; f4++) {
      let u5 = c2.children[f4], p8 = d5 + u5.length;
      p8 >= a7 && (u5.children.length ? l7(u5, a7 - d5) : (!o2 || o2.isHidden && e > 0) && (p8 > a7 || d5 == p8 && u5.getSide() > 0) ? (o2 = u5, r2 = a7 - d5) : (d5 < a7 || d5 == p8 && u5.getSide() < 0 && !u5.isHidden) && (i3 = u5, n3 = a7 - d5)), d5 = p8;
    }
  }
  l7(s66, t3);
  let h6 = (e < 0 ? i3 : o2) || i3 || o2;
  return h6 ? h6.coordsAt(Math.max(0, h6 == i3 ? n3 : r2), e) : lo(s66);
}
function lo(s66) {
  let t3 = s66.dom.lastChild;
  if (!t3) return s66.dom.getBoundingClientRect();
  let e = At(t3);
  return e[e.length - 1] || null;
}
function Je4(s66, t3) {
  for (let e in s66) e == "class" && t3.class ? t3.class += " " + s66.class : e == "style" && t3.style ? t3.style += ";" + s66.style : t3[e] = s66[e];
  return t3;
}
var Ji = /* @__PURE__ */ Object.create(null);
function Se6(s66, t3, e) {
  if (s66 == t3) return true;
  s66 || (s66 = Ji), t3 || (t3 = Ji);
  let i3 = Object.keys(s66), n3 = Object.keys(t3);
  if (i3.length - (e && i3.indexOf(e) > -1 ? 1 : 0) != n3.length - (e && n3.indexOf(e) > -1 ? 1 : 0)) return false;
  for (let o2 of i3) if (o2 != e && (n3.indexOf(o2) == -1 || s66[o2] !== t3[o2])) return false;
  return true;
}
function Ze4(s66, t3, e) {
  let i3 = false;
  if (t3) for (let n3 in t3) e && n3 in e || (i3 = true, n3 == "style" ? s66.style.cssText = "" : s66.removeAttribute(n3));
  if (e) for (let n3 in e) t3 && t3[n3] == e[n3] || (i3 = true, n3 == "style" ? s66.style.cssText = e[n3] : s66.setAttribute(n3, e[n3]));
  return i3;
}
function ho(s66) {
  let t3 = /* @__PURE__ */ Object.create(null);
  for (let e = 0; e < s66.attributes.length; e++) {
    let i3 = s66.attributes[e];
    t3[i3.name] = i3.value;
  }
  return t3;
}
var lt3 = class {
  eq(t3) {
    return false;
  }
  updateDOM(t3, e) {
    return false;
  }
  compare(t3) {
    return this == t3 || this.constructor == t3.constructor && this.eq(t3);
  }
  get estimatedHeight() {
    return -1;
  }
  get lineBreaks() {
    return 0;
  }
  ignoreEvent(t3) {
    return true;
  }
  coordsAt(t3, e, i3) {
    return null;
  }
  get isHidden() {
    return false;
  }
  get editable() {
    return false;
  }
  destroy(t3) {
  }
};
var F6 = function(s66) {
  return s66[s66.Text = 0] = "Text", s66[s66.WidgetBefore = 1] = "WidgetBefore", s66[s66.WidgetAfter = 2] = "WidgetAfter", s66[s66.WidgetRange = 3] = "WidgetRange", s66;
}(F6 || (F6 = {}));
var O3 = class extends W7 {
  constructor(t3, e, i3, n3) {
    super(), this.startSide = t3, this.endSide = e, this.widget = i3, this.spec = n3;
  }
  get heightRelevant() {
    return false;
  }
  static mark(t3) {
    return new Xt(t3);
  }
  static widget(t3) {
    let e = Math.max(-1e4, Math.min(1e4, t3.side || 0)), i3 = !!t3.block;
    return e += i3 && !t3.inlineOrder ? e > 0 ? 3e8 : -4e8 : e > 0 ? 1e8 : -1e8, new ht4(t3, e, e, i3, t3.widget || null, false);
  }
  static replace(t3) {
    let e = !!t3.block, i3, n3;
    if (t3.isBlockGap) i3 = -5e8, n3 = 4e8;
    else {
      let { start: o2, end: r2 } = Qs(t3, e);
      i3 = (o2 ? e ? -3e8 : -1 : 5e8) - 1, n3 = (r2 ? e ? 2e8 : 1 : -6e8) + 1;
    }
    return new ht4(t3, i3, n3, e, t3.widget || null, true);
  }
  static line(t3) {
    return new Gt(t3);
  }
  static set(t3, e = false) {
    return T.of(t3, e);
  }
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
};
O3.none = T.empty;
var Xt = class s26 extends O3 {
  constructor(t3) {
    let { start: e, end: i3 } = Qs(t3);
    super(e ? -1 : 5e8, i3 ? 1 : -6e8, null, t3), this.tagName = t3.tagName || "span", this.class = t3.class || "", this.attrs = t3.attributes || null;
  }
  eq(t3) {
    var e, i3;
    return this == t3 || t3 instanceof s26 && this.tagName == t3.tagName && (this.class || ((e = this.attrs) === null || e === void 0 ? void 0 : e.class)) == (t3.class || ((i3 = t3.attrs) === null || i3 === void 0 ? void 0 : i3.class)) && Se6(this.attrs, t3.attrs, "class");
  }
  range(t3, e = t3) {
    if (t3 >= e) throw new RangeError("Mark decorations may not be empty");
    return super.range(t3, e);
  }
};
Xt.prototype.point = false;
var Gt = class s27 extends O3 {
  constructor(t3) {
    super(-2e8, -2e8, null, t3);
  }
  eq(t3) {
    return t3 instanceof s27 && this.spec.class == t3.spec.class && Se6(this.spec.attributes, t3.spec.attributes);
  }
  range(t3, e = t3) {
    if (e != t3) throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(t3, e);
  }
};
Gt.prototype.mapMode = E6.TrackBefore;
Gt.prototype.point = true;
var ht4 = class s28 extends O3 {
  constructor(t3, e, i3, n3, o2, r2) {
    super(e, i3, o2, t3), this.block = n3, this.isReplace = r2, this.mapMode = n3 ? e <= 0 ? E6.TrackBefore : E6.TrackAfter : E6.TrackDel;
  }
  get type() {
    return this.startSide != this.endSide ? F6.WidgetRange : this.startSide <= 0 ? F6.WidgetBefore : F6.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
  }
  eq(t3) {
    return t3 instanceof s28 && ao(this.widget, t3.widget) && this.block == t3.block && this.startSide == t3.startSide && this.endSide == t3.endSide;
  }
  range(t3, e = t3) {
    if (this.isReplace && (t3 > e || t3 == e && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && e != t3) throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(t3, e);
  }
};
ht4.prototype.point = true;
function Qs(s66, t3 = false) {
  let { inclusiveStart: e, inclusiveEnd: i3 } = s66;
  return e == null && (e = s66.inclusive), i3 == null && (i3 = s66.inclusive), { start: e ?? t3, end: i3 ?? t3 };
}
function ao(s66, t3) {
  return s66 == t3 || !!(s66 && t3 && s66.compare(t3));
}
function ti(s66, t3, e, i3 = 0) {
  let n3 = e.length - 1;
  n3 >= 0 && e[n3] + i3 >= s66 ? e[n3] = Math.max(e[n3], t3) : e.push(s66, t3);
}
var P4 = class s29 extends R3 {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  merge(t3, e, i3, n3, o2, r2) {
    if (i3) {
      if (!(i3 instanceof s29)) return false;
      this.dom || i3.transferDOM(this);
    }
    return n3 && this.setDeco(i3 ? i3.attrs : null), Ys(this, t3, e, i3 ? i3.children.slice() : [], o2, r2), true;
  }
  split(t3) {
    let e = new s29();
    if (e.breakAfter = this.breakAfter, this.length == 0) return e;
    let { i: i3, off: n3 } = this.childPos(t3);
    n3 && (e.append(this.children[i3].split(n3), 0), this.children[i3].merge(n3, this.children[i3].length, null, false, 0, 0), i3++);
    for (let o2 = i3; o2 < this.children.length; o2++) e.append(this.children[o2], 0);
    for (; i3 > 0 && this.children[i3 - 1].length == 0; ) this.children[--i3].destroy();
    return this.children.length = i3, this.markDirty(), this.length = t3, e;
  }
  transferDOM(t3) {
    this.dom && (this.markDirty(), t3.setDOM(this.dom), t3.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(t3) {
    Se6(this.attrs, t3) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = t3);
  }
  append(t3, e) {
    $s(this, t3, e);
  }
  addLineDeco(t3) {
    let e = t3.spec.attributes, i3 = t3.spec.class;
    e && (this.attrs = Je4(e, this.attrs || {})), i3 && (this.attrs = Je4({ class: i3 }, this.attrs || {}));
  }
  domAtPos(t3) {
    return Gs(this, t3);
  }
  reuseDOM(t3) {
    t3.nodeName == "DIV" && (this.setDOM(t3), this.flags |= 6);
  }
  sync(t3, e) {
    var i3;
    this.dom ? this.flags & 4 && (zs(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (Ze4(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(t3, e);
    let n3 = this.dom.lastChild;
    for (; n3 && R3.get(n3) instanceof rt4; ) n3 = n3.lastChild;
    if (!n3 || !this.length || n3.nodeName != "BR" && ((i3 = R3.get(n3)) === null || i3 === void 0 ? void 0 : i3.isEditable) == false && (!y6.ios || !this.children.some((o2) => o2 instanceof Q3))) {
      let o2 = document.createElement("BR");
      o2.cmIgnore = true, this.dom.appendChild(o2);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20) return null;
    let t3 = 0, e;
    for (let i3 of this.children) {
      if (!(i3 instanceof Q3) || /[^ -~]/.test(i3.text)) return null;
      let n3 = At(i3.dom);
      if (n3.length != 1) return null;
      t3 += n3[0].width, e = n3[0].height;
    }
    return t3 ? { lineHeight: this.dom.getBoundingClientRect().height, charWidth: t3 / this.length, textHeight: e } : null;
  }
  coordsAt(t3, e) {
    let i3 = Us(this, t3, e);
    if (!this.children.length && i3 && this.parent) {
      let { heightOracle: n3 } = this.parent.view.viewState, o2 = i3.bottom - i3.top;
      if (Math.abs(o2 - n3.lineHeight) < 2 && n3.textHeight < o2) {
        let r2 = (o2 - n3.textHeight) / 2;
        return { top: i3.top + r2, bottom: i3.bottom - r2, left: i3.left, right: i3.left };
      }
    }
    return i3;
  }
  become(t3) {
    return t3 instanceof s29 && this.children.length == 0 && t3.children.length == 0 && Se6(this.attrs, t3.attrs) && this.breakAfter == t3.breakAfter;
  }
  covers() {
    return true;
  }
  static find(t3, e) {
    for (let i3 = 0, n3 = 0; i3 < t3.children.length; i3++) {
      let o2 = t3.children[i3], r2 = n3 + o2.length;
      if (r2 >= e) {
        if (o2 instanceof s29) return o2;
        if (r2 > e) break;
      }
      n3 = r2 + o2.breakAfter;
    }
    return null;
  }
};
var dt3 = class s30 extends R3 {
  constructor(t3, e, i3) {
    super(), this.widget = t3, this.length = e, this.deco = i3, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(t3, e, i3, n3, o2, r2) {
    return i3 && (!(i3 instanceof s30) || !this.widget.compare(i3.widget) || t3 > 0 && o2 <= 0 || e < this.length && r2 <= 0) ? false : (this.length = t3 + (i3 ? i3.length : 0) + (this.length - e), true);
  }
  domAtPos(t3) {
    return t3 == 0 ? V5.before(this.dom) : V5.after(this.dom, t3 == this.length);
  }
  split(t3) {
    let e = this.length - t3;
    this.length = t3;
    let i3 = new s30(this.widget, e, this.deco);
    return i3.breakAfter = this.breakAfter, i3;
  }
  get children() {
    return Fi;
  }
  sync(t3) {
    (!this.dom || !this.widget.updateDOM(this.dom, t3)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(t3)), this.widget.editable || (this.dom.contentEditable = "false"));
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : m7.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(t3) {
    return t3 instanceof s30 && t3.widget.constructor == this.widget.constructor ? (t3.widget.compare(this.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t3.widget, this.length = t3.length, this.deco = t3.deco, this.breakAfter = t3.breakAfter, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t3) {
    return this.widget.ignoreEvent(t3);
  }
  get isEditable() {
    return false;
  }
  get isWidget() {
    return true;
  }
  coordsAt(t3, e) {
    let i3 = this.widget.coordsAt(this.dom, t3, e);
    return i3 || (this.widget instanceof $t ? null : te4(this.dom.getBoundingClientRect(), this.length ? t3 == 0 : e <= 0));
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
  covers(t3) {
    let { startSide: e, endSide: i3 } = this.deco;
    return e == i3 ? false : t3 < 0 ? e < 0 : i3 > 0;
  }
};
var $t = class extends lt3 {
  constructor(t3) {
    super(), this.height = t3;
  }
  toDOM() {
    let t3 = document.createElement("div");
    return t3.className = "cm-gap", this.updateDOM(t3), t3;
  }
  eq(t3) {
    return t3.height == this.height;
  }
  updateDOM(t3) {
    return t3.style.height = this.height + "px", true;
  }
  get editable() {
    return true;
  }
  get estimatedHeight() {
    return this.height;
  }
  ignoreEvent() {
    return false;
  }
};
var Ft = class s31 {
  constructor(t3, e, i3, n3) {
    this.doc = t3, this.pos = e, this.end = i3, this.disallowBlockEffectsFor = n3, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = true, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = t3.iter(), this.skip = e;
  }
  posCovered() {
    if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let t3 = this.content[this.content.length - 1];
    return !(t3.breakAfter || t3 instanceof dt3 && t3.deco.endSide < 0);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new P4()), this.atCursorPos = true), this.curLine;
  }
  flushBuffer(t3 = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(ne6(new _t3(-1), t3), t3.length), this.pendingBuffer = 0);
  }
  addBlockWidget(t3) {
    this.flushBuffer(), this.curLine = null, this.content.push(t3);
  }
  finish(t3) {
    this.pendingBuffer && t3 <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, !this.posCovered() && !(t3 && this.content.length && this.content[this.content.length - 1] instanceof dt3) && this.getLine();
  }
  buildText(t3, e, i3) {
    for (; t3 > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: o2, lineBreak: r2, done: l7 } = this.cursor.next(this.skip);
        if (this.skip = 0, l7) throw new Error("Ran out of text content when drawing inline views");
        if (r2) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = true, t3--;
          continue;
        } else this.text = o2, this.textOff = 0;
      }
      let n3 = Math.min(this.text.length - this.textOff, t3, 512);
      this.flushBuffer(e.slice(e.length - i3)), this.getLine().append(ne6(new Q3(this.text.slice(this.textOff, this.textOff + n3)), e), i3), this.atCursorPos = true, this.textOff += n3, t3 -= n3, i3 = 0;
    }
  }
  span(t3, e, i3, n3) {
    this.buildText(e - t3, i3, n3), this.pos = e, this.openStart < 0 && (this.openStart = n3);
  }
  point(t3, e, i3, n3, o2, r2) {
    if (this.disallowBlockEffectsFor[r2] && i3 instanceof ht4) {
      if (i3.block) throw new RangeError("Block decorations may not be specified via plugins");
      if (e > this.doc.lineAt(this.pos).to) throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let l7 = e - t3;
    if (i3 instanceof ht4) if (i3.block) i3.startSide > 0 && !this.posCovered() && this.getLine(), this.addBlockWidget(new dt3(i3.widget || at3.block, l7, i3));
    else {
      let h6 = Yt.create(i3.widget || at3.inline, l7, l7 ? 0 : i3.startSide), c2 = this.atCursorPos && !h6.isEditable && o2 <= n3.length && (t3 < e || i3.startSide > 0), a7 = !h6.isEditable && (t3 < e || o2 > n3.length || i3.startSide <= 0), f4 = this.getLine();
      this.pendingBuffer == 2 && !c2 && !h6.isEditable && (this.pendingBuffer = 0), this.flushBuffer(n3), c2 && (f4.append(ne6(new _t3(1), n3), o2), o2 = n3.length + Math.max(0, o2 - n3.length)), f4.append(ne6(h6, n3), o2), this.atCursorPos = a7, this.pendingBuffer = a7 ? t3 < e || o2 > n3.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = n3.slice());
    }
    else this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i3);
    l7 && (this.textOff + l7 <= this.text.length ? this.textOff += l7 : (this.skip += l7 - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = e), this.openStart < 0 && (this.openStart = o2);
  }
  static build(t3, e, i3, n3, o2) {
    let r2 = new s31(t3, e, i3, o2);
    return r2.openEnd = T.spans(n3, e, i3, r2), r2.openStart < 0 && (r2.openStart = r2.openEnd), r2.finish(r2.openEnd), r2;
  }
};
function ne6(s66, t3) {
  for (let e of t3) s66 = new rt4(e, [s66], s66.length);
  return s66;
}
var at3 = class extends lt3 {
  constructor(t3) {
    super(), this.tag = t3;
  }
  eq(t3) {
    return t3.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(t3) {
    return t3.nodeName.toLowerCase() == this.tag;
  }
  get isHidden() {
    return true;
  }
};
at3.inline = new at3("span");
at3.block = new at3("div");
var L6 = function(s66) {
  return s66[s66.LTR = 0] = "LTR", s66[s66.RTL = 1] = "RTL", s66;
}(L6 || (L6 = {}));
var gt2 = L6.LTR;
var Wi = L6.RTL;
function Js(s66) {
  let t3 = [];
  for (let e = 0; e < s66.length; e++) t3.push(1 << +s66[e]);
  return t3;
}
var co = Js("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
var fo = Js("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var ei = /* @__PURE__ */ Object.create(null);
var _4 = [];
for (let s66 of ["()", "[]", "{}"]) {
  let t3 = s66.charCodeAt(0), e = s66.charCodeAt(1);
  ei[t3] = e, ei[e] = -t3;
}
function Zs(s66) {
  return s66 <= 247 ? co[s66] : 1424 <= s66 && s66 <= 1524 ? 2 : 1536 <= s66 && s66 <= 1785 ? fo[s66 - 1536] : 1774 <= s66 && s66 <= 2220 ? 4 : 8192 <= s66 && s66 <= 8204 ? 256 : 64336 <= s66 && s66 <= 65023 ? 4 : 1;
}
var uo = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
var G6 = class {
  get dir() {
    return this.level % 2 ? Wi : gt2;
  }
  constructor(t3, e, i3) {
    this.from = t3, this.to = e, this.level = i3;
  }
  side(t3, e) {
    return this.dir == e == t3 ? this.to : this.from;
  }
  forward(t3, e) {
    return t3 == (this.dir == e);
  }
  static find(t3, e, i3, n3) {
    let o2 = -1;
    for (let r2 = 0; r2 < t3.length; r2++) {
      let l7 = t3[r2];
      if (l7.from <= e && l7.to >= e) {
        if (l7.level == i3) return r2;
        (o2 < 0 || (n3 != 0 ? n3 < 0 ? l7.from < e : l7.to > e : t3[o2].level > l7.level)) && (o2 = r2);
      }
    }
    if (o2 < 0) throw new RangeError("Index out of range");
    return o2;
  }
};
function tn(s66, t3) {
  if (s66.length != t3.length) return false;
  for (let e = 0; e < s66.length; e++) {
    let i3 = s66[e], n3 = t3[e];
    if (i3.from != n3.from || i3.to != n3.to || i3.direction != n3.direction || !tn(i3.inner, n3.inner)) return false;
  }
  return true;
}
var D6 = [];
function po(s66, t3, e, i3, n3) {
  for (let o2 = 0; o2 <= i3.length; o2++) {
    let r2 = o2 ? i3[o2 - 1].to : t3, l7 = o2 < i3.length ? i3[o2].from : e, h6 = o2 ? 256 : n3;
    for (let c2 = r2, a7 = h6, f4 = h6; c2 < l7; c2++) {
      let d5 = Zs(s66.charCodeAt(c2));
      d5 == 512 ? d5 = a7 : d5 == 8 && f4 == 4 && (d5 = 16), D6[c2] = d5 == 4 ? 2 : d5, d5 & 7 && (f4 = d5), a7 = d5;
    }
    for (let c2 = r2, a7 = h6, f4 = h6; c2 < l7; c2++) {
      let d5 = D6[c2];
      if (d5 == 128) c2 < l7 - 1 && a7 == D6[c2 + 1] && a7 & 24 ? d5 = D6[c2] = a7 : D6[c2] = 256;
      else if (d5 == 64) {
        let u5 = c2 + 1;
        for (; u5 < l7 && D6[u5] == 64; ) u5++;
        let p8 = c2 && a7 == 8 || u5 < e && D6[u5] == 8 ? f4 == 1 ? 1 : 8 : 256;
        for (let g8 = c2; g8 < u5; g8++) D6[g8] = p8;
        c2 = u5 - 1;
      } else d5 == 8 && f4 == 1 && (D6[c2] = 1);
      a7 = d5, d5 & 7 && (f4 = d5);
    }
  }
}
function go(s66, t3, e, i3, n3) {
  let o2 = n3 == 1 ? 2 : 1;
  for (let r2 = 0, l7 = 0, h6 = 0; r2 <= i3.length; r2++) {
    let c2 = r2 ? i3[r2 - 1].to : t3, a7 = r2 < i3.length ? i3[r2].from : e;
    for (let f4 = c2, d5, u5, p8; f4 < a7; f4++) if (u5 = ei[d5 = s66.charCodeAt(f4)]) if (u5 < 0) {
      for (let g8 = l7 - 3; g8 >= 0; g8 -= 3) if (_4[g8 + 1] == -u5) {
        let b8 = _4[g8 + 2], m10 = b8 & 2 ? n3 : b8 & 4 ? b8 & 1 ? o2 : n3 : 0;
        m10 && (D6[f4] = D6[_4[g8]] = m10), l7 = g8;
        break;
      }
    } else {
      if (_4.length == 189) break;
      _4[l7++] = f4, _4[l7++] = d5, _4[l7++] = h6;
    }
    else if ((p8 = D6[f4]) == 2 || p8 == 1) {
      let g8 = p8 == n3;
      h6 = g8 ? 0 : 1;
      for (let b8 = l7 - 3; b8 >= 0; b8 -= 3) {
        let m10 = _4[b8 + 2];
        if (m10 & 2) break;
        if (g8) _4[b8 + 2] |= 2;
        else {
          if (m10 & 4) break;
          _4[b8 + 2] |= 4;
        }
      }
    }
  }
}
function mo(s66, t3, e, i3) {
  for (let n3 = 0, o2 = i3; n3 <= e.length; n3++) {
    let r2 = n3 ? e[n3 - 1].to : s66, l7 = n3 < e.length ? e[n3].from : t3;
    for (let h6 = r2; h6 < l7; ) {
      let c2 = D6[h6];
      if (c2 == 256) {
        let a7 = h6 + 1;
        for (; ; ) if (a7 == l7) {
          if (n3 == e.length) break;
          a7 = e[n3++].to, l7 = n3 < e.length ? e[n3].from : t3;
        } else if (D6[a7] == 256) a7++;
        else break;
        let f4 = o2 == 1, d5 = (a7 < t3 ? D6[a7] : i3) == 1, u5 = f4 == d5 ? f4 ? 1 : 2 : i3;
        for (let p8 = a7, g8 = n3, b8 = g8 ? e[g8 - 1].to : s66; p8 > h6; ) p8 == b8 && (p8 = e[--g8].from, b8 = g8 ? e[g8 - 1].to : s66), D6[--p8] = u5;
        h6 = a7;
      } else o2 = c2, h6++;
    }
  }
}
function ii(s66, t3, e, i3, n3, o2, r2) {
  let l7 = i3 % 2 ? 2 : 1;
  if (i3 % 2 == n3 % 2) for (let h6 = t3, c2 = 0; h6 < e; ) {
    let a7 = true, f4 = false;
    if (c2 == o2.length || h6 < o2[c2].from) {
      let g8 = D6[h6];
      g8 != l7 && (a7 = false, f4 = g8 == 16);
    }
    let d5 = !a7 && l7 == 1 ? [] : null, u5 = a7 ? i3 : i3 + 1, p8 = h6;
    t: for (; ; ) if (c2 < o2.length && p8 == o2[c2].from) {
      if (f4) break t;
      let g8 = o2[c2];
      if (!a7) for (let b8 = g8.to, m10 = c2 + 1; ; ) {
        if (b8 == e) break t;
        if (m10 < o2.length && o2[m10].from == b8) b8 = o2[m10++].to;
        else {
          if (D6[b8] == l7) break t;
          break;
        }
      }
      if (c2++, d5) d5.push(g8);
      else {
        g8.from > h6 && r2.push(new G6(h6, g8.from, u5));
        let b8 = g8.direction == gt2 != !(u5 % 2);
        si(s66, b8 ? i3 + 1 : i3, n3, g8.inner, g8.from, g8.to, r2), h6 = g8.to;
      }
      p8 = g8.to;
    } else {
      if (p8 == e || (a7 ? D6[p8] != l7 : D6[p8] == l7)) break;
      p8++;
    }
    d5 ? ii(s66, h6, p8, i3 + 1, n3, d5, r2) : h6 < p8 && r2.push(new G6(h6, p8, u5)), h6 = p8;
  }
  else for (let h6 = e, c2 = o2.length; h6 > t3; ) {
    let a7 = true, f4 = false;
    if (!c2 || h6 > o2[c2 - 1].to) {
      let g8 = D6[h6 - 1];
      g8 != l7 && (a7 = false, f4 = g8 == 16);
    }
    let d5 = !a7 && l7 == 1 ? [] : null, u5 = a7 ? i3 : i3 + 1, p8 = h6;
    t: for (; ; ) if (c2 && p8 == o2[c2 - 1].to) {
      if (f4) break t;
      let g8 = o2[--c2];
      if (!a7) for (let b8 = g8.from, m10 = c2; ; ) {
        if (b8 == t3) break t;
        if (m10 && o2[m10 - 1].to == b8) b8 = o2[--m10].from;
        else {
          if (D6[b8 - 1] == l7) break t;
          break;
        }
      }
      if (d5) d5.push(g8);
      else {
        g8.to < h6 && r2.push(new G6(g8.to, h6, u5));
        let b8 = g8.direction == gt2 != !(u5 % 2);
        si(s66, b8 ? i3 + 1 : i3, n3, g8.inner, g8.from, g8.to, r2), h6 = g8.from;
      }
      p8 = g8.from;
    } else {
      if (p8 == t3 || (a7 ? D6[p8 - 1] != l7 : D6[p8 - 1] == l7)) break;
      p8--;
    }
    d5 ? ii(s66, p8, h6, i3 + 1, n3, d5, r2) : p8 < h6 && r2.push(new G6(p8, h6, u5)), h6 = p8;
  }
}
function si(s66, t3, e, i3, n3, o2, r2) {
  let l7 = t3 % 2 ? 2 : 1;
  po(s66, n3, o2, i3, l7), go(s66, n3, o2, i3, l7), mo(n3, o2, i3, l7), ii(s66, n3, o2, t3, e, i3, r2);
}
function en(s66, t3, e) {
  if (!s66) return [new G6(0, 0, t3 == Wi ? 1 : 0)];
  if (t3 == gt2 && !e.length && !uo.test(s66)) return sn(s66.length);
  if (e.length) for (; s66.length > D6.length; ) D6[D6.length] = 256;
  let i3 = [], n3 = t3 == gt2 ? 0 : 1;
  return si(s66, n3, n3, e, 0, s66.length, i3), i3;
}
function sn(s66) {
  return [new G6(0, s66, 0)];
}
var nn = "";
function on(s66, t3, e, i3, n3) {
  var o2;
  let r2 = i3.head - s66.from, l7 = G6.find(t3, r2, (o2 = i3.bidiLevel) !== null && o2 !== void 0 ? o2 : -1, i3.assoc), h6 = t3[l7], c2 = h6.side(n3, e);
  if (r2 == c2) {
    let d5 = l7 += n3 ? 1 : -1;
    if (d5 < 0 || d5 >= t3.length) return null;
    h6 = t3[l7 = d5], r2 = h6.side(!n3, e), c2 = h6.side(n3, e);
  }
  let a7 = ee(s66.text, r2, h6.forward(n3, e));
  (a7 < h6.from || a7 > h6.to) && (a7 = c2), nn = s66.text.slice(Math.min(r2, a7), Math.max(r2, a7));
  let f4 = l7 == (n3 ? t3.length - 1 : 0) ? null : t3[l7 + (n3 ? 1 : -1)];
  return f4 && a7 == c2 && f4.level + (n3 ? 0 : 1) < h6.level ? x4.cursor(f4.side(!n3, e) + s66.from, f4.forward(n3, e) ? 1 : -1, f4.level) : x4.cursor(a7 + s66.from, h6.forward(n3, e) ? -1 : 1, h6.level);
}
function bo(s66, t3, e) {
  for (let i3 = t3; i3 < e; i3++) {
    let n3 = Zs(s66.charCodeAt(i3));
    if (n3 == 1) return gt2;
    if (n3 == 2 || n3 == 4) return Wi;
  }
  return gt2;
}
var rn = y4.define();
var ln = y4.define();
var hn = y4.define();
var an = y4.define();
var ni = y4.define();
var cn = y4.define();
var fn = y4.define();
var zi = y4.define();
var Ii = y4.define();
var dn = y4.define({ combine: (s66) => s66.some((t3) => t3) });
var un = y4.define({ combine: (s66) => s66.some((t3) => t3) });
var pn = y4.define();
var Wt = class s32 {
  constructor(t3, e = "nearest", i3 = "nearest", n3 = 5, o2 = 5, r2 = false) {
    this.range = t3, this.y = e, this.x = i3, this.yMargin = n3, this.xMargin = o2, this.isSnapshot = r2;
  }
  map(t3) {
    return t3.empty ? this : new s32(this.range.map(t3), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
  clip(t3) {
    return this.range.to <= t3.doc.length ? this : new s32(x4.cursor(t3.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
  }
};
var oe5 = v3.define({ map: (s66, t3) => s66.map(t3) });
var gn = v3.define();
function $2(s66, t3, e) {
  let i3 = s66.facet(an);
  i3.length ? i3[0](t3) : window.onerror ? window.onerror(String(t3), e, void 0, void 0, t3) : e ? console.error(e + ":", t3) : console.error(t3);
}
var st4 = y4.define({ combine: (s66) => s66.length ? s66[0] : true });
var yo = 0;
var Et2 = y4.define();
var N5 = class s33 {
  constructor(t3, e, i3, n3, o2) {
    this.id = t3, this.create = e, this.domEventHandlers = i3, this.domEventObservers = n3, this.extension = o2(this);
  }
  static define(t3, e) {
    let { eventHandlers: i3, eventObservers: n3, provide: o2, decorations: r2 } = e || {};
    return new s33(yo++, t3, i3, n3, (l7) => {
      let h6 = [Et2.of(l7)];
      return r2 && h6.push(Ut.of((c2) => {
        let a7 = c2.plugin(l7);
        return a7 ? r2(a7) : O3.none;
      })), o2 && h6.push(o2(l7)), h6;
    });
  }
  static fromClass(t3, e) {
    return s33.define((i3) => new t3(i3), e);
  }
};
var zt = class {
  constructor(t3) {
    this.spec = t3, this.mustUpdate = null, this.value = null;
  }
  update(t3) {
    if (this.value) {
      if (this.mustUpdate) {
        let e = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update) try {
          this.value.update(e);
        } catch (i3) {
          if ($2(e.state, i3, "CodeMirror plugin crashed"), this.value.destroy) try {
            this.value.destroy();
          } catch {
          }
          this.deactivate();
        }
      }
    } else if (this.spec) try {
      this.value = this.spec.create(t3);
    } catch (e) {
      $2(t3.state, e, "CodeMirror plugin crashed"), this.deactivate();
    }
    return this;
  }
  destroy(t3) {
    var e;
    if (!((e = this.value) === null || e === void 0) && e.destroy) try {
      this.value.destroy();
    } catch (i3) {
      $2(t3.state, i3, "CodeMirror plugin crashed");
    }
  }
  deactivate() {
    this.spec = this.value = null;
  }
};
var mn = y4.define();
var Ve7 = y4.define();
var Ut = y4.define();
var bn = y4.define();
var Ki = y4.define();
var yn = y4.define();
function Zi(s66, t3) {
  let e = s66.state.facet(yn);
  if (!e.length) return e;
  let i3 = e.map((o2) => o2 instanceof Function ? o2(s66) : o2), n3 = [];
  return T.spans(i3, t3.from, t3.to, { point() {
  }, span(o2, r2, l7, h6) {
    let c2 = o2 - t3.from, a7 = r2 - t3.from, f4 = n3;
    for (let d5 = l7.length - 1; d5 >= 0; d5--, h6--) {
      let u5 = l7[d5].spec.bidiIsolate, p8;
      if (u5 == null && (u5 = bo(t3.text, c2, a7)), h6 > 0 && f4.length && (p8 = f4[f4.length - 1]).to == c2 && p8.direction == u5) p8.to = a7, f4 = p8.inner;
      else {
        let g8 = { from: c2, to: a7, direction: u5, inner: [] };
        f4.push(g8), f4 = g8.inner;
      }
    }
  } }), n3;
}
var wn = y4.define();
function qi(s66) {
  let t3 = 0, e = 0, i3 = 0, n3 = 0;
  for (let o2 of s66.state.facet(wn)) {
    let r2 = o2(s66);
    r2 && (r2.left != null && (t3 = Math.max(t3, r2.left)), r2.right != null && (e = Math.max(e, r2.right)), r2.top != null && (i3 = Math.max(i3, r2.top)), r2.bottom != null && (n3 = Math.max(n3, r2.bottom)));
  }
  return { left: t3, right: e, top: i3, bottom: n3 };
}
var Lt = y4.define();
var j8 = class s34 {
  constructor(t3, e, i3, n3) {
    this.fromA = t3, this.toA = e, this.fromB = i3, this.toB = n3;
  }
  join(t3) {
    return new s34(Math.min(this.fromA, t3.fromA), Math.max(this.toA, t3.toA), Math.min(this.fromB, t3.fromB), Math.max(this.toB, t3.toB));
  }
  addToSet(t3) {
    let e = t3.length, i3 = this;
    for (; e > 0; e--) {
      let n3 = t3[e - 1];
      if (!(n3.fromA > i3.toA)) {
        if (n3.toA < i3.fromA) break;
        i3 = i3.join(n3), t3.splice(e - 1, 1);
      }
    }
    return t3.splice(e, 0, i3), t3;
  }
  static extendWithRanges(t3, e) {
    if (e.length == 0) return t3;
    let i3 = [];
    for (let n3 = 0, o2 = 0, r2 = 0, l7 = 0; ; n3++) {
      let h6 = n3 == t3.length ? null : t3[n3], c2 = r2 - l7, a7 = h6 ? h6.fromB : 1e9;
      for (; o2 < e.length && e[o2] < a7; ) {
        let f4 = e[o2], d5 = e[o2 + 1], u5 = Math.max(l7, f4), p8 = Math.min(a7, d5);
        if (u5 <= p8 && new s34(u5 + c2, p8 + c2, u5, p8).addToSet(i3), d5 > a7) break;
        o2 += 2;
      }
      if (!h6) return i3;
      new s34(h6.fromA, h6.toA, h6.fromB, h6.toB).addToSet(i3), r2 = h6.toA, l7 = h6.toB;
    }
  }
};
var Ce4 = class s35 {
  constructor(t3, e, i3) {
    this.view = t3, this.state = e, this.transactions = i3, this.flags = 0, this.startState = t3.state, this.changes = A5.empty(this.startState.doc.length);
    for (let o2 of i3) this.changes = this.changes.compose(o2.changes);
    let n3 = [];
    this.changes.iterChangedRanges((o2, r2, l7, h6) => n3.push(new j8(o2, r2, l7, h6))), this.changedRanges = n3;
  }
  static create(t3, e, i3) {
    return new s35(t3, e, i3);
  }
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0;
  }
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  get docChanged() {
    return !this.changes.empty;
  }
  get selectionSet() {
    return this.transactions.some((t3) => t3.selection);
  }
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
};
var Me3 = class extends R3 {
  get length() {
    return this.view.state.doc.length;
  }
  constructor(t3) {
    super(), this.view = t3, this.decorations = [], this.dynamicDecorationMap = [false], this.domChanged = null, this.hasComposition = null, this.markedForComposition = /* @__PURE__ */ new Set(), this.editContextFormatting = O3.none, this.lastCompositionAfterCursor = false, this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = false, this.lastUpdate = Date.now(), this.setDOM(t3.contentDOM), this.children = [new P4()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new j8(0, 0, 0, t3.state.doc.length)], 0, null);
  }
  update(t3) {
    var e;
    let i3 = t3.changedRanges;
    this.minWidth > 0 && i3.length && (i3.every(({ fromA: c2, toA: a7 }) => a7 < this.minWidthFrom || c2 > this.minWidthTo) ? (this.minWidthFrom = t3.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = t3.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.updateEditContextFormatting(t3);
    let n3 = -1;
    this.view.inputState.composing >= 0 && !this.view.observer.editContext && (!((e = this.domChanged) === null || e === void 0) && e.newSel ? n3 = this.domChanged.newSel.head : !ko(t3.changes, this.hasComposition) && !t3.selectionSet && (n3 = t3.state.selection.main.head));
    let o2 = n3 > -1 ? xo(this.view, t3.changes, n3) : null;
    if (this.domChanged = null, this.hasComposition) {
      this.markedForComposition.clear();
      let { from: c2, to: a7 } = this.hasComposition;
      i3 = new j8(c2, a7, t3.changes.mapPos(c2, -1), t3.changes.mapPos(a7, 1)).addToSet(i3.slice());
    }
    this.hasComposition = o2 ? { from: o2.range.fromB, to: o2.range.toB } : null, (y6.ie || y6.chrome) && !o2 && t3 && t3.state.doc.lines != t3.startState.doc.lines && (this.forceSelection = true);
    let r2 = this.decorations, l7 = this.updateDeco(), h6 = Co(r2, l7, t3.changes);
    return i3 = j8.extendWithRanges(i3, h6), !(this.flags & 7) && i3.length == 0 ? false : (this.updateInner(i3, t3.startState.doc.length, o2), t3.transactions.length && (this.lastUpdate = Date.now()), true);
  }
  updateInner(t3, e, i3) {
    this.view.viewState.mustMeasureContent = true, this.updateChildren(t3, e, i3);
    let { observer: n3 } = this.view;
    n3.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let r2 = y6.chrome || y6.ios ? { node: n3.selectionRange.focusNode, written: false } : void 0;
      this.sync(this.view, r2), this.flags &= -8, r2 && (r2.written || n3.selectionRange.focusNode != r2.node) && (this.forceSelection = true), this.dom.style.height = "";
    }), this.markedForComposition.forEach((r2) => r2.flags &= -9);
    let o2 = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) for (let r2 of this.children) r2 instanceof dt3 && r2.widget instanceof $t && o2.push(r2.dom);
    n3.updateGaps(o2);
  }
  updateChildren(t3, e, i3) {
    let n3 = i3 ? i3.range.addToSet(t3.slice()) : t3, o2 = this.childCursor(e);
    for (let r2 = n3.length - 1; ; r2--) {
      let l7 = r2 >= 0 ? n3[r2] : null;
      if (!l7) break;
      let { fromA: h6, toA: c2, fromB: a7, toB: f4 } = l7, d5, u5, p8, g8;
      if (i3 && i3.range.fromB < f4 && i3.range.toB > a7) {
        let x7 = Ft.build(this.view.state.doc, a7, i3.range.fromB, this.decorations, this.dynamicDecorationMap), S6 = Ft.build(this.view.state.doc, i3.range.toB, f4, this.decorations, this.dynamicDecorationMap);
        u5 = x7.breakAtStart, p8 = x7.openStart, g8 = S6.openEnd;
        let C8 = this.compositionView(i3);
        S6.breakAtStart ? C8.breakAfter = 1 : S6.content.length && C8.merge(C8.length, C8.length, S6.content[0], false, S6.openStart, 0) && (C8.breakAfter = S6.content[0].breakAfter, S6.content.shift()), x7.content.length && C8.merge(0, 0, x7.content[x7.content.length - 1], true, 0, x7.openEnd) && x7.content.pop(), d5 = x7.content.concat(C8).concat(S6.content);
      } else ({ content: d5, breakAtStart: u5, openStart: p8, openEnd: g8 } = Ft.build(this.view.state.doc, a7, f4, this.decorations, this.dynamicDecorationMap));
      let { i: b8, off: m10 } = o2.findPos(c2, 1), { i: w9, off: v6 } = o2.findPos(h6, -1);
      js(this, w9, v6, b8, m10, d5, u5, p8, g8);
    }
    i3 && this.fixCompositionDOM(i3);
  }
  updateEditContextFormatting(t3) {
    this.editContextFormatting = this.editContextFormatting.map(t3.changes);
    for (let e of t3.transactions) for (let i3 of e.effects) i3.is(gn) && (this.editContextFormatting = i3.value);
  }
  compositionView(t3) {
    let e = new Q3(t3.text.nodeValue);
    e.flags |= 8;
    for (let { deco: n3 } of t3.marks) e = new rt4(n3, [e], e.length);
    let i3 = new P4();
    return i3.append(e, 0), i3;
  }
  fixCompositionDOM(t3) {
    let e = (o2, r2) => {
      r2.flags |= 8 | (r2.children.some((h6) => h6.flags & 7) ? 1 : 0), this.markedForComposition.add(r2);
      let l7 = R3.get(o2);
      l7 && l7 != r2 && (l7.dom = null), r2.setDOM(o2);
    }, i3 = this.childPos(t3.range.fromB, 1), n3 = this.children[i3.i];
    e(t3.line, n3);
    for (let o2 = t3.marks.length - 1; o2 >= -1; o2--) i3 = n3.childPos(i3.off, 1), n3 = n3.children[i3.i], e(o2 >= 0 ? t3.marks[o2].node : t3.text, n3);
  }
  updateSelection(t3 = false, e = false) {
    (t3 || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange();
    let i3 = this.view.root.activeElement, n3 = i3 == this.dom, o2 = !n3 && ue6(this.dom, this.view.observer.selectionRange) && !(i3 && this.dom.contains(i3));
    if (!(n3 || e || o2)) return;
    let r2 = this.forceSelection;
    this.forceSelection = false;
    let l7 = this.view.state.selection.main, h6 = this.moveToLine(this.domAtPos(l7.anchor)), c2 = l7.empty ? h6 : this.moveToLine(this.domAtPos(l7.head));
    if (y6.gecko && l7.empty && !this.hasComposition && wo(h6)) {
      let f4 = document.createTextNode("");
      this.view.observer.ignore(() => h6.node.insertBefore(f4, h6.node.childNodes[h6.offset] || null)), h6 = c2 = new V5(f4, 0), r2 = true;
    }
    let a7 = this.view.observer.selectionRange;
    (r2 || !a7.focusNode || (!Vt(h6.node, h6.offset, a7.anchorNode, a7.anchorOffset) || !Vt(c2.node, c2.offset, a7.focusNode, a7.focusOffset)) && !this.suppressWidgetCursorChange(a7, l7)) && (this.view.observer.ignore(() => {
      y6.android && y6.chrome && this.dom.contains(a7.focusNode) && Mo(a7.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: true }));
      let f4 = jt(this.view.root);
      if (f4) if (l7.empty) {
        if (y6.gecko) {
          let d5 = vo(h6.node, h6.offset);
          if (d5 && d5 != 3) {
            let u5 = (d5 == 1 ? Ks : qs)(h6.node, h6.offset);
            u5 && (h6 = new V5(u5.node, u5.offset));
          }
        }
        f4.collapse(h6.node, h6.offset), l7.bidiLevel != null && f4.caretBidiLevel !== void 0 && (f4.caretBidiLevel = l7.bidiLevel);
      } else if (f4.extend) {
        f4.collapse(h6.node, h6.offset);
        try {
          f4.extend(c2.node, c2.offset);
        } catch {
        }
      } else {
        let d5 = document.createRange();
        l7.anchor > l7.head && ([h6, c2] = [c2, h6]), d5.setEnd(c2.node, c2.offset), d5.setStart(h6.node, h6.offset), f4.removeAllRanges(), f4.addRange(d5);
      }
      o2 && this.view.root.activeElement == this.dom && (this.dom.blur(), i3 && i3.focus());
    }), this.view.observer.setSelectionRange(h6, c2)), this.impreciseAnchor = h6.precise ? null : new V5(a7.anchorNode, a7.anchorOffset), this.impreciseHead = c2.precise ? null : new V5(a7.focusNode, a7.focusOffset);
  }
  suppressWidgetCursorChange(t3, e) {
    return this.hasComposition && e.empty && Vt(t3.focusNode, t3.focusOffset, t3.anchorNode, t3.anchorOffset) && this.posFromDOM(t3.focusNode, t3.focusOffset) == e.head;
  }
  enforceCursorAssoc() {
    if (this.hasComposition) return;
    let { view: t3 } = this, e = t3.state.selection.main, i3 = jt(t3.root), { anchorNode: n3, anchorOffset: o2 } = t3.observer.selectionRange;
    if (!i3 || !e.empty || !e.assoc || !i3.modify) return;
    let r2 = P4.find(this, e.head);
    if (!r2) return;
    let l7 = r2.posAtStart;
    if (e.head == l7 || e.head == l7 + r2.length) return;
    let h6 = this.coordsAt(e.head, -1), c2 = this.coordsAt(e.head, 1);
    if (!h6 || !c2 || h6.bottom > c2.top) return;
    let a7 = this.domAtPos(e.head + e.assoc);
    i3.collapse(a7.node, a7.offset), i3.modify("move", e.assoc < 0 ? "forward" : "backward", "lineboundary"), t3.observer.readSelectionRange();
    let f4 = t3.observer.selectionRange;
    t3.docView.posFromDOM(f4.anchorNode, f4.anchorOffset) != e.from && i3.collapse(n3, o2);
  }
  moveToLine(t3) {
    let e = this.dom, i3;
    if (t3.node != e) return t3;
    for (let n3 = t3.offset; !i3 && n3 < e.childNodes.length; n3++) {
      let o2 = R3.get(e.childNodes[n3]);
      o2 instanceof P4 && (i3 = o2.domAtPos(0));
    }
    for (let n3 = t3.offset - 1; !i3 && n3 >= 0; n3--) {
      let o2 = R3.get(e.childNodes[n3]);
      o2 instanceof P4 && (i3 = o2.domAtPos(o2.length));
    }
    return i3 ? new V5(i3.node, i3.offset, true) : t3;
  }
  nearest(t3) {
    for (let e = t3; e; ) {
      let i3 = R3.get(e);
      if (i3 && i3.rootView == this) return i3;
      e = e.parentNode;
    }
    return null;
  }
  posFromDOM(t3, e) {
    let i3 = this.nearest(t3);
    if (!i3) throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i3.localPosFromDOM(t3, e) + i3.posAtStart;
  }
  domAtPos(t3) {
    let { i: e, off: i3 } = this.childCursor().findPos(t3, -1);
    for (; e < this.children.length - 1; ) {
      let n3 = this.children[e];
      if (i3 < n3.length || n3 instanceof P4) break;
      e++, i3 = 0;
    }
    return this.children[e].domAtPos(i3);
  }
  coordsAt(t3, e) {
    let i3 = null, n3 = 0;
    for (let o2 = this.length, r2 = this.children.length - 1; r2 >= 0; r2--) {
      let l7 = this.children[r2], h6 = o2 - l7.breakAfter, c2 = h6 - l7.length;
      if (h6 < t3) break;
      if (c2 <= t3 && (c2 < t3 || l7.covers(-1)) && (h6 > t3 || l7.covers(1)) && (!i3 || l7 instanceof P4 && !(i3 instanceof P4 && e >= 0))) i3 = l7, n3 = c2;
      else if (i3 && c2 == t3 && h6 == t3 && l7 instanceof dt3 && Math.abs(e) < 2) {
        if (l7.deco.startSide < 0) break;
        r2 && (i3 = null);
      }
      o2 = c2;
    }
    return i3 ? i3.coordsAt(t3 - n3, e) : null;
  }
  coordsForChar(t3) {
    let { i: e, off: i3 } = this.childPos(t3, 1), n3 = this.children[e];
    if (!(n3 instanceof P4)) return null;
    for (; n3.children.length; ) {
      let { i: l7, off: h6 } = n3.childPos(i3, 1);
      for (; ; l7++) {
        if (l7 == n3.children.length) return null;
        if ((n3 = n3.children[l7]).length) break;
      }
      i3 = h6;
    }
    if (!(n3 instanceof Q3)) return null;
    let o2 = ee(n3.text, i3);
    if (o2 == i3) return null;
    let r2 = pt3(n3.dom, i3, o2).getClientRects();
    for (let l7 = 0; l7 < r2.length; l7++) {
      let h6 = r2[l7];
      if (l7 == r2.length - 1 || h6.top < h6.bottom && h6.left < h6.right) return h6;
    }
    return null;
  }
  measureVisibleLineHeights(t3) {
    let e = [], { from: i3, to: n3 } = t3, o2 = this.view.contentDOM.clientWidth, r2 = o2 > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l7 = -1, h6 = this.view.textDirection == L6.LTR;
    for (let c2 = 0, a7 = 0; a7 < this.children.length; a7++) {
      let f4 = this.children[a7], d5 = c2 + f4.length;
      if (d5 > n3) break;
      if (c2 >= i3) {
        let u5 = f4.dom.getBoundingClientRect();
        if (e.push(u5.height), r2) {
          let p8 = f4.dom.lastChild, g8 = p8 ? At(p8) : [];
          if (g8.length) {
            let b8 = g8[g8.length - 1], m10 = h6 ? b8.right - u5.left : u5.right - b8.left;
            m10 > l7 && (l7 = m10, this.minWidth = o2, this.minWidthFrom = c2, this.minWidthTo = d5);
          }
        }
      }
      c2 = d5 + f4.breakAfter;
    }
    return e;
  }
  textDirectionAt(t3) {
    let { i: e } = this.childPos(t3, 1);
    return getComputedStyle(this.children[e].dom).direction == "rtl" ? L6.RTL : L6.LTR;
  }
  measureTextSize() {
    for (let o2 of this.children) if (o2 instanceof P4) {
      let r2 = o2.measureTextSize();
      if (r2) return r2;
    }
    let t3 = document.createElement("div"), e, i3, n3;
    return t3.className = "cm-line", t3.style.width = "99999px", t3.style.position = "absolute", t3.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(t3);
      let o2 = At(t3.firstChild)[0];
      e = t3.getBoundingClientRect().height, i3 = o2 ? o2.width / 27 : 7, n3 = o2 ? o2.height : e, t3.remove();
    }), { lineHeight: e, charWidth: i3, textHeight: n3 };
  }
  childCursor(t3 = this.length) {
    let e = this.children.length;
    return e && (t3 -= this.children[--e].length), new ve5(this.children, t3, e);
  }
  computeBlockGapDeco() {
    let t3 = [], e = this.view.viewState;
    for (let i3 = 0, n3 = 0; ; n3++) {
      let o2 = n3 == e.viewports.length ? null : e.viewports[n3], r2 = o2 ? o2.from - 1 : this.length;
      if (r2 > i3) {
        let l7 = (e.lineBlockAt(r2).bottom - e.lineBlockAt(i3).top) / this.view.scaleY;
        t3.push(O3.replace({ widget: new $t(l7), block: true, inclusive: true, isBlockGap: true }).range(i3, r2));
      }
      if (!o2) break;
      i3 = o2.to + 1;
    }
    return O3.set(t3);
  }
  updateDeco() {
    let t3 = 1, e = this.view.state.facet(Ut).map((o2) => (this.dynamicDecorationMap[t3++] = typeof o2 == "function") ? o2(this.view) : o2), i3 = false, n3 = this.view.state.facet(bn).map((o2, r2) => {
      let l7 = typeof o2 == "function";
      return l7 && (i3 = true), l7 ? o2(this.view) : o2;
    });
    for (n3.length && (this.dynamicDecorationMap[t3++] = i3, e.push(T.join(n3))), this.decorations = [this.editContextFormatting, ...e, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]; t3 < this.decorations.length; ) this.dynamicDecorationMap[t3++] = false;
    return this.decorations;
  }
  scrollIntoView(t3) {
    if (t3.isSnapshot) {
      let c2 = this.view.viewState.lineBlockAt(t3.range.head);
      this.view.scrollDOM.scrollTop = c2.top - t3.yMargin, this.view.scrollDOM.scrollLeft = t3.xMargin;
      return;
    }
    for (let c2 of this.view.state.facet(pn)) try {
      if (c2(this.view, t3.range, t3)) return true;
    } catch (a7) {
      $2(this.view.state, a7, "scroll handler");
    }
    let { range: e } = t3, i3 = this.coordsAt(e.head, e.empty ? e.assoc : e.head > e.anchor ? -1 : 1), n3;
    if (!i3) return;
    !e.empty && (n3 = this.coordsAt(e.anchor, e.anchor > e.head ? -1 : 1)) && (i3 = { left: Math.min(i3.left, n3.left), top: Math.min(i3.top, n3.top), right: Math.max(i3.right, n3.right), bottom: Math.max(i3.bottom, n3.bottom) });
    let o2 = qi(this.view), r2 = { left: i3.left - o2.left, top: i3.top - o2.top, right: i3.right + o2.right, bottom: i3.bottom + o2.bottom }, { offsetWidth: l7, offsetHeight: h6 } = this.view.scrollDOM;
    eo(this.view.scrollDOM, r2, e.head < e.anchor ? -1 : 1, t3.x, t3.y, Math.max(Math.min(t3.xMargin, l7), -l7), Math.max(Math.min(t3.yMargin, h6), -h6), this.view.textDirection == L6.LTR);
  }
};
function wo(s66) {
  return s66.node.nodeType == 1 && s66.node.firstChild && (s66.offset == 0 || s66.node.childNodes[s66.offset - 1].contentEditable == "false") && (s66.offset == s66.node.childNodes.length || s66.node.childNodes[s66.offset].contentEditable == "false");
}
function xn(s66, t3) {
  let e = s66.observer.selectionRange;
  if (!e.focusNode) return null;
  let i3 = Ks(e.focusNode, e.focusOffset), n3 = qs(e.focusNode, e.focusOffset), o2 = i3 || n3;
  if (n3 && i3 && n3.node != i3.node) {
    let l7 = R3.get(n3.node);
    if (!l7 || l7 instanceof Q3 && l7.text != n3.node.nodeValue) o2 = n3;
    else if (s66.docView.lastCompositionAfterCursor) {
      let h6 = R3.get(i3.node);
      !h6 || h6 instanceof Q3 && h6.text != i3.node.nodeValue || (o2 = n3);
    }
  }
  if (s66.docView.lastCompositionAfterCursor = o2 != i3, !o2) return null;
  let r2 = t3 - o2.offset;
  return { from: r2, to: r2 + o2.node.nodeValue.length, node: o2.node };
}
function xo(s66, t3, e) {
  let i3 = xn(s66, e);
  if (!i3) return null;
  let { node: n3, from: o2, to: r2 } = i3, l7 = n3.nodeValue;
  if (/[\n\r]/.test(l7) || s66.state.doc.sliceString(i3.from, i3.to) != l7) return null;
  let h6 = t3.invertedDesc, c2 = new j8(h6.mapPos(o2), h6.mapPos(r2), o2, r2), a7 = [];
  for (let f4 = n3.parentNode; ; f4 = f4.parentNode) {
    let d5 = R3.get(f4);
    if (d5 instanceof rt4) a7.push({ node: f4, deco: d5.mark });
    else {
      if (d5 instanceof P4 || f4.nodeName == "DIV" && f4.parentNode == s66.contentDOM) return { range: c2, text: n3, marks: a7, line: f4 };
      if (f4 != s66.contentDOM) a7.push({ node: f4, deco: new Xt({ inclusive: true, attributes: ho(f4), tagName: f4.tagName.toLowerCase() }) });
      else return null;
    }
  }
}
function vo(s66, t3) {
  return s66.nodeType != 1 ? 0 : (t3 && s66.childNodes[t3 - 1].contentEditable == "false" ? 1 : 0) | (t3 < s66.childNodes.length && s66.childNodes[t3].contentEditable == "false" ? 2 : 0);
}
var So = class {
  constructor() {
    this.changes = [];
  }
  compareRange(t3, e) {
    ti(t3, e, this.changes);
  }
  comparePoint(t3, e) {
    ti(t3, e, this.changes);
  }
};
function Co(s66, t3, e) {
  let i3 = new So();
  return T.compare(s66, t3, e, i3), i3.changes;
}
function Mo(s66, t3) {
  for (let e = s66; e && e != t3; e = e.assignedSlot || e.parentNode) if (e.nodeType == 1 && e.contentEditable == "false") return true;
  return false;
}
function ko(s66, t3) {
  let e = false;
  return t3 && s66.iterChangedRanges((i3, n3) => {
    i3 < t3.to && n3 > t3.from && (e = true);
  }), e;
}
function Ao(s66, t3, e = 1) {
  let i3 = s66.charCategorizer(t3), n3 = s66.doc.lineAt(t3), o2 = t3 - n3.from;
  if (n3.length == 0) return x4.cursor(t3);
  o2 == 0 ? e = 1 : o2 == n3.length && (e = -1);
  let r2 = o2, l7 = o2;
  e < 0 ? r2 = ee(n3.text, o2, false) : l7 = ee(n3.text, o2);
  let h6 = i3(n3.text.slice(r2, l7));
  for (; r2 > 0; ) {
    let c2 = ee(n3.text, r2, false);
    if (i3(n3.text.slice(c2, r2)) != h6) break;
    r2 = c2;
  }
  for (; l7 < n3.length; ) {
    let c2 = ee(n3.text, l7);
    if (i3(n3.text.slice(l7, c2)) != h6) break;
    l7 = c2;
  }
  return x4.range(r2 + n3.from, l7 + n3.from);
}
function Do(s66, t3) {
  return t3.left > s66 ? t3.left - s66 : Math.max(0, s66 - t3.right);
}
function Oo(s66, t3) {
  return t3.top > s66 ? t3.top - s66 : Math.max(0, s66 - t3.bottom);
}
function Ie7(s66, t3) {
  return s66.top < t3.bottom - 1 && s66.bottom > t3.top + 1;
}
function ts(s66, t3) {
  return t3 < s66.top ? { top: t3, left: s66.left, right: s66.right, bottom: s66.bottom } : s66;
}
function es(s66, t3) {
  return t3 > s66.bottom ? { top: s66.top, left: s66.left, right: s66.right, bottom: t3 } : s66;
}
function oi(s66, t3, e) {
  let i3, n3, o2, r2, l7 = false, h6, c2, a7, f4;
  for (let p8 = s66.firstChild; p8; p8 = p8.nextSibling) {
    let g8 = At(p8);
    for (let b8 = 0; b8 < g8.length; b8++) {
      let m10 = g8[b8];
      n3 && Ie7(n3, m10) && (m10 = ts(es(m10, n3.bottom), n3.top));
      let w9 = Do(t3, m10), v6 = Oo(e, m10);
      if (w9 == 0 && v6 == 0) return p8.nodeType == 3 ? is(p8, t3, e) : oi(p8, t3, e);
      if (!i3 || r2 > v6 || r2 == v6 && o2 > w9) {
        i3 = p8, n3 = m10, o2 = w9, r2 = v6;
        let x7 = v6 ? e < m10.top ? -1 : 1 : w9 ? t3 < m10.left ? -1 : 1 : 0;
        l7 = !x7 || (x7 > 0 ? b8 < g8.length - 1 : b8 > 0);
      }
      w9 == 0 ? e > m10.bottom && (!a7 || a7.bottom < m10.bottom) ? (h6 = p8, a7 = m10) : e < m10.top && (!f4 || f4.top > m10.top) && (c2 = p8, f4 = m10) : a7 && Ie7(a7, m10) ? a7 = es(a7, m10.bottom) : f4 && Ie7(f4, m10) && (f4 = ts(f4, m10.top));
    }
  }
  if (a7 && a7.bottom >= e ? (i3 = h6, n3 = a7) : f4 && f4.top <= e && (i3 = c2, n3 = f4), !i3) return { node: s66, offset: 0 };
  let d5 = Math.max(n3.left, Math.min(n3.right, t3));
  if (i3.nodeType == 3) return is(i3, d5, e);
  if (l7 && i3.contentEditable != "false") return oi(i3, d5, e);
  let u5 = Array.prototype.indexOf.call(s66.childNodes, i3) + (t3 >= (n3.left + n3.right) / 2 ? 1 : 0);
  return { node: s66, offset: u5 };
}
function is(s66, t3, e) {
  let i3 = s66.nodeValue.length, n3 = -1, o2 = 1e9, r2 = 0;
  for (let l7 = 0; l7 < i3; l7++) {
    let h6 = pt3(s66, l7, l7 + 1).getClientRects();
    for (let c2 = 0; c2 < h6.length; c2++) {
      let a7 = h6[c2];
      if (a7.top == a7.bottom) continue;
      r2 || (r2 = t3 - a7.left);
      let f4 = (a7.top > e ? a7.top - e : e - a7.bottom) - 1;
      if (a7.left - 1 <= t3 && a7.right + 1 >= t3 && f4 < o2) {
        let d5 = t3 >= (a7.left + a7.right) / 2, u5 = d5;
        if ((y6.chrome || y6.gecko) && pt3(s66, l7).getBoundingClientRect().left == a7.right && (u5 = !d5), f4 <= 0) return { node: s66, offset: l7 + (u5 ? 1 : 0) };
        n3 = l7 + (u5 ? 1 : 0), o2 = f4;
      }
    }
  }
  return { node: s66, offset: n3 > -1 ? n3 : r2 > 0 ? s66.nodeValue.length : 0 };
}
function vn(s66, t3, e, i3 = -1) {
  var n3, o2;
  let r2 = s66.contentDOM.getBoundingClientRect(), l7 = r2.top + s66.viewState.paddingTop, h6, { docHeight: c2 } = s66.viewState, { x: a7, y: f4 } = t3, d5 = f4 - l7;
  if (d5 < 0) return 0;
  if (d5 > c2) return s66.state.doc.length;
  for (let x7 = s66.viewState.heightOracle.textHeight / 2, S6 = false; h6 = s66.elementAtHeight(d5), h6.type != F6.Text; ) for (; d5 = i3 > 0 ? h6.bottom + x7 : h6.top - x7, !(d5 >= 0 && d5 <= c2); ) {
    if (S6) return e ? null : 0;
    S6 = true, i3 = -i3;
  }
  f4 = l7 + d5;
  let u5 = h6.from;
  if (u5 < s66.viewport.from) return s66.viewport.from == 0 ? 0 : e ? null : ss(s66, r2, h6, a7, f4);
  if (u5 > s66.viewport.to) return s66.viewport.to == s66.state.doc.length ? s66.state.doc.length : e ? null : ss(s66, r2, h6, a7, f4);
  let p8 = s66.dom.ownerDocument, g8 = s66.root.elementFromPoint ? s66.root : p8, b8 = g8.elementFromPoint(a7, f4);
  b8 && !s66.contentDOM.contains(b8) && (b8 = null), b8 || (a7 = Math.max(r2.left + 1, Math.min(r2.right - 1, a7)), b8 = g8.elementFromPoint(a7, f4), b8 && !s66.contentDOM.contains(b8) && (b8 = null));
  let m10, w9 = -1;
  if (b8 && ((n3 = s66.docView.nearest(b8)) === null || n3 === void 0 ? void 0 : n3.isEditable) != false) {
    if (p8.caretPositionFromPoint) {
      let x7 = p8.caretPositionFromPoint(a7, f4);
      x7 && ({ offsetNode: m10, offset: w9 } = x7);
    } else if (p8.caretRangeFromPoint) {
      let x7 = p8.caretRangeFromPoint(a7, f4);
      x7 && ({ startContainer: m10, startOffset: w9 } = x7, (!s66.contentDOM.contains(m10) || y6.safari && To(m10, w9, a7) || y6.chrome && Ro(m10, w9, a7)) && (m10 = void 0));
    }
    m10 && (w9 = Math.min(U8(m10), w9));
  }
  if (!m10 || !s66.docView.dom.contains(m10)) {
    let x7 = P4.find(s66.docView, u5);
    if (!x7) return d5 > h6.top + h6.height / 2 ? h6.to : h6.from;
    ({ node: m10, offset: w9 } = oi(x7.dom, a7, f4));
  }
  let v6 = s66.docView.nearest(m10);
  if (!v6) return null;
  if (v6.isWidget && ((o2 = v6.dom) === null || o2 === void 0 ? void 0 : o2.nodeType) == 1) {
    let x7 = v6.dom.getBoundingClientRect();
    return t3.y < x7.top || t3.y <= x7.bottom && t3.x <= (x7.left + x7.right) / 2 ? v6.posAtStart : v6.posAtEnd;
  } else return v6.localPosFromDOM(m10, w9) + v6.posAtStart;
}
function ss(s66, t3, e, i3, n3) {
  let o2 = Math.round((i3 - t3.left) * s66.defaultCharacterWidth);
  if (s66.lineWrapping && e.height > s66.defaultLineHeight * 1.5) {
    let l7 = s66.viewState.heightOracle.textHeight, h6 = Math.floor((n3 - e.top - (s66.defaultLineHeight - l7) * 0.5) / l7);
    o2 += h6 * s66.viewState.heightOracle.lineLength;
  }
  let r2 = s66.state.sliceDoc(e.from, e.to);
  return e.from + ft2(r2, o2, s66.state.tabSize);
}
function To(s66, t3, e) {
  let i3;
  if (s66.nodeType != 3 || t3 != (i3 = s66.nodeValue.length)) return false;
  for (let n3 = s66.nextSibling; n3; n3 = n3.nextSibling) if (n3.nodeType != 1 || n3.nodeName != "BR") return false;
  return pt3(s66, i3 - 1, i3).getBoundingClientRect().left > e;
}
function Ro(s66, t3, e) {
  if (t3 != 0) return false;
  for (let n3 = s66; ; ) {
    let o2 = n3.parentNode;
    if (!o2 || o2.nodeType != 1 || o2.firstChild != n3) return false;
    if (o2.classList.contains("cm-line")) break;
    n3 = o2;
  }
  let i3 = s66.nodeType == 1 ? s66.getBoundingClientRect() : pt3(s66, 0, Math.max(s66.nodeValue.length, 1)).getBoundingClientRect();
  return e - i3.left > 5;
}
function ri(s66, t3) {
  let e = s66.lineBlockAt(t3);
  if (Array.isArray(e.type)) {
    for (let i3 of e.type) if (i3.to > t3 || i3.to == t3 && (i3.to == e.to || i3.type == F6.Text)) return i3;
  }
  return e;
}
function Eo(s66, t3, e, i3) {
  let n3 = ri(s66, t3.head), o2 = !i3 || n3.type != F6.Text || !(s66.lineWrapping || n3.widgetLineBreaks) ? null : s66.coordsAtPos(t3.assoc < 0 && t3.head > n3.from ? t3.head - 1 : t3.head);
  if (o2) {
    let r2 = s66.dom.getBoundingClientRect(), l7 = s66.textDirectionAt(n3.from), h6 = s66.posAtCoords({ x: e == (l7 == L6.LTR) ? r2.right - 1 : r2.left + 1, y: (o2.top + o2.bottom) / 2 });
    if (h6 != null) return x4.cursor(h6, e ? -1 : 1);
  }
  return x4.cursor(e ? n3.to : n3.from, e ? -1 : 1);
}
function ns(s66, t3, e, i3) {
  let n3 = s66.state.doc.lineAt(t3.head), o2 = s66.bidiSpans(n3), r2 = s66.textDirectionAt(n3.from);
  for (let l7 = t3, h6 = null; ; ) {
    let c2 = on(n3, o2, r2, l7, e), a7 = nn;
    if (!c2) {
      if (n3.number == (e ? s66.state.doc.lines : 1)) return l7;
      a7 = `
`, n3 = s66.state.doc.line(n3.number + (e ? 1 : -1)), o2 = s66.bidiSpans(n3), c2 = s66.visualLineSide(n3, !e);
    }
    if (h6) {
      if (!h6(a7)) return l7;
    } else {
      if (!i3) return c2;
      h6 = i3(a7);
    }
    l7 = c2;
  }
}
function Lo(s66, t3, e) {
  let i3 = s66.state.charCategorizer(t3), n3 = i3(e);
  return (o2) => {
    let r2 = i3(o2);
    return n3 == O2.Space && (n3 = r2), n3 == r2;
  };
}
function Bo(s66, t3, e, i3) {
  let n3 = t3.head, o2 = e ? 1 : -1;
  if (n3 == (e ? s66.state.doc.length : 0)) return x4.cursor(n3, t3.assoc);
  let r2 = t3.goalColumn, l7, h6 = s66.contentDOM.getBoundingClientRect(), c2 = s66.coordsAtPos(n3, t3.assoc || -1), a7 = s66.documentTop;
  if (c2) r2 == null && (r2 = c2.left - h6.left), l7 = o2 < 0 ? c2.top : c2.bottom;
  else {
    let u5 = s66.viewState.lineBlockAt(n3);
    r2 == null && (r2 = Math.min(h6.right - h6.left, s66.defaultCharacterWidth * (n3 - u5.from))), l7 = (o2 < 0 ? u5.top : u5.bottom) + a7;
  }
  let f4 = h6.left + r2, d5 = i3 ?? s66.viewState.heightOracle.textHeight >> 1;
  for (let u5 = 0; ; u5 += 10) {
    let p8 = l7 + (d5 + u5) * o2, g8 = vn(s66, { x: f4, y: p8 }, false, o2);
    if (p8 < h6.top || p8 > h6.bottom || (o2 < 0 ? g8 < n3 : g8 > n3)) {
      let b8 = s66.docView.coordsForChar(g8), m10 = !b8 || p8 < b8.top ? -1 : 1;
      return x4.cursor(g8, m10, void 0, r2);
    }
  }
}
function pe5(s66, t3, e) {
  for (; ; ) {
    let i3 = 0;
    for (let n3 of s66) n3.between(t3 - 1, t3 + 1, (o2, r2, l7) => {
      if (t3 > o2 && t3 < r2) {
        let h6 = i3 || e || (t3 - o2 < r2 - t3 ? -1 : 1);
        t3 = h6 < 0 ? o2 : r2, i3 = h6;
      }
    });
    if (!i3) return t3;
  }
}
function Ke3(s66, t3, e) {
  let i3 = pe5(s66.state.facet(Ki).map((n3) => n3(s66)), e.from, t3.head > e.from ? -1 : 1);
  return i3 == e.from ? e : x4.cursor(i3, i3 < e.from ? 1 : -1);
}
var Bt = "￿";
var li = class {
  constructor(t3, e) {
    this.points = t3, this.text = "", this.lineSeparator = e.facet(I4.lineSeparator);
  }
  append(t3) {
    this.text += t3;
  }
  lineBreak() {
    this.text += Bt;
  }
  readRange(t3, e) {
    if (!t3) return this;
    let i3 = t3.parentNode;
    for (let n3 = t3; ; ) {
      this.findPointBefore(i3, n3);
      let o2 = this.text.length;
      this.readNode(n3);
      let r2 = n3.nextSibling;
      if (r2 == e) break;
      let l7 = R3.get(n3), h6 = R3.get(r2);
      (l7 && h6 ? l7.breakAfter : (l7 ? l7.breakAfter : xe4(n3)) || xe4(r2) && (n3.nodeName != "BR" || n3.cmIgnore) && this.text.length > o2) && this.lineBreak(), n3 = r2;
    }
    return this.findPointBefore(i3, e), this;
  }
  readTextNode(t3) {
    let e = t3.nodeValue;
    for (let i3 of this.points) i3.node == t3 && (i3.pos = this.text.length + Math.min(i3.offset, e.length));
    for (let i3 = 0, n3 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let o2 = -1, r2 = 1, l7;
      if (this.lineSeparator ? (o2 = e.indexOf(this.lineSeparator, i3), r2 = this.lineSeparator.length) : (l7 = n3.exec(e)) && (o2 = l7.index, r2 = l7[0].length), this.append(e.slice(i3, o2 < 0 ? e.length : o2)), o2 < 0) break;
      if (this.lineBreak(), r2 > 1) for (let h6 of this.points) h6.node == t3 && h6.pos > this.text.length && (h6.pos -= r2 - 1);
      i3 = o2 + r2;
    }
  }
  readNode(t3) {
    if (t3.cmIgnore) return;
    let e = R3.get(t3), i3 = e && e.overrideDOMText;
    if (i3 != null) {
      this.findPointInside(t3, i3.length);
      for (let n3 = i3.iter(); !n3.next().done; ) n3.lineBreak ? this.lineBreak() : this.append(n3.value);
    } else t3.nodeType == 3 ? this.readTextNode(t3) : t3.nodeName == "BR" ? t3.nextSibling && this.lineBreak() : t3.nodeType == 1 && this.readRange(t3.firstChild, null);
  }
  findPointBefore(t3, e) {
    for (let i3 of this.points) i3.node == t3 && t3.childNodes[i3.offset] == e && (i3.pos = this.text.length);
  }
  findPointInside(t3, e) {
    for (let i3 of this.points) (t3.nodeType == 3 ? i3.node == t3 : t3.contains(i3.node)) && (i3.pos = this.text.length + (Po(t3, i3.node, i3.offset) ? e : 0));
  }
};
function Po(s66, t3, e) {
  for (; ; ) {
    if (!t3 || e < U8(t3)) return false;
    if (t3 == s66) return true;
    e = ut3(t3) + 1, t3 = t3.parentNode;
  }
}
var ke6 = class {
  constructor(t3, e) {
    this.node = t3, this.offset = e, this.pos = -1;
  }
};
var hi = class {
  constructor(t3, e, i3, n3) {
    this.typeOver = n3, this.bounds = null, this.text = "", this.domChanged = e > -1;
    let { impreciseHead: o2, impreciseAnchor: r2 } = t3.docView;
    if (t3.state.readOnly && e > -1) this.newSel = null;
    else if (e > -1 && (this.bounds = t3.docView.domBoundsAround(e, i3, 0))) {
      let l7 = o2 || r2 ? [] : Vo(t3), h6 = new li(l7, t3.state);
      h6.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = h6.text, this.newSel = Fo(l7, this.bounds.from);
    } else {
      let l7 = t3.observer.selectionRange, h6 = o2 && o2.node == l7.focusNode && o2.offset == l7.focusOffset || !Xe5(t3.contentDOM, l7.focusNode) ? t3.state.selection.main.head : t3.docView.posFromDOM(l7.focusNode, l7.focusOffset), c2 = r2 && r2.node == l7.anchorNode && r2.offset == l7.anchorOffset || !Xe5(t3.contentDOM, l7.anchorNode) ? t3.state.selection.main.anchor : t3.docView.posFromDOM(l7.anchorNode, l7.anchorOffset), a7 = t3.viewport;
      if ((y6.ios || y6.chrome) && t3.state.selection.main.empty && h6 != c2 && (a7.from > 0 || a7.to < t3.state.doc.length)) {
        let f4 = Math.min(h6, c2), d5 = Math.max(h6, c2), u5 = a7.from - f4, p8 = a7.to - d5;
        (u5 == 0 || u5 == 1 || f4 == 0) && (p8 == 0 || p8 == -1 || d5 == t3.state.doc.length) && (h6 = 0, c2 = t3.state.doc.length);
      }
      this.newSel = x4.single(c2, h6);
    }
  }
};
function Sn(s66, t3) {
  let e, { newSel: i3 } = t3, n3 = s66.state.selection.main, o2 = s66.inputState.lastKeyTime > Date.now() - 100 ? s66.inputState.lastKeyCode : -1;
  if (t3.bounds) {
    let { from: r2, to: l7 } = t3.bounds, h6 = n3.from, c2 = null;
    (o2 === 8 || y6.android && t3.text.length < l7 - r2) && (h6 = n3.to, c2 = "end");
    let a7 = No(s66.state.doc.sliceString(r2, l7, Bt), t3.text, h6 - r2, c2);
    a7 && (y6.chrome && o2 == 13 && a7.toB == a7.from + 2 && t3.text.slice(a7.from, a7.toB) == Bt + Bt && a7.toB--, e = { from: r2 + a7.from, to: r2 + a7.toA, insert: m7.of(t3.text.slice(a7.from, a7.toB).split(Bt)) });
  } else i3 && (!s66.hasFocus && s66.state.facet(st4) || i3.main.eq(n3)) && (i3 = null);
  if (!e && !i3) return false;
  if (!e && t3.typeOver && !n3.empty && i3 && i3.main.empty ? e = { from: n3.from, to: n3.to, insert: s66.state.doc.slice(n3.from, n3.to) } : e && e.from >= n3.from && e.to <= n3.to && (e.from != n3.from || e.to != n3.to) && n3.to - n3.from - (e.to - e.from) <= 4 ? e = { from: n3.from, to: n3.to, insert: s66.state.doc.slice(n3.from, e.from).append(e.insert).append(s66.state.doc.slice(e.to, n3.to)) } : (y6.mac || y6.android) && e && e.from == e.to && e.from == n3.head - 1 && /^\. ?$/.test(e.insert.toString()) && s66.contentDOM.getAttribute("autocorrect") == "off" ? (i3 && e.insert.length == 2 && (i3 = x4.single(i3.main.anchor - 1, i3.main.head - 1)), e = { from: n3.from, to: n3.to, insert: m7.of([" "]) }) : y6.chrome && e && e.from == e.to && e.from == n3.head && e.insert.toString() == `
 ` && s66.lineWrapping && (i3 && (i3 = x4.single(i3.main.anchor - 1, i3.main.head - 1)), e = { from: n3.from, to: n3.to, insert: m7.of([" "]) }), e) return ji(s66, e, i3, o2);
  if (i3 && !i3.main.eq(n3)) {
    let r2 = false, l7 = "select";
    return s66.inputState.lastSelectionTime > Date.now() - 50 && (s66.inputState.lastSelectionOrigin == "select" && (r2 = true), l7 = s66.inputState.lastSelectionOrigin), s66.dispatch({ selection: i3, scrollIntoView: r2, userEvent: l7 }), true;
  } else return false;
}
function ji(s66, t3, e, i3 = -1) {
  if (y6.ios && s66.inputState.flushIOSKey(t3)) return true;
  let n3 = s66.state.selection.main;
  if (y6.android && (t3.to == n3.to && (t3.from == n3.from || t3.from == n3.from - 1 && s66.state.sliceDoc(t3.from, n3.from) == " ") && t3.insert.length == 1 && t3.insert.lines == 2 && Mt(s66.contentDOM, "Enter", 13) || (t3.from == n3.from - 1 && t3.to == n3.to && t3.insert.length == 0 || i3 == 8 && t3.insert.length < t3.to - t3.from && t3.to > n3.head) && Mt(s66.contentDOM, "Backspace", 8) || t3.from == n3.from && t3.to == n3.to + 1 && t3.insert.length == 0 && Mt(s66.contentDOM, "Delete", 46))) return true;
  let o2 = t3.insert.toString();
  s66.inputState.composing >= 0 && s66.inputState.composing++;
  let r2, l7 = () => r2 || (r2 = Ho(s66, t3, e));
  return s66.state.facet(cn).some((h6) => h6(s66, t3.from, t3.to, o2, l7)) || s66.dispatch(l7()), true;
}
function Ho(s66, t3, e) {
  let i3, n3 = s66.state, o2 = n3.selection.main;
  if (t3.from >= o2.from && t3.to <= o2.to && t3.to - t3.from >= (o2.to - o2.from) / 3 && (!e || e.main.empty && e.main.from == t3.from + t3.insert.length) && s66.inputState.composing < 0) {
    let l7 = o2.from < t3.from ? n3.sliceDoc(o2.from, t3.from) : "", h6 = o2.to > t3.to ? n3.sliceDoc(t3.to, o2.to) : "";
    i3 = n3.replaceSelection(s66.state.toText(l7 + t3.insert.sliceString(0, void 0, s66.state.lineBreak) + h6));
  } else {
    let l7 = n3.changes(t3), h6 = e && e.main.to <= l7.newLength ? e.main : void 0;
    if (n3.selection.ranges.length > 1 && s66.inputState.composing >= 0 && t3.to <= o2.to && t3.to >= o2.to - 10) {
      let c2 = s66.state.sliceDoc(t3.from, t3.to), a7, f4 = e && xn(s66, e.main.head);
      if (f4) {
        let p8 = t3.insert.length - (t3.to - t3.from);
        a7 = { from: f4.from, to: f4.to - p8 };
      } else a7 = s66.state.doc.lineAt(o2.head);
      let d5 = o2.to - t3.to, u5 = o2.to - o2.from;
      i3 = n3.changeByRange((p8) => {
        if (p8.from == o2.from && p8.to == o2.to) return { changes: l7, range: h6 || p8.map(l7) };
        let g8 = p8.to - d5, b8 = g8 - c2.length;
        if (p8.to - p8.from != u5 || s66.state.sliceDoc(b8, g8) != c2 || p8.to >= a7.from && p8.from <= a7.to) return { range: p8 };
        let m10 = n3.changes({ from: b8, to: g8, insert: t3.insert }), w9 = p8.to - o2.to;
        return { changes: m10, range: h6 ? x4.range(Math.max(0, h6.anchor + w9), Math.max(0, h6.head + w9)) : p8.map(m10) };
      });
    } else i3 = { changes: l7, selection: h6 && n3.selection.replaceRange(h6) };
  }
  let r2 = "input.type";
  return (s66.composing || s66.inputState.compositionPendingChange && s66.inputState.compositionEndedAt > Date.now() - 50) && (s66.inputState.compositionPendingChange = false, r2 += ".compose", s66.inputState.compositionFirstChange && (r2 += ".start", s66.inputState.compositionFirstChange = false)), n3.update(i3, { userEvent: r2, scrollIntoView: true });
}
function No(s66, t3, e, i3) {
  let n3 = Math.min(s66.length, t3.length), o2 = 0;
  for (; o2 < n3 && s66.charCodeAt(o2) == t3.charCodeAt(o2); ) o2++;
  if (o2 == n3 && s66.length == t3.length) return null;
  let r2 = s66.length, l7 = t3.length;
  for (; r2 > 0 && l7 > 0 && s66.charCodeAt(r2 - 1) == t3.charCodeAt(l7 - 1); ) r2--, l7--;
  if (i3 == "end") {
    let h6 = Math.max(0, o2 - Math.min(r2, l7));
    e -= r2 + h6 - o2;
  }
  if (r2 < o2 && s66.length < t3.length) {
    let h6 = e <= o2 && e >= r2 ? o2 - e : 0;
    o2 -= h6, l7 = o2 + (l7 - r2), r2 = o2;
  } else if (l7 < o2) {
    let h6 = e <= o2 && e >= l7 ? o2 - e : 0;
    o2 -= h6, r2 = o2 + (r2 - l7), l7 = o2;
  }
  return { from: o2, toA: r2, toB: l7 };
}
function Vo(s66) {
  let t3 = [];
  if (s66.root.activeElement != s66.contentDOM) return t3;
  let { anchorNode: e, anchorOffset: i3, focusNode: n3, focusOffset: o2 } = s66.observer.selectionRange;
  return e && (t3.push(new ke6(e, i3)), (n3 != e || o2 != i3) && t3.push(new ke6(n3, o2))), t3;
}
function Fo(s66, t3) {
  if (s66.length == 0) return null;
  let e = s66[0].pos, i3 = s66.length == 2 ? s66[1].pos : e;
  return e > -1 && i3 > -1 ? x4.single(e + t3, i3 + t3) : null;
}
var ai = class {
  setSelectionOrigin(t3) {
    this.lastSelectionOrigin = t3, this.lastSelectionTime = Date.now();
  }
  constructor(t3) {
    this.view = t3, this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.pendingIOSKey = void 0, this.tabFocusMode = -1, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.handlers = /* @__PURE__ */ Object.create(null), this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.compositionPendingKey = false, this.compositionPendingChange = false, this.mouseSelection = null, this.draggedContent = null, this.handleEvent = this.handleEvent.bind(this), this.notifiedFocused = t3.hasFocus, y6.safari && t3.contentDOM.addEventListener("input", () => null), y6.gecko && Zo(t3.contentDOM.ownerDocument);
  }
  handleEvent(t3) {
    !Yo(this.view, t3) || this.ignoreDuringComposition(t3) || t3.type == "keydown" && this.keydown(t3) || this.runHandlers(t3.type, t3);
  }
  runHandlers(t3, e) {
    let i3 = this.handlers[t3];
    if (i3) {
      for (let n3 of i3.observers) n3(this.view, e);
      for (let n3 of i3.handlers) {
        if (e.defaultPrevented) break;
        if (n3(this.view, e)) {
          e.preventDefault();
          break;
        }
      }
    }
  }
  ensureHandlers(t3) {
    let e = Wo(t3), i3 = this.handlers, n3 = this.view.contentDOM;
    for (let o2 in e) if (o2 != "scroll") {
      let r2 = !e[o2].handlers.length, l7 = i3[o2];
      l7 && r2 != !l7.handlers.length && (n3.removeEventListener(o2, this.handleEvent), l7 = null), l7 || n3.addEventListener(o2, this.handleEvent, { passive: r2 });
    }
    for (let o2 in i3) o2 != "scroll" && !e[o2] && n3.removeEventListener(o2, this.handleEvent);
    this.handlers = e;
  }
  keydown(t3) {
    if (this.lastKeyCode = t3.keyCode, this.lastKeyTime = Date.now(), t3.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode)) return true;
    if (this.tabFocusMode > 0 && t3.keyCode != 27 && Mn.indexOf(t3.keyCode) < 0 && (this.tabFocusMode = -1), y6.android && y6.chrome && !t3.synthetic && (t3.keyCode == 13 || t3.keyCode == 8)) return this.view.observer.delayAndroidKey(t3.key, t3.keyCode), true;
    let e;
    return y6.ios && !t3.synthetic && !t3.altKey && !t3.metaKey && ((e = Cn.find((i3) => i3.keyCode == t3.keyCode)) && !t3.ctrlKey || zo.indexOf(t3.key) > -1 && t3.ctrlKey && !t3.shiftKey) ? (this.pendingIOSKey = e || t3, setTimeout(() => this.flushIOSKey(), 250), true) : (t3.keyCode != 229 && this.view.observer.forceFlush(), false);
  }
  flushIOSKey(t3) {
    let e = this.pendingIOSKey;
    return !e || e.key == "Enter" && t3 && t3.from < t3.to && /^\S+$/.test(t3.insert.toString()) ? false : (this.pendingIOSKey = void 0, Mt(this.view.contentDOM, e.key, e.keyCode, e instanceof KeyboardEvent ? e : void 0));
  }
  ignoreDuringComposition(t3) {
    return /^key/.test(t3.type) ? this.composing > 0 ? true : y6.safari && !y6.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100 ? (this.compositionPendingKey = false, true) : false : false;
  }
  startMouseSelection(t3) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = t3;
  }
  update(t3) {
    this.view.observer.update(t3), this.mouseSelection && this.mouseSelection.update(t3), this.draggedContent && t3.docChanged && (this.draggedContent = this.draggedContent.map(t3.changes)), t3.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
};
function os(s66, t3) {
  return (e, i3) => {
    try {
      return t3.call(s66, i3, e);
    } catch (n3) {
      $2(e.state, n3);
    }
  };
}
function Wo(s66) {
  let t3 = /* @__PURE__ */ Object.create(null);
  function e(i3) {
    return t3[i3] || (t3[i3] = { observers: [], handlers: [] });
  }
  for (let i3 of s66) {
    let n3 = i3.spec;
    if (n3 && n3.domEventHandlers) for (let o2 in n3.domEventHandlers) {
      let r2 = n3.domEventHandlers[o2];
      r2 && e(o2).handlers.push(os(i3.value, r2));
    }
    if (n3 && n3.domEventObservers) for (let o2 in n3.domEventObservers) {
      let r2 = n3.domEventObservers[o2];
      r2 && e(o2).observers.push(os(i3.value, r2));
    }
  }
  for (let i3 in Y6) e(i3).handlers.push(Y6[i3]);
  for (let i3 in K4) e(i3).observers.push(K4[i3]);
  return t3;
}
var Cn = [{ key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" }, { key: "Enter", keyCode: 13, inputType: "insertParagraph" }, { key: "Enter", keyCode: 13, inputType: "insertLineBreak" }, { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }];
var zo = "dthko";
var Mn = [16, 17, 18, 20, 91, 92, 224, 225];
var re5 = 6;
function le4(s66) {
  return Math.max(0, s66) * 0.7 + 8;
}
function Io(s66, t3) {
  return Math.max(Math.abs(s66.clientX - t3.clientX), Math.abs(s66.clientY - t3.clientY));
}
var ci = class {
  constructor(t3, e, i3, n3) {
    this.view = t3, this.startEvent = e, this.style = i3, this.mustSelect = n3, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = e, this.scrollParents = io(t3.contentDOM), this.atoms = t3.state.facet(Ki).map((r2) => r2(t3));
    let o2 = t3.contentDOM.ownerDocument;
    o2.addEventListener("mousemove", this.move = this.move.bind(this)), o2.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = e.shiftKey, this.multiple = t3.state.facet(I4.allowMultipleSelections) && Ko(t3, e), this.dragging = jo(t3, e) && Dn(e) == 1 ? null : false;
  }
  start(t3) {
    this.dragging === false && this.select(t3);
  }
  move(t3) {
    if (t3.buttons == 0) return this.destroy();
    if (this.dragging || this.dragging == null && Io(this.startEvent, t3) < 10) return;
    this.select(this.lastEvent = t3);
    let e = 0, i3 = 0, n3 = 0, o2 = 0, r2 = this.view.win.innerWidth, l7 = this.view.win.innerHeight;
    this.scrollParents.x && ({ left: n3, right: r2 } = this.scrollParents.x.getBoundingClientRect()), this.scrollParents.y && ({ top: o2, bottom: l7 } = this.scrollParents.y.getBoundingClientRect());
    let h6 = qi(this.view);
    t3.clientX - h6.left <= n3 + re5 ? e = -le4(n3 - t3.clientX) : t3.clientX + h6.right >= r2 - re5 && (e = le4(t3.clientX - r2)), t3.clientY - h6.top <= o2 + re5 ? i3 = -le4(o2 - t3.clientY) : t3.clientY + h6.bottom >= l7 - re5 && (i3 = le4(t3.clientY - l7)), this.setScrollSpeed(e, i3);
  }
  up(t3) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || t3.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let t3 = this.view.contentDOM.ownerDocument;
    t3.removeEventListener("mousemove", this.move), t3.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
  }
  setScrollSpeed(t3, e) {
    this.scrollSpeed = { x: t3, y: e }, t3 || e ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    let { x: t3, y: e } = this.scrollSpeed;
    t3 && this.scrollParents.x && (this.scrollParents.x.scrollLeft += t3, t3 = 0), e && this.scrollParents.y && (this.scrollParents.y.scrollTop += e, e = 0), (t3 || e) && this.view.win.scrollBy(t3, e), this.dragging === false && this.select(this.lastEvent);
  }
  skipAtoms(t3) {
    let e = null;
    for (let i3 = 0; i3 < t3.ranges.length; i3++) {
      let n3 = t3.ranges[i3], o2 = null;
      if (n3.empty) {
        let r2 = pe5(this.atoms, n3.from, 0);
        r2 != n3.from && (o2 = x4.cursor(r2, -1));
      } else {
        let r2 = pe5(this.atoms, n3.from, -1), l7 = pe5(this.atoms, n3.to, 1);
        (r2 != n3.from || l7 != n3.to) && (o2 = x4.range(n3.from == n3.anchor ? r2 : l7, n3.from == n3.head ? r2 : l7));
      }
      o2 && (e || (e = t3.ranges.slice()), e[i3] = o2);
    }
    return e ? x4.create(e, t3.mainIndex) : t3;
  }
  select(t3) {
    let { view: e } = this, i3 = this.skipAtoms(this.style.get(t3, this.extend, this.multiple));
    (this.mustSelect || !i3.eq(e.state.selection, this.dragging === false)) && this.view.dispatch({ selection: i3, userEvent: "select.pointer" }), this.mustSelect = false;
  }
  update(t3) {
    t3.transactions.some((e) => e.isUserEvent("input.type")) ? this.destroy() : this.style.update(t3) && setTimeout(() => this.select(this.lastEvent), 20);
  }
};
function Ko(s66, t3) {
  let e = s66.state.facet(rn);
  return e.length ? e[0](t3) : y6.mac ? t3.metaKey : t3.ctrlKey;
}
function qo(s66, t3) {
  let e = s66.state.facet(ln);
  return e.length ? e[0](t3) : y6.mac ? !t3.altKey : !t3.ctrlKey;
}
function jo(s66, t3) {
  let { main: e } = s66.state.selection;
  if (e.empty) return false;
  let i3 = jt(s66.root);
  if (!i3 || i3.rangeCount == 0) return true;
  let n3 = i3.getRangeAt(0).getClientRects();
  for (let o2 = 0; o2 < n3.length; o2++) {
    let r2 = n3[o2];
    if (r2.left <= t3.clientX && r2.right >= t3.clientX && r2.top <= t3.clientY && r2.bottom >= t3.clientY) return true;
  }
  return false;
}
function Yo(s66, t3) {
  if (!t3.bubbles) return true;
  if (t3.defaultPrevented) return false;
  for (let e = t3.target, i3; e != s66.contentDOM; e = e.parentNode) if (!e || e.nodeType == 11 || (i3 = R3.get(e)) && i3.ignoreEvent(t3)) return false;
  return true;
}
var Y6 = /* @__PURE__ */ Object.create(null);
var K4 = /* @__PURE__ */ Object.create(null);
var kn = y6.ie && y6.ie_version < 15 || y6.ios && y6.webkit_version < 604;
function _o(s66) {
  let t3 = s66.dom.parentNode;
  if (!t3) return;
  let e = t3.appendChild(document.createElement("textarea"));
  e.style.cssText = "position: fixed; left: -10000px; top: 10px", e.focus(), setTimeout(() => {
    s66.focus(), e.remove(), An(s66, e.value);
  }, 50);
}
function Fe6(s66, t3, e) {
  for (let i3 of s66.facet(t3)) e = i3(e, s66);
  return e;
}
function An(s66, t3) {
  t3 = Fe6(s66.state, zi, t3);
  let { state: e } = s66, i3, n3 = 1, o2 = e.toText(t3), r2 = o2.lines == e.selection.ranges.length;
  if (fi != null && e.selection.ranges.every((h6) => h6.empty) && fi == o2.toString()) {
    let h6 = -1;
    i3 = e.changeByRange((c2) => {
      let a7 = e.doc.lineAt(c2.from);
      if (a7.from == h6) return { range: c2 };
      h6 = a7.from;
      let f4 = e.toText((r2 ? o2.line(n3++).text : t3) + e.lineBreak);
      return { changes: { from: a7.from, insert: f4 }, range: x4.cursor(c2.from + f4.length) };
    });
  } else r2 ? i3 = e.changeByRange((h6) => {
    let c2 = o2.line(n3++);
    return { changes: { from: h6.from, to: h6.to, insert: c2.text }, range: x4.cursor(h6.from + c2.length) };
  }) : i3 = e.replaceSelection(o2);
  s66.dispatch(i3, { userEvent: "input.paste", scrollIntoView: true });
}
K4.scroll = (s66) => {
  s66.inputState.lastScrollTop = s66.scrollDOM.scrollTop, s66.inputState.lastScrollLeft = s66.scrollDOM.scrollLeft;
};
Y6.keydown = (s66, t3) => (s66.inputState.setSelectionOrigin("select"), t3.keyCode == 27 && s66.inputState.tabFocusMode != 0 && (s66.inputState.tabFocusMode = Date.now() + 2e3), false);
K4.touchstart = (s66, t3) => {
  s66.inputState.lastTouchTime = Date.now(), s66.inputState.setSelectionOrigin("select.pointer");
};
K4.touchmove = (s66) => {
  s66.inputState.setSelectionOrigin("select.pointer");
};
Y6.mousedown = (s66, t3) => {
  if (s66.observer.flush(), s66.inputState.lastTouchTime > Date.now() - 2e3) return false;
  let e = null;
  for (let i3 of s66.state.facet(hn)) if (e = i3(s66, t3), e) break;
  if (!e && t3.button == 0 && (e = $o(s66, t3)), e) {
    let i3 = !s66.hasFocus;
    s66.inputState.startMouseSelection(new ci(s66, t3, e, i3)), i3 && s66.observer.ignore(() => {
      Ws(s66.contentDOM);
      let o2 = s66.root.activeElement;
      o2 && !o2.contains(s66.contentDOM) && o2.blur();
    });
    let n3 = s66.inputState.mouseSelection;
    if (n3) return n3.start(t3), n3.dragging === false;
  }
  return false;
};
function rs(s66, t3, e, i3) {
  if (i3 == 1) return x4.cursor(t3, e);
  if (i3 == 2) return Ao(s66.state, t3, e);
  {
    let n3 = P4.find(s66.docView, t3), o2 = s66.state.doc.lineAt(n3 ? n3.posAtEnd : t3), r2 = n3 ? n3.posAtStart : o2.from, l7 = n3 ? n3.posAtEnd : o2.to;
    return l7 < s66.state.doc.length && l7 == o2.to && l7++, x4.range(r2, l7);
  }
}
var ls = (s66, t3, e) => t3 >= e.top && t3 <= e.bottom && s66 >= e.left && s66 <= e.right;
function Xo(s66, t3, e, i3) {
  let n3 = P4.find(s66.docView, t3);
  if (!n3) return 1;
  let o2 = t3 - n3.posAtStart;
  if (o2 == 0) return 1;
  if (o2 == n3.length) return -1;
  let r2 = n3.coordsAt(o2, -1);
  if (r2 && ls(e, i3, r2)) return -1;
  let l7 = n3.coordsAt(o2, 1);
  return l7 && ls(e, i3, l7) ? 1 : r2 && r2.bottom >= i3 ? -1 : 1;
}
function hs(s66, t3) {
  let e = s66.posAtCoords({ x: t3.clientX, y: t3.clientY }, false);
  return { pos: e, bias: Xo(s66, e, t3.clientX, t3.clientY) };
}
var Go = y6.ie && y6.ie_version <= 11;
var as = null;
var cs = 0;
var fs = 0;
function Dn(s66) {
  if (!Go) return s66.detail;
  let t3 = as, e = fs;
  return as = s66, fs = Date.now(), cs = !t3 || e > Date.now() - 400 && Math.abs(t3.clientX - s66.clientX) < 2 && Math.abs(t3.clientY - s66.clientY) < 2 ? (cs + 1) % 3 : 1;
}
function $o(s66, t3) {
  let e = hs(s66, t3), i3 = Dn(t3), n3 = s66.state.selection;
  return { update(o2) {
    o2.docChanged && (e.pos = o2.changes.mapPos(e.pos), n3 = n3.map(o2.changes));
  }, get(o2, r2, l7) {
    let h6 = hs(s66, o2), c2, a7 = rs(s66, h6.pos, h6.bias, i3);
    if (e.pos != h6.pos && !r2) {
      let f4 = rs(s66, e.pos, e.bias, i3), d5 = Math.min(f4.from, a7.from), u5 = Math.max(f4.to, a7.to);
      a7 = d5 < a7.from ? x4.range(d5, u5) : x4.range(u5, d5);
    }
    return r2 ? n3.replaceRange(n3.main.extend(a7.from, a7.to)) : l7 && i3 == 1 && n3.ranges.length > 1 && (c2 = Uo(n3, h6.pos)) ? c2 : l7 ? n3.addRange(a7) : x4.create([a7]);
  } };
}
function Uo(s66, t3) {
  for (let e = 0; e < s66.ranges.length; e++) {
    let { from: i3, to: n3 } = s66.ranges[e];
    if (i3 <= t3 && n3 >= t3) return x4.create(s66.ranges.slice(0, e).concat(s66.ranges.slice(e + 1)), s66.mainIndex == e ? 0 : s66.mainIndex - (s66.mainIndex > e ? 1 : 0));
  }
  return null;
}
Y6.dragstart = (s66, t3) => {
  let { selection: { main: e } } = s66.state;
  if (t3.target.draggable) {
    let n3 = s66.docView.nearest(t3.target);
    if (n3 && n3.isWidget) {
      let o2 = n3.posAtStart, r2 = o2 + n3.length;
      (o2 >= e.to || r2 <= e.from) && (e = x4.range(o2, r2));
    }
  }
  let { inputState: i3 } = s66;
  return i3.mouseSelection && (i3.mouseSelection.dragging = true), i3.draggedContent = e, t3.dataTransfer && (t3.dataTransfer.setData("Text", Fe6(s66.state, Ii, s66.state.sliceDoc(e.from, e.to))), t3.dataTransfer.effectAllowed = "copyMove"), false;
};
Y6.dragend = (s66) => (s66.inputState.draggedContent = null, false);
function ds(s66, t3, e, i3) {
  if (e = Fe6(s66.state, zi, e), !e) return;
  let n3 = s66.posAtCoords({ x: t3.clientX, y: t3.clientY }, false), { draggedContent: o2 } = s66.inputState, r2 = i3 && o2 && qo(s66, t3) ? { from: o2.from, to: o2.to } : null, l7 = { from: n3, insert: e }, h6 = s66.state.changes(r2 ? [r2, l7] : l7);
  s66.focus(), s66.dispatch({ changes: h6, selection: { anchor: h6.mapPos(n3, -1), head: h6.mapPos(n3, 1) }, userEvent: r2 ? "move.drop" : "input.drop" }), s66.inputState.draggedContent = null;
}
Y6.drop = (s66, t3) => {
  if (!t3.dataTransfer) return false;
  if (s66.state.readOnly) return true;
  let e = t3.dataTransfer.files;
  if (e && e.length) {
    let i3 = Array(e.length), n3 = 0, o2 = () => {
      ++n3 == e.length && ds(s66, t3, i3.filter((r2) => r2 != null).join(s66.state.lineBreak), false);
    };
    for (let r2 = 0; r2 < e.length; r2++) {
      let l7 = new FileReader();
      l7.onerror = o2, l7.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l7.result) || (i3[r2] = l7.result), o2();
      }, l7.readAsText(e[r2]);
    }
    return true;
  } else {
    let i3 = t3.dataTransfer.getData("Text");
    if (i3) return ds(s66, t3, i3, true), true;
  }
  return false;
};
Y6.paste = (s66, t3) => {
  if (s66.state.readOnly) return true;
  s66.observer.flush();
  let e = kn ? null : t3.clipboardData;
  return e ? (An(s66, e.getData("text/plain") || e.getData("text/uri-list")), true) : (_o(s66), false);
};
function Qo(s66, t3) {
  let e = s66.dom.parentNode;
  if (!e) return;
  let i3 = e.appendChild(document.createElement("textarea"));
  i3.style.cssText = "position: fixed; left: -10000px; top: 10px", i3.value = t3, i3.focus(), i3.selectionEnd = t3.length, i3.selectionStart = 0, setTimeout(() => {
    i3.remove(), s66.focus();
  }, 50);
}
function Jo(s66) {
  let t3 = [], e = [], i3 = false;
  for (let n3 of s66.selection.ranges) n3.empty || (t3.push(s66.sliceDoc(n3.from, n3.to)), e.push(n3));
  if (!t3.length) {
    let n3 = -1;
    for (let { from: o2 } of s66.selection.ranges) {
      let r2 = s66.doc.lineAt(o2);
      r2.number > n3 && (t3.push(r2.text), e.push({ from: r2.from, to: Math.min(s66.doc.length, r2.to + 1) })), n3 = r2.number;
    }
    i3 = true;
  }
  return { text: Fe6(s66, Ii, t3.join(s66.lineBreak)), ranges: e, linewise: i3 };
}
var fi = null;
Y6.copy = Y6.cut = (s66, t3) => {
  let { text: e, ranges: i3, linewise: n3 } = Jo(s66.state);
  if (!e && !n3) return false;
  fi = n3 ? e : null, t3.type == "cut" && !s66.state.readOnly && s66.dispatch({ changes: i3, scrollIntoView: true, userEvent: "delete.cut" });
  let o2 = kn ? null : t3.clipboardData;
  return o2 ? (o2.clearData(), o2.setData("text/plain", e), true) : (Qo(s66, e), false);
};
var On = J4.define();
function Tn(s66, t3) {
  let e = [];
  for (let i3 of s66.facet(fn)) {
    let n3 = i3(s66, t3);
    n3 && e.push(n3);
  }
  return e ? s66.update({ effects: e, annotations: On.of(true) }) : null;
}
function Rn(s66) {
  setTimeout(() => {
    let t3 = s66.hasFocus;
    if (t3 != s66.inputState.notifiedFocused) {
      let e = Tn(s66.state, t3);
      e ? s66.dispatch(e) : s66.update([]);
    }
  }, 10);
}
K4.focus = (s66) => {
  s66.inputState.lastFocusTime = Date.now(), !s66.scrollDOM.scrollTop && (s66.inputState.lastScrollTop || s66.inputState.lastScrollLeft) && (s66.scrollDOM.scrollTop = s66.inputState.lastScrollTop, s66.scrollDOM.scrollLeft = s66.inputState.lastScrollLeft), Rn(s66);
};
K4.blur = (s66) => {
  s66.observer.clearSelectionRange(), Rn(s66);
};
K4.compositionstart = K4.compositionupdate = (s66) => {
  s66.observer.editContext || (s66.inputState.compositionFirstChange == null && (s66.inputState.compositionFirstChange = true), s66.inputState.composing < 0 && (s66.inputState.composing = 0));
};
K4.compositionend = (s66) => {
  s66.observer.editContext || (s66.inputState.composing = -1, s66.inputState.compositionEndedAt = Date.now(), s66.inputState.compositionPendingKey = true, s66.inputState.compositionPendingChange = s66.observer.pendingRecords().length > 0, s66.inputState.compositionFirstChange = null, y6.chrome && y6.android ? s66.observer.flushSoon() : s66.inputState.compositionPendingChange ? Promise.resolve().then(() => s66.observer.flush()) : setTimeout(() => {
    s66.inputState.composing < 0 && s66.docView.hasComposition && s66.update([]);
  }, 50));
};
K4.contextmenu = (s66) => {
  s66.inputState.lastContextMenu = Date.now();
};
Y6.beforeinput = (s66, t3) => {
  var e, i3;
  if (t3.inputType == "insertReplacementText" && s66.observer.editContext) {
    let o2 = (e = t3.dataTransfer) === null || e === void 0 ? void 0 : e.getData("text/plain"), r2 = t3.getTargetRanges();
    if (o2 && r2.length) {
      let l7 = r2[0], h6 = s66.posAtDOM(l7.startContainer, l7.startOffset), c2 = s66.posAtDOM(l7.endContainer, l7.endOffset);
      return ji(s66, { from: h6, to: c2, insert: s66.state.toText(o2) }, null), true;
    }
  }
  let n3;
  if (y6.chrome && y6.android && (n3 = Cn.find((o2) => o2.inputType == t3.inputType)) && (s66.observer.delayAndroidKey(n3.key, n3.keyCode), n3.key == "Backspace" || n3.key == "Delete")) {
    let o2 = ((i3 = window.visualViewport) === null || i3 === void 0 ? void 0 : i3.height) || 0;
    setTimeout(() => {
      var r2;
      (((r2 = window.visualViewport) === null || r2 === void 0 ? void 0 : r2.height) || 0) > o2 + 10 && s66.hasFocus && (s66.contentDOM.blur(), s66.focus());
    }, 100);
  }
  return y6.ios && t3.inputType == "deleteContentForward" && s66.observer.flushSoon(), y6.safari && t3.inputType == "insertText" && s66.inputState.composing >= 0 && setTimeout(() => K4.compositionend(s66, t3), 20), false;
};
var us = /* @__PURE__ */ new Set();
function Zo(s66) {
  us.has(s66) || (us.add(s66), s66.addEventListener("copy", () => {
  }), s66.addEventListener("cut", () => {
  }));
}
var ps = ["pre-wrap", "normal", "pre-line", "break-spaces"];
var mt = false;
function di() {
  mt = false;
}
var Ae4 = class {
  constructor(t3) {
    this.lineWrapping = t3, this.doc = m7.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.textHeight = 14, this.lineLength = 30;
  }
  heightForGap(t3, e) {
    let i3 = this.doc.lineAt(e).number - this.doc.lineAt(t3).number + 1;
    return this.lineWrapping && (i3 += Math.max(0, Math.ceil((e - t3 - i3 * this.lineLength * 0.5) / this.lineLength))), this.lineHeight * i3;
  }
  heightForLine(t3) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((t3 - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(t3) {
    return this.doc = t3, this;
  }
  mustRefreshForWrapping(t3) {
    return ps.indexOf(t3) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(t3) {
    let e = false;
    for (let i3 = 0; i3 < t3.length; i3++) {
      let n3 = t3[i3];
      n3 < 0 ? i3++ : this.heightSamples[Math.floor(n3 * 10)] || (e = true, this.heightSamples[Math.floor(n3 * 10)] = true);
    }
    return e;
  }
  refresh(t3, e, i3, n3, o2, r2) {
    let l7 = ps.indexOf(t3) > -1, h6 = Math.round(e) != Math.round(this.lineHeight) || this.lineWrapping != l7;
    if (this.lineWrapping = l7, this.lineHeight = e, this.charWidth = i3, this.textHeight = n3, this.lineLength = o2, h6) {
      this.heightSamples = {};
      for (let c2 = 0; c2 < r2.length; c2++) {
        let a7 = r2[c2];
        a7 < 0 ? c2++ : this.heightSamples[Math.floor(a7 * 10)] = true;
      }
    }
    return h6;
  }
};
var De5 = class {
  constructor(t3, e) {
    this.from = t3, this.heights = e, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
};
var X5 = class s36 {
  constructor(t3, e, i3, n3, o2) {
    this.from = t3, this.length = e, this.top = i3, this.height = n3, this._content = o2;
  }
  get type() {
    return typeof this._content == "number" ? F6.Text : Array.isArray(this._content) ? this._content : this._content.type;
  }
  get to() {
    return this.from + this.length;
  }
  get bottom() {
    return this.top + this.height;
  }
  get widget() {
    return this._content instanceof ht4 ? this._content.widget : null;
  }
  get widgetLineBreaks() {
    return typeof this._content == "number" ? this._content : 0;
  }
  join(t3) {
    let e = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(t3._content) ? t3._content : [t3]);
    return new s36(this.from, this.length + t3.length, this.top, this.height + t3.height, e);
  }
};
var T3 = function(s66) {
  return s66[s66.ByPos = 0] = "ByPos", s66[s66.ByHeight = 1] = "ByHeight", s66[s66.ByPosNoHeight = 2] = "ByPosNoHeight", s66;
}(T3 || (T3 = {}));
var ge8 = 1e-3;
var z7 = class s37 {
  constructor(t3, e, i3 = 2) {
    this.length = t3, this.height = e, this.flags = i3;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(t3) {
    this.flags = (t3 ? 2 : 0) | this.flags & -3;
  }
  setHeight(t3) {
    this.height != t3 && (Math.abs(this.height - t3) > ge8 && (mt = true), this.height = t3);
  }
  replace(t3, e, i3) {
    return s37.of(i3);
  }
  decomposeLeft(t3, e) {
    e.push(this);
  }
  decomposeRight(t3, e) {
    e.push(this);
  }
  applyChanges(t3, e, i3, n3) {
    let o2 = this, r2 = i3.doc;
    for (let l7 = n3.length - 1; l7 >= 0; l7--) {
      let { fromA: h6, toA: c2, fromB: a7, toB: f4 } = n3[l7], d5 = o2.lineAt(h6, T3.ByPosNoHeight, i3.setDoc(e), 0, 0), u5 = d5.to >= c2 ? d5 : o2.lineAt(c2, T3.ByPosNoHeight, i3, 0, 0);
      for (f4 += u5.to - c2, c2 = u5.to; l7 > 0 && d5.from <= n3[l7 - 1].toA; ) h6 = n3[l7 - 1].fromA, a7 = n3[l7 - 1].fromB, l7--, h6 < d5.from && (d5 = o2.lineAt(h6, T3.ByPosNoHeight, i3, 0, 0));
      a7 += d5.from - h6, h6 = d5.from;
      let p8 = pi.build(i3.setDoc(r2), t3, a7, f4);
      o2 = Oe6(o2, o2.replace(h6, c2, p8));
    }
    return o2.updateHeight(i3, 0);
  }
  static empty() {
    return new I5(0, 0);
  }
  static of(t3) {
    if (t3.length == 1) return t3[0];
    let e = 0, i3 = t3.length, n3 = 0, o2 = 0;
    for (; ; ) if (e == i3) if (n3 > o2 * 2) {
      let l7 = t3[e - 1];
      l7.break ? t3.splice(--e, 1, l7.left, null, l7.right) : t3.splice(--e, 1, l7.left, l7.right), i3 += 1 + l7.break, n3 -= l7.size;
    } else if (o2 > n3 * 2) {
      let l7 = t3[i3];
      l7.break ? t3.splice(i3, 1, l7.left, null, l7.right) : t3.splice(i3, 1, l7.left, l7.right), i3 += 2 + l7.break, o2 -= l7.size;
    } else break;
    else if (n3 < o2) {
      let l7 = t3[e++];
      l7 && (n3 += l7.size);
    } else {
      let l7 = t3[--i3];
      l7 && (o2 += l7.size);
    }
    let r2 = 0;
    return t3[e - 1] == null ? (r2 = 1, e--) : t3[e] == null && (r2 = 1, i3++), new ui(s37.of(t3.slice(0, e)), r2, s37.of(t3.slice(i3)));
  }
};
function Oe6(s66, t3) {
  return s66 == t3 ? s66 : (s66.constructor != t3.constructor && (mt = true), t3);
}
z7.prototype.size = 1;
var Te6 = class extends z7 {
  constructor(t3, e, i3) {
    super(t3, e), this.deco = i3;
  }
  blockAt(t3, e, i3, n3) {
    return new X5(n3, this.length, i3, this.height, this.deco || 0);
  }
  lineAt(t3, e, i3, n3, o2) {
    return this.blockAt(0, i3, n3, o2);
  }
  forEachLine(t3, e, i3, n3, o2, r2) {
    t3 <= o2 + this.length && e >= o2 && r2(this.blockAt(0, i3, n3, o2));
  }
  updateHeight(t3, e = 0, i3 = false, n3) {
    return n3 && n3.from <= e && n3.more && this.setHeight(n3.heights[n3.index++]), this.outdated = false, this;
  }
  toString() {
    return `block(${this.length})`;
  }
};
var I5 = class s38 extends Te6 {
  constructor(t3, e) {
    super(t3, e, null), this.collapsed = 0, this.widgetHeight = 0, this.breaks = 0;
  }
  blockAt(t3, e, i3, n3) {
    return new X5(n3, this.length, i3, this.height, this.breaks);
  }
  replace(t3, e, i3) {
    let n3 = i3[0];
    return i3.length == 1 && (n3 instanceof s38 || n3 instanceof ot3 && n3.flags & 4) && Math.abs(this.length - n3.length) < 10 ? (n3 instanceof ot3 ? n3 = new s38(n3.length, this.height) : n3.height = this.height, this.outdated || (n3.outdated = false), n3) : z7.of(i3);
  }
  updateHeight(t3, e = 0, i3 = false, n3) {
    return n3 && n3.from <= e && n3.more ? this.setHeight(n3.heights[n3.index++]) : (i3 || this.outdated) && this.setHeight(Math.max(this.widgetHeight, t3.heightForLine(this.length - this.collapsed)) + this.breaks * t3.lineHeight), this.outdated = false, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
};
var ot3 = class s39 extends z7 {
  constructor(t3) {
    super(t3, 0);
  }
  heightMetrics(t3, e) {
    let i3 = t3.doc.lineAt(e).number, n3 = t3.doc.lineAt(e + this.length).number, o2 = n3 - i3 + 1, r2, l7 = 0;
    if (t3.lineWrapping) {
      let h6 = Math.min(this.height, t3.lineHeight * o2);
      r2 = h6 / o2, this.length > o2 + 1 && (l7 = (this.height - h6) / (this.length - o2 - 1));
    } else r2 = this.height / o2;
    return { firstLine: i3, lastLine: n3, perLine: r2, perChar: l7 };
  }
  blockAt(t3, e, i3, n3) {
    let { firstLine: o2, lastLine: r2, perLine: l7, perChar: h6 } = this.heightMetrics(e, n3);
    if (e.lineWrapping) {
      let c2 = n3 + (t3 < e.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (t3 - i3) / this.height)) * this.length)), a7 = e.doc.lineAt(c2), f4 = l7 + a7.length * h6, d5 = Math.max(i3, t3 - f4 / 2);
      return new X5(a7.from, a7.length, d5, f4, 0);
    } else {
      let c2 = Math.max(0, Math.min(r2 - o2, Math.floor((t3 - i3) / l7))), { from: a7, length: f4 } = e.doc.line(o2 + c2);
      return new X5(a7, f4, i3 + l7 * c2, l7, 0);
    }
  }
  lineAt(t3, e, i3, n3, o2) {
    if (e == T3.ByHeight) return this.blockAt(t3, i3, n3, o2);
    if (e == T3.ByPosNoHeight) {
      let { from: u5, to: p8 } = i3.doc.lineAt(t3);
      return new X5(u5, p8 - u5, 0, 0, 0);
    }
    let { firstLine: r2, perLine: l7, perChar: h6 } = this.heightMetrics(i3, o2), c2 = i3.doc.lineAt(t3), a7 = l7 + c2.length * h6, f4 = c2.number - r2, d5 = n3 + l7 * f4 + h6 * (c2.from - o2 - f4);
    return new X5(c2.from, c2.length, Math.max(n3, Math.min(d5, n3 + this.height - a7)), a7, 0);
  }
  forEachLine(t3, e, i3, n3, o2, r2) {
    t3 = Math.max(t3, o2), e = Math.min(e, o2 + this.length);
    let { firstLine: l7, perLine: h6, perChar: c2 } = this.heightMetrics(i3, o2);
    for (let a7 = t3, f4 = n3; a7 <= e; ) {
      let d5 = i3.doc.lineAt(a7);
      if (a7 == t3) {
        let p8 = d5.number - l7;
        f4 += h6 * p8 + c2 * (t3 - o2 - p8);
      }
      let u5 = h6 + c2 * d5.length;
      r2(new X5(d5.from, d5.length, f4, u5, 0)), f4 += u5, a7 = d5.to + 1;
    }
  }
  replace(t3, e, i3) {
    let n3 = this.length - e;
    if (n3 > 0) {
      let o2 = i3[i3.length - 1];
      o2 instanceof s39 ? i3[i3.length - 1] = new s39(o2.length + n3) : i3.push(null, new s39(n3 - 1));
    }
    if (t3 > 0) {
      let o2 = i3[0];
      o2 instanceof s39 ? i3[0] = new s39(t3 + o2.length) : i3.unshift(new s39(t3 - 1), null);
    }
    return z7.of(i3);
  }
  decomposeLeft(t3, e) {
    e.push(new s39(t3 - 1), null);
  }
  decomposeRight(t3, e) {
    e.push(null, new s39(this.length - t3 - 1));
  }
  updateHeight(t3, e = 0, i3 = false, n3) {
    let o2 = e + this.length;
    if (n3 && n3.from <= e + this.length && n3.more) {
      let r2 = [], l7 = Math.max(e, n3.from), h6 = -1;
      for (n3.from > e && r2.push(new s39(n3.from - e - 1).updateHeight(t3, e)); l7 <= o2 && n3.more; ) {
        let a7 = t3.doc.lineAt(l7).length;
        r2.length && r2.push(null);
        let f4 = n3.heights[n3.index++];
        h6 == -1 ? h6 = f4 : Math.abs(f4 - h6) >= ge8 && (h6 = -2);
        let d5 = new I5(a7, f4);
        d5.outdated = false, r2.push(d5), l7 += a7 + 1;
      }
      l7 <= o2 && r2.push(null, new s39(o2 - l7).updateHeight(t3, l7));
      let c2 = z7.of(r2);
      return (h6 < 0 || Math.abs(c2.height - this.height) >= ge8 || Math.abs(h6 - this.heightMetrics(t3, e).perLine) >= ge8) && (mt = true), Oe6(this, c2);
    } else (i3 || this.outdated) && (this.setHeight(t3.heightForGap(e, e + this.length)), this.outdated = false);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
};
var ui = class extends z7 {
  constructor(t3, e, i3) {
    super(t3.length + e + i3.length, t3.height + i3.height, e | (t3.outdated || i3.outdated ? 2 : 0)), this.left = t3, this.right = i3, this.size = t3.size + i3.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(t3, e, i3, n3) {
    let o2 = i3 + this.left.height;
    return t3 < o2 ? this.left.blockAt(t3, e, i3, n3) : this.right.blockAt(t3, e, o2, n3 + this.left.length + this.break);
  }
  lineAt(t3, e, i3, n3, o2) {
    let r2 = n3 + this.left.height, l7 = o2 + this.left.length + this.break, h6 = e == T3.ByHeight ? t3 < r2 : t3 < l7, c2 = h6 ? this.left.lineAt(t3, e, i3, n3, o2) : this.right.lineAt(t3, e, i3, r2, l7);
    if (this.break || (h6 ? c2.to < l7 : c2.from > l7)) return c2;
    let a7 = e == T3.ByPosNoHeight ? T3.ByPosNoHeight : T3.ByPos;
    return h6 ? c2.join(this.right.lineAt(l7, a7, i3, r2, l7)) : this.left.lineAt(l7, a7, i3, n3, o2).join(c2);
  }
  forEachLine(t3, e, i3, n3, o2, r2) {
    let l7 = n3 + this.left.height, h6 = o2 + this.left.length + this.break;
    if (this.break) t3 < h6 && this.left.forEachLine(t3, e, i3, n3, o2, r2), e >= h6 && this.right.forEachLine(t3, e, i3, l7, h6, r2);
    else {
      let c2 = this.lineAt(h6, T3.ByPos, i3, n3, o2);
      t3 < c2.from && this.left.forEachLine(t3, c2.from - 1, i3, n3, o2, r2), c2.to >= t3 && c2.from <= e && r2(c2), e > c2.to && this.right.forEachLine(c2.to + 1, e, i3, l7, h6, r2);
    }
  }
  replace(t3, e, i3) {
    let n3 = this.left.length + this.break;
    if (e < n3) return this.balanced(this.left.replace(t3, e, i3), this.right);
    if (t3 > this.left.length) return this.balanced(this.left, this.right.replace(t3 - n3, e - n3, i3));
    let o2 = [];
    t3 > 0 && this.decomposeLeft(t3, o2);
    let r2 = o2.length;
    for (let l7 of i3) o2.push(l7);
    if (t3 > 0 && gs(o2, r2 - 1), e < this.length) {
      let l7 = o2.length;
      this.decomposeRight(e, o2), gs(o2, l7);
    }
    return z7.of(o2);
  }
  decomposeLeft(t3, e) {
    let i3 = this.left.length;
    if (t3 <= i3) return this.left.decomposeLeft(t3, e);
    e.push(this.left), this.break && (i3++, t3 >= i3 && e.push(null)), t3 > i3 && this.right.decomposeLeft(t3 - i3, e);
  }
  decomposeRight(t3, e) {
    let i3 = this.left.length, n3 = i3 + this.break;
    if (t3 >= n3) return this.right.decomposeRight(t3 - n3, e);
    t3 < i3 && this.left.decomposeRight(t3, e), this.break && t3 < n3 && e.push(null), e.push(this.right);
  }
  balanced(t3, e) {
    return t3.size > 2 * e.size || e.size > 2 * t3.size ? z7.of(this.break ? [t3, null, e] : [t3, e]) : (this.left = Oe6(this.left, t3), this.right = Oe6(this.right, e), this.setHeight(t3.height + e.height), this.outdated = t3.outdated || e.outdated, this.size = t3.size + e.size, this.length = t3.length + this.break + e.length, this);
  }
  updateHeight(t3, e = 0, i3 = false, n3) {
    let { left: o2, right: r2 } = this, l7 = e + o2.length + this.break, h6 = null;
    return n3 && n3.from <= e + o2.length && n3.more ? h6 = o2 = o2.updateHeight(t3, e, i3, n3) : o2.updateHeight(t3, e, i3), n3 && n3.from <= l7 + r2.length && n3.more ? h6 = r2 = r2.updateHeight(t3, l7, i3, n3) : r2.updateHeight(t3, l7, i3), h6 ? this.balanced(o2, r2) : (this.height = this.left.height + this.right.height, this.outdated = false, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
};
function gs(s66, t3) {
  let e, i3;
  s66[t3] == null && (e = s66[t3 - 1]) instanceof ot3 && (i3 = s66[t3 + 1]) instanceof ot3 && s66.splice(t3 - 1, 3, new ot3(e.length + 1 + i3.length));
}
var tr = 5;
var pi = class s40 {
  constructor(t3, e) {
    this.pos = t3, this.oracle = e, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = t3;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(t3, e) {
    if (this.lineStart > -1) {
      let i3 = Math.min(e, this.lineEnd), n3 = this.nodes[this.nodes.length - 1];
      n3 instanceof I5 ? n3.length += i3 - this.pos : (i3 > this.pos || !this.isCovered) && this.nodes.push(new I5(i3 - this.pos, -1)), this.writtenTo = i3, e > i3 && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = e;
  }
  point(t3, e, i3) {
    if (t3 < e || i3.heightRelevant) {
      let n3 = i3.widget ? i3.widget.estimatedHeight : 0, o2 = i3.widget ? i3.widget.lineBreaks : 0;
      n3 < 0 && (n3 = this.oracle.lineHeight);
      let r2 = e - t3;
      i3.block ? this.addBlock(new Te6(r2, n3, i3)) : (r2 || o2 || n3 >= tr) && this.addLineDeco(n3, o2, r2);
    } else e > t3 && this.span(t3, e);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1) return;
    let { from: t3, to: e } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = t3, this.lineEnd = e, this.writtenTo < t3 && ((this.writtenTo < t3 - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, t3 - 1)), this.nodes.push(null)), this.pos > t3 && this.nodes.push(new I5(this.pos - t3, -1)), this.writtenTo = this.pos;
  }
  blankContent(t3, e) {
    let i3 = new ot3(e - t3);
    return this.oracle.doc.lineAt(t3).to == e && (i3.flags |= 4), i3;
  }
  ensureLine() {
    this.enterLine();
    let t3 = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (t3 instanceof I5) return t3;
    let e = new I5(0, -1);
    return this.nodes.push(e), e;
  }
  addBlock(t3) {
    this.enterLine();
    let e = t3.deco;
    e && e.startSide > 0 && !this.isCovered && this.ensureLine(), this.nodes.push(t3), this.writtenTo = this.pos = this.pos + t3.length, e && e.endSide > 0 && (this.covering = t3);
  }
  addLineDeco(t3, e, i3) {
    let n3 = this.ensureLine();
    n3.length += i3, n3.collapsed += i3, n3.widgetHeight = Math.max(n3.widgetHeight, t3), n3.breaks += e, this.writtenTo = this.pos = this.pos + i3;
  }
  finish(t3) {
    let e = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(e instanceof I5) && !this.isCovered ? this.nodes.push(new I5(0, -1)) : (this.writtenTo < this.pos || e == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i3 = t3;
    for (let n3 of this.nodes) n3 instanceof I5 && n3.updateHeight(this.oracle, i3), i3 += n3 ? n3.length : 1;
    return this.nodes;
  }
  static build(t3, e, i3, n3) {
    let o2 = new s40(i3, t3);
    return T.spans(e, i3, n3, o2, 0), o2.finish(i3);
  }
};
function er(s66, t3, e) {
  let i3 = new gi();
  return T.compare(s66, t3, e, i3, 0), i3.changes;
}
var gi = class {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(t3, e, i3, n3) {
    (t3 < e || i3 && i3.heightRelevant || n3 && n3.heightRelevant) && ti(t3, e, this.changes, 5);
  }
};
function ir(s66, t3) {
  let e = s66.getBoundingClientRect(), i3 = s66.ownerDocument, n3 = i3.defaultView || window, o2 = Math.max(0, e.left), r2 = Math.min(n3.innerWidth, e.right), l7 = Math.max(0, e.top), h6 = Math.min(n3.innerHeight, e.bottom);
  for (let c2 = s66.parentNode; c2 && c2 != i3.body; ) if (c2.nodeType == 1) {
    let a7 = c2, f4 = window.getComputedStyle(a7);
    if ((a7.scrollHeight > a7.clientHeight || a7.scrollWidth > a7.clientWidth) && f4.overflow != "visible") {
      let d5 = a7.getBoundingClientRect();
      o2 = Math.max(o2, d5.left), r2 = Math.min(r2, d5.right), l7 = Math.max(l7, d5.top), h6 = Math.min(c2 == s66.parentNode ? n3.innerHeight : h6, d5.bottom);
    }
    c2 = f4.position == "absolute" || f4.position == "fixed" ? a7.offsetParent : a7.parentNode;
  } else if (c2.nodeType == 11) c2 = c2.host;
  else break;
  return { left: o2 - e.left, right: Math.max(o2, r2) - e.left, top: l7 - (e.top + t3), bottom: Math.max(l7, h6) - (e.top + t3) };
}
function sr(s66, t3) {
  let e = s66.getBoundingClientRect();
  return { left: 0, right: e.right - e.left, top: t3, bottom: e.bottom - (e.top + t3) };
}
var It = class {
  constructor(t3, e, i3, n3) {
    this.from = t3, this.to = e, this.size = i3, this.displaySize = n3;
  }
  static same(t3, e) {
    if (t3.length != e.length) return false;
    for (let i3 = 0; i3 < t3.length; i3++) {
      let n3 = t3[i3], o2 = e[i3];
      if (n3.from != o2.from || n3.to != o2.to || n3.size != o2.size) return false;
    }
    return true;
  }
  draw(t3, e) {
    return O3.replace({ widget: new mi(this.displaySize * (e ? t3.scaleY : t3.scaleX), e) }).range(this.from, this.to);
  }
};
var mi = class extends lt3 {
  constructor(t3, e) {
    super(), this.size = t3, this.vertical = e;
  }
  eq(t3) {
    return t3.size == this.size && t3.vertical == this.vertical;
  }
  toDOM() {
    let t3 = document.createElement("div");
    return this.vertical ? t3.style.height = this.size + "px" : (t3.style.width = this.size + "px", t3.style.height = "2px", t3.style.display = "inline-block"), t3;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
};
var Re4 = class {
  constructor(t3) {
    this.state = t3, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = true, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scrollTop = 0, this.scrolledToBottom = false, this.scaleX = 1, this.scaleY = 1, this.scrollAnchorPos = 0, this.scrollAnchorHeight = -1, this.scaler = ms, this.scrollTarget = null, this.printing = false, this.mustMeasureContent = true, this.defaultTextDirection = L6.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = false;
    let e = t3.facet(Ve7).some((i3) => typeof i3 != "function" && i3.class == "cm-lineWrapping");
    this.heightOracle = new Ae4(e), this.stateDeco = t3.facet(Ut).filter((i3) => typeof i3 != "function"), this.heightMap = z7.empty().applyChanges(this.stateDeco, m7.empty, this.heightOracle.setDoc(t3.doc), [new j8(0, 0, 0, t3.doc.length)]);
    for (let i3 = 0; i3 < 2 && (this.viewport = this.getViewport(0, null), !!this.updateForViewport()); i3++) ;
    this.updateViewportLines(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = O3.set(this.lineGaps.map((i3) => i3.draw(this, false))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let t3 = [this.viewport], { main: e } = this.state.selection;
    for (let i3 = 0; i3 <= 1; i3++) {
      let n3 = i3 ? e.head : e.anchor;
      if (!t3.some(({ from: o2, to: r2 }) => n3 >= o2 && n3 <= r2)) {
        let { from: o2, to: r2 } = this.lineBlockAt(n3);
        t3.push(new xt(o2, r2));
      }
    }
    return this.viewports = t3.sort((i3, n3) => i3.from - n3.from), this.updateScaler();
  }
  updateScaler() {
    let t3 = this.scaler;
    return this.scaler = this.heightMap.height <= 7e6 ? ms : new bi(this.heightOracle, this.heightMap, this.viewports), t3.eq(this.scaler) ? 0 : 2;
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (t3) => {
      this.viewportLines.push(Pt(t3, this.scaler));
    });
  }
  update(t3, e = null) {
    this.state = t3.state;
    let i3 = this.stateDeco;
    this.stateDeco = this.state.facet(Ut).filter((a7) => typeof a7 != "function");
    let n3 = t3.changedRanges, o2 = j8.extendWithRanges(n3, er(i3, this.stateDeco, t3 ? t3.changes : A5.empty(this.state.doc.length))), r2 = this.heightMap.height, l7 = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
    di(), this.heightMap = this.heightMap.applyChanges(this.stateDeco, t3.startState.doc, this.heightOracle.setDoc(this.state.doc), o2), (this.heightMap.height != r2 || mt) && (t3.flags |= 2), l7 ? (this.scrollAnchorPos = t3.changes.mapPos(l7.from, -1), this.scrollAnchorHeight = l7.top) : (this.scrollAnchorPos = -1, this.scrollAnchorHeight = this.heightMap.height);
    let h6 = o2.length ? this.mapViewport(this.viewport, t3.changes) : this.viewport;
    (e && (e.range.head < h6.from || e.range.head > h6.to) || !this.viewportIsAppropriate(h6)) && (h6 = this.getViewport(0, e));
    let c2 = h6.from != this.viewport.from || h6.to != this.viewport.to;
    this.viewport = h6, t3.flags |= this.updateForViewport(), (c2 || !t3.changes.empty || t3.flags & 2) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, t3.changes))), t3.flags |= this.computeVisibleRanges(), e && (this.scrollTarget = e), !this.mustEnforceCursorAssoc && t3.selectionSet && t3.view.lineWrapping && t3.state.selection.main.empty && t3.state.selection.main.assoc && !t3.state.facet(un) && (this.mustEnforceCursorAssoc = true);
  }
  measure(t3) {
    let e = t3.contentDOM, i3 = window.getComputedStyle(e), n3 = this.heightOracle, o2 = i3.whiteSpace;
    this.defaultTextDirection = i3.direction == "rtl" ? L6.RTL : L6.LTR;
    let r2 = this.heightOracle.mustRefreshForWrapping(o2), l7 = e.getBoundingClientRect(), h6 = r2 || this.mustMeasureContent || this.contentDOMHeight != l7.height;
    this.contentDOMHeight = l7.height, this.mustMeasureContent = false;
    let c2 = 0, a7 = 0;
    if (l7.width && l7.height) {
      let { scaleX: x7, scaleY: S6 } = Fs(e, l7);
      (x7 > 5e-3 && Math.abs(this.scaleX - x7) > 5e-3 || S6 > 5e-3 && Math.abs(this.scaleY - S6) > 5e-3) && (this.scaleX = x7, this.scaleY = S6, c2 |= 8, r2 = h6 = true);
    }
    let f4 = (parseInt(i3.paddingTop) || 0) * this.scaleY, d5 = (parseInt(i3.paddingBottom) || 0) * this.scaleY;
    (this.paddingTop != f4 || this.paddingBottom != d5) && (this.paddingTop = f4, this.paddingBottom = d5, c2 |= 10), this.editorWidth != t3.scrollDOM.clientWidth && (n3.lineWrapping && (h6 = true), this.editorWidth = t3.scrollDOM.clientWidth, c2 |= 8);
    let u5 = t3.scrollDOM.scrollTop * this.scaleY;
    this.scrollTop != u5 && (this.scrollAnchorHeight = -1, this.scrollTop = u5), this.scrolledToBottom = Is(t3.scrollDOM);
    let p8 = (this.printing ? sr : ir)(e, this.paddingTop), g8 = p8.top - this.pixelViewport.top, b8 = p8.bottom - this.pixelViewport.bottom;
    this.pixelViewport = p8;
    let m10 = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (m10 != this.inView && (this.inView = m10, m10 && (h6 = true)), !this.inView && !this.scrollTarget) return 0;
    let w9 = l7.width;
    if ((this.contentDOMWidth != w9 || this.editorHeight != t3.scrollDOM.clientHeight) && (this.contentDOMWidth = l7.width, this.editorHeight = t3.scrollDOM.clientHeight, c2 |= 8), h6) {
      let x7 = t3.docView.measureVisibleLineHeights(this.viewport);
      if (n3.mustRefreshForHeights(x7) && (r2 = true), r2 || n3.lineWrapping && Math.abs(w9 - this.contentDOMWidth) > n3.charWidth) {
        let { lineHeight: S6, charWidth: C8, textHeight: E9 } = t3.docView.measureTextSize();
        r2 = S6 > 0 && n3.refresh(o2, S6, C8, E9, w9 / C8, x7), r2 && (t3.docView.minWidth = 0, c2 |= 8);
      }
      g8 > 0 && b8 > 0 ? a7 = Math.max(g8, b8) : g8 < 0 && b8 < 0 && (a7 = Math.min(g8, b8)), di();
      for (let S6 of this.viewports) {
        let C8 = S6.from == this.viewport.from ? x7 : t3.docView.measureVisibleLineHeights(S6);
        this.heightMap = (r2 ? z7.empty().applyChanges(this.stateDeco, m7.empty, this.heightOracle, [new j8(0, 0, 0, t3.state.doc.length)]) : this.heightMap).updateHeight(n3, 0, r2, new De5(S6.from, C8));
      }
      mt && (c2 |= 2);
    }
    let v6 = !this.viewportIsAppropriate(this.viewport, a7) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return v6 && (c2 & 2 && (c2 |= this.updateScaler()), this.viewport = this.getViewport(a7, this.scrollTarget), c2 |= this.updateForViewport()), (c2 & 2 || v6) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) && this.updateLineGaps(this.ensureLineGaps(r2 ? [] : this.lineGaps, t3)), c2 |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = false, t3.docView.enforceCursorAssoc()), c2;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(t3, e) {
    let i3 = 0.5 - Math.max(-0.5, Math.min(0.5, t3 / 1e3 / 2)), n3 = this.heightMap, o2 = this.heightOracle, { visibleTop: r2, visibleBottom: l7 } = this, h6 = new xt(n3.lineAt(r2 - i3 * 1e3, T3.ByHeight, o2, 0, 0).from, n3.lineAt(l7 + (1 - i3) * 1e3, T3.ByHeight, o2, 0, 0).to);
    if (e) {
      let { head: c2 } = e.range;
      if (c2 < h6.from || c2 > h6.to) {
        let a7 = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f4 = n3.lineAt(c2, T3.ByPos, o2, 0, 0), d5;
        e.y == "center" ? d5 = (f4.top + f4.bottom) / 2 - a7 / 2 : e.y == "start" || e.y == "nearest" && c2 < h6.from ? d5 = f4.top : d5 = f4.bottom - a7, h6 = new xt(n3.lineAt(d5 - 1e3 / 2, T3.ByHeight, o2, 0, 0).from, n3.lineAt(d5 + a7 + 1e3 / 2, T3.ByHeight, o2, 0, 0).to);
      }
    }
    return h6;
  }
  mapViewport(t3, e) {
    let i3 = e.mapPos(t3.from, -1), n3 = e.mapPos(t3.to, 1);
    return new xt(this.heightMap.lineAt(i3, T3.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(n3, T3.ByPos, this.heightOracle, 0, 0).to);
  }
  viewportIsAppropriate({ from: t3, to: e }, i3 = 0) {
    if (!this.inView) return true;
    let { top: n3 } = this.heightMap.lineAt(t3, T3.ByPos, this.heightOracle, 0, 0), { bottom: o2 } = this.heightMap.lineAt(e, T3.ByPos, this.heightOracle, 0, 0), { visibleTop: r2, visibleBottom: l7 } = this;
    return (t3 == 0 || n3 <= r2 - Math.max(10, Math.min(-i3, 250))) && (e == this.state.doc.length || o2 >= l7 + Math.max(10, Math.min(i3, 250))) && n3 > r2 - 2 * 1e3 && o2 < l7 + 2 * 1e3;
  }
  mapLineGaps(t3, e) {
    if (!t3.length || e.empty) return t3;
    let i3 = [];
    for (let n3 of t3) e.touchesRange(n3.from, n3.to) || i3.push(new It(e.mapPos(n3.from), e.mapPos(n3.to), n3.size, n3.displaySize));
    return i3;
  }
  ensureLineGaps(t3, e) {
    let i3 = this.heightOracle.lineWrapping, n3 = i3 ? 1e4 : 2e3, o2 = n3 >> 1, r2 = n3 << 1;
    if (this.defaultTextDirection != L6.LTR && !i3) return [];
    let l7 = [], h6 = (a7, f4, d5, u5) => {
      if (f4 - a7 < o2) return;
      let p8 = this.state.selection.main, g8 = [p8.from];
      p8.empty || g8.push(p8.to);
      for (let m10 of g8) if (m10 > a7 && m10 < f4) {
        h6(a7, m10 - 10, d5, u5), h6(m10 + 10, f4, d5, u5);
        return;
      }
      let b8 = or(t3, (m10) => m10.from >= d5.from && m10.to <= d5.to && Math.abs(m10.from - a7) < o2 && Math.abs(m10.to - f4) < o2 && !g8.some((w9) => m10.from < w9 && m10.to > w9));
      if (!b8) {
        if (f4 < d5.to && e && i3 && e.visibleRanges.some((v6) => v6.from <= f4 && v6.to >= f4)) {
          let v6 = e.moveToLineBoundary(x4.cursor(f4), false, true).head;
          v6 > a7 && (f4 = v6);
        }
        let m10 = this.gapSize(d5, a7, f4, u5), w9 = i3 || m10 < 2e6 ? m10 : 2e6;
        b8 = new It(a7, f4, m10, w9);
      }
      l7.push(b8);
    }, c2 = (a7) => {
      if (a7.length < r2 || a7.type != F6.Text) return;
      let f4 = nr(a7.from, a7.to, this.stateDeco);
      if (f4.total < r2) return;
      let d5 = this.scrollTarget ? this.scrollTarget.range.head : null, u5, p8;
      if (i3) {
        let g8 = n3 / this.heightOracle.lineLength * this.heightOracle.lineHeight, b8, m10;
        if (d5 != null) {
          let w9 = ae7(f4, d5), v6 = ((this.visibleBottom - this.visibleTop) / 2 + g8) / a7.height;
          b8 = w9 - v6, m10 = w9 + v6;
        } else b8 = (this.visibleTop - a7.top - g8) / a7.height, m10 = (this.visibleBottom - a7.top + g8) / a7.height;
        u5 = he7(f4, b8), p8 = he7(f4, m10);
      } else {
        let g8 = f4.total * this.heightOracle.charWidth, b8 = n3 * this.heightOracle.charWidth, m10 = 0;
        if (g8 > 2e6) for (let C8 of t3) C8.from >= a7.from && C8.from < a7.to && C8.size != C8.displaySize && C8.from * this.heightOracle.charWidth + m10 < this.pixelViewport.left && (m10 = C8.size - C8.displaySize);
        let w9 = this.pixelViewport.left + m10, v6 = this.pixelViewport.right + m10, x7, S6;
        if (d5 != null) {
          let C8 = ae7(f4, d5), E9 = ((v6 - w9) / 2 + b8) / g8;
          x7 = C8 - E9, S6 = C8 + E9;
        } else x7 = (w9 - b8) / g8, S6 = (v6 + b8) / g8;
        u5 = he7(f4, x7), p8 = he7(f4, S6);
      }
      u5 > a7.from && h6(a7.from, u5, a7, f4), p8 < a7.to && h6(p8, a7.to, a7, f4);
    };
    for (let a7 of this.viewportLines) Array.isArray(a7.type) ? a7.type.forEach(c2) : c2(a7);
    return l7;
  }
  gapSize(t3, e, i3, n3) {
    let o2 = ae7(n3, i3) - ae7(n3, e);
    return this.heightOracle.lineWrapping ? t3.height * o2 : n3.total * this.heightOracle.charWidth * o2;
  }
  updateLineGaps(t3) {
    It.same(t3, this.lineGaps) || (this.lineGaps = t3, this.lineGapDeco = O3.set(t3.map((e) => e.draw(this, this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges() {
    let t3 = this.stateDeco;
    this.lineGaps.length && (t3 = t3.concat(this.lineGapDeco));
    let e = [];
    T.spans(t3, this.viewport.from, this.viewport.to, { span(n3, o2) {
      e.push({ from: n3, to: o2 });
    }, point() {
    } }, 20);
    let i3 = e.length != this.visibleRanges.length || this.visibleRanges.some((n3, o2) => n3.from != e[o2].from || n3.to != e[o2].to);
    return this.visibleRanges = e, i3 ? 4 : 0;
  }
  lineBlockAt(t3) {
    return t3 >= this.viewport.from && t3 <= this.viewport.to && this.viewportLines.find((e) => e.from <= t3 && e.to >= t3) || Pt(this.heightMap.lineAt(t3, T3.ByPos, this.heightOracle, 0, 0), this.scaler);
  }
  lineBlockAtHeight(t3) {
    return t3 >= this.viewportLines[0].top && t3 <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((e) => e.top <= t3 && e.bottom >= t3) || Pt(this.heightMap.lineAt(this.scaler.fromDOM(t3), T3.ByHeight, this.heightOracle, 0, 0), this.scaler);
  }
  scrollAnchorAt(t3) {
    let e = this.lineBlockAtHeight(t3 + 8);
    return e.from >= this.viewport.from || this.viewportLines[0].top - t3 > 200 ? e : this.viewportLines[0];
  }
  elementAtHeight(t3) {
    return Pt(this.heightMap.blockAt(this.scaler.fromDOM(t3), this.heightOracle, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
};
var xt = class {
  constructor(t3, e) {
    this.from = t3, this.to = e;
  }
};
function nr(s66, t3, e) {
  let i3 = [], n3 = s66, o2 = 0;
  return T.spans(e, s66, t3, { span() {
  }, point(r2, l7) {
    r2 > n3 && (i3.push({ from: n3, to: r2 }), o2 += r2 - n3), n3 = l7;
  } }, 20), n3 < t3 && (i3.push({ from: n3, to: t3 }), o2 += t3 - n3), { total: o2, ranges: i3 };
}
function he7({ total: s66, ranges: t3 }, e) {
  if (e <= 0) return t3[0].from;
  if (e >= 1) return t3[t3.length - 1].to;
  let i3 = Math.floor(s66 * e);
  for (let n3 = 0; ; n3++) {
    let { from: o2, to: r2 } = t3[n3], l7 = r2 - o2;
    if (i3 <= l7) return o2 + i3;
    i3 -= l7;
  }
}
function ae7(s66, t3) {
  let e = 0;
  for (let { from: i3, to: n3 } of s66.ranges) {
    if (t3 <= n3) {
      e += t3 - i3;
      break;
    }
    e += n3 - i3;
  }
  return e / s66.total;
}
function or(s66, t3) {
  for (let e of s66) if (t3(e)) return e;
}
var ms = { toDOM(s66) {
  return s66;
}, fromDOM(s66) {
  return s66;
}, scale: 1, eq(s66) {
  return s66 == this;
} };
var bi = class s41 {
  constructor(t3, e, i3) {
    let n3 = 0, o2 = 0, r2 = 0;
    this.viewports = i3.map(({ from: l7, to: h6 }) => {
      let c2 = e.lineAt(l7, T3.ByPos, t3, 0, 0).top, a7 = e.lineAt(h6, T3.ByPos, t3, 0, 0).bottom;
      return n3 += a7 - c2, { from: l7, to: h6, top: c2, bottom: a7, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - n3) / (e.height - n3);
    for (let l7 of this.viewports) l7.domTop = r2 + (l7.top - o2) * this.scale, r2 = l7.domBottom = l7.domTop + (l7.bottom - l7.top), o2 = l7.bottom;
  }
  toDOM(t3) {
    for (let e = 0, i3 = 0, n3 = 0; ; e++) {
      let o2 = e < this.viewports.length ? this.viewports[e] : null;
      if (!o2 || t3 < o2.top) return n3 + (t3 - i3) * this.scale;
      if (t3 <= o2.bottom) return o2.domTop + (t3 - o2.top);
      i3 = o2.bottom, n3 = o2.domBottom;
    }
  }
  fromDOM(t3) {
    for (let e = 0, i3 = 0, n3 = 0; ; e++) {
      let o2 = e < this.viewports.length ? this.viewports[e] : null;
      if (!o2 || t3 < o2.domTop) return i3 + (t3 - n3) / this.scale;
      if (t3 <= o2.domBottom) return o2.top + (t3 - o2.domTop);
      i3 = o2.bottom, n3 = o2.domBottom;
    }
  }
  eq(t3) {
    return t3 instanceof s41 ? this.scale == t3.scale && this.viewports.length == t3.viewports.length && this.viewports.every((e, i3) => e.from == t3.viewports[i3].from && e.to == t3.viewports[i3].to) : false;
  }
};
function Pt(s66, t3) {
  if (t3.scale == 1) return s66;
  let e = t3.toDOM(s66.top), i3 = t3.toDOM(s66.bottom);
  return new X5(s66.from, s66.length, e, i3 - e, Array.isArray(s66._content) ? s66._content.map((n3) => Pt(n3, t3)) : s66._content);
}
var ce7 = y4.define({ combine: (s66) => s66.join(" ") });
var yi = y4.define({ combine: (s66) => s66.indexOf(true) > -1 });
var wi = b5.newName();
var En = b5.newName();
var Ln = b5.newName();
var Bn = { "&light": "." + En, "&dark": "." + Ln };
function xi(s66, t3, e) {
  return new b5(t3, { finish(i3) {
    return /&/.test(i3) ? i3.replace(/&\w*/, (n3) => {
      if (n3 == "&") return s66;
      if (!e || !e[n3]) throw new RangeError(`Unsupported selector: ${n3}`);
      return e[n3];
    }) : s66 + " " + i3;
  } });
}
var rr = xi("." + wi, { "&": { position: "relative !important", boxSizing: "border-box", "&.cm-focused": { outline: "1px dotted #212121" }, display: "flex !important", flexDirection: "column" }, ".cm-scroller": { display: "flex !important", alignItems: "flex-start !important", fontFamily: "monospace", lineHeight: 1.4, height: "100%", overflowX: "auto", position: "relative", zIndex: 0, overflowAnchor: "none" }, ".cm-content": { margin: 0, flexGrow: 2, flexShrink: 0, display: "block", whiteSpace: "pre", wordWrap: "normal", boxSizing: "border-box", minHeight: "100%", padding: "4px 0", outline: "none", "&[contenteditable=true]": { WebkitUserModify: "read-write-plaintext-only" } }, ".cm-lineWrapping": { whiteSpace_fallback: "pre-wrap", whiteSpace: "break-spaces", wordBreak: "break-word", overflowWrap: "anywhere", flexShrink: 1 }, "&light .cm-content": { caretColor: "black" }, "&dark .cm-content": { caretColor: "white" }, ".cm-line": { display: "block", padding: "0 2px 0 6px" }, ".cm-layer": { position: "absolute", left: 0, top: 0, contain: "size style", "& > *": { position: "absolute" } }, "&light .cm-selectionBackground": { background: "#d9d9d9" }, "&dark .cm-selectionBackground": { background: "#222" }, "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": { background: "#d7d4f0" }, "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": { background: "#233" }, ".cm-cursorLayer": { pointerEvents: "none" }, "&.cm-focused > .cm-scroller > .cm-cursorLayer": { animation: "steps(1) cm-blink 1.2s infinite" }, "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} }, "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} }, ".cm-cursor, .cm-dropCursor": { borderLeft: "1.2px solid black", marginLeft: "-0.6px", pointerEvents: "none" }, ".cm-cursor": { display: "none" }, "&dark .cm-cursor": { borderLeftColor: "#ddd" }, ".cm-dropCursor": { position: "absolute" }, "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": { display: "block" }, ".cm-iso": { unicodeBidi: "isolate" }, ".cm-announced": { position: "fixed", top: "-10000px" }, "@media print": { ".cm-announced": { display: "none" } }, "&light .cm-activeLine": { backgroundColor: "#cceeff44" }, "&dark .cm-activeLine": { backgroundColor: "#99eeff33" }, "&light .cm-specialChar": { color: "red" }, "&dark .cm-specialChar": { color: "#f78" }, ".cm-gutters": { flexShrink: 0, display: "flex", height: "100%", boxSizing: "border-box", insetInlineStart: 0, zIndex: 200 }, "&light .cm-gutters": { backgroundColor: "#f5f5f5", color: "#6c6c6c", borderRight: "1px solid #ddd" }, "&dark .cm-gutters": { backgroundColor: "#333338", color: "#ccc" }, ".cm-gutter": { display: "flex !important", flexDirection: "column", flexShrink: 0, boxSizing: "border-box", minHeight: "100%", overflow: "hidden" }, ".cm-gutterElement": { boxSizing: "border-box" }, ".cm-lineNumbers .cm-gutterElement": { padding: "0 3px 0 5px", minWidth: "20px", textAlign: "right", whiteSpace: "nowrap" }, "&light .cm-activeLineGutter": { backgroundColor: "#e2f2ff" }, "&dark .cm-activeLineGutter": { backgroundColor: "#222227" }, ".cm-panels": { boxSizing: "border-box", position: "sticky", left: 0, right: 0, zIndex: 300 }, "&light .cm-panels": { backgroundColor: "#f5f5f5", color: "black" }, "&light .cm-panels-top": { borderBottom: "1px solid #ddd" }, "&light .cm-panels-bottom": { borderTop: "1px solid #ddd" }, "&dark .cm-panels": { backgroundColor: "#333338", color: "white" }, ".cm-tab": { display: "inline-block", overflow: "hidden", verticalAlign: "bottom" }, ".cm-widgetBuffer": { verticalAlign: "text-top", height: "1em", width: 0, display: "inline" }, ".cm-placeholder": { color: "#888", display: "inline-block", verticalAlign: "top" }, ".cm-highlightSpace": { backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)", backgroundPosition: "center" }, ".cm-highlightTab": { backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`, backgroundSize: "auto 100%", backgroundPosition: "right 90%", backgroundRepeat: "no-repeat" }, ".cm-trailingSpace": { backgroundColor: "#ff332255" }, ".cm-button": { verticalAlign: "middle", color: "inherit", fontSize: "70%", padding: ".2em 1em", borderRadius: "1px" }, "&light .cm-button": { backgroundImage: "linear-gradient(#eff1f5, #d9d9df)", border: "1px solid #888", "&:active": { backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)" } }, "&dark .cm-button": { backgroundImage: "linear-gradient(#393939, #111)", border: "1px solid #888", "&:active": { backgroundImage: "linear-gradient(#111, #333)" } }, ".cm-textfield": { verticalAlign: "middle", color: "inherit", fontSize: "70%", border: "1px solid silver", padding: ".2em .5em" }, "&light .cm-textfield": { backgroundColor: "white" }, "&dark .cm-textfield": { border: "1px solid #555", backgroundColor: "inherit" } }, Bn);
var lr = { childList: true, characterData: true, subtree: true, attributes: true, characterDataOldValue: true };
var qe4 = y6.ie && y6.ie_version <= 11;
var vi = class {
  constructor(t3) {
    this.view = t3, this.active = false, this.editContext = null, this.selectionRange = new Ge6(), this.selectionChanged = false, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.intersecting = false, this.gapIntersection = null, this.gaps = [], this.printQuery = null, this.parentCheck = -1, this.dom = t3.contentDOM, this.observer = new MutationObserver((e) => {
      for (let i3 of e) this.queue.push(i3);
      (y6.ie && y6.ie_version <= 11 || y6.ios && t3.composing) && e.some((i3) => i3.type == "childList" && i3.removedNodes.length || i3.type == "characterData" && i3.oldValue.length > i3.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), window.EditContext && t3.constructor.EDIT_CONTEXT !== false && !(y6.chrome && y6.chrome_version < 126) && (this.editContext = new Si(t3), t3.state.facet(st4) && (t3.contentDOM.editContext = this.editContext.editContext)), qe4 && (this.onCharData = (e) => {
      this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), window.matchMedia && (this.printQuery = window.matchMedia("print")), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var e;
      ((e = this.view.docView) === null || e === void 0 ? void 0 : e.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(t3.scrollDOM)), this.addWindowListeners(this.win = t3.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((e) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), e.length > 0 && e[e.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, { threshold: [0, 1e-3] }), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((e) => {
      e.length > 0 && e[e.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(t3) {
    this.view.inputState.runHandlers("scroll", t3), this.intersecting && this.view.measure();
  }
  onScroll(t3) {
    this.intersecting && this.flush(false), this.editContext && this.view.requestMeasure(this.editContext.measureReq), this.onScrollChanged(t3);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint(t3) {
    (t3.type == "change" || !t3.type) && !t3.matches || (this.view.viewState.printing = true, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = false, this.view.requestMeasure();
    }, 500));
  }
  updateGaps(t3) {
    if (this.gapIntersection && (t3.length != this.gaps.length || this.gaps.some((e, i3) => e != t3[i3]))) {
      this.gapIntersection.disconnect();
      for (let e of t3) this.gapIntersection.observe(e);
      this.gaps = t3;
    }
  }
  onSelectionChange(t3) {
    let e = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey) return;
    let { view: i3 } = this, n3 = this.selectionRange;
    if (i3.state.facet(st4) ? i3.root.activeElement != this.dom : !ue6(this.dom, n3)) return;
    let o2 = n3.anchorNode && i3.docView.nearest(n3.anchorNode);
    if (o2 && o2.ignoreEvent(t3)) {
      e || (this.selectionChanged = false);
      return;
    }
    (y6.ie && y6.ie_version <= 11 || y6.android && y6.chrome) && !i3.state.selection.main.empty && n3.focusNode && Vt(n3.focusNode, n3.focusOffset, n3.anchorNode, n3.anchorOffset) ? this.flushSoon() : this.flush(false);
  }
  readSelectionRange() {
    let { view: t3 } = this, e = jt(t3.root);
    if (!e) return false;
    let i3 = y6.safari && t3.root.nodeType == 11 && t3.root.activeElement == this.dom && hr(this.view, e) || e;
    if (!i3 || this.selectionRange.eq(i3)) return false;
    let n3 = ue6(this.dom, i3);
    return n3 && !this.selectionChanged && t3.inputState.lastFocusTime > Date.now() - 200 && t3.inputState.lastTouchTime < Date.now() - 300 && no(this.dom, i3) ? (this.view.inputState.lastFocusTime = 0, t3.docView.updateSelection(), false) : (this.selectionRange.setRange(i3), n3 && (this.selectionChanged = true), true);
  }
  setSelectionRange(t3, e) {
    this.selectionRange.set(t3.node, t3.offset, e.node, e.offset), this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let t3 = 0, e = null;
    for (let i3 = this.dom; i3; ) if (i3.nodeType == 1) !e && t3 < this.scrollTargets.length && this.scrollTargets[t3] == i3 ? t3++ : e || (e = this.scrollTargets.slice(0, t3)), e && e.push(i3), i3 = i3.assignedSlot || i3.parentNode;
    else if (i3.nodeType == 11) i3 = i3.host;
    else break;
    if (t3 < this.scrollTargets.length && !e && (e = this.scrollTargets.slice(0, t3)), e) {
      for (let i3 of this.scrollTargets) i3.removeEventListener("scroll", this.onScroll);
      for (let i3 of this.scrollTargets = e) i3.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(t3) {
    if (!this.active) return t3();
    try {
      return this.stop(), t3();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, lr), qe4 && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = true);
  }
  stop() {
    this.active && (this.active = false, this.observer.disconnect(), qe4 && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = false;
  }
  delayAndroidKey(t3, e) {
    var i3;
    if (!this.delayedAndroidKey) {
      let n3 = () => {
        let o2 = this.delayedAndroidKey;
        o2 && (this.clearDelayedAndroidKey(), this.view.inputState.lastKeyCode = o2.keyCode, this.view.inputState.lastKeyTime = Date.now(), !this.flush() && o2.force && Mt(this.dom, o2.key, o2.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(n3);
    }
    (!this.delayedAndroidKey || t3 == "Enter") && (this.delayedAndroidKey = { key: t3, keyCode: e, force: this.lastChange < Date.now() - 50 || !!(!((i3 = this.delayedAndroidKey) === null || i3 === void 0) && i3.force) });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  pendingRecords() {
    for (let t3 of this.observer.takeRecords()) this.queue.push(t3);
    return this.queue;
  }
  processRecords() {
    let t3 = this.pendingRecords();
    t3.length && (this.queue = []);
    let e = -1, i3 = -1, n3 = false;
    for (let o2 of t3) {
      let r2 = this.readMutation(o2);
      r2 && (r2.typeOver && (n3 = true), e == -1 ? { from: e, to: i3 } = r2 : (e = Math.min(r2.from, e), i3 = Math.max(r2.to, i3)));
    }
    return { from: e, to: i3, typeOver: n3 };
  }
  readChange() {
    let { from: t3, to: e, typeOver: i3 } = this.processRecords(), n3 = this.selectionChanged && ue6(this.dom, this.selectionRange);
    if (t3 < 0 && !n3) return null;
    t3 > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = false;
    let o2 = new hi(this.view, t3, e, i3);
    return this.view.docView.domChanged = { newSel: o2.newSel ? o2.newSel.main : null }, o2;
  }
  flush(t3 = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey) return false;
    t3 && this.readSelectionRange();
    let e = this.readChange();
    if (!e) return this.view.requestMeasure(), false;
    let i3 = this.view.state, n3 = Sn(this.view, e);
    return this.view.state == i3 && (e.domChanged || e.newSel && !e.newSel.main.eq(this.view.state.selection.main)) && this.view.update([]), n3;
  }
  readMutation(t3) {
    let e = this.view.docView.nearest(t3.target);
    if (!e || e.ignoreMutation(t3)) return null;
    if (e.markDirty(t3.type == "attributes"), t3.type == "attributes" && (e.flags |= 4), t3.type == "childList") {
      let i3 = bs(e, t3.previousSibling || t3.target.previousSibling, -1), n3 = bs(e, t3.nextSibling || t3.target.nextSibling, 1);
      return { from: i3 ? e.posAfter(i3) : e.posAtStart, to: n3 ? e.posBefore(n3) : e.posAtEnd, typeOver: false };
    } else return t3.type == "characterData" ? { from: e.posAtStart, to: e.posAtEnd, typeOver: t3.target.nodeValue == t3.oldValue } : null;
  }
  setWindow(t3) {
    t3 != this.win && (this.removeWindowListeners(this.win), this.win = t3, this.addWindowListeners(this.win));
  }
  addWindowListeners(t3) {
    t3.addEventListener("resize", this.onResize), this.printQuery ? this.printQuery.addEventListener ? this.printQuery.addEventListener("change", this.onPrint) : this.printQuery.addListener(this.onPrint) : t3.addEventListener("beforeprint", this.onPrint), t3.addEventListener("scroll", this.onScroll), t3.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(t3) {
    t3.removeEventListener("scroll", this.onScroll), t3.removeEventListener("resize", this.onResize), this.printQuery ? this.printQuery.removeEventListener ? this.printQuery.removeEventListener("change", this.onPrint) : this.printQuery.removeListener(this.onPrint) : t3.removeEventListener("beforeprint", this.onPrint), t3.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  update(t3) {
    this.editContext && (this.editContext.update(t3), t3.startState.facet(st4) != t3.state.facet(st4) && (t3.view.contentDOM.editContext = t3.state.facet(st4) ? this.editContext.editContext : null));
  }
  destroy() {
    var t3, e, i3;
    this.stop(), (t3 = this.intersection) === null || t3 === void 0 || t3.disconnect(), (e = this.gapIntersection) === null || e === void 0 || e.disconnect(), (i3 = this.resizeScroll) === null || i3 === void 0 || i3.disconnect();
    for (let n3 of this.scrollTargets) n3.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey), this.editContext && (this.view.contentDOM.editContext = null, this.editContext.destroy());
  }
};
function bs(s66, t3, e) {
  for (; t3; ) {
    let i3 = R3.get(t3);
    if (i3 && i3.parent == s66) return i3;
    let n3 = t3.parentNode;
    t3 = n3 != s66.dom ? n3 : e > 0 ? t3.nextSibling : t3.previousSibling;
  }
  return null;
}
function ys(s66, t3) {
  let e = t3.startContainer, i3 = t3.startOffset, n3 = t3.endContainer, o2 = t3.endOffset, r2 = s66.docView.domAtPos(s66.state.selection.main.anchor);
  return Vt(r2.node, r2.offset, n3, o2) && ([e, i3, n3, o2] = [n3, o2, e, i3]), { anchorNode: e, anchorOffset: i3, focusNode: n3, focusOffset: o2 };
}
function hr(s66, t3) {
  if (t3.getComposedRanges) {
    let n3 = t3.getComposedRanges(s66.root)[0];
    if (n3) return ys(s66, n3);
  }
  let e = null;
  function i3(n3) {
    n3.preventDefault(), n3.stopImmediatePropagation(), e = n3.getTargetRanges()[0];
  }
  return s66.contentDOM.addEventListener("beforeinput", i3, true), s66.dom.ownerDocument.execCommand("indent"), s66.contentDOM.removeEventListener("beforeinput", i3, true), e ? ys(s66, e) : null;
}
var Si = class {
  constructor(t3) {
    this.from = 0, this.to = 0, this.pendingContextChange = null, this.handlers = /* @__PURE__ */ Object.create(null), this.composing = null, this.resetRange(t3.state);
    let e = this.editContext = new window.EditContext({ text: t3.state.doc.sliceString(this.from, this.to), selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, t3.state.selection.main.anchor))), selectionEnd: this.toContextPos(t3.state.selection.main.head) });
    this.handlers.textupdate = (i3) => {
      let { anchor: n3 } = t3.state.selection.main, o2 = this.toEditorPos(i3.updateRangeStart), r2 = this.toEditorPos(i3.updateRangeEnd);
      t3.inputState.composing >= 0 && !this.composing && (this.composing = { contextBase: i3.updateRangeStart, editorBase: o2, drifted: false });
      let l7 = { from: o2, to: r2, insert: m7.of(i3.text.split(`
`)) };
      l7.from == this.from && n3 < this.from ? l7.from = n3 : l7.to == this.to && n3 > this.to && (l7.to = n3), !(l7.from == l7.to && !l7.insert.length) && (this.pendingContextChange = l7, t3.state.readOnly || ji(t3, l7, x4.single(this.toEditorPos(i3.selectionStart), this.toEditorPos(i3.selectionEnd))), this.pendingContextChange && (this.revertPending(t3.state), this.setSelection(t3.state)));
    }, this.handlers.characterboundsupdate = (i3) => {
      let n3 = [], o2 = null;
      for (let r2 = this.toEditorPos(i3.rangeStart), l7 = this.toEditorPos(i3.rangeEnd); r2 < l7; r2++) {
        let h6 = t3.coordsForChar(r2);
        o2 = h6 && new DOMRect(h6.left, h6.top, h6.right - h6.left, h6.bottom - h6.top) || o2 || new DOMRect(), n3.push(o2);
      }
      e.updateCharacterBounds(i3.rangeStart, n3);
    }, this.handlers.textformatupdate = (i3) => {
      let n3 = [];
      for (let o2 of i3.getTextFormats()) {
        let r2 = o2.underlineStyle, l7 = o2.underlineThickness;
        if (r2 != "None" && l7 != "None") {
          let h6 = `text-decoration: underline ${r2 == "Dashed" ? "dashed " : r2 == "Squiggle" ? "wavy " : ""}${l7 == "Thin" ? 1 : 2}px`;
          n3.push(O3.mark({ attributes: { style: h6 } }).range(this.toEditorPos(o2.rangeStart), this.toEditorPos(o2.rangeEnd)));
        }
      }
      t3.dispatch({ effects: gn.of(O3.set(n3)) });
    }, this.handlers.compositionstart = () => {
      t3.inputState.composing < 0 && (t3.inputState.composing = 0, t3.inputState.compositionFirstChange = true);
    }, this.handlers.compositionend = () => {
      if (t3.inputState.composing = -1, t3.inputState.compositionFirstChange = null, this.composing) {
        let { drifted: i3 } = this.composing;
        this.composing = null, i3 && this.reset(t3.state);
      }
    };
    for (let i3 in this.handlers) e.addEventListener(i3, this.handlers[i3]);
    this.measureReq = { read: (i3) => {
      this.editContext.updateControlBounds(i3.contentDOM.getBoundingClientRect());
      let n3 = jt(i3.root);
      n3 && n3.rangeCount && this.editContext.updateSelectionBounds(n3.getRangeAt(0).getBoundingClientRect());
    } };
  }
  applyEdits(t3) {
    let e = 0, i3 = false, n3 = this.pendingContextChange;
    return t3.changes.iterChanges((o2, r2, l7, h6, c2) => {
      if (i3) return;
      let a7 = c2.length - (r2 - o2);
      if (n3 && r2 >= n3.to) if (n3.from == o2 && n3.to == r2 && n3.insert.eq(c2)) {
        n3 = this.pendingContextChange = null, e += a7, this.to += a7;
        return;
      } else n3 = null, this.revertPending(t3.state);
      if (o2 += e, r2 += e, r2 <= this.from) this.from += a7, this.to += a7;
      else if (o2 < this.to) {
        if (o2 < this.from || r2 > this.to || this.to - this.from + c2.length > 3e4) {
          i3 = true;
          return;
        }
        this.editContext.updateText(this.toContextPos(o2), this.toContextPos(r2), c2.toString()), this.to += a7;
      }
      e += a7;
    }), n3 && !i3 && this.revertPending(t3.state), !i3;
  }
  update(t3) {
    let e = this.pendingContextChange;
    this.composing && (this.composing.drifted || t3.transactions.some((i3) => !i3.isUserEvent("input.type") && i3.changes.touchesRange(this.from, this.to))) ? (this.composing.drifted = true, this.composing.editorBase = t3.changes.mapPos(this.composing.editorBase)) : !this.applyEdits(t3) || !this.rangeIsValid(t3.state) ? (this.pendingContextChange = null, this.reset(t3.state)) : (t3.docChanged || t3.selectionSet || e) && this.setSelection(t3.state), (t3.geometryChanged || t3.docChanged || t3.selectionSet) && t3.view.requestMeasure(this.measureReq);
  }
  resetRange(t3) {
    let { head: e } = t3.selection.main;
    this.from = Math.max(0, e - 1e4), this.to = Math.min(t3.doc.length, e + 1e4);
  }
  reset(t3) {
    this.resetRange(t3), this.editContext.updateText(0, this.editContext.text.length, t3.doc.sliceString(this.from, this.to)), this.setSelection(t3);
  }
  revertPending(t3) {
    let e = this.pendingContextChange;
    this.pendingContextChange = null, this.editContext.updateText(this.toContextPos(e.from), this.toContextPos(e.from + e.insert.length), t3.doc.sliceString(e.from, e.to));
  }
  setSelection(t3) {
    let { main: e } = t3.selection, i3 = this.toContextPos(Math.max(this.from, Math.min(this.to, e.anchor))), n3 = this.toContextPos(e.head);
    (this.editContext.selectionStart != i3 || this.editContext.selectionEnd != n3) && this.editContext.updateSelection(i3, n3);
  }
  rangeIsValid(t3) {
    let { head: e } = t3.selection.main;
    return !(this.from > 0 && e - this.from < 500 || this.to < t3.doc.length && this.to - e < 500 || this.to - this.from > 1e4 * 3);
  }
  toEditorPos(t3) {
    let e = this.composing;
    return e && e.drifted ? e.editorBase + (t3 - e.contextBase) : t3 + this.from;
  }
  toContextPos(t3) {
    let e = this.composing;
    return e && e.drifted ? e.contextBase + (t3 - e.editorBase) : t3 - this.from;
  }
  destroy() {
    for (let t3 in this.handlers) this.editContext.removeEventListener(t3, this.handlers[t3]);
  }
};
var A6 = class s42 {
  get state() {
    return this.viewState.state;
  }
  get viewport() {
    return this.viewState.viewport;
  }
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  get inView() {
    return this.viewState.inView;
  }
  get composing() {
    return this.inputState.composing > 0;
  }
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  get root() {
    return this._root;
  }
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  constructor(t3 = {}) {
    var e;
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = false, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.className = "cm-announced", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), t3.parent && t3.parent.appendChild(this.dom);
    let { dispatch: i3 } = t3;
    this.dispatchTransactions = t3.dispatchTransactions || i3 && ((n3) => n3.forEach((o2) => i3(o2, this))) || ((n3) => this.update(n3)), this.dispatch = this.dispatch.bind(this), this._root = t3.root || so(t3.parent) || document, this.viewState = new Re4(t3.state || I4.create(t3)), t3.scrollTo && t3.scrollTo.is(oe5) && (this.viewState.scrollTarget = t3.scrollTo.value.clip(this.viewState.state)), this.plugins = this.state.facet(Et2).map((n3) => new zt(n3));
    for (let n3 of this.plugins) n3.update(this);
    this.observer = new vi(this), this.inputState = new ai(this), this.inputState.ensureHandlers(this.plugins), this.docView = new Me3(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), !((e = document.fonts) === null || e === void 0) && e.ready && document.fonts.ready.then(() => this.requestMeasure());
  }
  dispatch(...t3) {
    let e = t3.length == 1 && t3[0] instanceof S3 ? t3 : t3.length == 1 && Array.isArray(t3[0]) ? t3[0] : [this.state.update(...t3)];
    this.dispatchTransactions(e, this);
  }
  update(t3) {
    if (this.updateState != 0) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let e = false, i3 = false, n3, o2 = this.state;
    for (let d5 of t3) {
      if (d5.startState != o2) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      o2 = d5.state;
    }
    if (this.destroyed) {
      this.viewState.state = o2;
      return;
    }
    let r2 = this.hasFocus, l7 = 0, h6 = null;
    t3.some((d5) => d5.annotation(On)) ? (this.inputState.notifiedFocused = r2, l7 = 1) : r2 != this.inputState.notifiedFocused && (this.inputState.notifiedFocused = r2, h6 = Tn(o2, r2), h6 || (l7 = 1));
    let c2 = this.observer.delayedAndroidKey, a7 = null;
    if (c2 ? (this.observer.clearDelayedAndroidKey(), a7 = this.observer.readChange(), (a7 && !this.state.doc.eq(o2.doc) || !this.state.selection.eq(o2.selection)) && (a7 = null)) : this.observer.clear(), o2.facet(I4.phrases) != this.state.facet(I4.phrases)) return this.setState(o2);
    n3 = Ce4.create(this, o2, t3), n3.flags |= l7;
    let f4 = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let d5 of t3) {
        if (f4 && (f4 = f4.map(d5.changes)), d5.scrollIntoView) {
          let { main: u5 } = d5.state.selection;
          f4 = new Wt(u5.empty ? u5 : x4.cursor(u5.head, u5.head > u5.anchor ? -1 : 1));
        }
        for (let u5 of d5.effects) u5.is(oe5) && (f4 = u5.value.clip(this.state));
      }
      this.viewState.update(n3, f4), this.bidiCache = Ee7.update(this.bidiCache, n3.changes), n3.empty || (this.updatePlugins(n3), this.inputState.update(n3)), e = this.docView.update(n3), this.state.facet(Lt) != this.styleModules && this.mountStyles(), i3 = this.updateAttrs(), this.showAnnouncements(t3), this.docView.updateSelection(e, t3.some((d5) => d5.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (n3.startState.facet(ce7) != n3.state.facet(ce7) && (this.viewState.mustMeasureContent = true), (e || i3 || f4 || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), e && this.docViewUpdate(), !n3.empty) for (let d5 of this.state.facet(ni)) try {
      d5(n3);
    } catch (u5) {
      $2(this.state, u5, "update listener");
    }
    (h6 || a7) && Promise.resolve().then(() => {
      h6 && this.state == h6.startState && this.dispatch(h6), a7 && !Sn(this, a7) && c2.force && Mt(this.contentDOM, c2.key, c2.keyCode);
    });
  }
  setState(t3) {
    if (this.updateState != 0) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = t3;
      return;
    }
    this.updateState = 2;
    let e = this.hasFocus;
    try {
      for (let i3 of this.plugins) i3.destroy(this);
      this.viewState = new Re4(t3), this.plugins = t3.facet(Et2).map((i3) => new zt(i3)), this.pluginMap.clear();
      for (let i3 of this.plugins) i3.update(this);
      this.docView.destroy(), this.docView = new Me3(this), this.inputState.ensureHandlers(this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    e && this.focus(), this.requestMeasure();
  }
  updatePlugins(t3) {
    let e = t3.startState.facet(Et2), i3 = t3.state.facet(Et2);
    if (e != i3) {
      let n3 = [];
      for (let o2 of i3) {
        let r2 = e.indexOf(o2);
        if (r2 < 0) n3.push(new zt(o2));
        else {
          let l7 = this.plugins[r2];
          l7.mustUpdate = t3, n3.push(l7);
        }
      }
      for (let o2 of this.plugins) o2.mustUpdate != t3 && o2.destroy(this);
      this.plugins = n3, this.pluginMap.clear();
    } else for (let n3 of this.plugins) n3.mustUpdate = t3;
    for (let n3 = 0; n3 < this.plugins.length; n3++) this.plugins[n3].update(this);
    e != i3 && this.inputState.ensureHandlers(this.plugins);
  }
  docViewUpdate() {
    for (let t3 of this.plugins) {
      let e = t3.value;
      if (e && e.docViewUpdate) try {
        e.docViewUpdate(this);
      } catch (i3) {
        $2(this.state, i3, "doc view update listener");
      }
    }
  }
  measure(t3 = true) {
    if (this.destroyed) return;
    if (this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.observer.delayedAndroidKey) {
      this.measureScheduled = -1, this.requestMeasure();
      return;
    }
    this.measureScheduled = 0, t3 && this.observer.forceFlush();
    let e = null, i3 = this.scrollDOM, n3 = i3.scrollTop * this.scaleY, { scrollAnchorPos: o2, scrollAnchorHeight: r2 } = this.viewState;
    Math.abs(n3 - this.viewState.scrollTop) > 1 && (r2 = -1), this.viewState.scrollAnchorHeight = -1;
    try {
      for (let l7 = 0; ; l7++) {
        if (r2 < 0) if (Is(i3)) o2 = -1, r2 = this.viewState.heightMap.height;
        else {
          let u5 = this.viewState.scrollAnchorAt(n3);
          o2 = u5.from, r2 = u5.top;
        }
        this.updateState = 1;
        let h6 = this.viewState.measure(this);
        if (!h6 && !this.measureRequests.length && this.viewState.scrollTarget == null) break;
        if (l7 > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let c2 = [];
        h6 & 4 || ([this.measureRequests, c2] = [c2, this.measureRequests]);
        let a7 = c2.map((u5) => {
          try {
            return u5.read(this);
          } catch (p8) {
            return $2(this.state, p8), ws;
          }
        }), f4 = Ce4.create(this, this.state, []), d5 = false;
        f4.flags |= h6, e ? e.flags |= h6 : e = f4, this.updateState = 2, f4.empty || (this.updatePlugins(f4), this.inputState.update(f4), this.updateAttrs(), d5 = this.docView.update(f4), d5 && this.docViewUpdate());
        for (let u5 = 0; u5 < c2.length; u5++) if (a7[u5] != ws) try {
          let p8 = c2[u5];
          p8.write && p8.write(a7[u5], this);
        } catch (p8) {
          $2(this.state, p8);
        }
        if (d5 && this.docView.updateSelection(true), !f4.viewportChanged && this.measureRequests.length == 0) {
          if (this.viewState.editorHeight) if (this.viewState.scrollTarget) {
            this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, r2 = -1;
            continue;
          } else {
            let p8 = (o2 < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(o2).top) - r2;
            if (p8 > 1 || p8 < -1) {
              n3 = n3 + p8, i3.scrollTop = n3 / this.scaleY, r2 = -1;
              continue;
            }
          }
          break;
        }
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (e && !e.empty) for (let l7 of this.state.facet(ni)) l7(e);
  }
  get themeClasses() {
    return wi + " " + (this.state.facet(yi) ? Ln : En) + " " + this.state.facet(ce7);
  }
  updateAttrs() {
    let t3 = xs(this, mn, { class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses }), e = { spellcheck: "false", autocorrect: "off", autocapitalize: "off", translate: "no", contenteditable: this.state.facet(st4) ? "true" : "false", class: "cm-content", style: `${y6.tabSize}: ${this.state.tabSize}`, role: "textbox", "aria-multiline": "true" };
    this.state.readOnly && (e["aria-readonly"] = "true"), xs(this, Ve7, e);
    let i3 = this.observer.ignore(() => {
      let n3 = Ze4(this.contentDOM, this.contentAttrs, e), o2 = Ze4(this.dom, this.editorAttrs, t3);
      return n3 || o2;
    });
    return this.editorAttrs = t3, this.contentAttrs = e, i3;
  }
  showAnnouncements(t3) {
    let e = true;
    for (let i3 of t3) for (let n3 of i3.effects) if (n3.is(s42.announce)) {
      e && (this.announceDOM.textContent = ""), e = false;
      let o2 = this.announceDOM.appendChild(document.createElement("div"));
      o2.textContent = n3.value;
    }
  }
  mountStyles() {
    this.styleModules = this.state.facet(Lt);
    let t3 = this.state.facet(s42.cspNonce);
    b5.mount(this.root, this.styleModules.concat(rr).reverse(), t3 ? { nonce: t3 } : void 0);
  }
  readMeasured() {
    if (this.updateState == 2) throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(false);
  }
  requestMeasure(t3) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), t3) {
      if (this.measureRequests.indexOf(t3) > -1) return;
      if (t3.key != null) {
        for (let e = 0; e < this.measureRequests.length; e++) if (this.measureRequests[e].key === t3.key) {
          this.measureRequests[e] = t3;
          return;
        }
      }
      this.measureRequests.push(t3);
    }
  }
  plugin(t3) {
    let e = this.pluginMap.get(t3);
    return (e === void 0 || e && e.spec != t3) && this.pluginMap.set(t3, e = this.plugins.find((i3) => i3.spec == t3) || null), e && e.update(this).value;
  }
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  get scaleX() {
    return this.viewState.scaleX;
  }
  get scaleY() {
    return this.viewState.scaleY;
  }
  elementAtHeight(t3) {
    return this.readMeasured(), this.viewState.elementAtHeight(t3);
  }
  lineBlockAtHeight(t3) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(t3);
  }
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  lineBlockAt(t3) {
    return this.viewState.lineBlockAt(t3);
  }
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  moveByChar(t3, e, i3) {
    return Ke3(this, t3, ns(this, t3, e, i3));
  }
  moveByGroup(t3, e) {
    return Ke3(this, t3, ns(this, t3, e, (i3) => Lo(this, t3.head, i3)));
  }
  visualLineSide(t3, e) {
    let i3 = this.bidiSpans(t3), n3 = this.textDirectionAt(t3.from), o2 = i3[e ? i3.length - 1 : 0];
    return x4.cursor(o2.side(e, n3) + t3.from, o2.forward(!e, n3) ? 1 : -1);
  }
  moveToLineBoundary(t3, e, i3 = true) {
    return Eo(this, t3, e, i3);
  }
  moveVertically(t3, e, i3) {
    return Ke3(this, t3, Bo(this, t3, e, i3));
  }
  domAtPos(t3) {
    return this.docView.domAtPos(t3);
  }
  posAtDOM(t3, e = 0) {
    return this.docView.posFromDOM(t3, e);
  }
  posAtCoords(t3, e = true) {
    return this.readMeasured(), vn(this, t3, e);
  }
  coordsAtPos(t3, e = 1) {
    this.readMeasured();
    let i3 = this.docView.coordsAt(t3, e);
    if (!i3 || i3.left == i3.right) return i3;
    let n3 = this.state.doc.lineAt(t3), o2 = this.bidiSpans(n3), r2 = o2[G6.find(o2, t3 - n3.from, -1, e)];
    return te4(i3, r2.dir == L6.LTR == e > 0);
  }
  coordsForChar(t3) {
    return this.readMeasured(), this.docView.coordsForChar(t3);
  }
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  textDirectionAt(t3) {
    return !this.state.facet(dn) || t3 < this.viewport.from || t3 > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(t3));
  }
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  bidiSpans(t3) {
    if (t3.length > ar) return sn(t3.length);
    let e = this.textDirectionAt(t3.from), i3;
    for (let o2 of this.bidiCache) if (o2.from == t3.from && o2.dir == e && (o2.fresh || tn(o2.isolates, i3 = Zi(this, t3)))) return o2.order;
    i3 || (i3 = Zi(this, t3));
    let n3 = en(t3.text, e, i3);
    return this.bidiCache.push(new Ee7(t3.from, t3.to, e, i3, true, n3)), n3;
  }
  get hasFocus() {
    var t3;
    return (this.dom.ownerDocument.hasFocus() || y6.safari && ((t3 = this.inputState) === null || t3 === void 0 ? void 0 : t3.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  focus() {
    this.observer.ignore(() => {
      Ws(this.contentDOM), this.docView.updateSelection();
    });
  }
  setRoot(t3) {
    this._root != t3 && (this._root = t3, this.observer.setWindow((t3.nodeType == 9 ? t3 : t3.ownerDocument).defaultView || window), this.mountStyles());
  }
  destroy() {
    this.root.activeElement == this.contentDOM && this.contentDOM.blur();
    for (let t3 of this.plugins) t3.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.docView.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && this.win.cancelAnimationFrame(this.measureScheduled), this.destroyed = true;
  }
  static scrollIntoView(t3, e = {}) {
    return oe5.of(new Wt(typeof t3 == "number" ? x4.cursor(t3) : t3, e.y, e.x, e.yMargin, e.xMargin));
  }
  scrollSnapshot() {
    let { scrollTop: t3, scrollLeft: e } = this.scrollDOM, i3 = this.viewState.scrollAnchorAt(t3);
    return oe5.of(new Wt(x4.cursor(i3.from), "start", "start", i3.top - t3, e, true));
  }
  setTabFocusMode(t3) {
    t3 == null ? this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1 : typeof t3 == "boolean" ? this.inputState.tabFocusMode = t3 ? 0 : -1 : this.inputState.tabFocusMode != 0 && (this.inputState.tabFocusMode = Date.now() + t3);
  }
  static domEventHandlers(t3) {
    return N5.define(() => ({}), { eventHandlers: t3 });
  }
  static domEventObservers(t3) {
    return N5.define(() => ({}), { eventObservers: t3 });
  }
  static theme(t3, e) {
    let i3 = b5.newName(), n3 = [ce7.of(i3), Lt.of(xi(`.${i3}`, t3))];
    return e && e.dark && n3.push(yi.of(true)), n3;
  }
  static baseTheme(t3) {
    return ht3.lowest(Lt.of(xi("." + wi, t3, Bn)));
  }
  static findFromDOM(t3) {
    var e;
    let i3 = t3.querySelector(".cm-content"), n3 = i3 && R3.get(i3) || R3.get(t3);
    return ((e = n3?.rootView) === null || e === void 0 ? void 0 : e.view) || null;
  }
};
A6.styleModule = Lt;
A6.inputHandler = cn;
A6.clipboardInputFilter = zi;
A6.clipboardOutputFilter = Ii;
A6.scrollHandler = pn;
A6.focusChangeEffect = fn;
A6.perLineTextDirection = dn;
A6.exceptionSink = an;
A6.updateListener = ni;
A6.editable = st4;
A6.mouseSelectionStyle = hn;
A6.dragMovesSelection = ln;
A6.clickAddsSelectionRange = rn;
A6.decorations = Ut;
A6.outerDecorations = bn;
A6.atomicRanges = Ki;
A6.bidiIsolatedRanges = yn;
A6.scrollMargins = wn;
A6.darkTheme = yi;
A6.cspNonce = y4.define({ combine: (s66) => s66.length ? s66[0] : "" });
A6.contentAttributes = Ve7;
A6.editorAttributes = mn;
A6.lineWrapping = A6.contentAttributes.of({ class: "cm-lineWrapping" });
A6.announce = v3.define();
var ar = 4096;
var ws = {};
var Ee7 = class s43 {
  constructor(t3, e, i3, n3, o2, r2) {
    this.from = t3, this.to = e, this.dir = i3, this.isolates = n3, this.fresh = o2, this.order = r2;
  }
  static update(t3, e) {
    if (e.empty && !t3.some((o2) => o2.fresh)) return t3;
    let i3 = [], n3 = t3.length ? t3[t3.length - 1].dir : L6.LTR;
    for (let o2 = Math.max(0, t3.length - 10); o2 < t3.length; o2++) {
      let r2 = t3[o2];
      r2.dir == n3 && !e.touchesRange(r2.from, r2.to) && i3.push(new s43(e.mapPos(r2.from, 1), e.mapPos(r2.to, -1), r2.dir, r2.isolates, false, r2.order));
    }
    return i3;
  }
};
function xs(s66, t3, e) {
  for (let i3 = s66.state.facet(t3), n3 = i3.length - 1; n3 >= 0; n3--) {
    let o2 = i3[n3], r2 = typeof o2 == "function" ? o2(s66) : o2;
    r2 && Je4(r2, e);
  }
  return e;
}
var cr = y6.mac ? "mac" : y6.windows ? "win" : y6.linux ? "linux" : "key";
function fr(s66, t3) {
  let e = s66.split(/-(?!$)/), i3 = e[e.length - 1];
  i3 == "Space" && (i3 = " ");
  let n3, o2, r2, l7;
  for (let h6 = 0; h6 < e.length - 1; ++h6) {
    let c2 = e[h6];
    if (/^(cmd|meta|m)$/i.test(c2)) l7 = true;
    else if (/^a(lt)?$/i.test(c2)) n3 = true;
    else if (/^(c|ctrl|control)$/i.test(c2)) o2 = true;
    else if (/^s(hift)?$/i.test(c2)) r2 = true;
    else if (/^mod$/i.test(c2)) t3 == "mac" ? l7 = true : o2 = true;
    else throw new Error("Unrecognized modifier name: " + c2);
  }
  return n3 && (i3 = "Alt-" + i3), o2 && (i3 = "Ctrl-" + i3), l7 && (i3 = "Meta-" + i3), r2 && (i3 = "Shift-" + i3), i3;
}
function fe7(s66, t3, e) {
  return t3.altKey && (s66 = "Alt-" + s66), t3.ctrlKey && (s66 = "Ctrl-" + s66), t3.metaKey && (s66 = "Meta-" + s66), e !== false && t3.shiftKey && (s66 = "Shift-" + s66), s66;
}
var dr = ht3.default(A6.domEventHandlers({ keydown(s66, t3) {
  return Hn(Pn(t3.state), s66, t3, "editor");
} }));
var ur = y4.define({ enables: dr });
var vs = /* @__PURE__ */ new WeakMap();
function Pn(s66) {
  let t3 = s66.facet(ur), e = vs.get(t3);
  return e || vs.set(t3, e = gr(t3.reduce((i3, n3) => i3.concat(n3), []))), e;
}
var nt4 = null;
var pr = 4e3;
function gr(s66, t3 = cr) {
  let e = /* @__PURE__ */ Object.create(null), i3 = /* @__PURE__ */ Object.create(null), n3 = (r2, l7) => {
    let h6 = i3[r2];
    if (h6 == null) i3[r2] = l7;
    else if (h6 != l7) throw new Error("Key binding " + r2 + " is used both as a regular binding and as a multi-stroke prefix");
  }, o2 = (r2, l7, h6, c2, a7) => {
    var f4, d5;
    let u5 = e[r2] || (e[r2] = /* @__PURE__ */ Object.create(null)), p8 = l7.split(/ (?!$)/).map((m10) => fr(m10, t3));
    for (let m10 = 1; m10 < p8.length; m10++) {
      let w9 = p8.slice(0, m10).join(" ");
      n3(w9, true), u5[w9] || (u5[w9] = { preventDefault: true, stopPropagation: false, run: [(v6) => {
        let x7 = nt4 = { view: v6, prefix: w9, scope: r2 };
        return setTimeout(() => {
          nt4 == x7 && (nt4 = null);
        }, pr), true;
      }] });
    }
    let g8 = p8.join(" ");
    n3(g8, false);
    let b8 = u5[g8] || (u5[g8] = { preventDefault: false, stopPropagation: false, run: ((d5 = (f4 = u5._any) === null || f4 === void 0 ? void 0 : f4.run) === null || d5 === void 0 ? void 0 : d5.slice()) || [] });
    h6 && b8.run.push(h6), c2 && (b8.preventDefault = true), a7 && (b8.stopPropagation = true);
  };
  for (let r2 of s66) {
    let l7 = r2.scope ? r2.scope.split(" ") : ["editor"];
    if (r2.any) for (let c2 of l7) {
      let a7 = e[c2] || (e[c2] = /* @__PURE__ */ Object.create(null));
      a7._any || (a7._any = { preventDefault: false, stopPropagation: false, run: [] });
      let { any: f4 } = r2;
      for (let d5 in a7) a7[d5].run.push((u5) => f4(u5, Ci));
    }
    let h6 = r2[t3] || r2.key;
    if (h6) for (let c2 of l7) o2(c2, h6, r2.run, r2.preventDefault, r2.stopPropagation), r2.shift && o2(c2, "Shift-" + h6, r2.shift, r2.preventDefault, r2.stopPropagation);
  }
  return e;
}
var Ci = null;
function Hn(s66, t3, e, i3) {
  Ci = t3;
  let n3 = g6(t3), o2 = ae6(n3, 0), r2 = Oe5(o2) == n3.length && n3 != " ", l7 = "", h6 = false, c2 = false, a7 = false;
  nt4 && nt4.view == e && nt4.scope == i3 && (l7 = nt4.prefix + " ", Mn.indexOf(t3.keyCode) < 0 && (c2 = true, nt4 = null));
  let f4 = /* @__PURE__ */ new Set(), d5 = (b8) => {
    if (b8) {
      for (let m10 of b8.run) if (!f4.has(m10) && (f4.add(m10), m10(e))) return b8.stopPropagation && (a7 = true), true;
      b8.preventDefault && (b8.stopPropagation && (a7 = true), c2 = true);
    }
    return false;
  }, u5 = s66[i3], p8, g8;
  return u5 && (d5(u5[l7 + fe7(n3, t3, !r2)]) ? h6 = true : r2 && (t3.altKey || t3.metaKey || t3.ctrlKey) && !(y6.windows && t3.ctrlKey && t3.altKey) && (p8 = t2[t3.keyCode]) && p8 != n3 ? (d5(u5[l7 + fe7(p8, t3, true)]) || t3.shiftKey && (g8 = i2[t3.keyCode]) != n3 && g8 != p8 && d5(u5[l7 + fe7(g8, t3, false)])) && (h6 = true) : r2 && t3.shiftKey && d5(u5[l7 + fe7(n3, t3, true)]) && (h6 = true), !h6 && d5(u5._any) && (h6 = true)), c2 && (h6 = true), h6 && a7 && t3.stopPropagation(), Ci = null, h6;
}
var Qt = class s44 {
  constructor(t3, e, i3, n3, o2) {
    this.className = t3, this.left = e, this.top = i3, this.width = n3, this.height = o2;
  }
  draw() {
    let t3 = document.createElement("div");
    return t3.className = this.className, this.adjust(t3), t3;
  }
  update(t3, e) {
    return e.className != this.className ? false : (this.adjust(t3), true);
  }
  adjust(t3) {
    t3.style.left = this.left + "px", t3.style.top = this.top + "px", this.width != null && (t3.style.width = this.width + "px"), t3.style.height = this.height + "px";
  }
  eq(t3) {
    return this.left == t3.left && this.top == t3.top && this.width == t3.width && this.height == t3.height && this.className == t3.className;
  }
  static forRange(t3, e, i3) {
    if (i3.empty) {
      let n3 = t3.coordsAtPos(i3.head, i3.assoc || 1);
      if (!n3) return [];
      let o2 = Nn(t3);
      return [new s44(e, n3.left - o2.left, n3.top - o2.top, null, n3.bottom - n3.top)];
    } else return mr(t3, e, i3);
  }
};
function Nn(s66) {
  let t3 = s66.scrollDOM.getBoundingClientRect();
  return { left: (s66.textDirection == L6.LTR ? t3.left : t3.right - s66.scrollDOM.clientWidth * s66.scaleX) - s66.scrollDOM.scrollLeft * s66.scaleX, top: t3.top - s66.scrollDOM.scrollTop * s66.scaleY };
}
function Ss(s66, t3, e, i3) {
  let n3 = s66.coordsAtPos(t3, e * 2);
  if (!n3) return i3;
  let o2 = s66.dom.getBoundingClientRect(), r2 = (n3.top + n3.bottom) / 2, l7 = s66.posAtCoords({ x: o2.left + 1, y: r2 }), h6 = s66.posAtCoords({ x: o2.right - 1, y: r2 });
  return l7 == null || h6 == null ? i3 : { from: Math.max(i3.from, Math.min(l7, h6)), to: Math.min(i3.to, Math.max(l7, h6)) };
}
function mr(s66, t3, e) {
  if (e.to <= s66.viewport.from || e.from >= s66.viewport.to) return [];
  let i3 = Math.max(e.from, s66.viewport.from), n3 = Math.min(e.to, s66.viewport.to), o2 = s66.textDirection == L6.LTR, r2 = s66.contentDOM, l7 = r2.getBoundingClientRect(), h6 = Nn(s66), c2 = r2.querySelector(".cm-line"), a7 = c2 && window.getComputedStyle(c2), f4 = l7.left + (a7 ? parseInt(a7.paddingLeft) + Math.min(0, parseInt(a7.textIndent)) : 0), d5 = l7.right - (a7 ? parseInt(a7.paddingRight) : 0), u5 = ri(s66, i3), p8 = ri(s66, n3), g8 = u5.type == F6.Text ? u5 : null, b8 = p8.type == F6.Text ? p8 : null;
  if (g8 && (s66.lineWrapping || u5.widgetLineBreaks) && (g8 = Ss(s66, i3, 1, g8)), b8 && (s66.lineWrapping || p8.widgetLineBreaks) && (b8 = Ss(s66, n3, -1, b8)), g8 && b8 && g8.from == b8.from && g8.to == b8.to) return w9(v6(e.from, e.to, g8));
  {
    let S6 = g8 ? v6(e.from, null, g8) : x7(u5, false), C8 = b8 ? v6(null, e.to, b8) : x7(p8, true), E9 = [];
    return (g8 || u5).to < (b8 || p8).from - (g8 && b8 ? 1 : 0) || u5.widgetLineBreaks > 1 && S6.bottom + s66.defaultLineHeight / 2 < C8.top ? E9.push(m10(f4, S6.bottom, d5, C8.top)) : S6.bottom < C8.top && s66.elementAtHeight((S6.bottom + C8.top) / 2).type == F6.Text && (S6.bottom = C8.top = (S6.bottom + C8.top) / 2), w9(S6).concat(E9).concat(w9(C8));
  }
  function m10(S6, C8, E9, B7) {
    return new Qt(t3, S6 - h6.left, C8 - h6.top - 0.01, E9 - S6, B7 - C8 + 0.01);
  }
  function w9({ top: S6, bottom: C8, horizontal: E9 }) {
    let B7 = [];
    for (let et5 = 0; et5 < E9.length; et5 += 2) B7.push(m10(E9[et5], S6, E9[et5 + 1], C8));
    return B7;
  }
  function v6(S6, C8, E9) {
    let B7 = 1e9, et5 = -1e9, ee3 = [];
    function Yi(ct2, it4, bt2, ft3, Tt2) {
      let Z5 = s66.coordsAtPos(ct2, ct2 == E9.to ? -2 : 2), tt5 = s66.coordsAtPos(bt2, bt2 == E9.from ? 2 : -2);
      !Z5 || !tt5 || (B7 = Math.min(Z5.top, tt5.top, B7), et5 = Math.max(Z5.bottom, tt5.bottom, et5), Tt2 == L6.LTR ? ee3.push(o2 && it4 ? f4 : Z5.left, o2 && ft3 ? d5 : tt5.right) : ee3.push(!o2 && ft3 ? f4 : tt5.left, !o2 && it4 ? d5 : Z5.right));
    }
    let ie9 = S6 ?? E9.from, se7 = C8 ?? E9.to;
    for (let ct2 of s66.visibleRanges) if (ct2.to > ie9 && ct2.from < se7) for (let it4 = Math.max(ct2.from, ie9), bt2 = Math.min(ct2.to, se7); ; ) {
      let ft3 = s66.state.doc.lineAt(it4);
      for (let Tt2 of s66.bidiSpans(ft3)) {
        let Z5 = Tt2.from + ft3.from, tt5 = Tt2.to + ft3.from;
        if (Z5 >= bt2) break;
        tt5 > it4 && Yi(Math.max(Z5, it4), S6 == null && Z5 <= ie9, Math.min(tt5, bt2), C8 == null && tt5 >= se7, Tt2.dir);
      }
      if (it4 = ft3.to + 1, it4 >= bt2) break;
    }
    return ee3.length == 0 && Yi(ie9, S6 == null, se7, C8 == null, s66.textDirection), { top: B7, bottom: et5, horizontal: ee3 };
  }
  function x7(S6, C8) {
    let E9 = l7.top + (C8 ? S6.top : S6.bottom);
    return { top: E9, bottom: E9, horizontal: [] };
  }
}
function br(s66, t3) {
  return s66.constructor == t3.constructor && s66.eq(t3);
}
var Mi = class {
  constructor(t3, e) {
    this.view = t3, this.layer = e, this.drawn = [], this.scaleX = 1, this.scaleY = 1, this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) }, this.dom = t3.scrollDOM.appendChild(document.createElement("div")), this.dom.classList.add("cm-layer"), e.above && this.dom.classList.add("cm-layer-above"), e.class && this.dom.classList.add(e.class), this.scale(), this.dom.setAttribute("aria-hidden", "true"), this.setOrder(t3.state), t3.requestMeasure(this.measureReq), e.mount && e.mount(this.dom, t3);
  }
  update(t3) {
    t3.startState.facet(me7) != t3.state.facet(me7) && this.setOrder(t3.state), (this.layer.update(t3, this.dom) || t3.geometryChanged) && (this.scale(), t3.view.requestMeasure(this.measureReq));
  }
  docViewUpdate(t3) {
    this.layer.updateOnDocViewUpdate !== false && t3.requestMeasure(this.measureReq);
  }
  setOrder(t3) {
    let e = 0, i3 = t3.facet(me7);
    for (; e < i3.length && i3[e] != this.layer; ) e++;
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - e);
  }
  measure() {
    return this.layer.markers(this.view);
  }
  scale() {
    let { scaleX: t3, scaleY: e } = this.view;
    (t3 != this.scaleX || e != this.scaleY) && (this.scaleX = t3, this.scaleY = e, this.dom.style.transform = `scale(${1 / t3}, ${1 / e})`);
  }
  draw(t3) {
    if (t3.length != this.drawn.length || t3.some((e, i3) => !br(e, this.drawn[i3]))) {
      let e = this.dom.firstChild, i3 = 0;
      for (let n3 of t3) n3.update && e && n3.constructor && this.drawn[i3].constructor && n3.update(e, this.drawn[i3]) ? (e = e.nextSibling, i3++) : this.dom.insertBefore(n3.draw(), e);
      for (; e; ) {
        let n3 = e.nextSibling;
        e.remove(), e = n3;
      }
      this.drawn = t3;
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view), this.dom.remove();
  }
};
var me7 = y4.define();
function Vn(s66) {
  return [N5.define((t3) => new Mi(t3, s66)), me7.of(s66)];
}
var Fn = !y6.ios;
var Dt2 = y4.define({ combine(s66) {
  return at2(s66, { cursorBlinkRate: 1200, drawRangeCursor: true }, { cursorBlinkRate: (t3, e) => Math.min(t3, e), drawRangeCursor: (t3, e) => t3 || e });
} });
function Wn(s66) {
  return s66.startState.facet(Dt2) != s66.state.facet(Dt2);
}
var yr = Vn({ above: true, markers(s66) {
  let { state: t3 } = s66, e = t3.facet(Dt2), i3 = [];
  for (let n3 of t3.selection.ranges) {
    let o2 = n3 == t3.selection.main;
    if (n3.empty ? !o2 || Fn : e.drawRangeCursor) {
      let r2 = o2 ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary", l7 = n3.empty ? n3 : x4.cursor(n3.head, n3.head > n3.anchor ? -1 : 1);
      for (let h6 of Qt.forRange(s66, r2, l7)) i3.push(h6);
    }
  }
  return i3;
}, update(s66, t3) {
  s66.transactions.some((i3) => i3.selection) && (t3.style.animationName = t3.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink");
  let e = Wn(s66);
  return e && Cs(s66.state, t3), s66.docChanged || s66.selectionSet || e;
}, mount(s66, t3) {
  Cs(t3.state, s66);
}, class: "cm-cursorLayer" });
function Cs(s66, t3) {
  t3.style.animationDuration = s66.facet(Dt2).cursorBlinkRate + "ms";
}
var wr = Vn({ above: false, markers(s66) {
  return s66.state.selection.ranges.map((t3) => t3.empty ? [] : Qt.forRange(s66, "cm-selectionBackground", t3)).reduce((t3, e) => t3.concat(e));
}, update(s66, t3) {
  return s66.docChanged || s66.selectionSet || s66.viewportChanged || Wn(s66);
}, class: "cm-selectionLayer" });
var ki = { ".cm-line": { "& ::selection, &::selection": { backgroundColor: "transparent !important" } }, ".cm-content": { "& :focus": { caretColor: "initial !important", "&::selection, & ::selection": { backgroundColor: "Highlight !important" } } } };
Fn && (ki[".cm-line"].caretColor = ki[".cm-content"].caretColor = "transparent !important");
var xr = ht3.highest(A6.theme(ki));
var zn = v3.define({ map(s66, t3) {
  return s66 == null ? null : t3.mapPos(s66);
} });
var Ht = z6.define({ create() {
  return null;
}, update(s66, t3) {
  return s66 != null && (s66 = t3.changes.mapPos(s66)), t3.effects.reduce((e, i3) => i3.is(zn) ? i3.value : e, s66);
} });
var vr = N5.fromClass(class {
  constructor(s66) {
    this.view = s66, this.cursor = null, this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
  }
  update(s66) {
    var t3;
    let e = s66.state.field(Ht);
    e == null ? this.cursor != null && ((t3 = this.cursor) === null || t3 === void 0 || t3.remove(), this.cursor = null) : (this.cursor || (this.cursor = this.view.scrollDOM.appendChild(document.createElement("div")), this.cursor.className = "cm-dropCursor"), (s66.startState.field(Ht) != e || s66.docChanged || s66.geometryChanged) && this.view.requestMeasure(this.measureReq));
  }
  readPos() {
    let { view: s66 } = this, t3 = s66.state.field(Ht), e = t3 != null && s66.coordsAtPos(t3);
    if (!e) return null;
    let i3 = s66.scrollDOM.getBoundingClientRect();
    return { left: e.left - i3.left + s66.scrollDOM.scrollLeft * s66.scaleX, top: e.top - i3.top + s66.scrollDOM.scrollTop * s66.scaleY, height: e.bottom - e.top };
  }
  drawCursor(s66) {
    if (this.cursor) {
      let { scaleX: t3, scaleY: e } = this.view;
      s66 ? (this.cursor.style.left = s66.left / t3 + "px", this.cursor.style.top = s66.top / e + "px", this.cursor.style.height = s66.height / e + "px") : this.cursor.style.left = "-100000px";
    }
  }
  destroy() {
    this.cursor && this.cursor.remove();
  }
  setDropPos(s66) {
    this.view.state.field(Ht) != s66 && this.view.dispatch({ effects: zn.of(s66) });
  }
}, { eventObservers: { dragover(s66) {
  this.setDropPos(this.view.posAtCoords({ x: s66.clientX, y: s66.clientY }));
}, dragleave(s66) {
  (s66.target == this.view.contentDOM || !this.view.contentDOM.contains(s66.relatedTarget)) && this.setDropPos(null);
}, dragend() {
  this.setDropPos(null);
}, drop() {
  this.setDropPos(null);
} } });
function Ms(s66, t3, e, i3, n3) {
  t3.lastIndex = 0;
  for (let o2 = s66.iterRange(e, i3), r2 = e, l7; !o2.next().done; r2 += o2.value.length) if (!o2.lineBreak) for (; l7 = t3.exec(o2.value); ) n3(r2 + l7.index, l7);
}
function Sr(s66, t3) {
  let e = s66.visibleRanges;
  if (e.length == 1 && e[0].from == s66.viewport.from && e[0].to == s66.viewport.to) return e;
  let i3 = [];
  for (let { from: n3, to: o2 } of e) n3 = Math.max(s66.state.doc.lineAt(n3).from, n3 - t3), o2 = Math.min(s66.state.doc.lineAt(o2).to, o2 + t3), i3.length && i3[i3.length - 1].to >= n3 ? i3[i3.length - 1].to = o2 : i3.push({ from: n3, to: o2 });
  return i3;
}
var Jt = class {
  constructor(t3) {
    let { regexp: e, decoration: i3, decorate: n3, boundary: o2, maxLength: r2 = 1e3 } = t3;
    if (!e.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = e, n3) this.addMatch = (l7, h6, c2, a7) => n3(a7, c2, c2 + l7[0].length, l7, h6);
    else if (typeof i3 == "function") this.addMatch = (l7, h6, c2, a7) => {
      let f4 = i3(l7, h6, c2);
      f4 && a7(c2, c2 + l7[0].length, f4);
    };
    else if (i3) this.addMatch = (l7, h6, c2, a7) => a7(c2, c2 + l7[0].length, i3);
    else throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = o2, this.maxLength = r2;
  }
  createDeco(t3) {
    let e = new re4(), i3 = e.add.bind(e);
    for (let { from: n3, to: o2 } of Sr(t3, this.maxLength)) Ms(t3.state.doc, this.regexp, n3, o2, (r2, l7) => this.addMatch(l7, t3, r2, i3));
    return e.finish();
  }
  updateDeco(t3, e) {
    let i3 = 1e9, n3 = -1;
    return t3.docChanged && t3.changes.iterChanges((o2, r2, l7, h6) => {
      h6 > t3.view.viewport.from && l7 < t3.view.viewport.to && (i3 = Math.min(l7, i3), n3 = Math.max(h6, n3));
    }), t3.viewportChanged || n3 - i3 > 1e3 ? this.createDeco(t3.view) : n3 > -1 ? this.updateRange(t3.view, e.map(t3.changes), i3, n3) : e;
  }
  updateRange(t3, e, i3, n3) {
    for (let o2 of t3.visibleRanges) {
      let r2 = Math.max(o2.from, i3), l7 = Math.min(o2.to, n3);
      if (l7 > r2) {
        let h6 = t3.state.doc.lineAt(r2), c2 = h6.to < l7 ? t3.state.doc.lineAt(l7) : h6, a7 = Math.max(o2.from, h6.from), f4 = Math.min(o2.to, c2.to);
        if (this.boundary) {
          for (; r2 > h6.from; r2--) if (this.boundary.test(h6.text[r2 - 1 - h6.from])) {
            a7 = r2;
            break;
          }
          for (; l7 < c2.to; l7++) if (this.boundary.test(c2.text[l7 - c2.from])) {
            f4 = l7;
            break;
          }
        }
        let d5 = [], u5, p8 = (g8, b8, m10) => d5.push(m10.range(g8, b8));
        if (h6 == c2) for (this.regexp.lastIndex = a7 - h6.from; (u5 = this.regexp.exec(h6.text)) && u5.index < f4 - h6.from; ) this.addMatch(u5, t3, u5.index + h6.from, p8);
        else Ms(t3.state.doc, this.regexp, a7, f4, (g8, b8) => this.addMatch(b8, t3, g8, p8));
        e = e.update({ filterFrom: a7, filterTo: f4, filter: (g8, b8) => g8 < a7 || b8 > f4, add: d5 });
      }
    }
    return e;
  }
};
var Ai = /x/.unicode != null ? "gu" : "g";
var Cr = new RegExp(`[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`, Ai);
var je6 = null;
function kr() {
  var s66;
  if (je6 == null && typeof document < "u" && document.body) {
    let t3 = document.body.style;
    je6 = ((s66 = t3.tabSize) !== null && s66 !== void 0 ? s66 : t3.MozTabSize) != null;
  }
  return je6 || false;
}
var be5 = y4.define({ combine(s66) {
  let t3 = at2(s66, { render: null, specialChars: Cr, addSpecialChars: null });
  return (t3.replaceTabs = !kr()) && (t3.specialChars = new RegExp("	|" + t3.specialChars.source, Ai)), t3.addSpecialChars && (t3.specialChars = new RegExp(t3.specialChars.source + "|" + t3.addSpecialChars.source, Ai)), t3;
} });
var As = N5.fromClass(class {
  constructor() {
    this.height = 1e3, this.attrs = { style: "padding-bottom: 1000px" };
  }
  update(s66) {
    let { view: t3 } = s66, e = t3.viewState.editorHeight - t3.defaultLineHeight - t3.documentPadding.top - 0.5;
    e >= 0 && e != this.height && (this.height = e, this.attrs = { style: `padding-bottom: ${e}px` });
  }
});
var Tr = O3.line({ class: "cm-activeLine" });
var Rr = N5.fromClass(class {
  constructor(s66) {
    this.decorations = this.getDeco(s66);
  }
  update(s66) {
    (s66.docChanged || s66.selectionSet) && (this.decorations = this.getDeco(s66.view));
  }
  getDeco(s66) {
    let t3 = -1, e = [];
    for (let i3 of s66.state.selection.ranges) {
      let n3 = s66.lineBlockAt(i3.head);
      n3.from > t3 && (e.push(Tr.range(n3.from)), t3 = n3.from);
    }
    return O3.set(e);
  }
}, { decorations: (s66) => s66.decorations });
var Rt2 = "-10000px";
var Le3 = class {
  constructor(t3, e, i3, n3) {
    this.facet = e, this.createTooltipView = i3, this.removeTooltipView = n3, this.input = t3.state.facet(e), this.tooltips = this.input.filter((r2) => r2);
    let o2 = null;
    this.tooltipViews = this.tooltips.map((r2) => o2 = i3(r2, o2));
  }
  update(t3, e) {
    var i3;
    let n3 = t3.state.facet(this.facet), o2 = n3.filter((h6) => h6);
    if (n3 === this.input) {
      for (let h6 of this.tooltipViews) h6.update && h6.update(t3);
      return false;
    }
    let r2 = [], l7 = e ? [] : null;
    for (let h6 = 0; h6 < o2.length; h6++) {
      let c2 = o2[h6], a7 = -1;
      if (c2) {
        for (let f4 = 0; f4 < this.tooltips.length; f4++) {
          let d5 = this.tooltips[f4];
          d5 && d5.create == c2.create && (a7 = f4);
        }
        if (a7 < 0) r2[h6] = this.createTooltipView(c2, h6 ? r2[h6 - 1] : null), l7 && (l7[h6] = !!c2.above);
        else {
          let f4 = r2[h6] = this.tooltipViews[a7];
          l7 && (l7[h6] = e[a7]), f4.update && f4.update(t3);
        }
      }
    }
    for (let h6 of this.tooltipViews) r2.indexOf(h6) < 0 && (this.removeTooltipView(h6), (i3 = h6.destroy) === null || i3 === void 0 || i3.call(h6));
    return e && (l7.forEach((h6, c2) => e[c2] = h6), e.length = l7.length), this.input = n3, this.tooltips = o2, this.tooltipViews = r2, true;
  }
};
function Nr(s66) {
  let { win: t3 } = s66;
  return { top: 0, left: 0, bottom: t3.innerHeight, right: t3.innerWidth };
}
var ye7 = y4.define({ combine: (s66) => {
  var t3, e, i3;
  return { position: y6.ios ? "absolute" : ((t3 = s66.find((n3) => n3.position)) === null || t3 === void 0 ? void 0 : t3.position) || "fixed", parent: ((e = s66.find((n3) => n3.parent)) === null || e === void 0 ? void 0 : e.parent) || null, tooltipSpace: ((i3 = s66.find((n3) => n3.tooltipSpace)) === null || i3 === void 0 ? void 0 : i3.tooltipSpace) || Nr };
} });
var Os = /* @__PURE__ */ new WeakMap();
var We4 = N5.fromClass(class {
  constructor(s66) {
    this.view = s66, this.above = [], this.inView = true, this.madeAbsolute = false, this.lastTransaction = 0, this.measureTimeout = -1;
    let t3 = s66.state.facet(ye7);
    this.position = t3.position, this.parent = t3.parent, this.classes = s66.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null, this.manager = new Le3(s66, In, (e, i3) => this.createTooltip(e, i3), (e) => {
      this.resizeObserver && this.resizeObserver.unobserve(e.dom), e.dom.remove();
    }), this.above = this.manager.tooltips.map((e) => !!e.above), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((e) => {
      Date.now() > this.lastTransaction - 50 && e.length > 0 && e[e.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), s66.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let s66 of this.manager.tooltipViews) this.intersectionObserver.observe(s66.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(s66) {
    s66.transactions.length && (this.lastTransaction = Date.now());
    let t3 = this.manager.update(s66, this.above);
    t3 && this.observeIntersection();
    let e = t3 || s66.geometryChanged, i3 = s66.state.facet(ye7);
    if (i3.position != this.position && !this.madeAbsolute) {
      this.position = i3.position;
      for (let n3 of this.manager.tooltipViews) n3.dom.style.position = this.position;
      e = true;
    }
    if (i3.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i3.parent, this.createContainer();
      for (let n3 of this.manager.tooltipViews) this.container.appendChild(n3.dom);
      e = true;
    } else this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    e && this.maybeMeasure();
  }
  createTooltip(s66, t3) {
    let e = s66.create(this.view), i3 = t3 ? t3.dom : null;
    if (e.dom.classList.add("cm-tooltip"), s66.arrow && !e.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let n3 = document.createElement("div");
      n3.className = "cm-tooltip-arrow", e.dom.appendChild(n3);
    }
    return e.dom.style.position = this.position, e.dom.style.top = Rt2, e.dom.style.left = "0px", this.container.insertBefore(e.dom, i3), e.mount && e.mount(this.view), this.resizeObserver && this.resizeObserver.observe(e.dom), e;
  }
  destroy() {
    var s66, t3, e;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let i3 of this.manager.tooltipViews) i3.dom.remove(), (s66 = i3.destroy) === null || s66 === void 0 || s66.call(i3);
    this.parent && this.container.remove(), (t3 = this.resizeObserver) === null || t3 === void 0 || t3.disconnect(), (e = this.intersectionObserver) === null || e === void 0 || e.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let s66 = 1, t3 = 1, e = false;
    if (this.position == "fixed" && this.manager.tooltipViews.length) {
      let { dom: o2 } = this.manager.tooltipViews[0];
      if (y6.gecko) e = o2.offsetParent != this.container.ownerDocument.body;
      else if (o2.style.top == Rt2 && o2.style.left == "0px") {
        let r2 = o2.getBoundingClientRect();
        e = Math.abs(r2.top + 1e4) > 1 || Math.abs(r2.left) > 1;
      }
    }
    if (e || this.position == "absolute") if (this.parent) {
      let o2 = this.parent.getBoundingClientRect();
      o2.width && o2.height && (s66 = o2.width / this.parent.offsetWidth, t3 = o2.height / this.parent.offsetHeight);
    } else ({ scaleX: s66, scaleY: t3 } = this.view.viewState);
    let i3 = this.view.scrollDOM.getBoundingClientRect(), n3 = qi(this.view);
    return { visible: { left: i3.left + n3.left, top: i3.top + n3.top, right: i3.right - n3.right, bottom: i3.bottom - n3.bottom }, parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(), pos: this.manager.tooltips.map((o2, r2) => {
      let l7 = this.manager.tooltipViews[r2];
      return l7.getCoords ? l7.getCoords(o2.pos) : this.view.coordsAtPos(o2.pos);
    }), size: this.manager.tooltipViews.map(({ dom: o2 }) => o2.getBoundingClientRect()), space: this.view.state.facet(ye7).tooltipSpace(this.view), scaleX: s66, scaleY: t3, makeAbsolute: e };
  }
  writeMeasure(s66) {
    var t3;
    if (s66.makeAbsolute) {
      this.madeAbsolute = true, this.position = "absolute";
      for (let l7 of this.manager.tooltipViews) l7.dom.style.position = "absolute";
    }
    let { visible: e, space: i3, scaleX: n3, scaleY: o2 } = s66, r2 = [];
    for (let l7 = 0; l7 < this.manager.tooltips.length; l7++) {
      let h6 = this.manager.tooltips[l7], c2 = this.manager.tooltipViews[l7], { dom: a7 } = c2, f4 = s66.pos[l7], d5 = s66.size[l7];
      if (!f4 || h6.clip !== false && (f4.bottom <= Math.max(e.top, i3.top) || f4.top >= Math.min(e.bottom, i3.bottom) || f4.right < Math.max(e.left, i3.left) - 0.1 || f4.left > Math.min(e.right, i3.right) + 0.1)) {
        a7.style.top = Rt2;
        continue;
      }
      let u5 = h6.arrow ? c2.dom.querySelector(".cm-tooltip-arrow") : null, p8 = u5 ? 7 : 0, g8 = d5.right - d5.left, b8 = (t3 = Os.get(c2)) !== null && t3 !== void 0 ? t3 : d5.bottom - d5.top, m10 = c2.offset || Fr, w9 = this.view.textDirection == L6.LTR, v6 = d5.width > i3.right - i3.left ? w9 ? i3.left : i3.right - d5.width : w9 ? Math.max(i3.left, Math.min(f4.left - (u5 ? 14 : 0) + m10.x, i3.right - g8)) : Math.min(Math.max(i3.left, f4.left - g8 + (u5 ? 14 : 0) - m10.x), i3.right - g8), x7 = this.above[l7];
      !h6.strictSide && (x7 ? f4.top - b8 - p8 - m10.y < i3.top : f4.bottom + b8 + p8 + m10.y > i3.bottom) && x7 == i3.bottom - f4.bottom > f4.top - i3.top && (x7 = this.above[l7] = !x7);
      let S6 = (x7 ? f4.top - i3.top : i3.bottom - f4.bottom) - p8;
      if (S6 < b8 && c2.resize !== false) {
        if (S6 < this.view.defaultLineHeight) {
          a7.style.top = Rt2;
          continue;
        }
        Os.set(c2, b8), a7.style.height = (b8 = S6) / o2 + "px";
      } else a7.style.height && (a7.style.height = "");
      let C8 = x7 ? f4.top - b8 - p8 - m10.y : f4.bottom + p8 + m10.y, E9 = v6 + g8;
      if (c2.overlap !== true) for (let B7 of r2) B7.left < E9 && B7.right > v6 && B7.top < C8 + b8 && B7.bottom > C8 && (C8 = x7 ? B7.top - b8 - 2 - p8 : B7.bottom + p8 + 2);
      if (this.position == "absolute" ? (a7.style.top = (C8 - s66.parent.top) / o2 + "px", a7.style.left = (v6 - s66.parent.left) / n3 + "px") : (a7.style.top = C8 / o2 + "px", a7.style.left = v6 / n3 + "px"), u5) {
        let B7 = f4.left + (w9 ? m10.x : -m10.x) - (v6 + 14 - 7);
        u5.style.left = B7 / n3 + "px";
      }
      c2.overlap !== true && r2.push({ left: v6, top: C8, right: E9, bottom: C8 + b8 }), a7.classList.toggle("cm-tooltip-above", x7), a7.classList.toggle("cm-tooltip-below", !x7), c2.positioned && c2.positioned(s66.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView))) for (let s66 of this.manager.tooltipViews) s66.dom.style.top = Rt2;
  }
}, { eventObservers: { scroll() {
  this.maybeMeasure();
} } });
var Vr = A6.baseTheme({ ".cm-tooltip": { zIndex: 500, boxSizing: "border-box" }, "&light .cm-tooltip": { border: "1px solid #bbb", backgroundColor: "#f5f5f5" }, "&light .cm-tooltip-section:not(:first-child)": { borderTop: "1px solid #bbb" }, "&dark .cm-tooltip": { backgroundColor: "#333338", color: "white" }, ".cm-tooltip-arrow": { height: "7px", width: `${7 * 2}px`, position: "absolute", zIndex: -1, overflow: "hidden", "&:before, &:after": { content: "''", position: "absolute", width: 0, height: 0, borderLeft: "7px solid transparent", borderRight: "7px solid transparent" }, ".cm-tooltip-above &": { bottom: "-7px", "&:before": { borderTop: "7px solid #bbb" }, "&:after": { borderTop: "7px solid #f5f5f5", bottom: "1px" } }, ".cm-tooltip-below &": { top: "-7px", "&:before": { borderBottom: "7px solid #bbb" }, "&:after": { borderBottom: "7px solid #f5f5f5", top: "1px" } } }, "&dark .cm-tooltip .cm-tooltip-arrow": { "&:before": { borderTopColor: "#333338", borderBottomColor: "#333338" }, "&:after": { borderTopColor: "transparent", borderBottomColor: "transparent" } } });
var Fr = { x: 0, y: 0 };
var In = y4.define({ enables: [We4, Vr] });
var Zt = y4.define({ combine: (s66) => s66.reduce((t3, e) => t3.concat(e), []) });
var Be6 = class s45 {
  static create(t3) {
    return new s45(t3);
  }
  constructor(t3) {
    this.view = t3, this.mounted = false, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new Le3(t3, Zt, (e, i3) => this.createHostedView(e, i3), (e) => e.dom.remove());
  }
  createHostedView(t3, e) {
    let i3 = t3.create(this.view);
    return i3.dom.classList.add("cm-tooltip-section"), this.dom.insertBefore(i3.dom, e ? e.dom.nextSibling : this.dom.firstChild), this.mounted && i3.mount && i3.mount(this.view), i3;
  }
  mount(t3) {
    for (let e of this.manager.tooltipViews) e.mount && e.mount(t3);
    this.mounted = true;
  }
  positioned(t3) {
    for (let e of this.manager.tooltipViews) e.positioned && e.positioned(t3);
  }
  update(t3) {
    this.manager.update(t3);
  }
  destroy() {
    var t3;
    for (let e of this.manager.tooltipViews) (t3 = e.destroy) === null || t3 === void 0 || t3.call(e);
  }
  passProp(t3) {
    let e;
    for (let i3 of this.manager.tooltipViews) {
      let n3 = i3[t3];
      if (n3 !== void 0) {
        if (e === void 0) e = n3;
        else if (e !== n3) return;
      }
    }
    return e;
  }
  get offset() {
    return this.passProp("offset");
  }
  get getCoords() {
    return this.passProp("getCoords");
  }
  get overlap() {
    return this.passProp("overlap");
  }
  get resize() {
    return this.passProp("resize");
  }
};
var Wr = In.compute([Zt], (s66) => {
  let t3 = s66.facet(Zt);
  return t3.length === 0 ? null : { pos: Math.min(...t3.map((e) => e.pos)), end: Math.max(...t3.map((e) => {
    var i3;
    return (i3 = e.end) !== null && i3 !== void 0 ? i3 : e.pos;
  })), create: Be6.create, above: t3[0].above, arrow: t3.some((e) => e.arrow) };
});
var Kn = v3.define();
var wl = Kn.of(null);
var Li = y4.define({ combine(s66) {
  let t3, e;
  for (let i3 of s66) t3 = t3 || i3.topContainer, e = e || i3.bottomContainer;
  return { topContainer: t3, bottomContainer: e };
} });
var qn = N5.fromClass(class {
  constructor(s66) {
    this.input = s66.state.facet(Rs), this.specs = this.input.filter((e) => e), this.panels = this.specs.map((e) => e(s66));
    let t3 = s66.state.facet(Li);
    this.top = new vt2(s66, true, t3.topContainer), this.bottom = new vt2(s66, false, t3.bottomContainer), this.top.sync(this.panels.filter((e) => e.top)), this.bottom.sync(this.panels.filter((e) => !e.top));
    for (let e of this.panels) e.dom.classList.add("cm-panel"), e.mount && e.mount();
  }
  update(s66) {
    let t3 = s66.state.facet(Li);
    this.top.container != t3.topContainer && (this.top.sync([]), this.top = new vt2(s66.view, true, t3.topContainer)), this.bottom.container != t3.bottomContainer && (this.bottom.sync([]), this.bottom = new vt2(s66.view, false, t3.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let e = s66.state.facet(Rs);
    if (e != this.input) {
      let i3 = e.filter((h6) => h6), n3 = [], o2 = [], r2 = [], l7 = [];
      for (let h6 of i3) {
        let c2 = this.specs.indexOf(h6), a7;
        c2 < 0 ? (a7 = h6(s66.view), l7.push(a7)) : (a7 = this.panels[c2], a7.update && a7.update(s66)), n3.push(a7), (a7.top ? o2 : r2).push(a7);
      }
      this.specs = i3, this.panels = n3, this.top.sync(o2), this.bottom.sync(r2);
      for (let h6 of l7) h6.dom.classList.add("cm-panel"), h6.mount && h6.mount();
    } else for (let i3 of this.panels) i3.update && i3.update(s66);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, { provide: (s66) => A6.scrollMargins.of((t3) => {
  let e = t3.plugin(s66);
  return e && { top: e.top.scrollMargin(), bottom: e.bottom.scrollMargin() };
}) });
var vt2 = class {
  constructor(t3, e, i3) {
    this.view = t3, this.top = e, this.container = i3, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(t3) {
    for (let e of this.panels) e.destroy && t3.indexOf(e) < 0 && e.destroy();
    this.panels = t3, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let e = this.container || this.view.dom;
      e.insertBefore(this.dom, this.top ? e.firstChild : null);
    }
    let t3 = this.dom.firstChild;
    for (let e of this.panels) if (e.dom.parentNode == this.dom) {
      for (; t3 != e.dom; ) t3 = Ts(t3);
      t3 = t3.nextSibling;
    } else this.dom.insertBefore(e.dom, t3);
    for (; t3; ) t3 = Ts(t3);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let t3 of this.classes.split(" ")) t3 && this.container.classList.remove(t3);
      for (let t3 of (this.classes = this.view.themeClasses).split(" ")) t3 && this.container.classList.add(t3);
    }
  }
};
function Ts(s66) {
  let t3 = s66.nextSibling;
  return s66.remove(), t3;
}
var Rs = y4.define({ enables: qn });
var J5 = class extends W7 {
  compare(t3) {
    return this == t3 || this.constructor == t3.constructor && this.eq(t3);
  }
  eq(t3) {
    return false;
  }
  destroy(t3) {
  }
};
J5.prototype.elementClass = "";
J5.prototype.toDOM = void 0;
J5.prototype.mapMode = E6.TrackBefore;
J5.prototype.startSide = J5.prototype.endSide = -1;
J5.prototype.point = true;
var we6 = y4.define();
var Kr = y4.define();
var Kt = y4.define();
var Bi = y4.define({ combine: (s66) => s66.some((t3) => t3) });
var jr = N5.fromClass(class {
  constructor(s66) {
    this.view = s66, this.prevViewport = s66.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px", this.gutters = s66.state.facet(Kt).map((t3) => new Pe3(s66, t3));
    for (let t3 of this.gutters) this.dom.appendChild(t3.dom);
    this.fixed = !s66.state.facet(Bi), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(false), s66.scrollDOM.insertBefore(this.dom, s66.contentDOM);
  }
  update(s66) {
    if (this.updateGutters(s66)) {
      let t3 = this.prevViewport, e = s66.view.viewport, i3 = Math.min(t3.to, e.to) - Math.max(t3.from, e.from);
      this.syncGutters(i3 < (e.to - e.from) * 0.8);
    }
    s66.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px"), this.view.state.facet(Bi) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = s66.view.viewport;
  }
  syncGutters(s66) {
    let t3 = this.dom.nextSibling;
    s66 && this.dom.remove();
    let e = T.iter(this.view.state.facet(we6), this.view.viewport.from), i3 = [], n3 = this.gutters.map((o2) => new Hi(o2, this.view.viewport, -this.view.documentPadding.top));
    for (let o2 of this.view.viewportLineBlocks) if (i3.length && (i3 = []), Array.isArray(o2.type)) {
      let r2 = true;
      for (let l7 of o2.type) if (l7.type == F6.Text && r2) {
        Pi(e, i3, l7.from);
        for (let h6 of n3) h6.line(this.view, l7, i3);
        r2 = false;
      } else if (l7.widget) for (let h6 of n3) h6.widget(this.view, l7);
    } else if (o2.type == F6.Text) {
      Pi(e, i3, o2.from);
      for (let r2 of n3) r2.line(this.view, o2, i3);
    } else if (o2.widget) for (let r2 of n3) r2.widget(this.view, o2);
    for (let o2 of n3) o2.finish();
    s66 && this.view.scrollDOM.insertBefore(this.dom, t3);
  }
  updateGutters(s66) {
    let t3 = s66.startState.facet(Kt), e = s66.state.facet(Kt), i3 = s66.docChanged || s66.heightChanged || s66.viewportChanged || !T.eq(s66.startState.facet(we6), s66.state.facet(we6), s66.view.viewport.from, s66.view.viewport.to);
    if (t3 == e) for (let n3 of this.gutters) n3.update(s66) && (i3 = true);
    else {
      i3 = true;
      let n3 = [];
      for (let o2 of e) {
        let r2 = t3.indexOf(o2);
        r2 < 0 ? n3.push(new Pe3(this.view, o2)) : (this.gutters[r2].update(s66), n3.push(this.gutters[r2]));
      }
      for (let o2 of this.gutters) o2.dom.remove(), n3.indexOf(o2) < 0 && o2.destroy();
      for (let o2 of n3) this.dom.appendChild(o2.dom);
      this.gutters = n3;
    }
    return i3;
  }
  destroy() {
    for (let s66 of this.gutters) s66.destroy();
    this.dom.remove();
  }
}, { provide: (s66) => A6.scrollMargins.of((t3) => {
  let e = t3.plugin(s66);
  return !e || e.gutters.length == 0 || !e.fixed ? null : t3.textDirection == L6.LTR ? { left: e.dom.offsetWidth * t3.scaleX } : { right: e.dom.offsetWidth * t3.scaleX };
}) });
function Es(s66) {
  return Array.isArray(s66) ? s66 : [s66];
}
function Pi(s66, t3, e) {
  for (; s66.value && s66.from <= e; ) s66.from == e && t3.push(s66.value), s66.next();
}
var Hi = class {
  constructor(t3, e, i3) {
    this.gutter = t3, this.height = i3, this.i = 0, this.cursor = T.iter(t3.markers, e.from);
  }
  addElement(t3, e, i3) {
    let { gutter: n3 } = this, o2 = (e.top - this.height) / t3.scaleY, r2 = e.height / t3.scaleY;
    if (this.i == n3.elements.length) {
      let l7 = new He6(t3, r2, o2, i3);
      n3.elements.push(l7), n3.dom.appendChild(l7.dom);
    } else n3.elements[this.i].update(t3, r2, o2, i3);
    this.height = e.bottom, this.i++;
  }
  line(t3, e, i3) {
    let n3 = [];
    Pi(this.cursor, n3, e.from), i3.length && (n3 = n3.concat(i3));
    let o2 = this.gutter.config.lineMarker(t3, e, n3);
    o2 && n3.unshift(o2);
    let r2 = this.gutter;
    n3.length == 0 && !r2.config.renderEmptyElements || this.addElement(t3, e, n3);
  }
  widget(t3, e) {
    let i3 = this.gutter.config.widgetMarker(t3, e.widget, e), n3 = i3 ? [i3] : null;
    for (let o2 of t3.state.facet(Kr)) {
      let r2 = o2(t3, e.widget, e);
      r2 && (n3 || (n3 = [])).push(r2);
    }
    n3 && this.addElement(t3, e, n3);
  }
  finish() {
    let t3 = this.gutter;
    for (; t3.elements.length > this.i; ) {
      let e = t3.elements.pop();
      t3.dom.removeChild(e.dom), e.destroy();
    }
  }
};
var Pe3 = class {
  constructor(t3, e) {
    this.view = t3, this.config = e, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i3 in e.domEventHandlers) this.dom.addEventListener(i3, (n3) => {
      let o2 = n3.target, r2;
      if (o2 != this.dom && this.dom.contains(o2)) {
        for (; o2.parentNode != this.dom; ) o2 = o2.parentNode;
        let h6 = o2.getBoundingClientRect();
        r2 = (h6.top + h6.bottom) / 2;
      } else r2 = n3.clientY;
      let l7 = t3.lineBlockAtHeight(r2 - t3.documentTop);
      e.domEventHandlers[i3](t3, l7, n3) && n3.preventDefault();
    });
    this.markers = Es(e.markers(t3)), e.initialSpacer && (this.spacer = new He6(t3, 0, 0, [e.initialSpacer(t3)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(t3) {
    let e = this.markers;
    if (this.markers = Es(this.config.markers(t3.view)), this.spacer && this.config.updateSpacer) {
      let n3 = this.config.updateSpacer(this.spacer.markers[0], t3);
      n3 != this.spacer.markers[0] && this.spacer.update(t3.view, 0, 0, [n3]);
    }
    let i3 = t3.view.viewport;
    return !T.eq(this.markers, e, i3.from, i3.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(t3) : false);
  }
  destroy() {
    for (let t3 of this.elements) t3.destroy();
  }
};
var He6 = class {
  constructor(t3, e, i3, n3) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(t3, e, i3, n3);
  }
  update(t3, e, i3, n3) {
    this.height != e && (this.height = e, this.dom.style.height = e + "px"), this.above != i3 && (this.dom.style.marginTop = (this.above = i3) ? i3 + "px" : ""), Yr(this.markers, n3) || this.setMarkers(t3, n3);
  }
  setMarkers(t3, e) {
    let i3 = "cm-gutterElement", n3 = this.dom.firstChild;
    for (let o2 = 0, r2 = 0; ; ) {
      let l7 = r2, h6 = o2 < e.length ? e[o2++] : null, c2 = false;
      if (h6) {
        let a7 = h6.elementClass;
        a7 && (i3 += " " + a7);
        for (let f4 = r2; f4 < this.markers.length; f4++) if (this.markers[f4].compare(h6)) {
          l7 = f4, c2 = true;
          break;
        }
      } else l7 = this.markers.length;
      for (; r2 < l7; ) {
        let a7 = this.markers[r2++];
        if (a7.toDOM) {
          a7.destroy(n3);
          let f4 = n3.nextSibling;
          n3.remove(), n3 = f4;
        }
      }
      if (!h6) break;
      h6.toDOM && (c2 ? n3 = n3.nextSibling : this.dom.insertBefore(h6.toDOM(t3), n3)), c2 && r2++;
    }
    this.dom.className = i3, this.markers = e;
  }
  destroy() {
    this.setMarkers(null, []);
  }
};
function Yr(s66, t3) {
  if (s66.length != t3.length) return false;
  for (let e = 0; e < s66.length; e++) if (!s66[e].compare(t3[e])) return false;
  return true;
}
var _r = y4.define();
var Xr = y4.define();
var St2 = y4.define({ combine(s66) {
  return at2(s66, { formatNumber: String, domEventHandlers: {} }, { domEventHandlers(t3, e) {
    let i3 = Object.assign({}, t3);
    for (let n3 in e) {
      let o2 = i3[n3], r2 = e[n3];
      i3[n3] = o2 ? (l7, h6, c2) => o2(l7, h6, c2) || r2(l7, h6, c2) : r2;
    }
    return i3;
  } });
} });
var qt = class extends J5 {
  constructor(t3) {
    super(), this.number = t3;
  }
  eq(t3) {
    return this.number == t3.number;
  }
  toDOM() {
    return document.createTextNode(this.number);
  }
};
function Ye5(s66, t3) {
  return s66.state.facet(St2).formatNumber(t3, s66.state);
}
var Gr = Kt.compute([St2], (s66) => ({ class: "cm-lineNumbers", renderEmptyElements: false, markers(t3) {
  return t3.state.facet(_r);
}, lineMarker(t3, e, i3) {
  return i3.some((n3) => n3.toDOM) ? null : new qt(Ye5(t3, t3.state.doc.lineAt(e.from).number));
}, widgetMarker: (t3, e, i3) => {
  for (let n3 of t3.state.facet(Xr)) {
    let o2 = n3(t3, e, i3);
    if (o2) return o2;
  }
  return null;
}, lineMarkerChange: (t3) => t3.startState.facet(St2) != t3.state.facet(St2), initialSpacer(t3) {
  return new qt(Ye5(t3, Ls(t3.state.doc.lines)));
}, updateSpacer(t3, e) {
  let i3 = Ye5(e.view, Ls(e.view.state.doc.lines));
  return i3 == t3.number ? t3 : new qt(i3);
}, domEventHandlers: s66.facet(St2).domEventHandlers }));
function Ls(s66) {
  let t3 = 9;
  for (; t3 < s66; ) t3 = t3 * 10 + 9;
  return t3;
}
var $r = new class extends J5 {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}();
var Ur = we6.compute(["selection"], (s66) => {
  let t3 = [], e = -1;
  for (let i3 of s66.selection.ranges) {
    let n3 = s66.doc.lineAt(i3.head).from;
    n3 > e && (e = n3, t3.push($r.range(n3)));
  }
  return T.of(t3);
});
function Yn(s66) {
  return N5.define((t3) => ({ decorations: s66.createDeco(t3), update(e) {
    this.decorations = s66.updateDeco(e, this.decorations);
  } }), { decorations: (t3) => t3.decorations });
}
var Qr = O3.mark({ class: "cm-highlightTab" });
var Jr = O3.mark({ class: "cm-highlightSpace" });
var Zr = Yn(new Jt({ regexp: /\t| /g, decoration: (s66) => s66[0] == "	" ? Qr : Jr, boundary: /\S/ }));
var tl = Yn(new Jt({ regexp: /\s+$/g, decoration: O3.mark({ class: "cm-trailingSpace" }), boundary: /\S/ }));

// https://esm.sh/v135/@codemirror/state@6.4.1/es2022/state.mjs?target=es2020&dev
var m8 = class s46 {
  lineAt(e) {
    if (e < 0 || e > this.length) throw new RangeError(`Invalid position ${e} in document of length ${this.length}`);
    return this.lineInner(e, false, 1, 0);
  }
  line(e) {
    if (e < 1 || e > this.lines) throw new RangeError(`Invalid line number ${e} in ${this.lines}-line document`);
    return this.lineInner(e, true, 1, 0);
  }
  replace(e, t3, n3) {
    [e, t3] = $3(this, e, t3);
    let i3 = [];
    return this.decompose(0, e, i3, 2), n3.length && n3.decompose(0, n3.length, i3, 3), this.decompose(t3, this.length, i3, 1), N6.from(i3, this.length - (t3 - e) + n3.length);
  }
  append(e) {
    return this.replace(this.length, this.length, e);
  }
  slice(e, t3 = this.length) {
    [e, t3] = $3(this, e, t3);
    let n3 = [];
    return this.decompose(e, t3, n3, 0), N6.from(n3, t3 - e);
  }
  eq(e) {
    if (e == this) return true;
    if (e.length != this.length || e.lines != this.lines) return false;
    let t3 = this.scanIdentical(e, 1), n3 = this.length - this.scanIdentical(e, -1), i3 = new B6(this), r2 = new B6(e);
    for (let l7 = t3, h6 = t3; ; ) {
      if (i3.next(l7), r2.next(l7), l7 = 0, i3.lineBreak != r2.lineBreak || i3.done != r2.done || i3.value != r2.value) return false;
      if (h6 += i3.value.length, i3.done || h6 >= n3) return true;
    }
  }
  iter(e = 1) {
    return new B6(this, e);
  }
  iterRange(e, t3 = this.length) {
    return new Y7(this, e, t3);
  }
  iterLines(e, t3) {
    let n3;
    if (e == null) n3 = this.iter();
    else {
      t3 == null && (t3 = this.lines + 1);
      let i3 = this.line(e).from;
      n3 = this.iterRange(i3, Math.max(i3, t3 == this.lines + 1 ? this.length : t3 <= 1 ? 0 : this.line(t3 - 1).to));
    }
    return new _5(n3);
  }
  toString() {
    return this.sliceString(0);
  }
  toJSON() {
    let e = [];
    return this.flatten(e), e;
  }
  constructor() {
  }
  static of(e) {
    if (e.length == 0) throw new RangeError("A document must have at least one line");
    return e.length == 1 && !e[0] ? s46.empty : e.length <= 32 ? new k4(e) : N6.from(k4.split(e, []));
  }
};
var k4 = class s47 extends m8 {
  constructor(e, t3 = He7(e)) {
    super(), this.text = e, this.length = t3;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(e, t3, n3, i3) {
    for (let r2 = 0; ; r2++) {
      let l7 = this.text[r2], h6 = i3 + l7.length;
      if ((t3 ? n3 : h6) >= e) return new fe8(i3, h6, n3, l7);
      i3 = h6 + 1, n3++;
    }
  }
  decompose(e, t3, n3, i3) {
    let r2 = e <= 0 && t3 >= this.length ? this : new s47(Ae5(this.text, e, t3), Math.min(t3, this.length) - Math.max(0, e));
    if (i3 & 1) {
      let l7 = n3.pop(), h6 = X6(r2.text, l7.text.slice(), 0, r2.length);
      if (h6.length <= 32) n3.push(new s47(h6, l7.length + r2.length));
      else {
        let a7 = h6.length >> 1;
        n3.push(new s47(h6.slice(0, a7)), new s47(h6.slice(a7)));
      }
    } else n3.push(r2);
  }
  replace(e, t3, n3) {
    if (!(n3 instanceof s47)) return super.replace(e, t3, n3);
    [e, t3] = $3(this, e, t3);
    let i3 = X6(this.text, X6(n3.text, Ae5(this.text, 0, e)), t3), r2 = this.length + n3.length - (t3 - e);
    return i3.length <= 32 ? new s47(i3, r2) : N6.from(s47.split(i3, []), r2);
  }
  sliceString(e, t3 = this.length, n3 = `
`) {
    [e, t3] = $3(this, e, t3);
    let i3 = "";
    for (let r2 = 0, l7 = 0; r2 <= t3 && l7 < this.text.length; l7++) {
      let h6 = this.text[l7], a7 = r2 + h6.length;
      r2 > e && l7 && (i3 += n3), e < a7 && t3 > r2 && (i3 += h6.slice(Math.max(0, e - r2), t3 - r2)), r2 = a7 + 1;
    }
    return i3;
  }
  flatten(e) {
    for (let t3 of this.text) e.push(t3);
  }
  scanIdentical() {
    return 0;
  }
  static split(e, t3) {
    let n3 = [], i3 = -1;
    for (let r2 of e) n3.push(r2), i3 += r2.length + 1, n3.length == 32 && (t3.push(new s47(n3, i3)), n3 = [], i3 = -1);
    return i3 > -1 && t3.push(new s47(n3, i3)), t3;
  }
};
var N6 = class s48 extends m8 {
  constructor(e, t3) {
    super(), this.children = e, this.length = t3, this.lines = 0;
    for (let n3 of e) this.lines += n3.lines;
  }
  lineInner(e, t3, n3, i3) {
    for (let r2 = 0; ; r2++) {
      let l7 = this.children[r2], h6 = i3 + l7.length, a7 = n3 + l7.lines - 1;
      if ((t3 ? a7 : h6) >= e) return l7.lineInner(e, t3, n3, i3);
      i3 = h6 + 1, n3 = a7 + 1;
    }
  }
  decompose(e, t3, n3, i3) {
    for (let r2 = 0, l7 = 0; l7 <= t3 && r2 < this.children.length; r2++) {
      let h6 = this.children[r2], a7 = l7 + h6.length;
      if (e <= a7 && t3 >= l7) {
        let o2 = i3 & ((l7 <= e ? 1 : 0) | (a7 >= t3 ? 2 : 0));
        l7 >= e && a7 <= t3 && !o2 ? n3.push(h6) : h6.decompose(e - l7, t3 - l7, n3, o2);
      }
      l7 = a7 + 1;
    }
  }
  replace(e, t3, n3) {
    if ([e, t3] = $3(this, e, t3), n3.lines < this.lines) for (let i3 = 0, r2 = 0; i3 < this.children.length; i3++) {
      let l7 = this.children[i3], h6 = r2 + l7.length;
      if (e >= r2 && t3 <= h6) {
        let a7 = l7.replace(e - r2, t3 - r2, n3), o2 = this.lines - l7.lines + a7.lines;
        if (a7.lines < o2 >> 4 && a7.lines > o2 >> 6) {
          let f4 = this.children.slice();
          return f4[i3] = a7, new s48(f4, this.length - (t3 - e) + n3.length);
        }
        return super.replace(r2, h6, a7);
      }
      r2 = h6 + 1;
    }
    return super.replace(e, t3, n3);
  }
  sliceString(e, t3 = this.length, n3 = `
`) {
    [e, t3] = $3(this, e, t3);
    let i3 = "";
    for (let r2 = 0, l7 = 0; r2 < this.children.length && l7 <= t3; r2++) {
      let h6 = this.children[r2], a7 = l7 + h6.length;
      l7 > e && r2 && (i3 += n3), e < a7 && t3 > l7 && (i3 += h6.sliceString(e - l7, t3 - l7, n3)), l7 = a7 + 1;
    }
    return i3;
  }
  flatten(e) {
    for (let t3 of this.children) t3.flatten(e);
  }
  scanIdentical(e, t3) {
    if (!(e instanceof s48)) return 0;
    let n3 = 0, [i3, r2, l7, h6] = t3 > 0 ? [0, 0, this.children.length, e.children.length] : [this.children.length - 1, e.children.length - 1, -1, -1];
    for (; ; i3 += t3, r2 += t3) {
      if (i3 == l7 || r2 == h6) return n3;
      let a7 = this.children[i3], o2 = e.children[r2];
      if (a7 != o2) return n3 + a7.scanIdentical(o2, t3);
      n3 += a7.length + 1;
    }
  }
  static from(e, t3 = e.reduce((n3, i3) => n3 + i3.length + 1, -1)) {
    let n3 = 0;
    for (let c2 of e) n3 += c2.lines;
    if (n3 < 32) {
      let c2 = [];
      for (let g8 of e) g8.flatten(c2);
      return new k4(c2, t3);
    }
    let i3 = Math.max(32, n3 >> 5), r2 = i3 << 1, l7 = i3 >> 1, h6 = [], a7 = 0, o2 = -1, f4 = [];
    function u5(c2) {
      let g8;
      if (c2.lines > r2 && c2 instanceof s48) for (let P5 of c2.children) u5(P5);
      else c2.lines > l7 && (a7 > l7 || !a7) ? (d5(), h6.push(c2)) : c2 instanceof k4 && a7 && (g8 = f4[f4.length - 1]) instanceof k4 && c2.lines + g8.lines <= 32 ? (a7 += c2.lines, o2 += c2.length + 1, f4[f4.length - 1] = new k4(g8.text.concat(c2.text), g8.length + 1 + c2.length)) : (a7 + c2.lines > i3 && d5(), a7 += c2.lines, o2 += c2.length + 1, f4.push(c2));
    }
    function d5() {
      a7 != 0 && (h6.push(f4.length == 1 ? f4[0] : s48.from(f4, o2)), o2 = -1, a7 = f4.length = 0);
    }
    for (let c2 of e) u5(c2);
    return d5(), h6.length == 1 ? h6[0] : new s48(h6, t3);
  }
};
m8.empty = new k4([""], 0);
function He7(s66) {
  let e = -1;
  for (let t3 of s66) e += t3.length + 1;
  return e;
}
function X6(s66, e, t3 = 0, n3 = 1e9) {
  for (let i3 = 0, r2 = 0, l7 = true; r2 < s66.length && i3 <= n3; r2++) {
    let h6 = s66[r2], a7 = i3 + h6.length;
    a7 >= t3 && (a7 > n3 && (h6 = h6.slice(0, n3 - i3)), i3 < t3 && (h6 = h6.slice(t3 - i3)), l7 ? (e[e.length - 1] += h6, l7 = false) : e.push(h6)), i3 = a7 + 1;
  }
  return e;
}
function Ae5(s66, e, t3) {
  return X6(s66, [""], e, t3);
}
var B6 = class {
  constructor(e, t3 = 1) {
    this.dir = t3, this.done = false, this.lineBreak = false, this.value = "", this.nodes = [e], this.offsets = [t3 > 0 ? 1 : (e instanceof k4 ? e.text.length : e.children.length) << 1];
  }
  nextInner(e, t3) {
    for (this.done = this.lineBreak = false; ; ) {
      let n3 = this.nodes.length - 1, i3 = this.nodes[n3], r2 = this.offsets[n3], l7 = r2 >> 1, h6 = i3 instanceof k4 ? i3.text.length : i3.children.length;
      if (l7 == (t3 > 0 ? h6 : 0)) {
        if (n3 == 0) return this.done = true, this.value = "", this;
        t3 > 0 && this.offsets[n3 - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((r2 & 1) == (t3 > 0 ? 0 : 1)) {
        if (this.offsets[n3] += t3, e == 0) return this.lineBreak = true, this.value = `
`, this;
        e--;
      } else if (i3 instanceof k4) {
        let a7 = i3.text[l7 + (t3 < 0 ? -1 : 0)];
        if (this.offsets[n3] += t3, a7.length > Math.max(0, e)) return this.value = e == 0 ? a7 : t3 > 0 ? a7.slice(e) : a7.slice(0, a7.length - e), this;
        e -= a7.length;
      } else {
        let a7 = i3.children[l7 + (t3 < 0 ? -1 : 0)];
        e > a7.length ? (e -= a7.length, this.offsets[n3] += t3) : (t3 < 0 && this.offsets[n3]--, this.nodes.push(a7), this.offsets.push(t3 > 0 ? 1 : (a7 instanceof k4 ? a7.text.length : a7.children.length) << 1));
      }
    }
  }
  next(e = 0) {
    return e < 0 && (this.nextInner(-e, -this.dir), e = this.value.length), this.nextInner(e, this.dir);
  }
};
var Y7 = class {
  constructor(e, t3, n3) {
    this.value = "", this.done = false, this.cursor = new B6(e, t3 > n3 ? -1 : 1), this.pos = t3 > n3 ? e.length : 0, this.from = Math.min(t3, n3), this.to = Math.max(t3, n3);
  }
  nextInner(e, t3) {
    if (t3 < 0 ? this.pos <= this.from : this.pos >= this.to) return this.value = "", this.done = true, this;
    e += Math.max(0, t3 < 0 ? this.pos - this.to : this.from - this.pos);
    let n3 = t3 < 0 ? this.pos - this.from : this.to - this.pos;
    e > n3 && (e = n3), n3 -= e;
    let { value: i3 } = this.cursor.next(e);
    return this.pos += (i3.length + e) * t3, this.value = i3.length <= n3 ? i3 : t3 < 0 ? i3.slice(i3.length - n3) : i3.slice(0, n3), this.done = !this.value, this;
  }
  next(e = 0) {
    return e < 0 ? e = Math.max(e, this.from - this.pos) : e > 0 && (e = Math.min(e, this.to - this.pos)), this.nextInner(e, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
};
var _5 = class {
  constructor(e) {
    this.inner = e, this.afterBreak = true, this.value = "", this.done = false;
  }
  next(e = 0) {
    let { done: t3, lineBreak: n3, value: i3 } = this.inner.next(e);
    return t3 && this.afterBreak ? (this.value = "", this.afterBreak = false) : t3 ? (this.done = true, this.value = "") : n3 ? this.afterBreak ? this.value = "" : (this.afterBreak = true, this.next()) : (this.value = i3, this.afterBreak = false), this;
  }
  get lineBreak() {
    return false;
  }
};
typeof Symbol < "u" && (m8.prototype[Symbol.iterator] = function() {
  return this.iter();
}, B6.prototype[Symbol.iterator] = Y7.prototype[Symbol.iterator] = _5.prototype[Symbol.iterator] = function() {
  return this;
});
var fe8 = class {
  constructor(e, t3, n3, i3) {
    this.from = e, this.to = t3, this.number = n3, this.text = i3;
  }
  get length() {
    return this.to - this.from;
  }
};
function $3(s66, e, t3) {
  return e = Math.max(0, Math.min(s66.length, e)), [e, Math.max(e, Math.min(s66.length, t3))];
}
var D7 = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s66) => s66 ? parseInt(s66, 36) : 1);
for (let s66 = 1; s66 < D7.length; s66++) D7[s66] += D7[s66 - 1];
function Ze5(s66) {
  for (let e = 1; e < D7.length; e += 2) if (D7[e] > s66) return D7[e - 1] <= s66;
  return false;
}
function Ee8(s66) {
  return s66 >= 127462 && s66 <= 127487;
}
var be6 = 8205;
function ee2(s66, e, t3 = true, n3 = true) {
  return (t3 ? Fe7 : Ke4)(s66, e, n3);
}
function Fe7(s66, e, t3) {
  if (e == s66.length) return e;
  e && Je5(s66.charCodeAt(e)) && Le4(s66.charCodeAt(e - 1)) && e--;
  let n3 = ae8(s66, e);
  for (e += Oe7(n3); e < s66.length; ) {
    let i3 = ae8(s66, e);
    if (n3 == be6 || i3 == be6 || t3 && Ze5(i3)) e += Oe7(i3), n3 = i3;
    else if (Ee8(i3)) {
      let r2 = 0, l7 = e - 2;
      for (; l7 >= 0 && Ee8(ae8(s66, l7)); ) r2++, l7 -= 2;
      if (r2 % 2 == 0) break;
      e += 2;
    } else break;
  }
  return e;
}
function Ke4(s66, e, t3) {
  for (; e > 0; ) {
    let n3 = Fe7(s66, e - 2, t3);
    if (n3 < e) return n3;
    e--;
  }
  return 0;
}
function Je5(s66) {
  return s66 >= 56320 && s66 < 57344;
}
function Le4(s66) {
  return s66 >= 55296 && s66 < 56320;
}
function ae8(s66, e) {
  let t3 = s66.charCodeAt(e);
  if (!Le4(t3) || e + 1 == s66.length) return t3;
  let n3 = s66.charCodeAt(e + 1);
  return Je5(n3) ? (t3 - 55296 << 10) + (n3 - 56320) + 65536 : t3;
}
function Oe7(s66) {
  return s66 < 65536 ? 1 : 2;
}
var ue7 = /\r\n?|\n/;
var E7 = function(s66) {
  return s66[s66.Simple = 0] = "Simple", s66[s66.TrackDel = 1] = "TrackDel", s66[s66.TrackBefore = 2] = "TrackBefore", s66[s66.TrackAfter = 3] = "TrackAfter", s66;
}(E7 || (E7 = {}));
var C6 = class s49 {
  constructor(e) {
    this.sections = e;
  }
  get length() {
    let e = 0;
    for (let t3 = 0; t3 < this.sections.length; t3 += 2) e += this.sections[t3];
    return e;
  }
  get newLength() {
    let e = 0;
    for (let t3 = 0; t3 < this.sections.length; t3 += 2) {
      let n3 = this.sections[t3 + 1];
      e += n3 < 0 ? this.sections[t3] : n3;
    }
    return e;
  }
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  iterGaps(e) {
    for (let t3 = 0, n3 = 0, i3 = 0; t3 < this.sections.length; ) {
      let r2 = this.sections[t3++], l7 = this.sections[t3++];
      l7 < 0 ? (e(n3, i3, r2), i3 += r2) : i3 += l7, n3 += r2;
    }
  }
  iterChangedRanges(e, t3 = false) {
    ce8(this, e, t3);
  }
  get invertedDesc() {
    let e = [];
    for (let t3 = 0; t3 < this.sections.length; ) {
      let n3 = this.sections[t3++], i3 = this.sections[t3++];
      i3 < 0 ? e.push(n3, i3) : e.push(i3, n3);
    }
    return new s49(e);
  }
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : Ne5(this, e);
  }
  mapDesc(e, t3 = false) {
    return e.empty ? this : de6(this, e, t3);
  }
  mapPos(e, t3 = -1, n3 = E7.Simple) {
    let i3 = 0, r2 = 0;
    for (let l7 = 0; l7 < this.sections.length; ) {
      let h6 = this.sections[l7++], a7 = this.sections[l7++], o2 = i3 + h6;
      if (a7 < 0) {
        if (o2 > e) return r2 + (e - i3);
        r2 += h6;
      } else {
        if (n3 != E7.Simple && o2 >= e && (n3 == E7.TrackDel && i3 < e && o2 > e || n3 == E7.TrackBefore && i3 < e || n3 == E7.TrackAfter && o2 > e)) return null;
        if (o2 > e || o2 == e && t3 < 0 && !h6) return e == i3 || t3 < 0 ? r2 : r2 + a7;
        r2 += a7;
      }
      i3 = o2;
    }
    if (e > i3) throw new RangeError(`Position ${e} is out of range for changeset of length ${i3}`);
    return r2;
  }
  touchesRange(e, t3 = e) {
    for (let n3 = 0, i3 = 0; n3 < this.sections.length && i3 <= t3; ) {
      let r2 = this.sections[n3++], l7 = this.sections[n3++], h6 = i3 + r2;
      if (l7 >= 0 && i3 <= t3 && h6 >= e) return i3 < e && h6 > t3 ? "cover" : true;
      i3 = h6;
    }
    return false;
  }
  toString() {
    let e = "";
    for (let t3 = 0; t3 < this.sections.length; ) {
      let n3 = this.sections[t3++], i3 = this.sections[t3++];
      e += (e ? " " : "") + n3 + (i3 >= 0 ? ":" + i3 : "");
    }
    return e;
  }
  toJSON() {
    return this.sections;
  }
  static fromJSON(e) {
    if (!Array.isArray(e) || e.length % 2 || e.some((t3) => typeof t3 != "number")) throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new s49(e);
  }
  static create(e) {
    return new s49(e);
  }
};
var A7 = class s50 extends C6 {
  constructor(e, t3) {
    super(e), this.inserted = t3;
  }
  apply(e) {
    if (this.length != e.length) throw new RangeError("Applying change set to a document with the wrong length");
    return ce8(this, (t3, n3, i3, r2, l7) => e = e.replace(i3, i3 + (n3 - t3), l7), false), e;
  }
  mapDesc(e, t3 = false) {
    return de6(this, e, t3, true);
  }
  invert(e) {
    let t3 = this.sections.slice(), n3 = [];
    for (let i3 = 0, r2 = 0; i3 < t3.length; i3 += 2) {
      let l7 = t3[i3], h6 = t3[i3 + 1];
      if (h6 >= 0) {
        t3[i3] = h6, t3[i3 + 1] = l7;
        let a7 = i3 >> 1;
        for (; n3.length < a7; ) n3.push(m8.empty);
        n3.push(l7 ? e.slice(r2, r2 + l7) : m8.empty);
      }
      r2 += l7;
    }
    return new s50(t3, n3);
  }
  compose(e) {
    return this.empty ? e : e.empty ? this : Ne5(this, e, true);
  }
  map(e, t3 = false) {
    return e.empty ? this : de6(this, e, t3, true);
  }
  iterChanges(e, t3 = false) {
    ce8(this, e, t3);
  }
  get desc() {
    return C6.create(this.sections);
  }
  filter(e) {
    let t3 = [], n3 = [], i3 = [], r2 = new F7(this);
    e: for (let l7 = 0, h6 = 0; ; ) {
      let a7 = l7 == e.length ? 1e9 : e[l7++];
      for (; h6 < a7 || h6 == a7 && r2.len == 0; ) {
        if (r2.done) break e;
        let f4 = Math.min(r2.len, a7 - h6);
        w7(i3, f4, -1);
        let u5 = r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0;
        w7(t3, f4, u5), u5 > 0 && b6(n3, t3, r2.text), r2.forward(f4), h6 += f4;
      }
      let o2 = e[l7++];
      for (; h6 < o2; ) {
        if (r2.done) break e;
        let f4 = Math.min(r2.len, o2 - h6);
        w7(t3, f4, -1), w7(i3, f4, r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0), r2.forward(f4), h6 += f4;
      }
    }
    return { changes: new s50(t3, n3), filtered: C6.create(i3) };
  }
  toJSON() {
    let e = [];
    for (let t3 = 0; t3 < this.sections.length; t3 += 2) {
      let n3 = this.sections[t3], i3 = this.sections[t3 + 1];
      i3 < 0 ? e.push(n3) : i3 == 0 ? e.push([n3]) : e.push([n3].concat(this.inserted[t3 >> 1].toJSON()));
    }
    return e;
  }
  static of(e, t3, n3) {
    let i3 = [], r2 = [], l7 = 0, h6 = null;
    function a7(f4 = false) {
      if (!f4 && !i3.length) return;
      l7 < t3 && w7(i3, t3 - l7, -1);
      let u5 = new s50(i3, r2);
      h6 = h6 ? h6.compose(u5.map(h6)) : u5, i3 = [], r2 = [], l7 = 0;
    }
    function o2(f4) {
      if (Array.isArray(f4)) for (let u5 of f4) o2(u5);
      else if (f4 instanceof s50) {
        if (f4.length != t3) throw new RangeError(`Mismatched change set length (got ${f4.length}, expected ${t3})`);
        a7(), h6 = h6 ? h6.compose(f4.map(h6)) : f4;
      } else {
        let { from: u5, to: d5 = u5, insert: c2 } = f4;
        if (u5 > d5 || u5 < 0 || d5 > t3) throw new RangeError(`Invalid change range ${u5} to ${d5} (in doc of length ${t3})`);
        let g8 = c2 ? typeof c2 == "string" ? m8.of(c2.split(n3 || ue7)) : c2 : m8.empty, P5 = g8.length;
        if (u5 == d5 && P5 == 0) return;
        u5 < l7 && a7(), u5 > l7 && w7(i3, u5 - l7, -1), w7(i3, d5 - u5, P5), b6(r2, i3, g8), l7 = d5;
      }
    }
    return o2(e), a7(!h6), h6;
  }
  static empty(e) {
    return new s50(e ? [e, -1] : [], []);
  }
  static fromJSON(e) {
    if (!Array.isArray(e)) throw new RangeError("Invalid JSON representation of ChangeSet");
    let t3 = [], n3 = [];
    for (let i3 = 0; i3 < e.length; i3++) {
      let r2 = e[i3];
      if (typeof r2 == "number") t3.push(r2, -1);
      else {
        if (!Array.isArray(r2) || typeof r2[0] != "number" || r2.some((l7, h6) => h6 && typeof l7 != "string")) throw new RangeError("Invalid JSON representation of ChangeSet");
        if (r2.length == 1) t3.push(r2[0], 0);
        else {
          for (; n3.length < i3; ) n3.push(m8.empty);
          n3[i3] = m8.of(r2.slice(1)), t3.push(r2[0], n3[i3].length);
        }
      }
    }
    return new s50(t3, n3);
  }
  static createSet(e, t3) {
    return new s50(e, t3);
  }
};
function w7(s66, e, t3, n3 = false) {
  if (e == 0 && t3 <= 0) return;
  let i3 = s66.length - 2;
  i3 >= 0 && t3 <= 0 && t3 == s66[i3 + 1] ? s66[i3] += e : e == 0 && s66[i3] == 0 ? s66[i3 + 1] += t3 : n3 ? (s66[i3] += e, s66[i3 + 1] += t3) : s66.push(e, t3);
}
function b6(s66, e, t3) {
  if (t3.length == 0) return;
  let n3 = e.length - 2 >> 1;
  if (n3 < s66.length) s66[s66.length - 1] = s66[s66.length - 1].append(t3);
  else {
    for (; s66.length < n3; ) s66.push(m8.empty);
    s66.push(t3);
  }
}
function ce8(s66, e, t3) {
  let n3 = s66.inserted;
  for (let i3 = 0, r2 = 0, l7 = 0; l7 < s66.sections.length; ) {
    let h6 = s66.sections[l7++], a7 = s66.sections[l7++];
    if (a7 < 0) i3 += h6, r2 += h6;
    else {
      let o2 = i3, f4 = r2, u5 = m8.empty;
      for (; o2 += h6, f4 += a7, a7 && n3 && (u5 = u5.append(n3[l7 - 2 >> 1])), !(t3 || l7 == s66.sections.length || s66.sections[l7 + 1] < 0); ) h6 = s66.sections[l7++], a7 = s66.sections[l7++];
      e(i3, o2, r2, f4, u5), i3 = o2, r2 = f4;
    }
  }
}
function de6(s66, e, t3, n3 = false) {
  let i3 = [], r2 = n3 ? [] : null, l7 = new F7(s66), h6 = new F7(e);
  for (let a7 = -1; ; ) if (l7.ins == -1 && h6.ins == -1) {
    let o2 = Math.min(l7.len, h6.len);
    w7(i3, o2, -1), l7.forward(o2), h6.forward(o2);
  } else if (h6.ins >= 0 && (l7.ins < 0 || a7 == l7.i || l7.off == 0 && (h6.len < l7.len || h6.len == l7.len && !t3))) {
    let o2 = h6.len;
    for (w7(i3, h6.ins, -1); o2; ) {
      let f4 = Math.min(l7.len, o2);
      l7.ins >= 0 && a7 < l7.i && l7.len <= f4 && (w7(i3, 0, l7.ins), r2 && b6(r2, i3, l7.text), a7 = l7.i), l7.forward(f4), o2 -= f4;
    }
    h6.next();
  } else if (l7.ins >= 0) {
    let o2 = 0, f4 = l7.len;
    for (; f4; ) if (h6.ins == -1) {
      let u5 = Math.min(f4, h6.len);
      o2 += u5, f4 -= u5, h6.forward(u5);
    } else if (h6.ins == 0 && h6.len < f4) f4 -= h6.len, h6.next();
    else break;
    w7(i3, o2, a7 < l7.i ? l7.ins : 0), r2 && a7 < l7.i && b6(r2, i3, l7.text), a7 = l7.i, l7.forward(l7.len - f4);
  } else {
    if (l7.done && h6.done) return r2 ? A7.createSet(i3, r2) : C6.create(i3);
    throw new Error("Mismatched change set lengths");
  }
}
function Ne5(s66, e, t3 = false) {
  let n3 = [], i3 = t3 ? [] : null, r2 = new F7(s66), l7 = new F7(e);
  for (let h6 = false; ; ) {
    if (r2.done && l7.done) return i3 ? A7.createSet(n3, i3) : C6.create(n3);
    if (r2.ins == 0) w7(n3, r2.len, 0, h6), r2.next();
    else if (l7.len == 0 && !l7.done) w7(n3, 0, l7.ins, h6), i3 && b6(i3, n3, l7.text), l7.next();
    else {
      if (r2.done || l7.done) throw new Error("Mismatched change set lengths");
      {
        let a7 = Math.min(r2.len2, l7.len), o2 = n3.length;
        if (r2.ins == -1) {
          let f4 = l7.ins == -1 ? -1 : l7.off ? 0 : l7.ins;
          w7(n3, a7, f4, h6), i3 && f4 && b6(i3, n3, l7.text);
        } else l7.ins == -1 ? (w7(n3, r2.off ? 0 : r2.len, a7, h6), i3 && b6(i3, n3, r2.textBit(a7))) : (w7(n3, r2.off ? 0 : r2.len, l7.off ? 0 : l7.ins, h6), i3 && !l7.off && b6(i3, n3, l7.text));
        h6 = (r2.ins > a7 || l7.ins >= 0 && l7.len > a7) && (h6 || n3.length > o2), r2.forward2(a7), l7.forward(a7);
      }
    }
  }
}
var F7 = class {
  constructor(e) {
    this.set = e, this.i = 0, this.next();
  }
  next() {
    let { sections: e } = this.set;
    this.i < e.length ? (this.len = e[this.i++], this.ins = e[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: e } = this.set, t3 = this.i - 2 >> 1;
    return t3 >= e.length ? m8.empty : e[t3];
  }
  textBit(e) {
    let { inserted: t3 } = this.set, n3 = this.i - 2 >> 1;
    return n3 >= t3.length && !e ? m8.empty : t3[n3].slice(this.off, e == null ? void 0 : this.off + e);
  }
  forward(e) {
    e == this.len ? this.next() : (this.len -= e, this.off += e);
  }
  forward2(e) {
    this.ins == -1 ? this.forward(e) : e == this.ins ? this.next() : (this.ins -= e, this.off += e);
  }
};
var L7 = class s51 {
  constructor(e, t3, n3) {
    this.from = e, this.to = t3, this.flags = n3;
  }
  get anchor() {
    return this.flags & 32 ? this.to : this.from;
  }
  get head() {
    return this.flags & 32 ? this.from : this.to;
  }
  get empty() {
    return this.from == this.to;
  }
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
  }
  get bidiLevel() {
    let e = this.flags & 7;
    return e == 7 ? null : e;
  }
  get goalColumn() {
    let e = this.flags >> 6;
    return e == 16777215 ? void 0 : e;
  }
  map(e, t3 = -1) {
    let n3, i3;
    return this.empty ? n3 = i3 = e.mapPos(this.from, t3) : (n3 = e.mapPos(this.from, 1), i3 = e.mapPos(this.to, -1)), n3 == this.from && i3 == this.to ? this : new s51(n3, i3, this.flags);
  }
  extend(e, t3 = e) {
    if (e <= this.anchor && t3 >= this.anchor) return x6.range(e, t3);
    let n3 = Math.abs(e - this.anchor) > Math.abs(t3 - this.anchor) ? e : t3;
    return x6.range(this.anchor, n3);
  }
  eq(e, t3 = false) {
    return this.anchor == e.anchor && this.head == e.head && (!t3 || !this.empty || this.assoc == e.assoc);
  }
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  static fromJSON(e) {
    if (!e || typeof e.anchor != "number" || typeof e.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
    return x6.range(e.anchor, e.head);
  }
  static create(e, t3, n3) {
    return new s51(e, t3, n3);
  }
};
var x6 = class s52 {
  constructor(e, t3) {
    this.ranges = e, this.mainIndex = t3;
  }
  map(e, t3 = -1) {
    return e.empty ? this : s52.create(this.ranges.map((n3) => n3.map(e, t3)), this.mainIndex);
  }
  eq(e, t3 = false) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex) return false;
    for (let n3 = 0; n3 < this.ranges.length; n3++) if (!this.ranges[n3].eq(e.ranges[n3], t3)) return false;
    return true;
  }
  get main() {
    return this.ranges[this.mainIndex];
  }
  asSingle() {
    return this.ranges.length == 1 ? this : new s52([this.main], 0);
  }
  addRange(e, t3 = true) {
    return s52.create([e].concat(this.ranges), t3 ? 0 : this.mainIndex + 1);
  }
  replaceRange(e, t3 = this.mainIndex) {
    let n3 = this.ranges.slice();
    return n3[t3] = e, s52.create(n3, this.mainIndex);
  }
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex };
  }
  static fromJSON(e) {
    if (!e || !Array.isArray(e.ranges) || typeof e.main != "number" || e.main >= e.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
    return new s52(e.ranges.map((t3) => L7.fromJSON(t3)), e.main);
  }
  static single(e, t3 = e) {
    return new s52([s52.range(e, t3)], 0);
  }
  static create(e, t3 = 0) {
    if (e.length == 0) throw new RangeError("A selection needs at least one range");
    for (let n3 = 0, i3 = 0; i3 < e.length; i3++) {
      let r2 = e[i3];
      if (r2.empty ? r2.from <= n3 : r2.from < n3) return s52.normalized(e.slice(), t3);
      n3 = r2.to;
    }
    return new s52(e, t3);
  }
  static cursor(e, t3 = 0, n3, i3) {
    return L7.create(e, e, (t3 == 0 ? 0 : t3 < 0 ? 8 : 16) | (n3 == null ? 7 : Math.min(6, n3)) | (i3 ?? 16777215) << 6);
  }
  static range(e, t3, n3, i3) {
    let r2 = (n3 ?? 16777215) << 6 | (i3 == null ? 7 : Math.min(6, i3));
    return t3 < e ? L7.create(t3, e, 48 | r2) : L7.create(e, t3, (t3 > e ? 8 : 0) | r2);
  }
  static normalized(e, t3 = 0) {
    let n3 = e[t3];
    e.sort((i3, r2) => i3.from - r2.from), t3 = e.indexOf(n3);
    for (let i3 = 1; i3 < e.length; i3++) {
      let r2 = e[i3], l7 = e[i3 - 1];
      if (r2.empty ? r2.from <= l7.to : r2.from < l7.to) {
        let h6 = l7.from, a7 = Math.max(r2.to, l7.to);
        i3 <= t3 && t3--, e.splice(--i3, 2, r2.anchor > r2.head ? s52.range(a7, h6) : s52.range(h6, a7));
      }
    }
    return new s52(e, t3);
  }
};
function De6(s66, e) {
  for (let t3 of s66.ranges) if (t3.to > e) throw new RangeError("Selection points outside of document");
}
var Ie8 = 0;
var y7 = class s53 {
  constructor(e, t3, n3, i3, r2) {
    this.combine = e, this.compareInput = t3, this.compare = n3, this.isStatic = i3, this.id = Ie8++, this.default = e([]), this.extensions = typeof r2 == "function" ? r2(this) : r2;
  }
  get reader() {
    return this;
  }
  static define(e = {}) {
    return new s53(e.combine || ((t3) => t3), e.compareInput || ((t3, n3) => t3 === n3), e.compare || (e.combine ? (t3, n3) => t3 === n3 : Pe4), !!e.static, e.enables);
  }
  of(e) {
    return new V6([], this, 0, e);
  }
  compute(e, t3) {
    if (this.isStatic) throw new Error("Can't compute a static facet");
    return new V6(e, this, 1, t3);
  }
  computeN(e, t3) {
    if (this.isStatic) throw new Error("Can't compute a static facet");
    return new V6(e, this, 2, t3);
  }
  from(e, t3) {
    return t3 || (t3 = (n3) => n3), this.compute([e], (n3) => t3(n3.field(e)));
  }
};
function Pe4(s66, e) {
  return s66 == e || s66.length == e.length && s66.every((t3, n3) => t3 === e[n3]);
}
var V6 = class {
  constructor(e, t3, n3, i3) {
    this.dependencies = e, this.facet = t3, this.type = n3, this.value = i3, this.id = Ie8++;
  }
  dynamicSlot(e) {
    var t3;
    let n3 = this.value, i3 = this.facet.compareInput, r2 = this.id, l7 = e[r2] >> 1, h6 = this.type == 2, a7 = false, o2 = false, f4 = [];
    for (let u5 of this.dependencies) u5 == "doc" ? a7 = true : u5 == "selection" ? o2 = true : ((t3 = e[u5.id]) !== null && t3 !== void 0 ? t3 : 1) & 1 || f4.push(e[u5.id]);
    return { create(u5) {
      return u5.values[l7] = n3(u5), 1;
    }, update(u5, d5) {
      if (a7 && d5.docChanged || o2 && (d5.docChanged || d5.selection) || ge9(u5, f4)) {
        let c2 = n3(u5);
        if (h6 ? !Te7(c2, u5.values[l7], i3) : !i3(c2, u5.values[l7])) return u5.values[l7] = c2, 1;
      }
      return 0;
    }, reconfigure: (u5, d5) => {
      let c2, g8 = d5.config.address[r2];
      if (g8 != null) {
        let P5 = se6(d5, g8);
        if (this.dependencies.every((p8) => p8 instanceof y7 ? d5.facet(p8) === u5.facet(p8) : p8 instanceof z8 ? d5.field(p8, false) == u5.field(p8, false) : true) || (h6 ? Te7(c2 = n3(u5), P5, i3) : i3(c2 = n3(u5), P5))) return u5.values[l7] = P5, 0;
      } else c2 = n3(u5);
      return u5.values[l7] = c2, 1;
    } };
  }
};
function Te7(s66, e, t3) {
  if (s66.length != e.length) return false;
  for (let n3 = 0; n3 < s66.length; n3++) if (!t3(s66[n3], e[n3])) return false;
  return true;
}
function ge9(s66, e) {
  let t3 = false;
  for (let n3 of e) j9(s66, n3) & 1 && (t3 = true);
  return t3;
}
function Qe5(s66, e, t3) {
  let n3 = t3.map((a7) => s66[a7.id]), i3 = t3.map((a7) => a7.type), r2 = n3.filter((a7) => !(a7 & 1)), l7 = s66[e.id] >> 1;
  function h6(a7) {
    let o2 = [];
    for (let f4 = 0; f4 < n3.length; f4++) {
      let u5 = se6(a7, n3[f4]);
      if (i3[f4] == 2) for (let d5 of u5) o2.push(d5);
      else o2.push(u5);
    }
    return e.combine(o2);
  }
  return { create(a7) {
    for (let o2 of n3) j9(a7, o2);
    return a7.values[l7] = h6(a7), 1;
  }, update(a7, o2) {
    if (!ge9(a7, r2)) return 0;
    let f4 = h6(a7);
    return e.compare(f4, a7.values[l7]) ? 0 : (a7.values[l7] = f4, 1);
  }, reconfigure(a7, o2) {
    let f4 = ge9(a7, n3), u5 = o2.config.facets[e.id], d5 = o2.facet(e);
    if (u5 && !f4 && Pe4(t3, u5)) return a7.values[l7] = d5, 0;
    let c2 = h6(a7);
    return e.compare(c2, d5) ? (a7.values[l7] = d5, 0) : (a7.values[l7] = c2, 1);
  } };
}
var Me4 = y7.define({ static: true });
var z8 = class s54 {
  constructor(e, t3, n3, i3, r2) {
    this.id = e, this.createF = t3, this.updateF = n3, this.compareF = i3, this.spec = r2, this.provides = void 0;
  }
  static define(e) {
    let t3 = new s54(Ie8++, e.create, e.update, e.compare || ((n3, i3) => n3 === i3), e);
    return e.provide && (t3.provides = e.provide(t3)), t3;
  }
  create(e) {
    let t3 = e.facet(Me4).find((n3) => n3.field == this);
    return (t3?.create || this.createF)(e);
  }
  slot(e) {
    let t3 = e[this.id] >> 1;
    return { create: (n3) => (n3.values[t3] = this.create(n3), 1), update: (n3, i3) => {
      let r2 = n3.values[t3], l7 = this.updateF(r2, i3);
      return this.compareF(r2, l7) ? 0 : (n3.values[t3] = l7, 1);
    }, reconfigure: (n3, i3) => i3.config.address[this.id] != null ? (n3.values[t3] = i3.field(this), 0) : (n3.values[t3] = this.create(n3), 1) };
  }
  init(e) {
    return [this, Me4.of({ field: this, create: e })];
  }
  get extension() {
    return this;
  }
};
var M5 = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function U9(s66) {
  return (e) => new te5(e, s66);
}
var ht5 = { highest: U9(M5.highest), high: U9(M5.high), default: U9(M5.default), low: U9(M5.low), lowest: U9(M5.lowest) };
var te5 = class {
  constructor(e, t3) {
    this.inner = e, this.prec = t3;
  }
};
var ne7 = class s55 {
  of(e) {
    return new G7(this, e);
  }
  reconfigure(e) {
    return s55.reconfigure.of({ compartment: this, extension: e });
  }
  get(e) {
    return e.config.compartments.get(this);
  }
};
var G7 = class {
  constructor(e, t3) {
    this.compartment = e, this.inner = t3;
  }
};
var ie8 = class s56 {
  constructor(e, t3, n3, i3, r2, l7) {
    for (this.base = e, this.compartments = t3, this.dynamicSlots = n3, this.address = i3, this.staticValues = r2, this.facets = l7, this.statusTemplate = []; this.statusTemplate.length < n3.length; ) this.statusTemplate.push(0);
  }
  staticFacet(e) {
    let t3 = this.address[e.id];
    return t3 == null ? e.default : this.staticValues[t3 >> 1];
  }
  static resolve(e, t3, n3) {
    let i3 = [], r2 = /* @__PURE__ */ Object.create(null), l7 = /* @__PURE__ */ new Map();
    for (let d5 of Xe6(e, t3, l7)) d5 instanceof z8 ? i3.push(d5) : (r2[d5.facet.id] || (r2[d5.facet.id] = [])).push(d5);
    let h6 = /* @__PURE__ */ Object.create(null), a7 = [], o2 = [];
    for (let d5 of i3) h6[d5.id] = o2.length << 1, o2.push((c2) => d5.slot(c2));
    let f4 = n3?.config.facets;
    for (let d5 in r2) {
      let c2 = r2[d5], g8 = c2[0].facet, P5 = f4 && f4[d5] || [];
      if (c2.every((p8) => p8.type == 0)) if (h6[g8.id] = a7.length << 1 | 1, Pe4(P5, c2)) a7.push(n3.facet(g8));
      else {
        let p8 = g8.combine(c2.map((he8) => he8.value));
        a7.push(n3 && g8.compare(p8, n3.facet(g8)) ? n3.facet(g8) : p8);
      }
      else {
        for (let p8 of c2) p8.type == 0 ? (h6[p8.id] = a7.length << 1 | 1, a7.push(p8.value)) : (h6[p8.id] = o2.length << 1, o2.push((he8) => p8.dynamicSlot(he8)));
        h6[g8.id] = o2.length << 1, o2.push((p8) => Qe5(p8, g8, c2));
      }
    }
    let u5 = o2.map((d5) => d5(h6));
    return new s56(e, l7, u5, h6, a7, r2);
  }
};
function Xe6(s66, e, t3) {
  let n3 = [[], [], [], [], []], i3 = /* @__PURE__ */ new Map();
  function r2(l7, h6) {
    let a7 = i3.get(l7);
    if (a7 != null) {
      if (a7 <= h6) return;
      let o2 = n3[a7].indexOf(l7);
      o2 > -1 && n3[a7].splice(o2, 1), l7 instanceof G7 && t3.delete(l7.compartment);
    }
    if (i3.set(l7, h6), Array.isArray(l7)) for (let o2 of l7) r2(o2, h6);
    else if (l7 instanceof G7) {
      if (t3.has(l7.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
      let o2 = e.get(l7.compartment) || l7.inner;
      t3.set(l7.compartment, o2), r2(o2, h6);
    } else if (l7 instanceof te5) r2(l7.inner, l7.prec);
    else if (l7 instanceof z8) n3[h6].push(l7), l7.provides && r2(l7.provides, h6);
    else if (l7 instanceof V6) n3[h6].push(l7), l7.facet.extensions && r2(l7.facet.extensions, M5.default);
    else {
      let o2 = l7.extension;
      if (!o2) throw new Error(`Unrecognized extension value in extension set (${l7}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      r2(o2, h6);
    }
  }
  return r2(s66, M5.default), n3.reduce((l7, h6) => l7.concat(h6));
}
function j9(s66, e) {
  if (e & 1) return 2;
  let t3 = e >> 1, n3 = s66.status[t3];
  if (n3 == 4) throw new Error("Cyclic dependency between fields and/or facets");
  if (n3 & 2) return n3;
  s66.status[t3] = 4;
  let i3 = s66.computeSlot(s66, s66.config.dynamicSlots[t3]);
  return s66.status[t3] = 2 | i3;
}
function se6(s66, e) {
  return e & 1 ? s66.config.staticValues[e >> 1] : s66.values[e >> 1];
}
var Ve8 = y7.define();
var pe6 = y7.define({ combine: (s66) => s66.some((e) => e), static: true });
var qe5 = y7.define({ combine: (s66) => s66.length ? s66[0] : void 0, static: true });
var $e5 = y7.define();
var ze6 = y7.define();
var We5 = y7.define();
var Ue8 = y7.define({ combine: (s66) => s66.length ? s66[0] : false });
var J6 = class {
  constructor(e, t3) {
    this.type = e, this.value = t3;
  }
  static define() {
    return new me8();
  }
};
var me8 = class {
  of(e) {
    return new J6(this, e);
  }
};
var we7 = class {
  constructor(e) {
    this.map = e;
  }
  of(e) {
    return new v4(this, e);
  }
};
var v4 = class s57 {
  constructor(e, t3) {
    this.type = e, this.value = t3;
  }
  map(e) {
    let t3 = this.type.map(this.value, e);
    return t3 === void 0 ? void 0 : t3 == this.value ? this : new s57(this.type, t3);
  }
  is(e) {
    return this.type == e;
  }
  static define(e = {}) {
    return new we7(e.map || ((t3) => t3));
  }
  static mapEffects(e, t3) {
    if (!e.length) return e;
    let n3 = [];
    for (let i3 of e) {
      let r2 = i3.map(t3);
      r2 && n3.push(r2);
    }
    return n3;
  }
};
v4.reconfigure = v4.define();
v4.appendConfig = v4.define();
var S5 = class s58 {
  constructor(e, t3, n3, i3, r2, l7) {
    this.startState = e, this.changes = t3, this.selection = n3, this.effects = i3, this.annotations = r2, this.scrollIntoView = l7, this._doc = null, this._state = null, n3 && De6(n3, t3.newLength), r2.some((h6) => h6.type == s58.time) || (this.annotations = r2.concat(s58.time.of(Date.now())));
  }
  static create(e, t3, n3, i3, r2, l7) {
    return new s58(e, t3, n3, i3, r2, l7);
  }
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  annotation(e) {
    for (let t3 of this.annotations) if (t3.type == e) return t3.value;
  }
  get docChanged() {
    return !this.changes.empty;
  }
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  isUserEvent(e) {
    let t3 = this.annotation(s58.userEvent);
    return !!(t3 && (t3 == e || t3.length > e.length && t3.slice(0, e.length) == e && t3[e.length] == "."));
  }
};
S5.time = J6.define();
S5.userEvent = J6.define();
S5.addToHistory = J6.define();
S5.remote = J6.define();
function Ye6(s66, e) {
  let t3 = [];
  for (let n3 = 0, i3 = 0; ; ) {
    let r2, l7;
    if (n3 < s66.length && (i3 == e.length || e[i3] >= s66[n3])) r2 = s66[n3++], l7 = s66[n3++];
    else if (i3 < e.length) r2 = e[i3++], l7 = e[i3++];
    else return t3;
    !t3.length || t3[t3.length - 1] < r2 ? t3.push(r2, l7) : t3[t3.length - 1] < l7 && (t3[t3.length - 1] = l7);
  }
}
function je7(s66, e, t3) {
  var n3;
  let i3, r2, l7;
  return t3 ? (i3 = e.changes, r2 = A7.empty(e.changes.length), l7 = s66.changes.compose(e.changes)) : (i3 = e.changes.map(s66.changes), r2 = s66.changes.mapDesc(e.changes, true), l7 = s66.changes.compose(i3)), { changes: l7, selection: e.selection ? e.selection.map(r2) : (n3 = s66.selection) === null || n3 === void 0 ? void 0 : n3.map(i3), effects: v4.mapEffects(s66.effects, i3).concat(v4.mapEffects(e.effects, r2)), annotations: s66.annotations.length ? s66.annotations.concat(e.annotations) : e.annotations, scrollIntoView: s66.scrollIntoView || e.scrollIntoView };
}
function ve6(s66, e, t3) {
  let n3 = e.selection, i3 = q6(e.annotations);
  return e.userEvent && (i3 = i3.concat(S5.userEvent.of(e.userEvent))), { changes: e.changes instanceof A7 ? e.changes : A7.of(e.changes || [], t3, s66.facet(qe5)), selection: n3 && (n3 instanceof x6 ? n3 : x6.single(n3.anchor, n3.head)), effects: q6(e.effects), annotations: i3, scrollIntoView: !!e.scrollIntoView };
}
function Ge7(s66, e, t3) {
  let n3 = ve6(s66, e.length ? e[0] : {}, s66.doc.length);
  e.length && e[0].filter === false && (t3 = false);
  for (let r2 = 1; r2 < e.length; r2++) {
    e[r2].filter === false && (t3 = false);
    let l7 = !!e[r2].sequential;
    n3 = je7(n3, ve6(s66, e[r2], l7 ? n3.changes.newLength : s66.doc.length), l7);
  }
  let i3 = S5.create(s66, n3.changes, n3.selection, n3.effects, n3.annotations, n3.scrollIntoView);
  return et4(t3 ? _e5(i3) : i3);
}
function _e5(s66) {
  let e = s66.startState, t3 = true;
  for (let i3 of e.facet($e5)) {
    let r2 = i3(s66);
    if (r2 === false) {
      t3 = false;
      break;
    }
    Array.isArray(r2) && (t3 = t3 === true ? r2 : Ye6(t3, r2));
  }
  if (t3 !== true) {
    let i3, r2;
    if (t3 === false) r2 = s66.changes.invertedDesc, i3 = A7.empty(e.doc.length);
    else {
      let l7 = s66.changes.filter(t3);
      i3 = l7.changes, r2 = l7.filtered.mapDesc(l7.changes).invertedDesc;
    }
    s66 = S5.create(e, i3, s66.selection && s66.selection.map(r2), v4.mapEffects(s66.effects, r2), s66.annotations, s66.scrollIntoView);
  }
  let n3 = e.facet(ze6);
  for (let i3 = n3.length - 1; i3 >= 0; i3--) {
    let r2 = n3[i3](s66);
    r2 instanceof S5 ? s66 = r2 : Array.isArray(r2) && r2.length == 1 && r2[0] instanceof S5 ? s66 = r2[0] : s66 = Ge7(e, q6(r2), false);
  }
  return s66;
}
function et4(s66) {
  let e = s66.startState, t3 = e.facet(We5), n3 = s66;
  for (let i3 = t3.length - 1; i3 >= 0; i3--) {
    let r2 = t3[i3](s66);
    r2 && Object.keys(r2).length && (n3 = je7(n3, ve6(e, r2, s66.changes.newLength), true));
  }
  return n3 == s66 ? s66 : S5.create(e, s66.changes, s66.selection, n3.effects, n3.annotations, n3.scrollIntoView);
}
var tt4 = [];
function q6(s66) {
  return s66 == null ? tt4 : Array.isArray(s66) ? s66 : [s66];
}
var O4 = function(s66) {
  return s66[s66.Word = 0] = "Word", s66[s66.Space = 1] = "Space", s66[s66.Other = 2] = "Other", s66;
}(O4 || (O4 = {}));
var nt5 = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var xe5;
try {
  xe5 = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function it3(s66) {
  if (xe5) return xe5.test(s66);
  for (let e = 0; e < s66.length; e++) {
    let t3 = s66[e];
    if (/\w/.test(t3) || t3 > "" && (t3.toUpperCase() != t3.toLowerCase() || nt5.test(t3))) return true;
  }
  return false;
}
function st5(s66) {
  return (e) => {
    if (!/\S/.test(e)) return O4.Space;
    if (it3(e)) return O4.Word;
    for (let t3 = 0; t3 < s66.length; t3++) if (e.indexOf(s66[t3]) > -1) return O4.Word;
    return O4.Other;
  };
}
var I6 = class s59 {
  constructor(e, t3, n3, i3, r2, l7) {
    this.config = e, this.doc = t3, this.selection = n3, this.values = i3, this.status = e.statusTemplate.slice(), this.computeSlot = r2, l7 && (l7._state = this);
    for (let h6 = 0; h6 < this.config.dynamicSlots.length; h6++) j9(this, h6 << 1);
    this.computeSlot = null;
  }
  field(e, t3 = true) {
    let n3 = this.config.address[e.id];
    if (n3 == null) {
      if (t3) throw new RangeError("Field is not present in this state");
      return;
    }
    return j9(this, n3), se6(this, n3);
  }
  update(...e) {
    return Ge7(this, e, true);
  }
  applyTransaction(e) {
    let t3 = this.config, { base: n3, compartments: i3 } = t3;
    for (let h6 of e.effects) h6.is(ne7.reconfigure) ? (t3 && (i3 = /* @__PURE__ */ new Map(), t3.compartments.forEach((a7, o2) => i3.set(o2, a7)), t3 = null), i3.set(h6.value.compartment, h6.value.extension)) : h6.is(v4.reconfigure) ? (t3 = null, n3 = h6.value) : h6.is(v4.appendConfig) && (t3 = null, n3 = q6(n3).concat(h6.value));
    let r2;
    t3 ? r2 = e.startState.values.slice() : (t3 = ie8.resolve(n3, i3, this), r2 = new s59(t3, this.doc, this.selection, t3.dynamicSlots.map(() => null), (a7, o2) => o2.reconfigure(a7, this), null).values);
    let l7 = e.startState.facet(pe6) ? e.newSelection : e.newSelection.asSingle();
    new s59(t3, e.newDoc, l7, r2, (h6, a7) => a7.update(h6, e), e);
  }
  replaceSelection(e) {
    return typeof e == "string" && (e = this.toText(e)), this.changeByRange((t3) => ({ changes: { from: t3.from, to: t3.to, insert: e }, range: x6.cursor(t3.from + e.length) }));
  }
  changeByRange(e) {
    let t3 = this.selection, n3 = e(t3.ranges[0]), i3 = this.changes(n3.changes), r2 = [n3.range], l7 = q6(n3.effects);
    for (let h6 = 1; h6 < t3.ranges.length; h6++) {
      let a7 = e(t3.ranges[h6]), o2 = this.changes(a7.changes), f4 = o2.map(i3);
      for (let d5 = 0; d5 < h6; d5++) r2[d5] = r2[d5].map(f4);
      let u5 = i3.mapDesc(o2, true);
      r2.push(a7.range.map(u5)), i3 = i3.compose(f4), l7 = v4.mapEffects(l7, f4).concat(v4.mapEffects(q6(a7.effects), u5));
    }
    return { changes: i3, selection: x6.create(r2, t3.mainIndex), effects: l7 };
  }
  changes(e = []) {
    return e instanceof A7 ? e : A7.of(e, this.doc.length, this.facet(s59.lineSeparator));
  }
  toText(e) {
    return m8.of(e.split(this.facet(s59.lineSeparator) || ue7));
  }
  sliceDoc(e = 0, t3 = this.doc.length) {
    return this.doc.sliceString(e, t3, this.lineBreak);
  }
  facet(e) {
    let t3 = this.config.address[e.id];
    return t3 == null ? e.default : (j9(this, t3), se6(this, t3));
  }
  toJSON(e) {
    let t3 = { doc: this.sliceDoc(), selection: this.selection.toJSON() };
    if (e) for (let n3 in e) {
      let i3 = e[n3];
      i3 instanceof z8 && this.config.address[i3.id] != null && (t3[n3] = i3.spec.toJSON(this.field(e[n3]), this));
    }
    return t3;
  }
  static fromJSON(e, t3 = {}, n3) {
    if (!e || typeof e.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
    let i3 = [];
    if (n3) {
      for (let r2 in n3) if (Object.prototype.hasOwnProperty.call(e, r2)) {
        let l7 = n3[r2], h6 = e[r2];
        i3.push(l7.init((a7) => l7.spec.fromJSON(h6, a7)));
      }
    }
    return s59.create({ doc: e.doc, selection: x6.fromJSON(e.selection), extensions: t3.extensions ? i3.concat([t3.extensions]) : i3 });
  }
  static create(e = {}) {
    let t3 = ie8.resolve(e.extensions || [], /* @__PURE__ */ new Map()), n3 = e.doc instanceof m8 ? e.doc : m8.of((e.doc || "").split(t3.staticFacet(s59.lineSeparator) || ue7)), i3 = e.selection ? e.selection instanceof x6 ? e.selection : x6.single(e.selection.anchor, e.selection.head) : x6.single(0);
    return De6(i3, n3.length), t3.staticFacet(pe6) || (i3 = i3.asSingle()), new s59(t3, n3, i3, t3.dynamicSlots.map(() => null), (r2, l7) => l7.create(r2), null);
  }
  get tabSize() {
    return this.facet(s59.tabSize);
  }
  get lineBreak() {
    return this.facet(s59.lineSeparator) || `
`;
  }
  get readOnly() {
    return this.facet(Ue8);
  }
  phrase(e, ...t3) {
    for (let n3 of this.facet(s59.phrases)) if (Object.prototype.hasOwnProperty.call(n3, e)) {
      e = n3[e];
      break;
    }
    return t3.length && (e = e.replace(/\$(\$|\d*)/g, (n3, i3) => {
      if (i3 == "$") return "$";
      let r2 = +(i3 || 1);
      return !r2 || r2 > t3.length ? n3 : t3[r2 - 1];
    })), e;
  }
  languageDataAt(e, t3, n3 = -1) {
    let i3 = [];
    for (let r2 of this.facet(Ve8)) for (let l7 of r2(this, t3, n3)) Object.prototype.hasOwnProperty.call(l7, e) && i3.push(l7[e]);
    return i3;
  }
  charCategorizer(e) {
    return st5(this.languageDataAt("wordChars", e).join(""));
  }
  wordAt(e) {
    let { text: t3, from: n3, length: i3 } = this.doc.lineAt(e), r2 = this.charCategorizer(e), l7 = e - n3, h6 = e - n3;
    for (; l7 > 0; ) {
      let a7 = ee2(t3, l7, false);
      if (r2(t3.slice(a7, l7)) != O4.Word) break;
      l7 = a7;
    }
    for (; h6 < i3; ) {
      let a7 = ee2(t3, h6);
      if (r2(t3.slice(h6, a7)) != O4.Word) break;
      h6 = a7;
    }
    return l7 == h6 ? null : x6.range(l7 + n3, h6 + n3);
  }
};
I6.allowMultipleSelections = pe6;
I6.tabSize = y7.define({ combine: (s66) => s66.length ? s66[0] : 4 });
I6.lineSeparator = qe5;
I6.readOnly = Ue8;
I6.phrases = y7.define({ compare(s66, e) {
  let t3 = Object.keys(s66), n3 = Object.keys(e);
  return t3.length == n3.length && t3.every((i3) => s66[i3] == e[i3]);
} });
I6.languageData = Ve8;
I6.changeFilter = $e5;
I6.transactionFilter = ze6;
I6.transactionExtender = We5;
ne7.reconfigure = v4.define();
var W9 = class {
  eq(e) {
    return this == e;
  }
  range(e, t3 = e) {
    return H7.create(e, t3, this);
  }
};
W9.prototype.startSide = W9.prototype.endSide = 0;
W9.prototype.point = false;
W9.prototype.mapMode = E7.TrackDel;
var H7 = class s60 {
  constructor(e, t3, n3) {
    this.from = e, this.to = t3, this.value = n3;
  }
  static create(e, t3, n3) {
    return new s60(e, t3, n3);
  }
};
function ke7(s66, e) {
  return s66.from - e.from || s66.value.startSide - e.value.startSide;
}
var ye8 = class s61 {
  constructor(e, t3, n3, i3) {
    this.from = e, this.to = t3, this.value = n3, this.maxPoint = i3;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  findIndex(e, t3, n3, i3 = 0) {
    let r2 = n3 ? this.to : this.from;
    for (let l7 = i3, h6 = r2.length; ; ) {
      if (l7 == h6) return l7;
      let a7 = l7 + h6 >> 1, o2 = r2[a7] - e || (n3 ? this.value[a7].endSide : this.value[a7].startSide) - t3;
      if (a7 == l7) return o2 >= 0 ? l7 : h6;
      o2 >= 0 ? h6 = a7 : l7 = a7 + 1;
    }
  }
  between(e, t3, n3, i3) {
    for (let r2 = this.findIndex(t3, -1e9, true), l7 = this.findIndex(n3, 1e9, false, r2); r2 < l7; r2++) if (i3(this.from[r2] + e, this.to[r2] + e, this.value[r2]) === false) return false;
  }
  map(e, t3) {
    let n3 = [], i3 = [], r2 = [], l7 = -1, h6 = -1;
    for (let a7 = 0; a7 < this.value.length; a7++) {
      let o2 = this.value[a7], f4 = this.from[a7] + e, u5 = this.to[a7] + e, d5, c2;
      if (f4 == u5) {
        let g8 = t3.mapPos(f4, o2.startSide, o2.mapMode);
        if (g8 == null || (d5 = c2 = g8, o2.startSide != o2.endSide && (c2 = t3.mapPos(f4, o2.endSide), c2 < d5))) continue;
      } else if (d5 = t3.mapPos(f4, o2.startSide), c2 = t3.mapPos(u5, o2.endSide), d5 > c2 || d5 == c2 && o2.startSide > 0 && o2.endSide <= 0) continue;
      (c2 - d5 || o2.endSide - o2.startSide) < 0 || (l7 < 0 && (l7 = d5), o2.point && (h6 = Math.max(h6, c2 - d5)), n3.push(o2), i3.push(d5 - l7), r2.push(c2 - l7));
    }
    return { mapped: n3.length ? new s61(i3, r2, n3, h6) : null, pos: l7 };
  }
};
var T4 = class s62 {
  constructor(e, t3, n3, i3) {
    this.chunkPos = e, this.chunk = t3, this.nextLayer = n3, this.maxPoint = i3;
  }
  static create(e, t3, n3, i3) {
    return new s62(e, t3, n3, i3);
  }
  get length() {
    let e = this.chunk.length - 1;
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length);
  }
  get size() {
    if (this.isEmpty) return 0;
    let e = this.nextLayer.size;
    for (let t3 of this.chunk) e += t3.value.length;
    return e;
  }
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length;
  }
  update(e) {
    let { add: t3 = [], sort: n3 = false, filterFrom: i3 = 0, filterTo: r2 = this.length } = e, l7 = e.filter;
    if (t3.length == 0 && !l7) return this;
    if (n3 && (t3 = t3.slice().sort(ke7)), this.isEmpty) return t3.length ? s62.of(t3) : this;
    let h6 = new le5(this, null, -1).goto(0), a7 = 0, o2 = [], f4 = new re6();
    for (; h6.value || a7 < t3.length; ) if (a7 < t3.length && (h6.from - t3[a7].from || h6.startSide - t3[a7].value.startSide) >= 0) {
      let u5 = t3[a7++];
      f4.addInner(u5.from, u5.to, u5.value) || o2.push(u5);
    } else h6.rangeIndex == 1 && h6.chunkIndex < this.chunk.length && (a7 == t3.length || this.chunkEnd(h6.chunkIndex) < t3[a7].from) && (!l7 || i3 > this.chunkEnd(h6.chunkIndex) || r2 < this.chunkPos[h6.chunkIndex]) && f4.addChunk(this.chunkPos[h6.chunkIndex], this.chunk[h6.chunkIndex]) ? h6.nextChunk() : ((!l7 || i3 > h6.to || r2 < h6.from || l7(h6.from, h6.to, h6.value)) && (f4.addInner(h6.from, h6.to, h6.value) || o2.push(H7.create(h6.from, h6.to, h6.value))), h6.next());
    return f4.finishInner(this.nextLayer.isEmpty && !o2.length ? s62.empty : this.nextLayer.update({ add: o2, filter: l7, filterFrom: i3, filterTo: r2 }));
  }
  map(e) {
    if (e.empty || this.isEmpty) return this;
    let t3 = [], n3 = [], i3 = -1;
    for (let l7 = 0; l7 < this.chunk.length; l7++) {
      let h6 = this.chunkPos[l7], a7 = this.chunk[l7], o2 = e.touchesRange(h6, h6 + a7.length);
      if (o2 === false) i3 = Math.max(i3, a7.maxPoint), t3.push(a7), n3.push(e.mapPos(h6));
      else if (o2 === true) {
        let { mapped: f4, pos: u5 } = a7.map(h6, e);
        f4 && (i3 = Math.max(i3, f4.maxPoint), t3.push(f4), n3.push(u5));
      }
    }
    let r2 = this.nextLayer.map(e);
    return t3.length == 0 ? r2 : new s62(n3, t3, r2 || s62.empty, i3);
  }
  between(e, t3, n3) {
    if (!this.isEmpty) {
      for (let i3 = 0; i3 < this.chunk.length; i3++) {
        let r2 = this.chunkPos[i3], l7 = this.chunk[i3];
        if (t3 >= r2 && e <= r2 + l7.length && l7.between(r2, e - r2, t3 - r2, n3) === false) return;
      }
      this.nextLayer.between(e, t3, n3);
    }
  }
  iter(e = 0) {
    return Z4.from([this]).goto(e);
  }
  get isEmpty() {
    return this.nextLayer == this;
  }
  static iter(e, t3 = 0) {
    return Z4.from(e).goto(t3);
  }
  static compare(e, t3, n3, i3, r2 = -1) {
    let l7 = e.filter((u5) => u5.maxPoint > 0 || !u5.isEmpty && u5.maxPoint >= r2), h6 = t3.filter((u5) => u5.maxPoint > 0 || !u5.isEmpty && u5.maxPoint >= r2), a7 = Re5(l7, h6, n3), o2 = new R4(l7, a7, r2), f4 = new R4(h6, a7, r2);
    n3.iterGaps((u5, d5, c2) => Be7(o2, u5, f4, d5, c2, i3)), n3.empty && n3.length == 0 && Be7(o2, 0, f4, 0, 0, i3);
  }
  static eq(e, t3, n3 = 0, i3) {
    i3 == null && (i3 = 999999999);
    let r2 = e.filter((f4) => !f4.isEmpty && t3.indexOf(f4) < 0), l7 = t3.filter((f4) => !f4.isEmpty && e.indexOf(f4) < 0);
    if (r2.length != l7.length) return false;
    if (!r2.length) return true;
    let h6 = Re5(r2, l7), a7 = new R4(r2, h6, 0).goto(n3), o2 = new R4(l7, h6, 0).goto(n3);
    for (; ; ) {
      if (a7.to != o2.to || !Se7(a7.active, o2.active) || a7.point && (!o2.point || !a7.point.eq(o2.point))) return false;
      if (a7.to > i3) return true;
      a7.next(), o2.next();
    }
  }
  static spans(e, t3, n3, i3, r2 = -1) {
    let l7 = new R4(e, null, r2).goto(t3), h6 = t3, a7 = l7.openStart;
    for (; ; ) {
      let o2 = Math.min(l7.to, n3);
      if (l7.point) {
        let f4 = l7.activeForPoint(l7.to), u5 = l7.pointFrom < t3 ? f4.length + 1 : l7.point.startSide < 0 ? f4.length : Math.min(f4.length, a7);
        i3.point(h6, o2, l7.point, f4, u5, l7.pointRank), a7 = Math.min(l7.openEnd(o2), f4.length);
      } else o2 > h6 && (i3.span(h6, o2, l7.active, a7), a7 = l7.openEnd(o2));
      if (l7.to > n3) return a7 + (l7.point && l7.to > n3 ? 1 : 0);
      h6 = l7.to, l7.next();
    }
  }
  static of(e, t3 = false) {
    let n3 = new re6();
    for (let i3 of e instanceof H7 ? [e] : t3 ? rt5(e) : e) n3.add(i3.from, i3.to, i3.value);
    return n3.finish();
  }
  static join(e) {
    if (!e.length) return s62.empty;
    let t3 = e[e.length - 1];
    for (let n3 = e.length - 2; n3 >= 0; n3--) for (let i3 = e[n3]; i3 != s62.empty; i3 = i3.nextLayer) t3 = new s62(i3.chunkPos, i3.chunk, t3, Math.max(i3.maxPoint, t3.maxPoint));
    return t3;
  }
};
T4.empty = new T4([], [], null, -1);
function rt5(s66) {
  if (s66.length > 1) for (let e = s66[0], t3 = 1; t3 < s66.length; t3++) {
    let n3 = s66[t3];
    if (ke7(e, n3) > 0) return s66.slice().sort(ke7);
    e = n3;
  }
  return s66;
}
T4.empty.nextLayer = T4.empty;
var re6 = class s63 {
  finishChunk(e) {
    this.chunks.push(new ye8(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, e && (this.from = [], this.to = [], this.value = []);
  }
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  add(e, t3, n3) {
    this.addInner(e, t3, n3) || (this.nextLayer || (this.nextLayer = new s63())).add(e, t3, n3);
  }
  addInner(e, t3, n3) {
    let i3 = e - this.lastTo || n3.startSide - this.last.endSide;
    if (i3 <= 0 && (e - this.lastFrom || n3.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return i3 < 0 ? false : (this.from.length == 250 && this.finishChunk(true), this.chunkStart < 0 && (this.chunkStart = e), this.from.push(e - this.chunkStart), this.to.push(t3 - this.chunkStart), this.last = n3, this.lastFrom = e, this.lastTo = t3, this.value.push(n3), n3.point && (this.maxPoint = Math.max(this.maxPoint, t3 - e)), true);
  }
  addChunk(e, t3) {
    if ((e - this.lastTo || t3.value[0].startSide - this.last.endSide) < 0) return false;
    this.from.length && this.finishChunk(true), this.setMaxPoint = Math.max(this.setMaxPoint, t3.maxPoint), this.chunks.push(t3), this.chunkPos.push(e);
    let n3 = t3.value.length - 1;
    return this.last = t3.value[n3], this.lastFrom = t3.from[n3] + e, this.lastTo = t3.to[n3] + e, true;
  }
  finish() {
    return this.finishInner(T4.empty);
  }
  finishInner(e) {
    if (this.from.length && this.finishChunk(false), this.chunks.length == 0) return e;
    let t3 = T4.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(e) : e, this.setMaxPoint);
    return this.from = null, t3;
  }
};
function Re5(s66, e, t3) {
  let n3 = /* @__PURE__ */ new Map();
  for (let r2 of s66) for (let l7 = 0; l7 < r2.chunk.length; l7++) r2.chunk[l7].maxPoint <= 0 && n3.set(r2.chunk[l7], r2.chunkPos[l7]);
  let i3 = /* @__PURE__ */ new Set();
  for (let r2 of e) for (let l7 = 0; l7 < r2.chunk.length; l7++) {
    let h6 = n3.get(r2.chunk[l7]);
    h6 != null && (t3 ? t3.mapPos(h6) : h6) == r2.chunkPos[l7] && !t3?.touchesRange(h6, h6 + r2.chunk[l7].length) && i3.add(r2.chunk[l7]);
  }
  return i3;
}
var le5 = class {
  constructor(e, t3, n3, i3 = 0) {
    this.layer = e, this.skip = t3, this.minPoint = n3, this.rank = i3;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(e, t3 = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(e, t3, false), this;
  }
  gotoInner(e, t3, n3) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let i3 = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(i3) || this.layer.chunkEnd(this.chunkIndex) < e || i3.maxPoint < this.minPoint)) break;
      this.chunkIndex++, n3 = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let i3 = this.layer.chunk[this.chunkIndex].findIndex(e - this.layer.chunkPos[this.chunkIndex], t3, true);
      (!n3 || this.rangeIndex < i3) && this.setRangeIndex(i3);
    }
    this.next();
  }
  forward(e, t3) {
    (this.to - e || this.endSide - t3) < 0 && this.gotoInner(e, t3, true);
  }
  next() {
    for (; ; ) if (this.chunkIndex == this.layer.chunk.length) {
      this.from = this.to = 1e9, this.value = null;
      break;
    } else {
      let e = this.layer.chunkPos[this.chunkIndex], t3 = this.layer.chunk[this.chunkIndex], n3 = e + t3.from[this.rangeIndex];
      if (this.from = n3, this.to = e + t3.to[this.rangeIndex], this.value = t3.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
    }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip) for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); ) this.chunkIndex++;
      this.rangeIndex = 0;
    } else this.rangeIndex = e;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(e) {
    return this.from - e.from || this.startSide - e.startSide || this.rank - e.rank || this.to - e.to || this.endSide - e.endSide;
  }
};
var Z4 = class s64 {
  constructor(e) {
    this.heap = e;
  }
  static from(e, t3 = null, n3 = -1) {
    let i3 = [];
    for (let r2 = 0; r2 < e.length; r2++) for (let l7 = e[r2]; !l7.isEmpty; l7 = l7.nextLayer) l7.maxPoint >= n3 && i3.push(new le5(l7, t3, n3, r2));
    return i3.length == 1 ? i3[0] : new s64(i3);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(e, t3 = -1e9) {
    for (let n3 of this.heap) n3.goto(e, t3);
    for (let n3 = this.heap.length >> 1; n3 >= 0; n3--) oe6(this.heap, n3);
    return this.next(), this;
  }
  forward(e, t3) {
    for (let n3 of this.heap) n3.forward(e, t3);
    for (let n3 = this.heap.length >> 1; n3 >= 0; n3--) oe6(this.heap, n3);
    (this.to - e || this.value.endSide - t3) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0) this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let e = this.heap[0];
      this.from = e.from, this.to = e.to, this.value = e.value, this.rank = e.rank, e.value && e.next(), oe6(this.heap, 0);
    }
  }
};
function oe6(s66, e) {
  for (let t3 = s66[e]; ; ) {
    let n3 = (e << 1) + 1;
    if (n3 >= s66.length) break;
    let i3 = s66[n3];
    if (n3 + 1 < s66.length && i3.compare(s66[n3 + 1]) >= 0 && (i3 = s66[n3 + 1], n3++), t3.compare(i3) < 0) break;
    s66[n3] = t3, s66[e] = i3, e = n3;
  }
}
var R4 = class {
  constructor(e, t3, n3) {
    this.minPoint = n3, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = Z4.from(e, t3, n3);
  }
  goto(e, t3 = -1e9) {
    return this.cursor.goto(e, t3), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = e, this.endSide = t3, this.openStart = -1, this.next(), this;
  }
  forward(e, t3) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - e || this.active[this.minActive].endSide - t3) < 0; ) this.removeActive(this.minActive);
    this.cursor.forward(e, t3);
  }
  removeActive(e) {
    K5(this.active, e), K5(this.activeTo, e), K5(this.activeRank, e), this.minActive = Ce5(this.active, this.activeTo);
  }
  addActive(e) {
    let t3 = 0, { value: n3, to: i3, rank: r2 } = this.cursor;
    for (; t3 < this.activeRank.length && (r2 - this.activeRank[t3] || i3 - this.activeTo[t3]) > 0; ) t3++;
    Q4(this.active, t3, n3), Q4(this.activeTo, t3, i3), Q4(this.activeRank, t3, r2), e && Q4(e, t3, this.cursor.from), this.minActive = Ce5(this.active, this.activeTo);
  }
  next() {
    let e = this.to, t3 = this.point;
    this.point = null;
    let n3 = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let i3 = this.minActive;
      if (i3 > -1 && (this.activeTo[i3] - this.cursor.from || this.active[i3].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[i3] > e) {
          this.to = this.activeTo[i3], this.endSide = this.active[i3].endSide;
          break;
        }
        this.removeActive(i3), n3 && K5(n3, i3);
      } else if (this.cursor.value) if (this.cursor.from > e) {
        this.to = this.cursor.from, this.endSide = this.cursor.startSide;
        break;
      } else {
        let r2 = this.cursor.value;
        if (!r2.point) this.addActive(n3), this.cursor.next();
        else if (t3 && this.cursor.to == this.to && this.cursor.from < this.cursor.to) this.cursor.next();
        else {
          this.point = r2, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = r2.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
          break;
        }
      }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (n3) {
      this.openStart = 0;
      for (let i3 = n3.length - 1; i3 >= 0 && n3[i3] < e; i3--) this.openStart++;
    }
  }
  activeForPoint(e) {
    if (!this.active.length) return this.active;
    let t3 = [];
    for (let n3 = this.active.length - 1; n3 >= 0 && !(this.activeRank[n3] < this.pointRank); n3--) (this.activeTo[n3] > e || this.activeTo[n3] == e && this.active[n3].endSide >= this.point.endSide) && t3.push(this.active[n3]);
    return t3.reverse();
  }
  openEnd(e) {
    let t3 = 0;
    for (let n3 = this.activeTo.length - 1; n3 >= 0 && this.activeTo[n3] > e; n3--) t3++;
    return t3;
  }
};
function Be7(s66, e, t3, n3, i3, r2) {
  s66.goto(e), t3.goto(n3);
  let l7 = n3 + i3, h6 = n3, a7 = n3 - e;
  for (; ; ) {
    let o2 = s66.to + a7 - t3.to || s66.endSide - t3.endSide, f4 = o2 < 0 ? s66.to + a7 : t3.to, u5 = Math.min(f4, l7);
    if (s66.point || t3.point ? s66.point && t3.point && (s66.point == t3.point || s66.point.eq(t3.point)) && Se7(s66.activeForPoint(s66.to), t3.activeForPoint(t3.to)) || r2.comparePoint(h6, u5, s66.point, t3.point) : u5 > h6 && !Se7(s66.active, t3.active) && r2.compareRange(h6, u5, s66.active, t3.active), f4 > l7) break;
    h6 = f4, o2 <= 0 && s66.next(), o2 >= 0 && t3.next();
  }
}
function Se7(s66, e) {
  if (s66.length != e.length) return false;
  for (let t3 = 0; t3 < s66.length; t3++) if (s66[t3] != e[t3] && !s66[t3].eq(e[t3])) return false;
  return true;
}
function K5(s66, e) {
  for (let t3 = e, n3 = s66.length - 1; t3 < n3; t3++) s66[t3] = s66[t3 + 1];
  s66.pop();
}
function Q4(s66, e, t3) {
  for (let n3 = s66.length - 1; n3 >= e; n3--) s66[n3 + 1] = s66[n3];
  s66[e] = t3;
}
function Ce5(s66, e) {
  let t3 = -1, n3 = 1e9;
  for (let i3 = 0; i3 < e.length; i3++) (e[i3] - n3 || s66[i3].endSide - s66[t3].endSide) < 0 && (t3 = i3, n3 = e[i3]);
  return t3;
}

// https://esm.sh/v135/node_events.js
var a5 = typeof Reflect == "object" ? Reflect : null;
var m9 = a5 && typeof a5.apply == "function" ? a5.apply : function(e, n3, r2) {
  return Function.prototype.apply.call(e, n3, r2);
};
var v5;
a5 && typeof a5.ownKeys == "function" ? v5 = a5.ownKeys : Object.getOwnPropertySymbols ? v5 = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : v5 = function(e) {
  return Object.getOwnPropertyNames(e);
};
function C7(t3) {
  console && console.warn && console.warn(t3);
}
var p6 = Number.isNaN || function(e) {
  return e !== e;
};
function o() {
  d4.call(this);
}
o.EventEmitter = o, o.prototype._events = void 0, o.prototype._eventsCount = 0, o.prototype._maxListeners = void 0;
var l6 = 10;
function h5(t3) {
  if (typeof t3 != "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t3);
}
Object.defineProperty(o, "defaultMaxListeners", { enumerable: true, get: function() {
  return l6;
}, set: function(t3) {
  if (typeof t3 != "number" || t3 < 0 || p6(t3)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t3 + ".");
  l6 = t3;
} });
function d4() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
}
o.init = d4, o.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || p6(e)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function y8(t3) {
  return t3._maxListeners === void 0 ? o.defaultMaxListeners : t3._maxListeners;
}
o.prototype.getMaxListeners = function() {
  return y8(this);
}, o.prototype.emit = function(e) {
  for (var n3 = [], r2 = 1; r2 < arguments.length; r2++) n3.push(arguments[r2]);
  var i3 = e === "error", f4 = this._events;
  if (f4 !== void 0) i3 = i3 && f4.error === void 0;
  else if (!i3) return false;
  if (i3) {
    var s66;
    if (n3.length > 0 && (s66 = n3[0]), s66 instanceof Error) throw s66;
    var u5 = new Error("Unhandled error." + (s66 ? " (" + s66.message + ")" : ""));
    throw u5.context = s66, u5;
  }
  var c2 = f4[e];
  if (c2 === void 0) return false;
  if (typeof c2 == "function") m9(c2, this, n3);
  else for (var L8 = c2.length, x7 = E8(c2, L8), r2 = 0; r2 < L8; ++r2) m9(x7[r2], this, n3);
  return true;
};
function g7(t3, e, n3, r2) {
  var i3, f4, s66;
  if (h5(n3), f4 = t3._events, f4 === void 0 ? (f4 = t3._events = /* @__PURE__ */ Object.create(null), t3._eventsCount = 0) : (f4.newListener !== void 0 && (t3.emit("newListener", e, n3.listener ? n3.listener : n3), f4 = t3._events), s66 = f4[e]), s66 === void 0) s66 = f4[e] = n3, ++t3._eventsCount;
  else if (typeof s66 == "function" ? s66 = f4[e] = r2 ? [n3, s66] : [s66, n3] : r2 ? s66.unshift(n3) : s66.push(n3), i3 = y8(t3), i3 > 0 && s66.length > i3 && !s66.warned) {
    s66.warned = true;
    var u5 = new Error("Possible EventEmitter memory leak detected. " + s66.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    u5.name = "MaxListenersExceededWarning", u5.emitter = t3, u5.type = e, u5.count = s66.length, C7(u5);
  }
  return t3;
}
o.prototype.addListener = function(e, n3) {
  return g7(this, e, n3, false);
}, o.prototype.on = o.prototype.addListener, o.prototype.prependListener = function(e, n3) {
  return g7(this, e, n3, true);
};
function R5() {
  if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function w8(t3, e, n3) {
  var r2 = { fired: false, wrapFn: void 0, target: t3, type: e, listener: n3 }, i3 = R5.bind(r2);
  return i3.listener = n3, r2.wrapFn = i3, i3;
}
o.prototype.once = function(e, n3) {
  return h5(n3), this.on(e, w8(this, e, n3)), this;
}, o.prototype.prependOnceListener = function(e, n3) {
  return h5(n3), this.prependListener(e, w8(this, e, n3)), this;
}, o.prototype.removeListener = function(e, n3) {
  var r2, i3, f4, s66, u5;
  if (h5(n3), i3 = this._events, i3 === void 0) return this;
  if (r2 = i3[e], r2 === void 0) return this;
  if (r2 === n3 || r2.listener === n3) --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete i3[e], i3.removeListener && this.emit("removeListener", e, r2.listener || n3));
  else if (typeof r2 != "function") {
    for (f4 = -1, s66 = r2.length - 1; s66 >= 0; s66--) if (r2[s66] === n3 || r2[s66].listener === n3) {
      u5 = r2[s66].listener, f4 = s66;
      break;
    }
    if (f4 < 0) return this;
    f4 === 0 ? r2.shift() : M6(r2, f4), r2.length === 1 && (i3[e] = r2[0]), i3.removeListener !== void 0 && this.emit("removeListener", e, u5 || n3);
  }
  return this;
}, o.prototype.off = o.prototype.removeListener, o.prototype.removeAllListeners = function(e) {
  var n3, r2, i3;
  if (r2 = this._events, r2 === void 0) return this;
  if (r2.removeListener === void 0) return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : r2[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete r2[e]), this;
  if (arguments.length === 0) {
    var f4 = Object.keys(r2), s66;
    for (i3 = 0; i3 < f4.length; ++i3) s66 = f4[i3], s66 !== "removeListener" && this.removeAllListeners(s66);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (n3 = r2[e], typeof n3 == "function") this.removeListener(e, n3);
  else if (n3 !== void 0) for (i3 = n3.length - 1; i3 >= 0; i3--) this.removeListener(e, n3[i3]);
  return this;
};
function _6(t3, e, n3) {
  var r2 = t3._events;
  if (r2 === void 0) return [];
  var i3 = r2[e];
  return i3 === void 0 ? [] : typeof i3 == "function" ? n3 ? [i3.listener || i3] : [i3] : n3 ? j10(i3) : E8(i3, i3.length);
}
o.prototype.listeners = function(e) {
  return _6(this, e, true);
}, o.prototype.rawListeners = function(e) {
  return _6(this, e, false);
};
function b7(t3, e) {
  return typeof t3.listenerCount == "function" ? t3.listenerCount(e) : o.prototype.listenerCount.call(t3, e);
}
o.listenerCount = b7, o.prototype.listenerCount = function(t3) {
  var e = this._events;
  if (e !== void 0) {
    var n3 = e[t3];
    if (typeof n3 == "function") return 1;
    if (n3 !== void 0) return n3.length;
  }
  return 0;
}, o.prototype.eventNames = function() {
  return this._eventsCount > 0 ? v5(this._events) : [];
};
function E8(t3, e) {
  for (var n3 = new Array(e), r2 = 0; r2 < e; ++r2) n3[r2] = t3[r2];
  return n3;
}
function M6(t3, e) {
  for (; e + 1 < t3.length; e++) t3[e] = t3[e + 1];
  t3.pop();
}
function j10(t3) {
  for (var e = new Array(t3.length), n3 = 0; n3 < e.length; ++n3) e[n3] = t3[n3].listener || t3[n3];
  return e;
}

// https://esm.sh/v135/node_process.js
function s65(t3) {
  const e = performance.now(), r2 = Math.floor(e / 1e3), o2 = Math.floor(e * 1e6 - r2 * 1e9);
  if (!t3) return [r2, o2];
  const [i3, c2] = t3;
  return [r2 - i3, o2 - c2];
}
s65.bigint = function() {
  const [t3, e] = s65();
  return BigInt(t3) * 1000000000n + BigInt(e);
};
var p7 = class extends o {
  title = "browser";
  browser = true;
  env = {};
  argv = [];
  pid = 0;
  arch = "unknown";
  platform = "browser";
  version = "";
  versions = {};
  emitWarning = () => {
    throw new Error("process.emitWarning is not supported");
  };
  binding = () => {
    throw new Error("process.binding is not supported");
  };
  cwd = () => {
    throw new Error("process.cwd is not supported");
  };
  chdir = (e) => {
    throw new Error("process.chdir is not supported");
  };
  umask = () => 18;
  nextTick = (e, ...r2) => queueMicrotask(() => e(...r2));
  hrtime = s65;
  constructor() {
    super();
  }
};
var n2 = new p7();
if (typeof Deno < "u") {
  n2.name = "deno", n2.browser = false, n2.pid = Deno.pid, n2.cwd = () => Deno.cwd(), n2.chdir = (e) => Deno.chdir(e), n2.arch = Deno.build.arch, n2.platform = Deno.build.os, n2.version = "v18.12.1", n2.versions = { node: "18.12.1", uv: "1.43.0", zlib: "1.2.11", brotli: "1.0.9", ares: "1.18.1", modules: "108", nghttp2: "1.47.0", napi: "8", llhttp: "6.0.10", openssl: "3.0.7+quic", cldr: "41.0", icu: "71.1", tz: "2022b", unicode: "14.0", ngtcp2: "0.8.1", nghttp3: "0.7.0", ...Deno.version }, n2.env = new Proxy({}, { get(e, r2) {
    return Deno.env.get(String(r2));
  }, ownKeys: () => Reflect.ownKeys(Deno.env.toObject()), getOwnPropertyDescriptor: (e, r2) => {
    const o2 = Deno.env.toObject();
    if (r2 in Deno.env.toObject()) {
      const i3 = { enumerable: true, configurable: true };
      return typeof r2 == "string" && (i3.value = o2[r2]), i3;
    }
  }, set(e, r2, o2) {
    return Deno.env.set(String(r2), String(o2)), o2;
  } });
  const t3 = ["", "", ...Deno.args];
  Object.defineProperty(t3, "0", { get: Deno.execPath }), Object.defineProperty(t3, "1", { get: () => Deno.mainModule.startsWith("file:") ? new URL(Deno.mainModule).pathname : join(Deno.cwd(), "$deno$node.js") }), n2.argv = t3;
} else {
  let t3 = "/";
  n2.cwd = () => t3, n2.chdir = (e) => t3 = e;
}
var a6 = n2;

// https://esm.sh/v135/@lezer/lr@1.4.2/es2020/lr.development.mjs
var Stack = class _Stack {
  /**
  @internal
  */
  constructor(p8, stack, state, reducePos, pos, score2, buffer, bufferBase, curContext, lookAhead = 0, parent) {
    this.p = p8;
    this.stack = stack;
    this.state = state;
    this.reducePos = reducePos;
    this.pos = pos;
    this.score = score2;
    this.buffer = buffer;
    this.bufferBase = bufferBase;
    this.curContext = curContext;
    this.lookAhead = lookAhead;
    this.parent = parent;
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((_7, i3) => i3 % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(p8, state, pos = 0) {
    let cx3 = p8.parser.context;
    return new _Stack(p8, [], state, pos, pos, 0, [], 0, cx3 ? new StackContext(cx3, cx3.start) : null, 0, null);
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(state, start) {
    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
    this.state = state;
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(action) {
    var _a2;
    let depth = action >> 19, type = action & 65535;
    let { parser: parser2 } = this.p;
    let lookaheadRecord = this.reducePos < this.pos - 25;
    if (lookaheadRecord)
      this.setLookAhead(this.pos);
    let dPrec = parser2.dynamicPrecedence(type);
    if (dPrec)
      this.score += dPrec;
    if (depth == 0) {
      this.pushState(parser2.getGoto(this.state, type, true), this.reducePos);
      if (type < parser2.minRepeatTerm)
        this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
      this.reduceContext(type, this.reducePos);
      return;
    }
    let base2 = this.stack.length - (depth - 1) * 3 - (action & 262144 ? 6 : 0);
    let start = base2 ? this.stack[base2 - 2] : this.p.ranges[0].from, size = this.reducePos - start;
    if (size >= 2e3 && !((_a2 = this.p.parser.nodeSet.types[type]) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous)) {
      if (start == this.p.lastBigReductionStart) {
        this.p.bigReductionCount++;
        this.p.lastBigReductionSize = size;
      } else if (this.p.lastBigReductionSize < size) {
        this.p.bigReductionCount = 1;
        this.p.lastBigReductionStart = start;
        this.p.lastBigReductionSize = size;
      }
    }
    let bufferBase = base2 ? this.stack[base2 - 1] : 0, count3 = this.bufferBase + this.buffer.length - bufferBase;
    if (type < parser2.minRepeatTerm || action & 131072) {
      let pos = parser2.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      ) ? this.pos : this.reducePos;
      this.storeNode(type, start, pos, count3 + 4, true);
    }
    if (action & 262144) {
      this.state = this.stack[base2];
    } else {
      let baseStateID = this.stack[base2 - 3];
      this.state = parser2.getGoto(baseStateID, type, true);
    }
    while (this.stack.length > base2)
      this.stack.pop();
    this.reduceContext(type, start);
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(term, start, end, size = 4, mustSink = false) {
    if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let cur2 = this, top2 = this.buffer.length;
      if (top2 == 0 && cur2.parent) {
        top2 = cur2.bufferBase - cur2.parent.bufferBase;
        cur2 = cur2.parent;
      }
      if (top2 > 0 && cur2.buffer[top2 - 4] == 0 && cur2.buffer[top2 - 1] > -1) {
        if (start == end)
          return;
        if (cur2.buffer[top2 - 2] >= start) {
          cur2.buffer[top2 - 2] = end;
          return;
        }
      }
    }
    if (!mustSink || this.pos == end) {
      this.buffer.push(term, start, end, size);
    } else {
      let index = this.buffer.length;
      if (index > 0 && this.buffer[index - 4] != 0) {
        let mustMove = false;
        for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
          if (this.buffer[scan - 1] >= 0) {
            mustMove = true;
            break;
          }
        }
        if (mustMove)
          while (index > 0 && this.buffer[index - 2] > end) {
            this.buffer[index] = this.buffer[index - 4];
            this.buffer[index + 1] = this.buffer[index - 3];
            this.buffer[index + 2] = this.buffer[index - 2];
            this.buffer[index + 3] = this.buffer[index - 1];
            index -= 4;
            if (size > 4)
              size -= 4;
          }
      }
      this.buffer[index] = term;
      this.buffer[index + 1] = start;
      this.buffer[index + 2] = end;
      this.buffer[index + 3] = size;
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(action, type, start, end) {
    if (action & 131072) {
      this.pushState(action & 65535, this.pos);
    } else if ((action & 262144) == 0) {
      let nextState = action, { parser: parser2 } = this.p;
      if (end > this.pos || type <= parser2.maxNode) {
        this.pos = end;
        if (!parser2.stateFlag(
          nextState,
          1
          /* StateFlag.Skipped */
        ))
          this.reducePos = end;
      }
      this.pushState(nextState, start);
      this.shiftContext(type, start);
      if (type <= parser2.maxNode)
        this.buffer.push(type, start, end, 4);
    } else {
      this.pos = end;
      this.shiftContext(type, start);
      if (type <= this.p.parser.maxNode)
        this.buffer.push(type, start, end, 4);
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(action, next3, nextStart, nextEnd) {
    if (action & 65536)
      this.reduce(action);
    else
      this.shift(action, next3, nextStart, nextEnd);
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(value, next3) {
    let index = this.p.reused.length - 1;
    if (index < 0 || this.p.reused[index] != value) {
      this.p.reused.push(value);
      index++;
    }
    let start = this.pos;
    this.reducePos = this.pos = start + value.length;
    this.pushState(next3, start);
    this.buffer.push(
      index,
      start,
      this.reducePos,
      -1
      /* size == -1 means this is a reused value */
    );
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let parent = this;
    let off = parent.buffer.length;
    while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
      off -= 4;
    let buffer = parent.buffer.slice(off), base2 = parent.bufferBase + off;
    while (parent && base2 == parent.bufferBase)
      parent = parent.parent;
    return new _Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base2, this.curContext, this.lookAhead, parent);
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(next3, nextEnd) {
    let isNode = next3 <= this.p.parser.maxNode;
    if (isNode)
      this.storeNode(next3, this.pos, nextEnd, 4);
    this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
    this.pos = this.reducePos = nextEnd;
    this.score -= 190;
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(term) {
    for (let sim = new SimulatedStack(this); ; ) {
      let action = this.p.parser.stateSlot(
        sim.state,
        4
        /* ParseState.DefaultReduce */
      ) || this.p.parser.hasAction(sim.state, term);
      if (action == 0)
        return false;
      if ((action & 65536) == 0)
        return true;
      sim.reduce(action);
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(next3) {
    if (this.stack.length >= 300)
      return [];
    let nextStates = this.p.parser.nextStates(this.state);
    if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
      let best = [];
      for (let i3 = 0, s66; i3 < nextStates.length; i3 += 2) {
        if ((s66 = nextStates[i3 + 1]) != this.state && this.p.parser.hasAction(s66, next3))
          best.push(nextStates[i3], s66);
      }
      if (this.stack.length < 120)
        for (let i3 = 0; best.length < 4 << 1 && i3 < nextStates.length; i3 += 2) {
          let s66 = nextStates[i3 + 1];
          if (!best.some((v6, i22) => i22 & 1 && v6 == s66))
            best.push(nextStates[i3], s66);
        }
      nextStates = best;
    }
    let result = [];
    for (let i3 = 0; i3 < nextStates.length && result.length < 4; i3 += 2) {
      let s66 = nextStates[i3 + 1];
      if (s66 == this.state)
        continue;
      let stack = this.split();
      stack.pushState(s66, this.pos);
      stack.storeNode(0, stack.pos, stack.pos, 4, true);
      stack.shiftContext(nextStates[i3], this.pos);
      stack.reducePos = this.pos;
      stack.score -= 200;
      result.push(stack);
    }
    return result;
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: parser2 } = this.p;
    let reduce = parser2.stateSlot(
      this.state,
      5
      /* ParseState.ForcedReduce */
    );
    if ((reduce & 65536) == 0)
      return false;
    if (!parser2.validAction(this.state, reduce)) {
      let depth = reduce >> 19, term = reduce & 65535;
      let target = this.stack.length - depth * 3;
      if (target < 0 || parser2.getGoto(this.stack[target], term, false) < 0) {
        let backup = this.findForcedReduction();
        if (backup == null)
          return false;
        reduce = backup;
      }
      this.storeNode(0, this.pos, this.pos, 4, true);
      this.score -= 100;
    }
    this.reducePos = this.pos;
    this.reduce(reduce);
    return true;
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: parser2 } = this.p, seen = [];
    let explore = (state, depth) => {
      if (seen.includes(state))
        return;
      seen.push(state);
      return parser2.allActions(state, (action) => {
        if (action & (262144 | 131072))
          ;
        else if (action & 65536) {
          let rDepth = (action >> 19) - depth;
          if (rDepth > 1) {
            let term = action & 65535, target = this.stack.length - rDepth * 3;
            if (target >= 0 && parser2.getGoto(this.stack[target], term, false) >= 0)
              return rDepth << 19 | 65536 | term;
          }
        } else {
          let found = explore(action, depth + 1);
          if (found != null)
            return found;
        }
      });
    };
    return explore(this.state, 0);
  }
  /**
  @internal
  */
  forceAll() {
    while (!this.p.parser.stateFlag(
      this.state,
      2
      /* StateFlag.Accepting */
    )) {
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, true);
        break;
      }
    }
    return this;
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3)
      return false;
    let { parser: parser2 } = this.p;
    return parser2.data[parser2.stateSlot(
      this.state,
      1
      /* ParseState.Actions */
    )] == 65535 && !parser2.stateSlot(
      this.state,
      4
      /* ParseState.DefaultReduce */
    );
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, true);
    this.state = this.stack[0];
    this.stack.length = 0;
  }
  /**
  @internal
  */
  sameState(other) {
    if (this.state != other.state || this.stack.length != other.stack.length)
      return false;
    for (let i3 = 0; i3 < this.stack.length; i3 += 3)
      if (this.stack[i3] != other.stack[i3])
        return false;
    return true;
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser;
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(dialectID) {
    return this.p.parser.dialect.flags[dialectID];
  }
  shiftContext(term, start) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
  }
  reduceContext(term, start) {
    if (this.curContext)
      this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
  }
  /**
  @internal
  */
  emitContext() {
    let last = this.buffer.length - 1;
    if (last < 0 || this.buffer[last] != -3)
      this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
  }
  /**
  @internal
  */
  emitLookAhead() {
    let last = this.buffer.length - 1;
    if (last < 0 || this.buffer[last] != -4)
      this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
  }
  updateContext(context) {
    if (context != this.curContext.context) {
      let newCx = new StackContext(this.curContext.tracker, context);
      if (newCx.hash != this.curContext.hash)
        this.emitContext();
      this.curContext = newCx;
    }
  }
  /**
  @internal
  */
  setLookAhead(lookAhead) {
    if (lookAhead > this.lookAhead) {
      this.emitLookAhead();
      this.lookAhead = lookAhead;
    }
  }
  /**
  @internal
  */
  close() {
    if (this.curContext && this.curContext.tracker.strict)
      this.emitContext();
    if (this.lookAhead > 0)
      this.emitLookAhead();
  }
};
var StackContext = class {
  constructor(tracker, context) {
    this.tracker = tracker;
    this.context = context;
    this.hash = tracker.strict ? tracker.hash(context) : 0;
  }
};
var SimulatedStack = class {
  constructor(start) {
    this.start = start;
    this.state = start.state;
    this.stack = start.stack;
    this.base = this.stack.length;
  }
  reduce(action) {
    let term = action & 65535, depth = action >> 19;
    if (depth == 0) {
      if (this.stack == this.start.stack)
        this.stack = this.stack.slice();
      this.stack.push(this.state, 0, 0);
      this.base += 3;
    } else {
      this.base -= (depth - 1) * 3;
    }
    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
    this.state = goto;
  }
};
var StackBufferCursor = class _StackBufferCursor {
  constructor(stack, pos, index) {
    this.stack = stack;
    this.pos = pos;
    this.index = index;
    this.buffer = stack.buffer;
    if (this.index == 0)
      this.maybeNext();
  }
  static create(stack, pos = stack.bufferBase + stack.buffer.length) {
    return new _StackBufferCursor(stack, pos, pos - stack.bufferBase);
  }
  maybeNext() {
    let next3 = this.stack.parent;
    if (next3 != null) {
      this.index = this.stack.bufferBase - next3.bufferBase;
      this.stack = next3;
      this.buffer = next3.buffer;
    }
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4;
    this.pos -= 4;
    if (this.index == 0)
      this.maybeNext();
  }
  fork() {
    return new _StackBufferCursor(this.stack, this.pos, this.index);
  }
};
function decodeArray(input, Type = Uint16Array) {
  if (typeof input != "string")
    return input;
  let array = null;
  for (let pos = 0, out = 0; pos < input.length; ) {
    let value = 0;
    for (; ; ) {
      let next3 = input.charCodeAt(pos++), stop = false;
      if (next3 == 126) {
        value = 65535;
        break;
      }
      if (next3 >= 92)
        next3--;
      if (next3 >= 34)
        next3--;
      let digit = next3 - 32;
      if (digit >= 46) {
        digit -= 46;
        stop = true;
      }
      value += digit;
      if (stop)
        break;
      value *= 46;
    }
    if (array)
      array[out++] = value;
    else
      array = new Type(value);
  }
  return array;
}
var CachedToken = class {
  constructor() {
    this.start = -1;
    this.value = -1;
    this.end = -1;
    this.extended = -1;
    this.lookAhead = 0;
    this.mask = 0;
    this.context = 0;
  }
};
var nullToken = new CachedToken();
var InputStream = class {
  /**
  @internal
  */
  constructor(input, ranges) {
    this.input = input;
    this.ranges = ranges;
    this.chunk = "";
    this.chunkOff = 0;
    this.chunk2 = "";
    this.chunk2Pos = 0;
    this.next = -1;
    this.token = nullToken;
    this.rangeIndex = 0;
    this.pos = this.chunkPos = ranges[0].from;
    this.range = ranges[0];
    this.end = ranges[ranges.length - 1].to;
    this.readNext();
  }
  /**
  @internal
  */
  resolveOffset(offset, assoc) {
    let range = this.range, index = this.rangeIndex;
    let pos = this.pos + offset;
    while (pos < range.from) {
      if (!index)
        return null;
      let next3 = this.ranges[--index];
      pos -= range.from - next3.to;
      range = next3;
    }
    while (assoc < 0 ? pos > range.to : pos >= range.to) {
      if (index == this.ranges.length - 1)
        return null;
      let next3 = this.ranges[++index];
      pos += next3.from - range.to;
      range = next3;
    }
    return pos;
  }
  /**
  @internal
  */
  clipPos(pos) {
    if (pos >= this.range.from && pos < this.range.to)
      return pos;
    for (let range of this.ranges)
      if (range.to > pos)
        return Math.max(pos, range.from);
    return this.end;
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(offset) {
    let idx = this.chunkOff + offset, pos, result;
    if (idx >= 0 && idx < this.chunk.length) {
      pos = this.pos + offset;
      result = this.chunk.charCodeAt(idx);
    } else {
      let resolved = this.resolveOffset(offset, 1);
      if (resolved == null)
        return -1;
      pos = resolved;
      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
      } else {
        let i3 = this.rangeIndex, range = this.range;
        while (range.to <= pos)
          range = this.ranges[++i3];
        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
        if (pos + this.chunk2.length > range.to)
          this.chunk2 = this.chunk2.slice(0, range.to - pos);
        result = this.chunk2.charCodeAt(0);
      }
    }
    if (pos >= this.token.lookAhead)
      this.token.lookAhead = pos + 1;
    return result;
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(token3, endOffset = 0) {
    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
    if (end == null || end < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = token3;
    this.token.end = end;
  }
  /**
  Accept a token ending at a specific given position.
  */
  acceptTokenTo(token3, endPos) {
    this.token.value = token3;
    this.token.end = endPos;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk, chunkPos } = this;
      this.chunk = this.chunk2;
      this.chunkPos = this.chunk2Pos;
      this.chunk2 = chunk;
      this.chunk2Pos = chunkPos;
      this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk;
      this.chunk2Pos = this.chunkPos;
      let nextChunk = this.input.chunk(this.pos);
      let end = this.pos + nextChunk.length;
      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
      this.chunkPos = this.pos;
      this.chunkOff = 0;
    }
  }
  readNext() {
    if (this.chunkOff >= this.chunk.length) {
      this.getChunk();
      if (this.chunkOff == this.chunk.length)
        return this.next = -1;
    }
    return this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(n3 = 1) {
    this.chunkOff += n3;
    while (this.pos + n3 >= this.range.to) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      n3 -= this.range.to - this.pos;
      this.range = this.ranges[++this.rangeIndex];
      this.pos = this.range.from;
    }
    this.pos += n3;
    if (this.pos >= this.token.lookAhead)
      this.token.lookAhead = this.pos + 1;
    return this.readNext();
  }
  setDone() {
    this.pos = this.chunkPos = this.end;
    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
    this.chunk = "";
    return this.next = -1;
  }
  /**
  @internal
  */
  reset(pos, token3) {
    if (token3) {
      this.token = token3;
      token3.start = pos;
      token3.lookAhead = pos + 1;
      token3.value = token3.extended = -1;
    } else {
      this.token = nullToken;
    }
    if (this.pos != pos) {
      this.pos = pos;
      if (pos == this.end) {
        this.setDone();
        return this;
      }
      while (pos < this.range.from)
        this.range = this.ranges[--this.rangeIndex];
      while (pos >= this.range.to)
        this.range = this.ranges[++this.rangeIndex];
      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
        this.chunkOff = pos - this.chunkPos;
      } else {
        this.chunk = "";
        this.chunkOff = 0;
      }
      this.readNext();
    }
    return this;
  }
  /**
  @internal
  */
  read(from3, to2) {
    if (from3 >= this.chunkPos && to2 <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(from3 - this.chunkPos, to2 - this.chunkPos);
    if (from3 >= this.chunk2Pos && to2 <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(from3 - this.chunk2Pos, to2 - this.chunk2Pos);
    if (from3 >= this.range.from && to2 <= this.range.to)
      return this.input.read(from3, to2);
    let result = "";
    for (let r2 of this.ranges) {
      if (r2.from >= to2)
        break;
      if (r2.to > from3)
        result += this.input.read(Math.max(r2.from, from3), Math.min(r2.to, to2));
    }
    return result;
  }
};
var TokenGroup = class {
  constructor(data, id2) {
    this.data = data;
    this.id = id2;
  }
  token(input, stack) {
    let { parser: parser2 } = stack.p;
    readToken(this.data, input, stack, this.id, parser2.data, parser2.tokenPrecTable);
  }
};
TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
var LocalTokenGroup = class {
  constructor(data, precTable, elseToken) {
    this.precTable = precTable;
    this.elseToken = elseToken;
    this.data = typeof data == "string" ? decodeArray(data) : data;
  }
  token(input, stack) {
    let start = input.pos, skipped = 0;
    for (; ; ) {
      let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
      readToken(this.data, input, stack, 0, this.data, this.precTable);
      if (input.token.value > -1)
        break;
      if (this.elseToken == null)
        return;
      if (!atEof)
        skipped++;
      if (nextPos == null)
        break;
      input.reset(nextPos, input.token);
    }
    if (skipped) {
      input.reset(start, input.token);
      input.acceptToken(this.elseToken, skipped);
    }
  }
};
LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
var ExternalTokenizer = class {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(token3, options = {}) {
    this.token = token3;
    this.contextual = !!options.contextual;
    this.fallback = !!options.fallback;
    this.extend = !!options.extend;
  }
};
function readToken(data, input, stack, group, precTable, precOffset) {
  let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
  scan:
    for (; ; ) {
      if ((groupMask & data[state]) == 0)
        break;
      let accEnd = data[state + 1];
      for (let i3 = state + 3; i3 < accEnd; i3 += 2)
        if ((data[i3 + 1] & groupMask) > 0) {
          let term = data[i3];
          if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
            input.acceptToken(term);
            break;
          }
        }
      let next3 = input.next, low = 0, high = data[state + 2];
      if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535) {
        state = data[accEnd + high * 3 - 1];
        continue scan;
      }
      for (; low < high; ) {
        let mid = low + high >> 1;
        let index = accEnd + mid + (mid << 1);
        let from3 = data[index], to2 = data[index + 1] || 65536;
        if (next3 < from3)
          high = mid;
        else if (next3 >= to2)
          low = mid + 1;
        else {
          state = data[index + 2];
          input.advance();
          continue scan;
        }
      }
      break;
    }
}
function findOffset(data, start, term) {
  for (let i3 = start, next3; (next3 = data[i3]) != 65535; i3++)
    if (next3 == term)
      return i3 - start;
  return -1;
}
function overrides(token3, prev3, tableData, tableOffset) {
  let iPrev = findOffset(tableData, tableOffset, prev3);
  return iPrev < 0 || findOffset(tableData, tableOffset, token3) < iPrev;
}
var verbose = typeof a6 != "undefined" && a6.env && /\bparse\b/.test(a6.env.LOG);
var stackIDs = null;
function cutAt(tree, pos, side) {
  let cursor = tree.cursor(IterMode.IncludeAnonymous);
  cursor.moveTo(pos);
  for (; ; ) {
    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
      for (; ; ) {
        if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
          return side < 0 ? Math.max(0, Math.min(
            cursor.to - 1,
            pos - 25
            /* Lookahead.Margin */
          )) : Math.min(tree.length, Math.max(
            cursor.from + 1,
            pos + 25
            /* Lookahead.Margin */
          ));
        if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
          break;
        if (!cursor.parent())
          return side < 0 ? 0 : tree.length;
      }
  }
}
var FragmentCursor = class {
  constructor(fragments, nodeSet) {
    this.fragments = fragments;
    this.nodeSet = nodeSet;
    this.i = 0;
    this.fragment = null;
    this.safeFrom = -1;
    this.safeTo = -1;
    this.trees = [];
    this.start = [];
    this.index = [];
    this.nextFragment();
  }
  nextFragment() {
    let fr2 = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (fr2) {
      this.safeFrom = fr2.openStart ? cutAt(fr2.tree, fr2.from + fr2.offset, 1) - fr2.offset : fr2.from;
      this.safeTo = fr2.openEnd ? cutAt(fr2.tree, fr2.to + fr2.offset, -1) - fr2.offset : fr2.to;
      while (this.trees.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
      }
      this.trees.push(fr2.tree);
      this.start.push(-fr2.offset);
      this.index.push(0);
      this.nextStart = this.safeFrom;
    } else {
      this.nextStart = 1e9;
    }
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(pos) {
    if (pos < this.nextStart)
      return null;
    while (this.fragment && this.safeTo <= pos)
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let last = this.trees.length - 1;
      if (last < 0) {
        this.nextFragment();
        return null;
      }
      let top2 = this.trees[last], index = this.index[last];
      if (index == top2.children.length) {
        this.trees.pop();
        this.start.pop();
        this.index.pop();
        continue;
      }
      let next3 = top2.children[index];
      let start = this.start[last] + top2.positions[index];
      if (start > pos) {
        this.nextStart = start;
        return null;
      }
      if (next3 instanceof Tree) {
        if (start == pos) {
          if (start < this.safeFrom)
            return null;
          let end = start + next3.length;
          if (end <= this.safeTo) {
            let lookAhead = next3.prop(NodeProp.lookAhead);
            if (!lookAhead || end + lookAhead < this.fragment.to)
              return next3;
          }
        }
        this.index[last]++;
        if (start + next3.length >= Math.max(this.safeFrom, pos)) {
          this.trees.push(next3);
          this.start.push(start);
          this.index.push(0);
        }
      } else {
        this.index[last]++;
        this.nextStart = start + next3.length;
      }
    }
  }
};
var TokenCache = class {
  constructor(parser2, stream) {
    this.stream = stream;
    this.tokens = [];
    this.mainToken = null;
    this.actions = [];
    this.tokens = parser2.tokenizers.map((_7) => new CachedToken());
  }
  getActions(stack) {
    let actionIndex = 0;
    let main = null;
    let { parser: parser2 } = stack.p, { tokenizers } = parser2;
    let mask = parser2.stateSlot(
      stack.state,
      3
      /* ParseState.TokenizerMask */
    );
    let context = stack.curContext ? stack.curContext.hash : 0;
    let lookAhead = 0;
    for (let i3 = 0; i3 < tokenizers.length; i3++) {
      if ((1 << i3 & mask) == 0)
        continue;
      let tokenizer3 = tokenizers[i3], token3 = this.tokens[i3];
      if (main && !tokenizer3.fallback)
        continue;
      if (tokenizer3.contextual || token3.start != stack.pos || token3.mask != mask || token3.context != context) {
        this.updateCachedToken(token3, tokenizer3, stack);
        token3.mask = mask;
        token3.context = context;
      }
      if (token3.lookAhead > token3.end + 25)
        lookAhead = Math.max(token3.lookAhead, lookAhead);
      if (token3.value != 0) {
        let startIndex = actionIndex;
        if (token3.extended > -1)
          actionIndex = this.addActions(stack, token3.extended, token3.end, actionIndex);
        actionIndex = this.addActions(stack, token3.value, token3.end, actionIndex);
        if (!tokenizer3.extend) {
          main = token3;
          if (actionIndex > startIndex)
            break;
        }
      }
    }
    while (this.actions.length > actionIndex)
      this.actions.pop();
    if (lookAhead)
      stack.setLookAhead(lookAhead);
    if (!main && stack.pos == this.stream.end) {
      main = new CachedToken();
      main.value = stack.p.parser.eofTerm;
      main.start = main.end = stack.pos;
      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
    }
    this.mainToken = main;
    return this.actions;
  }
  getMainToken(stack) {
    if (this.mainToken)
      return this.mainToken;
    let main = new CachedToken(), { pos, p: p8 } = stack;
    main.start = pos;
    main.end = Math.min(pos + 1, p8.stream.end);
    main.value = pos == p8.stream.end ? p8.parser.eofTerm : 0;
    return main;
  }
  updateCachedToken(token3, tokenizer3, stack) {
    let start = this.stream.clipPos(stack.pos);
    tokenizer3.token(this.stream.reset(start, token3), stack);
    if (token3.value > -1) {
      let { parser: parser2 } = stack.p;
      for (let i3 = 0; i3 < parser2.specialized.length; i3++)
        if (parser2.specialized[i3] == token3.value) {
          let result = parser2.specializers[i3](this.stream.read(token3.start, token3.end), stack);
          if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
            if ((result & 1) == 0)
              token3.value = result >> 1;
            else
              token3.extended = result >> 1;
            break;
          }
        }
    } else {
      token3.value = 0;
      token3.end = this.stream.clipPos(start + 1);
    }
  }
  putAction(action, token3, end, index) {
    for (let i3 = 0; i3 < index; i3 += 3)
      if (this.actions[i3] == action)
        return index;
    this.actions[index++] = action;
    this.actions[index++] = token3;
    this.actions[index++] = end;
    return index;
  }
  addActions(stack, token3, end, index) {
    let { state } = stack, { parser: parser2 } = stack.p, { data } = parser2;
    for (let set = 0; set < 2; set++) {
      for (let i3 = parser2.stateSlot(
        state,
        set ? 2 : 1
        /* ParseState.Actions */
      ); ; i3 += 3) {
        if (data[i3] == 65535) {
          if (data[i3 + 1] == 1) {
            i3 = pair(data, i3 + 2);
          } else {
            if (index == 0 && data[i3 + 1] == 2)
              index = this.putAction(pair(data, i3 + 2), token3, end, index);
            break;
          }
        }
        if (data[i3] == token3)
          index = this.putAction(pair(data, i3 + 1), token3, end, index);
      }
    }
    return index;
  }
};
var Parse = class {
  constructor(parser2, input, fragments, ranges) {
    this.parser = parser2;
    this.input = input;
    this.ranges = ranges;
    this.recovering = 0;
    this.nextStackID = 9812;
    this.minStackPos = 0;
    this.reused = [];
    this.stoppedAt = null;
    this.lastBigReductionStart = -1;
    this.lastBigReductionSize = 0;
    this.bigReductionCount = 0;
    this.stream = new InputStream(input, ranges);
    this.tokens = new TokenCache(parser2, this.stream);
    this.topTerm = parser2.top[1];
    let { from: from3 } = ranges[0];
    this.stacks = [Stack.start(this, parser2.top[0], from3)];
    this.fragments = fragments.length && this.stream.end - from3 > parser2.bufferLength * 4 ? new FragmentCursor(fragments, parser2.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let stacks = this.stacks, pos = this.minStackPos;
    let newStacks = this.stacks = [];
    let stopped, stoppedTokens;
    if (this.bigReductionCount > 300 && stacks.length == 1) {
      let [s66] = stacks;
      while (s66.forceReduce() && s66.stack.length && s66.stack[s66.stack.length - 2] >= this.lastBigReductionStart) {
      }
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let i3 = 0; i3 < stacks.length; i3++) {
      let stack = stacks[i3];
      for (; ; ) {
        this.tokens.mainToken = null;
        if (stack.pos > pos) {
          newStacks.push(stack);
        } else if (this.advanceStack(stack, newStacks, stacks)) {
          continue;
        } else {
          if (!stopped) {
            stopped = [];
            stoppedTokens = [];
          }
          stopped.push(stack);
          let tok = this.tokens.getMainToken(stack);
          stoppedTokens.push(tok.value, tok.end);
        }
        break;
      }
    }
    if (!newStacks.length) {
      let finished = stopped && findFinished(stopped);
      if (finished) {
        if (verbose)
          console.log("Finish with " + this.stackID(finished));
        return this.stackToTree(finished);
      }
      if (this.parser.strict) {
        if (verbose && stopped)
          console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
        throw new SyntaxError("No parse at " + pos);
      }
      if (!this.recovering)
        this.recovering = 5;
    }
    if (this.recovering && stopped) {
      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
      if (finished) {
        if (verbose)
          console.log("Force-finish " + this.stackID(finished));
        return this.stackToTree(finished.forceAll());
      }
    }
    if (this.recovering) {
      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
      if (newStacks.length > maxRemaining) {
        newStacks.sort((a7, b8) => b8.score - a7.score);
        while (newStacks.length > maxRemaining)
          newStacks.pop();
      }
      if (newStacks.some((s66) => s66.reducePos > pos))
        this.recovering--;
    } else if (newStacks.length > 1) {
      outer:
        for (let i3 = 0; i3 < newStacks.length - 1; i3++) {
          let stack = newStacks[i3];
          for (let j11 = i3 + 1; j11 < newStacks.length; j11++) {
            let other = newStacks[j11];
            if (stack.sameState(other) || stack.buffer.length > 500 && other.buffer.length > 500) {
              if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
                newStacks.splice(j11--, 1);
              } else {
                newStacks.splice(i3--, 1);
                continue outer;
              }
            }
          }
        }
      if (newStacks.length > 12)
        newStacks.splice(
          12,
          newStacks.length - 12
          /* Rec.MaxStackCount */
        );
    }
    this.minStackPos = newStacks[0].pos;
    for (let i3 = 1; i3 < newStacks.length; i3++)
      if (newStacks[i3].pos < this.minStackPos)
        this.minStackPos = newStacks[i3].pos;
    return null;
  }
  stopAt(pos) {
    if (this.stoppedAt != null && this.stoppedAt < pos)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = pos;
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(stack, stacks, split) {
    let start = stack.pos, { parser: parser2 } = this;
    let base2 = verbose ? this.stackID(stack) + " -> " : "";
    if (this.stoppedAt != null && start > this.stoppedAt)
      return stack.forceReduce() ? stack : null;
    if (this.fragments) {
      let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
      for (let cached = this.fragments.nodeAt(start); cached; ) {
        let match3 = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser2.getGoto(stack.state, cached.type.id) : -1;
        if (match3 > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
          stack.useNode(cached, match3);
          if (verbose)
            console.log(base2 + this.stackID(stack) + ` (via reuse of ${parser2.getName(cached.type.id)})`);
          return true;
        }
        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
          break;
        let inner = cached.children[0];
        if (inner instanceof Tree && cached.positions[0] == 0)
          cached = inner;
        else
          break;
      }
    }
    let defaultReduce = parser2.stateSlot(
      stack.state,
      4
      /* ParseState.DefaultReduce */
    );
    if (defaultReduce > 0) {
      stack.reduce(defaultReduce);
      if (verbose)
        console.log(base2 + this.stackID(stack) + ` (via always-reduce ${parser2.getName(
          defaultReduce & 65535
          /* Action.ValueMask */
        )})`);
      return true;
    }
    if (stack.stack.length >= 8400) {
      while (stack.stack.length > 6e3 && stack.forceReduce()) {
      }
    }
    let actions = this.tokens.getActions(stack);
    for (let i3 = 0; i3 < actions.length; ) {
      let action = actions[i3++], term = actions[i3++], end = actions[i3++];
      let last = i3 == actions.length || !split;
      let localStack = last ? stack : stack.split();
      let main = this.tokens.mainToken;
      localStack.apply(action, term, main ? main.start : localStack.pos, end);
      if (verbose)
        console.log(base2 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser2.getName(
          action & 65535
          /* Action.ValueMask */
        )}`} for ${parser2.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
      if (last)
        return true;
      else if (localStack.pos > start)
        stacks.push(localStack);
      else
        split.push(localStack);
    }
    return false;
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(stack, newStacks) {
    let pos = stack.pos;
    for (; ; ) {
      if (!this.advanceStack(stack, null, null))
        return false;
      if (stack.pos > pos) {
        pushStackDedup(stack, newStacks);
        return true;
      }
    }
  }
  runRecovery(stacks, tokens, newStacks) {
    let finished = null, restarted = false;
    for (let i3 = 0; i3 < stacks.length; i3++) {
      let stack = stacks[i3], token3 = tokens[i3 << 1], tokenEnd = tokens[(i3 << 1) + 1];
      let base2 = verbose ? this.stackID(stack) + " -> " : "";
      if (stack.deadEnd) {
        if (restarted)
          continue;
        restarted = true;
        stack.restart();
        if (verbose)
          console.log(base2 + this.stackID(stack) + " (restarted)");
        let done = this.advanceFully(stack, newStacks);
        if (done)
          continue;
      }
      let force = stack.split(), forceBase = base2;
      for (let j11 = 0; force.forceReduce() && j11 < 10; j11++) {
        if (verbose)
          console.log(forceBase + this.stackID(force) + " (via force-reduce)");
        let done = this.advanceFully(force, newStacks);
        if (done)
          break;
        if (verbose)
          forceBase = this.stackID(force) + " -> ";
      }
      for (let insert2 of stack.recoverByInsert(token3)) {
        if (verbose)
          console.log(base2 + this.stackID(insert2) + " (via recover-insert)");
        this.advanceFully(insert2, newStacks);
      }
      if (this.stream.end > stack.pos) {
        if (tokenEnd == stack.pos) {
          tokenEnd++;
          token3 = 0;
        }
        stack.recoverByDelete(token3, tokenEnd);
        if (verbose)
          console.log(base2 + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token3)})`);
        pushStackDedup(stack, newStacks);
      } else if (!finished || finished.score < stack.score) {
        finished = stack;
      }
    }
    return finished;
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(stack) {
    stack.close();
    return Tree.build({
      buffer: StackBufferCursor.create(stack),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: stack.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(stack) {
    let id2 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack);
    if (!id2)
      stackIDs.set(stack, id2 = String.fromCodePoint(this.nextStackID++));
    return id2 + stack;
  }
};
function pushStackDedup(stack, newStacks) {
  for (let i3 = 0; i3 < newStacks.length; i3++) {
    let other = newStacks[i3];
    if (other.pos == stack.pos && other.sameState(stack)) {
      if (newStacks[i3].score < stack.score)
        newStacks[i3] = stack;
      return;
    }
  }
  newStacks.push(stack);
}
var Dialect = class {
  constructor(source, flags, disabled) {
    this.source = source;
    this.flags = flags;
    this.disabled = disabled;
  }
  allows(term) {
    return !this.disabled || this.disabled[term] == 0;
  }
};
var id = (x7) => x7;
var ContextTracker = class {
  /**
  Define a context tracker.
  */
  constructor(spec) {
    this.start = spec.start;
    this.shift = spec.shift || id;
    this.reduce = spec.reduce || id;
    this.reuse = spec.reuse || id;
    this.hash = spec.hash || (() => 0);
    this.strict = spec.strict !== false;
  }
};
var LRParser = class _LRParser extends Parser {
  /**
  @internal
  */
  constructor(spec) {
    super();
    this.wrappers = [];
    if (spec.version != 14)
      throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
    let nodeNames = spec.nodeNames.split(" ");
    this.minRepeatTerm = nodeNames.length;
    for (let i3 = 0; i3 < spec.repeatNodeCount; i3++)
      nodeNames.push("");
    let topTerms = Object.keys(spec.topRules).map((r2) => spec.topRules[r2][1]);
    let nodeProps = [];
    for (let i3 = 0; i3 < nodeNames.length; i3++)
      nodeProps.push([]);
    function setProp(nodeID, prop, value) {
      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
    }
    if (spec.nodeProps)
      for (let propSpec of spec.nodeProps) {
        let prop = propSpec[0];
        if (typeof prop == "string")
          prop = NodeProp[prop];
        for (let i3 = 1; i3 < propSpec.length; ) {
          let next3 = propSpec[i3++];
          if (next3 >= 0) {
            setProp(next3, prop, propSpec[i3++]);
          } else {
            let value = propSpec[i3 + -next3];
            for (let j11 = -next3; j11 > 0; j11--)
              setProp(propSpec[i3++], prop, value);
            i3++;
          }
        }
      }
    this.nodeSet = new NodeSet(nodeNames.map((name2, i3) => NodeType.define({
      name: i3 >= this.minRepeatTerm ? void 0 : name2,
      id: i3,
      props: nodeProps[i3],
      top: topTerms.indexOf(i3) > -1,
      error: i3 == 0,
      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i3) > -1
    })));
    if (spec.propSources)
      this.nodeSet = this.nodeSet.extend(...spec.propSources);
    this.strict = false;
    this.bufferLength = DefaultBufferLength;
    let tokenArray = decodeArray(spec.tokenData);
    this.context = spec.context;
    this.specializerSpecs = spec.specialized || [];
    this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let i3 = 0; i3 < this.specializerSpecs.length; i3++)
      this.specialized[i3] = this.specializerSpecs[i3].term;
    this.specializers = this.specializerSpecs.map(getSpecializer);
    this.states = decodeArray(spec.states, Uint32Array);
    this.data = decodeArray(spec.stateData);
    this.goto = decodeArray(spec.goto);
    this.maxTerm = spec.maxTerm;
    this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
    this.topRules = spec.topRules;
    this.dialects = spec.dialects || {};
    this.dynamicPrecedences = spec.dynamicPrecedences || null;
    this.tokenPrecTable = spec.tokenPrec;
    this.termNames = spec.termNames || null;
    this.maxNode = this.nodeSet.types.length - 1;
    this.dialect = this.parseDialect();
    this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(input, fragments, ranges) {
    let parse3 = new Parse(this, input, fragments, ranges);
    for (let w9 of this.wrappers)
      parse3 = w9(parse3, input, fragments, ranges);
    return parse3;
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(state, term, loose = false) {
    let table = this.goto;
    if (term >= table[0])
      return -1;
    for (let pos = table[term + 1]; ; ) {
      let groupTag = table[pos++], last = groupTag & 1;
      let target = table[pos++];
      if (last && loose)
        return target;
      for (let end = pos + (groupTag >> 1); pos < end; pos++)
        if (table[pos] == state)
          return target;
      if (last)
        return -1;
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(state, terminal) {
    let data = this.data;
    for (let set = 0; set < 2; set++) {
      for (let i3 = this.stateSlot(
        state,
        set ? 2 : 1
        /* ParseState.Actions */
      ), next3; ; i3 += 3) {
        if ((next3 = data[i3]) == 65535) {
          if (data[i3 + 1] == 1)
            next3 = data[i3 = pair(data, i3 + 2)];
          else if (data[i3 + 1] == 2)
            return pair(data, i3 + 2);
          else
            break;
        }
        if (next3 == terminal || next3 == 0)
          return pair(data, i3 + 1);
      }
    }
    return 0;
  }
  /**
  @internal
  */
  stateSlot(state, slot) {
    return this.states[state * 6 + slot];
  }
  /**
  @internal
  */
  stateFlag(state, flag) {
    return (this.stateSlot(
      state,
      0
      /* ParseState.Flags */
    ) & flag) > 0;
  }
  /**
  @internal
  */
  validAction(state, action) {
    return !!this.allActions(state, (a7) => a7 == action ? true : null);
  }
  /**
  @internal
  */
  allActions(state, action) {
    let deflt = this.stateSlot(
      state,
      4
      /* ParseState.DefaultReduce */
    );
    let result = deflt ? action(deflt) : void 0;
    for (let i3 = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); result == null; i3 += 3) {
      if (this.data[i3] == 65535) {
        if (this.data[i3 + 1] == 1)
          i3 = pair(this.data, i3 + 2);
        else
          break;
      }
      result = action(pair(this.data, i3 + 1));
    }
    return result;
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(state) {
    let result = [];
    for (let i3 = this.stateSlot(
      state,
      1
      /* ParseState.Actions */
    ); ; i3 += 3) {
      if (this.data[i3] == 65535) {
        if (this.data[i3 + 1] == 1)
          i3 = pair(this.data, i3 + 2);
        else
          break;
      }
      if ((this.data[i3 + 2] & 65536 >> 16) == 0) {
        let value = this.data[i3 + 1];
        if (!result.some((v6, i22) => i22 & 1 && v6 == value))
          result.push(this.data[i3], value);
      }
    }
    return result;
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(config2) {
    let copy3 = Object.assign(Object.create(_LRParser.prototype), this);
    if (config2.props)
      copy3.nodeSet = this.nodeSet.extend(...config2.props);
    if (config2.top) {
      let info = this.topRules[config2.top];
      if (!info)
        throw new RangeError(`Invalid top rule name ${config2.top}`);
      copy3.top = info;
    }
    if (config2.tokenizers)
      copy3.tokenizers = this.tokenizers.map((t3) => {
        let found = config2.tokenizers.find((r2) => r2.from == t3);
        return found ? found.to : t3;
      });
    if (config2.specializers) {
      copy3.specializers = this.specializers.slice();
      copy3.specializerSpecs = this.specializerSpecs.map((s66, i3) => {
        let found = config2.specializers.find((r2) => r2.from == s66.external);
        if (!found)
          return s66;
        let spec = Object.assign(Object.assign({}, s66), { external: found.to });
        copy3.specializers[i3] = getSpecializer(spec);
        return spec;
      });
    }
    if (config2.contextTracker)
      copy3.context = config2.contextTracker;
    if (config2.dialect)
      copy3.dialect = this.parseDialect(config2.dialect);
    if (config2.strict != null)
      copy3.strict = config2.strict;
    if (config2.wrap)
      copy3.wrappers = copy3.wrappers.concat(config2.wrap);
    if (config2.bufferLength != null)
      copy3.bufferLength = config2.bufferLength;
    return copy3;
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(term) {
    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1;
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  /**
  @internal
  */
  dynamicPrecedence(term) {
    let prec2 = this.dynamicPrecedences;
    return prec2 == null ? 0 : prec2[term] || 0;
  }
  /**
  @internal
  */
  parseDialect(dialect) {
    let values = Object.keys(this.dialects), flags = values.map(() => false);
    if (dialect)
      for (let part of dialect.split(" ")) {
        let id2 = values.indexOf(part);
        if (id2 >= 0)
          flags[id2] = true;
      }
    let disabled = null;
    for (let i3 = 0; i3 < values.length; i3++)
      if (!flags[i3]) {
        for (let j11 = this.dialects[values[i3]], id2; (id2 = this.data[j11++]) != 65535; )
          (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id2] = 1;
      }
    return new Dialect(dialect, flags, disabled);
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(spec) {
    return new _LRParser(spec);
  }
};
function pair(data, off) {
  return data[off] | data[off + 1] << 16;
}
function findFinished(stacks) {
  let best = null;
  for (let stack of stacks) {
    let stopped = stack.p.stoppedAt;
    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(
      stack.state,
      2
      /* StateFlag.Accepting */
    ) && (!best || best.score < stack.score))
      best = stack;
  }
  return best;
}
function getSpecializer(spec) {
  if (spec.external) {
    let mask = spec.extend ? 1 : 0;
    return (value, stack) => spec.external(value, stack) << 1 | mask;
  }
  return spec.get;
}

// https://esm.sh/v135/@lezer/javascript@1.4.21/es2020/javascript.development.mjs
var noSemi = 314;
var noSemiType = 315;
var incdec = 1;
var incdecPrefix = 2;
var questionDot = 3;
var JSXStartTag = 4;
var insertSemi = 316;
var spaces = 318;
var newline = 319;
var LineComment = 5;
var BlockComment = 6;
var Dialect_jsx = 0;
var space = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
];
var braceR = 125;
var semicolon = 59;
var slash = 47;
var star = 42;
var plus = 43;
var minus = 45;
var lt4 = 60;
var comma = 44;
var question = 63;
var dot = 46;
var bracketL = 91;
var trackNewline = new ContextTracker({
  start: false,
  shift(context, term) {
    return term == LineComment || term == BlockComment || term == spaces ? context : term == newline;
  },
  strict: false
});
var insertSemicolon = new ExternalTokenizer((input, stack) => {
  let { next: next3 } = input;
  if (next3 == braceR || next3 == -1 || stack.context)
    input.acceptToken(insertSemi);
}, { contextual: true, fallback: true });
var noSemicolon = new ExternalTokenizer((input, stack) => {
  let { next: next3 } = input, after;
  if (space.indexOf(next3) > -1)
    return;
  if (next3 == slash && ((after = input.peek(1)) == slash || after == star))
    return;
  if (next3 != braceR && next3 != semicolon && next3 != -1 && !stack.context)
    input.acceptToken(noSemi);
}, { contextual: true });
var noSemicolonType = new ExternalTokenizer((input, stack) => {
  if (input.next == bracketL && !stack.context)
    input.acceptToken(noSemiType);
}, { contextual: true });
var operatorToken = new ExternalTokenizer((input, stack) => {
  let { next: next3 } = input;
  if (next3 == plus || next3 == minus) {
    input.advance();
    if (next3 == input.next) {
      input.advance();
      let mayPostfix = !stack.context && stack.canShift(incdec);
      input.acceptToken(mayPostfix ? incdec : incdecPrefix);
    }
  } else if (next3 == question && input.peek(1) == dot) {
    input.advance();
    input.advance();
    if (input.next < 48 || input.next > 57)
      input.acceptToken(questionDot);
  }
}, { contextual: true });
function identifierChar(ch, start) {
  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 || !start && ch >= 48 && ch <= 57;
}
var jsx = new ExternalTokenizer((input, stack) => {
  if (input.next != lt4 || !stack.dialectEnabled(Dialect_jsx))
    return;
  input.advance();
  if (input.next == slash)
    return;
  let back = 0;
  while (space.indexOf(input.next) > -1) {
    input.advance();
    back++;
  }
  if (identifierChar(input.next, true)) {
    input.advance();
    back++;
    while (identifierChar(input.next, false)) {
      input.advance();
      back++;
    }
    while (space.indexOf(input.next) > -1) {
      input.advance();
      back++;
    }
    if (input.next == comma)
      return;
    for (let i3 = 0; ; i3++) {
      if (i3 == 7) {
        if (!identifierChar(input.next, true))
          return;
        break;
      }
      if (input.next != "extends".charCodeAt(i3))
        break;
      input.advance();
      back++;
    }
  }
  input.acceptToken(JSXStartTag, -back);
});
var jsHighlight = styleTags({
  "get set async static": tags.modifier,
  "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
  "in of await yield void typeof delete instanceof": tags.operatorKeyword,
  "let var const using function class extends": tags.definitionKeyword,
  "import export from": tags.moduleKeyword,
  "with debugger as new": tags.keyword,
  TemplateString: tags.special(tags.string),
  super: tags.atom,
  BooleanLiteral: tags.bool,
  this: tags.self,
  null: tags.null,
  Star: tags.modifier,
  VariableName: tags.variableName,
  "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags.function(tags.variableName),
  VariableDefinition: tags.definition(tags.variableName),
  Label: tags.labelName,
  PropertyName: tags.propertyName,
  PrivatePropertyName: tags.special(tags.propertyName),
  "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
  "FunctionDeclaration/VariableDefinition": tags.function(tags.definition(tags.variableName)),
  "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
  "NewExpression/VariableName": tags.className,
  PropertyDefinition: tags.definition(tags.propertyName),
  PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),
  UpdateOp: tags.updateOperator,
  "LineComment Hashbang": tags.lineComment,
  BlockComment: tags.blockComment,
  Number: tags.number,
  String: tags.string,
  Escape: tags.escape,
  ArithOp: tags.arithmeticOperator,
  LogicOp: tags.logicOperator,
  BitOp: tags.bitwiseOperator,
  CompareOp: tags.compareOperator,
  RegExp: tags.regexp,
  Equals: tags.definitionOperator,
  Arrow: tags.function(tags.punctuation),
  ": Spread": tags.punctuation,
  "( )": tags.paren,
  "[ ]": tags.squareBracket,
  "{ }": tags.brace,
  "InterpolationStart InterpolationEnd": tags.special(tags.brace),
  ".": tags.derefOperator,
  ", ;": tags.separator,
  "@": tags.meta,
  TypeName: tags.typeName,
  TypeDefinition: tags.definition(tags.typeName),
  "type enum interface implements namespace module declare": tags.definitionKeyword,
  "abstract global Privacy readonly override": tags.modifier,
  "is keyof unique infer asserts": tags.operatorKeyword,
  JSXAttributeValue: tags.attributeValue,
  JSXText: tags.content,
  "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
  "JSXIdentifier JSXNameSpacedName": tags.tagName,
  "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.attributeName,
  "JSXBuiltin/JSXIdentifier": tags.standard(tags.tagName)
});
var spec_identifier = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, const: 52, extends: 56, this: 60, true: 68, false: 68, null: 80, void: 84, typeof: 88, super: 104, new: 138, delete: 150, yield: 159, await: 163, class: 168, public: 231, private: 231, protected: 231, readonly: 233, instanceof: 252, satisfies: 255, in: 256, import: 290, keyof: 347, unique: 351, infer: 357, asserts: 393, is: 395, abstract: 415, implements: 417, type: 419, let: 422, var: 424, using: 427, interface: 433, enum: 437, namespace: 443, module: 445, declare: 449, global: 453, for: 472, of: 481, while: 484, with: 488, do: 492, if: 496, else: 498, switch: 502, case: 508, try: 514, catch: 518, finally: 522, return: 526, throw: 530, break: 534, continue: 538, debugger: 542 };
var spec_word = { __proto__: null, async: 125, get: 127, set: 129, declare: 191, public: 193, private: 193, protected: 193, static: 195, abstract: 197, override: 199, readonly: 205, accessor: 207, new: 399 };
var spec_LessThan = { __proto__: null, "<": 189 };
var parser = LRParser.deserialize({
  version: 14,
  states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#D_O.QQlO'#DeO.bQlO'#DpO%[QlO'#DxO0fQlO'#EQOOQ!0Lf'#EY'#EYO1PQ`O'#EVOOQO'#En'#EnOOQO'#Ij'#IjO1XQ`O'#GrO1dQ`O'#EmO1iQ`O'#EmO3hQ!0MxO'#JpO6[Q!0MxO'#JqO6uQ`O'#F[O6zQ,UO'#FsOOQ!0Lf'#Fe'#FeO7VO7dO'#FeO7eQMhO'#F{O9UQ`O'#FzOOQ!0Lf'#Jq'#JqOOQ!0Lb'#Jp'#JpO9ZQ`O'#GvOOQ['#K]'#K]O9fQ`O'#IWO9kQ!0LrO'#IXOOQ['#J^'#J^OOQ['#I]'#I]Q`QlOOQ`QlOOO9sQ!L^O'#DtO9zQlO'#D|O:RQlO'#EOO9aQ`O'#GrO:YQMhO'#CoO:hQ`O'#ElO:sQ`O'#EwO:xQMhO'#FdO;gQ`O'#GrOOQO'#K^'#K^O;lQ`O'#K^O;zQ`O'#GzO;zQ`O'#G{O;zQ`O'#G}O9aQ`O'#HQO<qQ`O'#HTO>YQ`O'#CeO>jQ`O'#HaO>rQ`O'#HgO>rQ`O'#HiO`QlO'#HkO>rQ`O'#HmO>rQ`O'#HpO>wQ`O'#HvO>|Q!0LsO'#H|O%[QlO'#IOO?XQ!0LsO'#IQO?dQ!0LsO'#ISO9kQ!0LrO'#IUO?oQ!0MxO'#CiO@qQpO'#DjQOQ`OOO%[QlO'#EOOAXQ`O'#ERO:YQMhO'#ElOAdQ`O'#ElOAoQ!bO'#FdOOQ['#Cg'#CgOOQ!0Lb'#Do'#DoOOQ!0Lb'#Jt'#JtO%[QlO'#JtOOQO'#Jw'#JwOOQO'#If'#IfOBoQpO'#EeOOQ!0Lb'#Ed'#EdOOQ!0Lb'#J{'#J{OCkQ!0MSO'#EeOCuQpO'#EUOOQO'#Jv'#JvODZQpO'#JwOEhQpO'#EUOCuQpO'#EePEuO&2DjO'#CbPOOO)CD{)CD{OOOO'#I^'#I^OFQO#tO,59UOOQ!0Lh,59U,59UOOOO'#I_'#I_OF`O&jO,59UOFnQ!L^O'#DaOOOO'#Ia'#IaOFuO#@ItO,59yOOQ!0Lf,59y,59yOGTQlO'#IbOGhQ`O'#JrOIgQ!fO'#JrO+}QlO'#JrOInQ`O,5:POJUQ`O'#EnOJcQ`O'#KROJnQ`O'#KQOJnQ`O'#KQOJvQ`O,5;[OJ{Q`O'#KPOOQ!0Ln,5:[,5:[OKSQlO,5:[OMQQ!0MxO,5:dOMqQ`O,5:lON[Q!0LrO'#KOONcQ`O'#J}O9ZQ`O'#J}ONwQ`O'#J}O! PQ`O,5;ZO! UQ`O'#J}O!#ZQ!fO'#JqOOQ!0Lh'#Ci'#CiO%[QlO'#EQO!#yQ!fO,5:qOOQS'#Jx'#JxOOQO-E<h-E<hO9aQ`O,5=^O!$aQ`O,5=^O!$fQlO,5;XO!&iQMhO'#EiO!(SQ`O,5;XO!(XQlO'#DwO!(cQpO,5;bO!(kQpO,5;bO%[QlO,5;bOOQ['#FS'#FSOOQ['#FU'#FUO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cOOQ['#FY'#FYO!(yQlO,5;sOOQ!0Lf,5;x,5;xOOQ!0Lf,5;y,5;yOOQ!0Lf,5;{,5;{O%[QlO'#InO!*|Q!0LrO,5<hO%[QlO,5;cO!&iQMhO,5;cO!+kQMhO,5;cO!-]QMhO'#E[O%[QlO,5;vOOQ!0Lf,5;z,5;zO!-dQ,UO'#FiO!.aQ,UO'#KVO!-{Q,UO'#KVO!.hQ,UO'#KVOOQO'#KV'#KVO!.|Q,UO,5<ROOOW,5<_,5<_O!/_QlO'#FuOOOW'#Im'#ImO7VO7dO,5<PO!/fQ,UO'#FwOOQ!0Lf,5<P,5<PO!0VQ$IUO'#CwOOQ!0Lh'#C{'#C{O!0jO#@ItO'#DPO!1WQMjO,5<dO!1_Q`O,5<gO!2zQ(CWO'#GWO!3XQ`O'#GXO!3^Q`O'#GXO!4|Q(CWO'#G]O!6RQpO'#GaOOQO'#Gm'#GmO!+rQMhO'#GlOOQO'#Go'#GoO!+rQMhO'#GnO!6tQ$IUO'#JjOOQ!0Lh'#Jj'#JjO!7OQ`O'#JiO!7^Q`O'#JhO!7fQ`O'#CuOOQ!0Lh'#Cy'#CyO!7qQ`O'#C{OOQ!0Lh'#DT'#DTOOQ!0Lh'#DV'#DVO1SQ`O'#DXO!+rQMhO'#GOO!+rQMhO'#GQO!7vQ`O'#GSO!7{Q`O'#GTO!3^Q`O'#GZO!+rQMhO'#G`O;zQ`O'#JiO!8QQ`O'#EoO!8oQ`O,5<fOOQ!0Lb'#Cr'#CrO!8wQ`O'#EpO!9qQpO'#EqOOQ!0Lb'#KP'#KPO!9xQ!0LrO'#K_O9kQ!0LrO,5=bO`QlO,5>rOOQ['#Jf'#JfOOQ[,5>s,5>sOOQ[-E<Z-E<ZO!;wQ!0MxO,5:`O!9lQpO,5:^O!>bQ!0MxO,5:hO%[QlO,5:hO!@xQ!0MxO,5:jOOQO,5@x,5@xO!AiQMhO,5=^O!AwQ!0LrO'#JgO9UQ`O'#JgO!BYQ!0LrO,59ZO!BeQpO,59ZO!BmQMhO,59ZO:YQMhO,59ZO!BxQ`O,5;XO!CQQ`O'#H`O!CfQ`O'#KbO%[QlO,5;|O!9lQpO,5<OO!CnQ`O,5=yO!CsQ`O,5=yO!CxQ`O,5=yO9kQ!0LrO,5=yO;zQ`O,5=iOOQO'#Cw'#CwO!DWQpO,5=fO!D`QMhO,5=gO!DkQ`O,5=iO!DpQ!bO,5=lO!DxQ`O'#K^O>wQ`O'#HVO9aQ`O'#HXO!D}Q`O'#HXO:YQMhO'#HZO!ESQ`O'#HZOOQ[,5=o,5=oO!EXQ`O'#H[O!EjQ`O'#CoO!EoQ`O,59PO!EyQ`O,59PO!HOQlO,59POOQ[,59P,59PO!H`Q!0LrO,59PO%[QlO,59PO!JkQlO'#HcOOQ['#Hd'#HdOOQ['#He'#HeO`QlO,5={O!KRQ`O,5={O`QlO,5>RO`QlO,5>TO!KWQ`O,5>VO`QlO,5>XO!K]Q`O,5>[O!KbQlO,5>bOOQ[,5>h,5>hO%[QlO,5>hO9kQ!0LrO,5>jOOQ[,5>l,5>lO# lQ`O,5>lOOQ[,5>n,5>nO# lQ`O,5>nOOQ[,5>p,5>pO#!YQpO'#D]O%[QlO'#JtO#!{QpO'#JtO##VQpO'#DkO##hQpO'#DkO#%yQlO'#DkO#&QQ`O'#JsO#&YQ`O,5:UO#&_Q`O'#ErO#&mQ`O'#KSO#&uQ`O,5;]O#&zQpO'#DkO#'XQpO'#ETOOQ!0Lf,5:m,5:mO%[QlO,5:mO#'`Q`O,5:mO>wQ`O,5;WO!BeQpO,5;WO!BmQMhO,5;WO:YQMhO,5;WO#'hQ`O,5@`O#'mQ07dO,5:qOOQO-E<d-E<dO#(sQ!0MSO,5;POCuQpO,5:pO#(}QpO,5:pOCuQpO,5;PO!BYQ!0LrO,5:pOOQ!0Lb'#Eh'#EhOOQO,5;P,5;PO%[QlO,5;PO#)[Q!0LrO,5;PO#)gQ!0LrO,5;PO!BeQpO,5:pOOQO,5;V,5;VO#)uQ!0LrO,5;PPOOO'#I['#I[P#*ZO&2DjO,58|POOO,58|,58|OOOO-E<[-E<[OOQ!0Lh1G.p1G.pOOOO-E<]-E<]OOOO,59{,59{O#*fQ!bO,59{OOOO-E<_-E<_OOQ!0Lf1G/e1G/eO#*kQ!fO,5>|O+}QlO,5>|OOQO,5?S,5?SO#*uQlO'#IbOOQO-E<`-E<`O#+SQ`O,5@^O#+[Q!fO,5@^O#+cQ`O,5@lOOQ!0Lf1G/k1G/kO%[QlO,5@mO#+kQ`O'#IhOOQO-E<f-E<fO#+cQ`O,5@lOOQ!0Lb1G0v1G0vOOQ!0Ln1G/v1G/vOOQ!0Ln1G0W1G0WO%[QlO,5@jO#,PQ!0LrO,5@jO#,bQ!0LrO,5@jO#,iQ`O,5@iO9ZQ`O,5@iO#,qQ`O,5@iO#-PQ`O'#IkO#,iQ`O,5@iOOQ!0Lb1G0u1G0uO!(cQpO,5:sO!(nQpO,5:sOOQS,5:u,5:uO#-qQdO,5:uO#-yQMhO1G2xO9aQ`O1G2xOOQ!0Lf1G0s1G0sO#.XQ!0MxO1G0sO#/^Q!0MvO,5;TOOQ!0Lh'#GV'#GVO#/zQ!0MzO'#JjO!$fQlO1G0sO#2VQ!fO'#JuO%[QlO'#JuO#2aQ`O,5:cOOQ!0Lh'#D]'#D]OOQ!0Lf1G0|1G0|O%[QlO1G0|OOQ!0Lf1G1e1G1eO#2fQ`O1G0|O#4zQ!0MxO1G0}O#5RQ!0MxO1G0}O#7iQ!0MxO1G0}O#7pQ!0MxO1G0}O#:WQ!0MxO1G0}O#<nQ!0MxO1G0}O#<uQ!0MxO1G0}O#<|Q!0MxO1G0}O#?dQ!0MxO1G0}O#?kQ!0MxO1G0}O#AxQ?MtO'#CiO#CsQ?MtO1G1_O#CzQ?MtO'#JqO#D_Q!0MxO,5?YOOQ!0Lb-E<l-E<lO#FlQ!0MxO1G0}O#GiQ!0MzO1G0}OOQ!0Lf1G0}1G0}O#HlQMjO'#JzO#HvQ`O,5:vO#H{Q!0MxO1G1bO#IoQ,UO,5<VO#IwQ,UO,5<WO#JPQ,UO'#FnO#JhQ`O'#FmOOQO'#KW'#KWOOQO'#Il'#IlO#JmQ,UO1G1mOOQ!0Lf1G1m1G1mOOOW1G1x1G1xO#KOQ?MtO'#JpO#KYQ`O,5<aO!(yQlO,5<aOOOW-E<k-E<kOOQ!0Lf1G1k1G1kO#K_QpO'#KVOOQ!0Lf,5<c,5<cO#KgQpO,5<cO#KlQMhO'#DROOOO'#I`'#I`O#KsO#@ItO,59kOOQ!0Lh,59k,59kO%[QlO1G2OO!7{Q`O'#IpO#LOQ`O,5<yOOQ!0Lh,5<v,5<vO!+rQMhO'#IsO#LlQMjO,5=WO!+rQMhO'#IuO#M_QMjO,5=YO!&iQMhO,5=[OOQO1G2R1G2RO#MiQ!dO'#CrO#M|Q(CWO'#EpO$ RQpO'#GaO$ iQ!dO,5<rO$ pQ`O'#KYO9ZQ`O'#KYO$!OQ`O,5<tO!+rQMhO,5<sO$!TQ`O'#GYO$!fQ`O,5<sO$!kQ!dO'#GVO$!xQ!dO'#KZO$#SQ`O'#KZO!&iQMhO'#KZO$#XQ`O,5<wO$#^QlO'#JtO$#hQpO'#GbO##hQpO'#GbO$#yQ`O'#GfO!3^Q`O'#GjO$$OQ!0LrO'#IrO$$ZQpO,5<{OOQ!0Lp,5<{,5<{O$$bQpO'#GbO$$oQpO'#GcO$%QQpO'#GcO$%VQMjO,5=WO$%gQMjO,5=YOOQ!0Lh,5=],5=]O!+rQMhO,5@TO!+rQMhO,5@TO$%wQ`O'#IwO$&VQ`O,5@SO$&_Q`O,59aOOQ!0Lh,59g,59gO$'UQ$IYO,59sOOQ!0Lh'#Jn'#JnO$'wQMjO,5<jO$(jQMjO,5<lO@iQ`O,5<nOOQ!0Lh,5<o,5<oO$(tQ`O,5<uO$(yQMjO,5<zO$)ZQ`O,5@TO$)iQ`O'#J}O!$fQlO1G2QO$)nQ`O1G2QO9ZQ`O'#KQO9ZQ`O'#ErO%[QlO'#ErO9ZQ`O'#IyO$)sQ!0LrO,5@yOOQ[1G2|1G2|OOQ[1G4^1G4^OOQ!0Lf1G/z1G/zOOQ!0Lf1G/x1G/xO$+uQ!0MxO1G0SOOQ[1G2x1G2xO!&iQMhO1G2xO%[QlO1G2xO#-|Q`O1G2xO$-yQMhO'#EiOOQ!0Lb,5@R,5@RO$.WQ!0LrO,5@ROOQ[1G.u1G.uO!BYQ!0LrO1G.uO!BeQpO1G.uO!BmQMhO1G.uO$.iQ`O1G0sO$.nQ`O'#CiO$.yQ`O'#KcO$/RQ`O,5=zO$/WQ`O'#KcO$/]Q`O'#KcO$/kQ`O'#JPO$/yQ`O,5@|O$0RQ!fO1G1hOOQ!0Lf1G1j1G1jO9aQ`O1G3eO@iQ`O1G3eO$0YQ`O1G3eO$0_Q`O1G3eOOQ[1G3e1G3eO!DkQ`O1G3TO!&iQMhO1G3QO$0dQ`O1G3QOOQ[1G3R1G3RO!&iQMhO1G3RO$0iQ`O1G3RO$0qQpO'#HPOOQ[1G3T1G3TO!5|QpO'#I{O!DpQ!bO1G3WOOQ[1G3W1G3WOOQ[,5=q,5=qO$0yQMhO,5=sO9aQ`O,5=sO$#yQ`O,5=uO9UQ`O,5=uO!BeQpO,5=uO!BmQMhO,5=uO:YQMhO,5=uO$1XQ`O'#KaO$1dQ`O,5=vOOQ[1G.k1G.kO$1iQ!0LrO1G.kO@iQ`O1G.kO$1tQ`O1G.kO9kQ!0LrO1G.kO$3|Q!fO,5AOO$4ZQ`O,5AOO9ZQ`O,5AOO$4fQlO,5=}O$4mQ`O,5=}OOQ[1G3g1G3gO`QlO1G3gOOQ[1G3m1G3mOOQ[1G3o1G3oO>rQ`O1G3qO$4rQlO1G3sO$8vQlO'#HrOOQ[1G3v1G3vO$9TQ`O'#HxO>wQ`O'#HzOOQ[1G3|1G3|O$9]QlO1G3|O9kQ!0LrO1G4SOOQ[1G4U1G4UOOQ!0Lb'#G^'#G^O9kQ!0LrO1G4WO9kQ!0LrO1G4YO$=dQ`O,5@`O!(yQlO,5;^O9ZQ`O,5;^O>wQ`O,5:VO!(yQlO,5:VO!BeQpO,5:VO$=iQ?MtO,5:VOOQO,5;^,5;^O$=sQpO'#IcO$>ZQ`O,5@_OOQ!0Lf1G/p1G/pO$>cQpO'#IiO$>mQ`O,5@nOOQ!0Lb1G0w1G0wO##hQpO,5:VOOQO'#Ie'#IeO$>uQpO,5:oOOQ!0Ln,5:o,5:oO#'cQ`O1G0XOOQ!0Lf1G0X1G0XO%[QlO1G0XOOQ!0Lf1G0r1G0rO>wQ`O1G0rO!BeQpO1G0rO!BmQMhO1G0rOOQ!0Lb1G5z1G5zO!BYQ!0LrO1G0[OOQO1G0k1G0kO%[QlO1G0kO$>|Q!0LrO1G0kO$?XQ!0LrO1G0kO!BeQpO1G0[OCuQpO1G0[O$?gQ!0LrO1G0kOOQO1G0[1G0[O$?{Q!0MxO1G0kPOOO-E<Y-E<YPOOO1G.h1G.hOOOO1G/g1G/gO$@VQ!bO,5<hO$@_Q!fO1G4hOOQO1G4n1G4nO%[QlO,5>|O$@iQ`O1G5xO$@qQ`O1G6WO$@yQ!fO1G6XO9ZQ`O,5?SO$ATQ!0MxO1G6UO%[QlO1G6UO$AeQ!0LrO1G6UO$AvQ`O1G6TO$AvQ`O1G6TO9ZQ`O1G6TO$BOQ`O,5?VO9ZQ`O,5?VOOQO,5?V,5?VO$BdQ`O,5?VO$)iQ`O,5?VOOQO-E<i-E<iOOQS1G0_1G0_OOQS1G0a1G0aO#-tQ`O1G0aOOQ[7+(d7+(dO!&iQMhO7+(dO%[QlO7+(dO$BrQ`O7+(dO$B}QMhO7+(dO$C]Q!0MzO,5=WO$EhQ!0MzO,5=YO$GsQ!0MzO,5=WO$JUQ!0MzO,5=YO$LgQ!0MzO,59sO$NlQ!0MzO,5<jO%!wQ!0MzO,5<lO%%SQ!0MzO,5<zOOQ!0Lf7+&_7+&_O%'eQ!0MxO7+&_O%(XQlO'#IdO%(fQ`O,5@aO%(nQ!fO,5@aOOQ!0Lf1G/}1G/}O%(xQ`O7+&hOOQ!0Lf7+&h7+&hO%(}Q?MtO,5:dO%[QlO7+&yO%)XQ?MtO,5:`O%)fQ?MtO,5:hO%)pQ?MtO,5:jO%)zQMhO'#IgO%*UQ`O,5@fOOQ!0Lh1G0b1G0bOOQO1G1q1G1qOOQO1G1r1G1rO%*^Q!jO,5<YO!(yQlO,5<XOOQO-E<j-E<jOOQ!0Lf7+'X7+'XOOOW7+'d7+'dOOOW1G1{1G1{O%*iQ`O1G1{OOQ!0Lf1G1}1G1}OOOO,59m,59mO%*nQ!dO,59mOOOO-E<^-E<^OOQ!0Lh1G/V1G/VO%*uQ!0MxO7+'jOOQ!0Lh,5?[,5?[O%+iQMhO1G2eP%+pQ`O'#IpPOQ!0Lh-E<n-E<nO%,^QMjO,5?_OOQ!0Lh-E<q-E<qO%-PQMjO,5?aOOQ!0Lh-E<s-E<sO%-ZQ!dO1G2vO%-bQ!dO'#CrO%-xQMhO'#KQO$#^QlO'#JtOOQ!0Lh1G2^1G2^O%.PQ`O'#IoO%.eQ`O,5@tO%.eQ`O,5@tO%.mQ`O,5@tO%.xQ`O,5@tOOQO1G2`1G2`O%/WQMjO1G2_O!+rQMhO1G2_O%/hQ(CWO'#IqO%/uQ`O,5@uO!&iQMhO,5@uO%/}Q!dO,5@uOOQ!0Lh1G2c1G2cO%2_Q!fO'#CiO%2iQ`O,5=OOOQ!0Lb,5<|,5<|O%2qQpO,5<|OOQ!0Lb,5<},5<}OCfQ`O,5<|O%2|QpO,5<|OOQ!0Lb,5=Q,5=QO$)iQ`O,5=UOOQO,5?^,5?^OOQO-E<p-E<pOOQ!0Lp1G2g1G2gO##hQpO,5<|O$#^QlO,5=OO%3[Q`O,5<}O%3gQpO,5<}O!+rQMhO'#IsO%4aQMjO1G2rO!+rQMhO'#IuO%5SQMjO1G2tO%5^QMjO1G5oO%5hQMjO1G5oOOQO,5?c,5?cOOQO-E<u-E<uOOQO1G.{1G.{O!9lQpO,59uO%[QlO,59uOOQ!0Lh,5<i,5<iO%5uQ`O1G2YO!+rQMhO1G2aO!+rQMhO1G5oO!+rQMhO1G5oO%5zQ!0MxO7+'lOOQ!0Lf7+'l7+'lO!$fQlO7+'lO%6nQ`O,5;^OOQ!0Lb,5?e,5?eOOQ!0Lb-E<w-E<wO%6sQ!dO'#K[O#'cQ`O7+(dO4UQ!fO7+(dO$BuQ`O7+(dO%6}Q!0MvO'#CiO%7nQ!0LrO,5=RO%8PQ!0MvO,5=RO%8dQ`O,5=ROOQ!0Lb1G5m1G5mOOQ[7+$a7+$aO!BYQ!0LrO7+$aO!BeQpO7+$aO!$fQlO7+&_O%8lQ`O'#JOO%9TQ`O,5@}OOQO1G3f1G3fO9aQ`O,5@}O%9TQ`O,5@}O%9]Q`O,5@}OOQO,5?k,5?kOOQO-E<}-E<}OOQ!0Lf7+'S7+'SO%9bQ`O7+)PO9kQ!0LrO7+)PO9aQ`O7+)PO@iQ`O7+)POOQ[7+(o7+(oO%9gQ!0MvO7+(lO!&iQMhO7+(lO!DfQ`O7+(mOOQ[7+(m7+(mO!&iQMhO7+(mO%9qQ`O'#K`O%9|Q`O,5=kOOQO,5?g,5?gOOQO-E<y-E<yOOQ[7+(r7+(rO%;`QpO'#HYOOQ[1G3_1G3_O!&iQMhO1G3_O%[QlO1G3_O%;gQ`O1G3_O%;rQMhO1G3_O9kQ!0LrO1G3aO$#yQ`O1G3aO9UQ`O1G3aO!BeQpO1G3aO!BmQMhO1G3aO%<QQ`O'#I}O%<fQ`O,5@{O%<nQpO,5@{OOQ!0Lb1G3b1G3bOOQ[7+$V7+$VO@iQ`O7+$VO9kQ!0LrO7+$VO%<yQ`O7+$VO%[QlO1G6jO%[QlO1G6kO%=OQ!0LrO1G6jO%=YQlO1G3iO%=aQ`O1G3iO%=fQlO1G3iOOQ[7+)R7+)RO9kQ!0LrO7+)]O`QlO7+)_OOQ['#Kf'#KfOOQ['#JQ'#JQO%=mQlO,5>^OOQ[,5>^,5>^O%[QlO'#HsO%=zQ`O'#HuOOQ[,5>d,5>dO9ZQ`O,5>dOOQ[,5>f,5>fOOQ[7+)h7+)hOOQ[7+)n7+)nOOQ[7+)r7+)rOOQ[7+)t7+)tO%>PQpO1G5zO%>kQ?MtO1G0xO%>uQ`O1G0xOOQO1G/q1G/qO%?QQ?MtO1G/qO>wQ`O1G/qO!(yQlO'#DkOOQO,5>},5>}OOQO-E<a-E<aOOQO,5?T,5?TOOQO-E<g-E<gO!BeQpO1G/qOOQO-E<c-E<cOOQ!0Ln1G0Z1G0ZOOQ!0Lf7+%s7+%sO#'cQ`O7+%sOOQ!0Lf7+&^7+&^O>wQ`O7+&^O!BeQpO7+&^OOQO7+%v7+%vO$?{Q!0MxO7+&VOOQO7+&V7+&VO%[QlO7+&VO%?[Q!0LrO7+&VO!BYQ!0LrO7+%vO!BeQpO7+%vO%?gQ!0LrO7+&VO%?uQ!0MxO7++pO%[QlO7++pO%@VQ`O7++oO%@VQ`O7++oOOQO1G4q1G4qO9ZQ`O1G4qO%@_Q`O1G4qOOQS7+%{7+%{O#'cQ`O<<LOO4UQ!fO<<LOO%@mQ`O<<LOOOQ[<<LO<<LOO!&iQMhO<<LOO%[QlO<<LOO%@uQ`O<<LOO%AQQ!0MzO,5?_O%C]Q!0MzO,5?aO%EhQ!0MzO1G2_O%GyQ!0MzO1G2rO%JUQ!0MzO1G2tO%LaQ!fO,5?OO%[QlO,5?OOOQO-E<b-E<bO%LkQ`O1G5{OOQ!0Lf<<JS<<JSO%LsQ?MtO1G0sO%NzQ?MtO1G0}O& RQ?MtO1G0}O&#SQ?MtO1G0}O&#ZQ?MtO1G0}O&%[Q?MtO1G0}O&']Q?MtO1G0}O&'dQ?MtO1G0}O&'kQ?MtO1G0}O&)lQ?MtO1G0}O&)sQ?MtO1G0}O&)zQ!0MxO<<JeO&+rQ?MtO1G0}O&,oQ?MvO1G0}O&-rQ?MvO'#JjO&/xQ?MtO1G1bO&0VQ?MtO1G0SO&0aQMjO,5?ROOQO-E<e-E<eO!(yQlO'#FpOOQO'#KX'#KXOOQO1G1t1G1tO&0kQ`O1G1sO&0pQ?MtO,5?YOOOW7+'g7+'gOOOO1G/X1G/XO&0zQ!dO1G4vOOQ!0Lh7+(P7+(PP!&iQMhO,5?[O!+rQMhO7+(bO&1RQ`O,5?ZO9ZQ`O,5?ZOOQO-E<m-E<mO&1aQ`O1G6`O&1aQ`O1G6`O&1iQ`O1G6`O&1tQMjO7+'yO&2UQ!dO,5?]O&2`Q`O,5?]O!&iQMhO,5?]OOQO-E<o-E<oO&2eQ!dO1G6aO&2oQ`O1G6aO&2wQ`O1G2jO!&iQMhO1G2jOOQ!0Lb1G2h1G2hOOQ!0Lb1G2i1G2iO%2qQpO1G2hO!BeQpO1G2hOCfQ`O1G2hOOQ!0Lb1G2p1G2pO&2|QpO1G2hO&3[Q`O1G2jO$)iQ`O1G2iOCfQ`O1G2iO$#^QlO1G2jO&3dQ`O1G2iO&4WQMjO,5?_OOQ!0Lh-E<r-E<rO&4yQMjO,5?aOOQ!0Lh-E<t-E<tO!+rQMhO7++ZOOQ!0Lh1G/a1G/aO&5TQ`O1G/aOOQ!0Lh7+'t7+'tO&5YQMjO7+'{O&5jQMjO7++ZO&5tQMjO7++ZO&6RQ!0MxO<<KWOOQ!0Lf<<KW<<KWO&6uQ`O1G0xO!&iQMhO'#IxO&6zQ`O,5@vO&8|Q!fO<<LOO!&iQMhO1G2mO&9TQ!0LrO1G2mOOQ[<<G{<<G{O!BYQ!0LrO<<G{O&9fQ!0MxO<<IyOOQ!0Lf<<Iy<<IyOOQO,5?j,5?jO&:YQ`O,5?jO&:_Q`O,5?jOOQO-E<|-E<|O&:mQ`O1G6iO&:mQ`O1G6iO9aQ`O1G6iO@iQ`O<<LkOOQ[<<Lk<<LkO&:uQ`O<<LkO9kQ!0LrO<<LkOOQ[<<LW<<LWO%9gQ!0MvO<<LWOOQ[<<LX<<LXO!DfQ`O<<LXO&:zQpO'#IzO&;VQ`O,5@zO!(yQlO,5@zOOQ[1G3V1G3VOOQO'#I|'#I|O9kQ!0LrO'#I|O&;_QpO,5=tOOQ[,5=t,5=tO&;fQpO'#EeO&;mQpO'#GdO&;rQ`O7+(yO&;wQ`O7+(yOOQ[7+(y7+(yO!&iQMhO7+(yO%[QlO7+(yO&<PQ`O7+(yOOQ[7+({7+({O9kQ!0LrO7+({O$#yQ`O7+({O9UQ`O7+({O!BeQpO7+({O&<[Q`O,5?iOOQO-E<{-E<{OOQO'#H]'#H]O&<gQ`O1G6gO9kQ!0LrO<<GqOOQ[<<Gq<<GqO@iQ`O<<GqO&<oQ`O7+,UO&<tQ`O7+,VO%[QlO7+,UO%[QlO7+,VOOQ[7+)T7+)TO&<yQ`O7+)TO&=OQlO7+)TO&=VQ`O7+)TOOQ[<<Lw<<LwOOQ[<<Ly<<LyOOQ[-E=O-E=OOOQ[1G3x1G3xO&=[Q`O,5>_OOQ[,5>a,5>aO&=aQ`O1G4OO9ZQ`O7+&dO!(yQlO7+&dOOQO7+%]7+%]O&=fQ?MtO1G6XO>wQ`O7+%]OOQ!0Lf<<I_<<I_OOQ!0Lf<<Ix<<IxO>wQ`O<<IxOOQO<<Iq<<IqO$?{Q!0MxO<<IqO%[QlO<<IqOOQO<<Ib<<IbO!BYQ!0LrO<<IbO&=pQ!0LrO<<IqO&={Q!0MxO<= [O&>]Q`O<= ZOOQO7+*]7+*]O9ZQ`O7+*]OOQ[ANAjANAjO&>eQ!fOANAjO!&iQMhOANAjO#'cQ`OANAjO4UQ!fOANAjO&>lQ`OANAjO%[QlOANAjO&>tQ!0MzO7+'yO&AVQ!0MzO,5?_O&CbQ!0MzO,5?aO&EmQ!0MzO7+'{O&HOQ!fO1G4jO&HYQ?MtO7+&_O&J^Q?MvO,5=WO&LeQ?MvO,5=YO&LuQ?MvO,5=WO&MVQ?MvO,5=YO&MgQ?MvO,59sO' mQ?MvO,5<jO'#pQ?MvO,5<lO'&UQ?MvO,5<zO''zQ?MtO7+'jO'(XQ?MtO7+'lO'(fQ`O,5<[OOQO7+'_7+'_OOQ!0Lh7+*b7+*bO'(kQMjO<<K|OOQO1G4u1G4uO'(rQ`O1G4uO'(}Q`O1G4uO')]Q`O7++zO')]Q`O7++zO!&iQMhO1G4wO')eQ!dO1G4wO')oQ`O7++{O')wQ`O7+(UO'*SQ!dO7+(UOOQ!0Lb7+(S7+(SOOQ!0Lb7+(T7+(TO!BeQpO7+(SOCfQ`O7+(SO'*^Q`O7+(UO!&iQMhO7+(UO$)iQ`O7+(TO'*cQ`O7+(UOCfQ`O7+(TO'*kQMjO<<NuOOQ!0Lh7+${7+${O!+rQMhO<<NuO'*uQ!dO,5?dOOQO-E<v-E<vO'+PQ!0MvO7+(XO!&iQMhO7+(XOOQ[AN=gAN=gO9aQ`O1G5UOOQO1G5U1G5UO'+aQ`O1G5UO'+fQ`O7+,TO'+fQ`O7+,TO9kQ!0LrOANBVO@iQ`OANBVOOQ[ANBVANBVOOQ[ANArANArOOQ[ANAsANAsO'+nQ`O,5?fOOQO-E<x-E<xO'+yQ?MtO1G6fOOQO,5?h,5?hOOQO-E<z-E<zOOQ[1G3`1G3`O',TQ`O,5=OOOQ[<<Le<<LeO!&iQMhO<<LeO&;rQ`O<<LeO',YQ`O<<LeO%[QlO<<LeOOQ[<<Lg<<LgO9kQ!0LrO<<LgO$#yQ`O<<LgO9UQ`O<<LgO',bQpO1G5TO',mQ`O7+,ROOQ[AN=]AN=]O9kQ!0LrOAN=]OOQ[<= p<= pOOQ[<= q<= qO',uQ`O<= pO',zQ`O<= qOOQ[<<Lo<<LoO'-PQ`O<<LoO'-UQlO<<LoOOQ[1G3y1G3yO>wQ`O7+)jO'-]Q`O<<JOO'-hQ?MtO<<JOOOQO<<Hw<<HwOOQ!0LfAN?dAN?dOOQOAN?]AN?]O$?{Q!0MxOAN?]OOQOAN>|AN>|O%[QlOAN?]OOQO<<Mw<<MwOOQ[G27UG27UO!&iQMhOG27UO#'cQ`OG27UO'-rQ!fOG27UO4UQ!fOG27UO'-yQ`OG27UO'.RQ?MtO<<JeO'.`Q?MvO1G2_O'0UQ?MvO,5?_O'2XQ?MvO,5?aO'4[Q?MvO1G2rO'6_Q?MvO1G2tO'8bQ?MtO<<KWO'8oQ?MtO<<IyOOQO1G1v1G1vO!+rQMhOANAhOOQO7+*a7+*aO'8|Q`O7+*aO'9XQ`O<= fO'9aQ!dO7+*cOOQ!0Lb<<Kp<<KpO$)iQ`O<<KpOCfQ`O<<KpO'9kQ`O<<KpO!&iQMhO<<KpOOQ!0Lb<<Kn<<KnO!BeQpO<<KnO'9vQ!dO<<KpOOQ!0Lb<<Ko<<KoO':QQ`O<<KpO!&iQMhO<<KpO$)iQ`O<<KoO':VQMjOANDaO':aQ!0MvO<<KsOOQO7+*p7+*pO9aQ`O7+*pO':qQ`O<= oOOQ[G27qG27qO9kQ!0LrOG27qO!(yQlO1G5QO':yQ`O7+,QO';RQ`O1G2jO&;rQ`OANBPOOQ[ANBPANBPO!&iQMhOANBPO';WQ`OANBPOOQ[ANBRANBRO9kQ!0LrOANBRO$#yQ`OANBROOQO'#H^'#H^OOQO7+*o7+*oOOQ[G22wG22wOOQ[ANE[ANE[OOQ[ANE]ANE]OOQ[ANBZANBZO';`Q`OANBZOOQ[<<MU<<MUO!(yQlOAN?jOOQOG24wG24wO$?{Q!0MxOG24wO#'cQ`OLD,pOOQ[LD,pLD,pO!&iQMhOLD,pO';eQ!fOLD,pO';lQ?MvO7+'yO'=bQ?MvO,5?_O'?eQ?MvO,5?aO'AhQ?MvO7+'{O'C^QMjOG27SOOQO<<M{<<M{OOQ!0LbANA[ANA[O$)iQ`OANA[OCfQ`OANA[O'CnQ!dOANA[OOQ!0LbANAYANAYO'CuQ`OANA[O!&iQMhOANA[O'DQQ!dOANA[OOQ!0LbANAZANAZOOQO<<N[<<N[OOQ[LD-]LD-]O'D[Q?MtO7+*lOOQO'#Ge'#GeOOQ[G27kG27kO&;rQ`OG27kO!&iQMhOG27kOOQ[G27mG27mO9kQ!0LrOG27mOOQ[G27uG27uO'DfQ?MtOG25UOOQOLD*cLD*cOOQ[!$(![!$(![O#'cQ`O!$(![O!&iQMhO!$(![O'DpQ!0MzOG27SOOQ!0LbG26vG26vO$)iQ`OG26vO'GRQ`OG26vOCfQ`OG26vO'G^Q!dOG26vO!&iQMhOG26vOOQ[LD-VLD-VO&;rQ`OLD-VOOQ[LD-XLD-XOOQ[!)9Ev!)9EvO#'cQ`O!)9EvOOQ!0LbLD,bLD,bO$)iQ`OLD,bOCfQ`OLD,bO'GeQ`OLD,bO'GpQ!dOLD,bOOQ[!$(!q!$(!qOOQ[!.K;b!.K;bO'GwQ?MvOG27SOOQ!0Lb!$( |!$( |O$)iQ`O!$( |OCfQ`O!$( |O'ImQ`O!$( |OOQ!0Lb!)9Eh!)9EhO$)iQ`O!)9EhOCfQ`O!)9EhOOQ!0Lb!.K;S!.K;SO$)iQ`O!.K;SOOQ!0Lb!4/0n!4/0nO!(yQlO'#DxO1PQ`O'#EVO'IxQ!fO'#JpO'JPQ!L^O'#DtO'JWQlO'#D|O'J_Q!fO'#CiO'LuQ!fO'#CiO!(yQlO'#EOO'MVQlO,5;XO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO'#InO( YQ`O,5<hO!(yQlO,5;cO( bQMhO,5;cO(!{QMhO,5;cO!(yQlO,5;vO!&iQMhO'#GlO( bQMhO'#GlO!&iQMhO'#GnO( bQMhO'#GnO1SQ`O'#DXO1SQ`O'#DXO!&iQMhO'#GOO( bQMhO'#GOO!&iQMhO'#GQO( bQMhO'#GQO!&iQMhO'#G`O( bQMhO'#G`O!(yQlO,5:hO(#SQpO'#D]O(#^QpO'#JtO!(yQlO,5@mO'MVQlO1G0sO(#hQ?MtO'#CiO!(yQlO1G2OO!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO(#rQ!dO'#CrO!&iQMhO,5<sO( bQMhO,5<sO'MVQlO1G2QO!(yQlO7+&yO!&iQMhO1G2_O( bQMhO1G2_O!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO!&iQMhO1G2aO( bQMhO1G2aO'MVQlO7+'lO'MVQlO7+&_O!&iQMhOANAhO( bQMhOANAhO($VQ`O'#EmO($[Q`O'#EmO($dQ`O'#F[O($iQ`O'#EwO($nQ`O'#KRO($yQ`O'#KPO(%UQ`O,5;XO(%ZQMjO,5<dO(%bQ`O'#GXO(%gQ`O'#GXO(%lQ`O,5<fO(%tQ`O,5;XO(%|Q?MtO1G1_O(&TQ`O,5<sO(&YQ`O,5<sO(&_Q`O,5<uO(&dQ`O,5<uO(&iQ`O1G2QO(&nQ`O1G0sO(&sQMjO<<K|O(&zQMjO<<K|O7eQMhO'#F{O9UQ`O'#FzOAdQ`O'#ElO!(yQlO,5;sO!3^Q`O'#GXO!3^Q`O'#GXO!3^Q`O'#GZO!3^Q`O'#GZO!+rQMhO7+(bO!+rQMhO7+(bO%-ZQ!dO1G2vO%-ZQ!dO1G2vO!&iQMhO,5=[O!&iQMhO,5=[",
  stateData: "((P~O'zOS'{OSTOS'|RQ~OPYOQYOSfOY!VOaqOdzOeyOj!POnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!swO!vxO!z]O$V|O$miO%g}O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO&U!WO&[!XO&^!YO&`!ZO&b![O&e!]O&k!^O&q!_O&s!`O&u!aO&w!bO&y!cO(RSO(TTO(WUO(_VO(m[O~OWtO~P`OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa!wOq!nO!Q!oO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!xO#U!pO#V!pO#Y!zO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O'|!{O~OP]XR]X[]Xa]Xp]X!O]X!Q]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X'x]X(_]X(p]X(w]X(x]X~O!e%QX~P(qO_!}O(T#PO(U!}O(V#PO~O_#QO(V#PO(W#PO(X#QO~Ov#SO!S#TO(`#TO(a#VO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R;{O(TTO(WUO(_VO(m[O~O!Y#ZO!Z#WO!W(fP!W(tP~P+}O![#cO~P`OPYOQYOSfOd!jOe!iOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(TTO(WUO(_VO(m[O~On#mO!Y#iO!z]O#g#lO#h#iO(R;|O!i(qP~P.iO!j#oO(R#nO~O!v#sO!z]O%g#tO~O#i#uO~O!e#vO#i#uO~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z$_O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa(dX'x(dX'u(dX!i(dX!W(dX!](dX%h(dX!e(dX~P1qO#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX!](eX%h(eX~Oa(eX'x(eX'u(eX!W(eX!i(eXt(eX!e(eX~P4UO#^$eO~O$[$hO$^$gO$e$mO~OSfO!]$nO$h$oO$j$qO~Oh%VOj%cOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R$sO(TTO(WUO(_$uO(w$}O(x%POg([P~O!j%dO~O!Q%gO!]%hO(R%fO~O!e%lO~Oa%mO'x%mO~O!O%qO~P%[O(S!lO~P%[O%m%uO~P%[Oh%VO!j%dO(R%fO(S!lO~Oe%|O!j%dO(R%fO~O#t$RO~O!O&RO!]&OO!j&QO%i&UO(R%fO(S!lO(TTO(WUO`)UP~O!v#sO~O%r&WO!Q)QX!])QX(R)QX~O(R&XO~Oj!PO!s&^O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO~Od&cOe&bO!v&`O%g&aO%z&_O~P<POd&fOeyOj!PO!]&eO!s&^O!vxO!z]O%g}O%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO~Ob&iO#^&lO%i&gO(S!lO~P=UO!j&mO!s&qO~O!j#oO~O!]XO~Oa%mO'v&yO'x%mO~Oa%mO'v&|O'x%mO~Oa%mO'v'OO'x%mO~O'u]X!W]Xt]X!i]X&Y]X!]]X%h]X!e]X~P(qO!`']O!a'UO!b'UO(S!lO(TTO(WUO~Oq'SO!Q'RO!Y'VO(c'QO![(gP![(vP~P@]Ol'`O!]'^O(R%fO~Oe'eO!j%dO(R%fO~O!O&RO!j&QO~Oq!nO!Q!oO!z;wO#R!pO#S!pO#U!pO#V!pO(S!lO(TTO(WUO(c!mO(m!sO~O!`'kO!a'jO!b'jO#T!pO#Y'lO#Z'lO~PAwOa%mOh%VO!e#vO!j%dO'x%mO(p'nO~O!n'rO#^'pO~PCVOq!nO!Q!oO(TTO(WUO(c!mO(m!sO~O!]XOq(kX!Q(kX!`(kX!a(kX!b(kX!z(kX#R(kX#S(kX#T(kX#U(kX#V(kX#Y(kX#Z(kX(S(kX(T(kX(W(kX(c(kX(m(kX~O!a'jO!b'jO(S!lO~PCuO'}'vO(O'vO(P'xO~O_!}O(T'zO(U!}O(V'zO~O_#QO(V'zO(W'zO(X#QO~Ot'|O~P%[Ov#SO!S#TO(`#TO(a(PO~O!Y(RO!W'UX!W'[X!Z'UX!Z'[X~P+}O!Z(TO!W(fX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z(TO!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~O!W(fX~PGpO!W(YO~O!W(sX!Z(sX!e(sX!i(sX(p(sX~O#^(sX#i#bX![(sX~PIsO#^(ZO!W(uX!Z(uX~O!Z([O!W(tX~O!W(_O~O#^$eO~PIsO![(`O~P`OR#zO!O#yO!Q#{O!j#xO(_VOP!la[!lap!la!Z!la!n!la#P!la#l!la#m!la#n!la#o!la#p!la#q!la#r!la#s!la#t!la#u!la#w!la#y!la#z!la(p!la(w!la(x!la~Oa!la'x!la'u!la!W!la!i!lat!la!]!la%h!la!e!la~PKZO!i(aO~O!e#vO#^(bO(p'nO!Z(rXa(rX'x(rX~O!i(rX~PMvO!Q%gO!]%hO!z]O#g(gO#h(fO(R%fO~O!Z(hO!i(qX~O!i(jO~O!Q%gO!]%hO#h(fO(R%fO~OP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O!e#vO!i(eX~P! dOR(lO!O(kO!j#xO#Q$dO!z!ya!Q!ya~O!v!ya%g!ya!]!ya#g!ya#h!ya(R!ya~P!#eO!v(pO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~O#i(vO~O!Y(xO!i(iP~P%[O(c(zO(m[O~O!Q(|O!j#xO(c(zO(m[O~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z$_Oa$pa'x$pa'u$pa!i$pa!W$pa!]$pa%h$pa!e$pa~Oj)bO~P!&iOh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Og(nP~P!+rO!O)gO!e)fO!]$]X$Y$]X$[$]X$^$]X$e$]X~O!e)fO!](yX$Y(yX$[(yX$^(yX$e(yX~O!O)gO~P!-{O!O)gO!](yX$Y(yX$[(yX$^(yX$e(yX~O!])iO$Y)mO$[)hO$^)hO$e)nO~O!Y)qO~P!(yO$[$hO$^$gO$e)uO~Ol$yX!O$yX#Q$yX'w$yX(w$yX(x$yX~OgkXg$yXlkX!ZkX#^kX~P!/qOv)wO(`)xO(a)zO~Ol*TO!O)|O'w)}O(w$}O(x%PO~Og){O~P!0uOg*UO~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q*WO!]*XO!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~O!Y*[O(R*VO!i(|P~P!1dO#i*^O~O!j*_O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R*aO(TTO(WUO(_$uO(w$}O(x%PO~O!Y*dO!W(}P~P!3cOp*pOq!nO!Q*fO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO(c!mO~O![*mO~P!5WO#Q$dOl(^X!O(^X'w(^X(w(^X(x(^X!Z(^X#^(^X~Og(^X#}(^X~P!6YOl*uO#^*tOg(]X!Z(]X~O!Z*vOg([X~Oj%cO(R&XOg([P~Oq*yO~O!j+OO~O(R(tO~On+TO!Q%gO!Y#iO!]%hO!z]O#g#lO#h#iO(R%fO!i(qP~O!e#vO#i+UO~O!Q%gO!Y+WO!Z([O!]%hO(R%fO!W(tP~Oq'YO!Q+YO!Y+XO(TTO(WUO(c(zO~O![(vP~P!9]O!Z+ZOa)RX'x)RX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa!ha!Z!ha'x!ha'u!ha!W!ha!i!hat!ha!]!ha%h!ha!e!ha~P!:TOR#zO!O#yO!Q#{O!j#xO(_VOP!pa[!pap!pa!Z!pa!n!pa#P!pa#l!pa#m!pa#n!pa#o!pa#p!pa#q!pa#r!pa#s!pa#t!pa#u!pa#w!pa#y!pa#z!pa(p!pa(w!pa(x!pa~Oa!pa'x!pa'u!pa!W!pa!i!pat!pa!]!pa%h!pa!e!pa~P!<kOR#zO!O#yO!Q#{O!j#xO(_VOP!ra[!rap!ra!Z!ra!n!ra#P!ra#l!ra#m!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#w!ra#y!ra#z!ra(p!ra(w!ra(x!ra~Oa!ra'x!ra'u!ra!W!ra!i!rat!ra!]!ra%h!ra!e!ra~P!?ROh%VOl+dO!]'^O%h+cO~O!e+fOa(ZX!](ZX'x(ZX!Z(ZX~Oa%mO!]XO'x%mO~Oh%VO!j%dO~Oh%VO!j%dO(R%fO~O!e#vO#i(vO~Ob+qO%i+rO(R+nO(TTO(WUO![)VP~O!Z+sO`)UX~O[+wO~O`+xO~O!]&OO(R%fO(S!lO`)UP~Oh%VO#^+}O~Oh%VOl,QO!]$|O~O!],SO~O!O,UO!]XO~O%m%uO~O!v,ZO~Oe,`O~Ob,aO(R#nO(TTO(WUO![)TP~Oe%|O~O%i!QO(R&XO~P=UO[,fO`,eO~OPYOQYOSfOdzOeyOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!guO!jZO!mYO!nYO!oYO!qvO!vxO!z]O$miO%g}O(TTO(WUO(_VO(m[O~O!]!eO!s!gO$V!kO(R!dO~P!FRO`,eOa%mO'x%mO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa,kOj!OO!swO%k!OO%l!OO%m!OO~P!HkO!j&mO~O&[,qO~O!],sO~O&m,uO&o,vOP&jaQ&jaS&jaY&jaa&jad&jae&jaj&jan&jap&jaq&jar&jax&jaz&ja|&ja!Q&ja!U&ja!V&ja!]&ja!g&ja!j&ja!m&ja!n&ja!o&ja!q&ja!s&ja!v&ja!z&ja$V&ja$m&ja%g&ja%i&ja%k&ja%l&ja%m&ja%p&ja%r&ja%u&ja%v&ja%x&ja&U&ja&[&ja&^&ja&`&ja&b&ja&e&ja&k&ja&q&ja&s&ja&u&ja&w&ja&y&ja'u&ja(R&ja(T&ja(W&ja(_&ja(m&ja![&ja&c&jab&ja&h&ja~O(R,{O~Oh!cX!Z!PX![!PX!e!PX!e!cX!j!cX#^!PX~O!Z!cX![!cX~P# qO!e-QO#^-POh(hX!Z#fX![#fX!e(hX!j(hX~O!Z(hX![(hX~P#!dOh%VO!e-SO!j%dO!Z!_X![!_X~Oq!nO!Q!oO(TTO(WUO(c!mO~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(TTO(WUO(_VO(m[O~O(R<rO~P##yO!Z-WO![(gX~O![-YO~O!e-QO#^-PO!Z#fX![#fX~O!Z-ZO![(vX~O![-]O~O!a-^O!b-^O(S!lO~P##hO![-aO~P'_Ol-dO!]'^O~O!W-iO~Oq!ya!`!ya!a!ya!b!ya#R!ya#S!ya#T!ya#U!ya#V!ya#Y!ya#Z!ya(S!ya(T!ya(W!ya(c!ya(m!ya~P!#eO!n-nO#^-lO~PCVO!a-pO!b-pO(S!lO~PCuOa%mO#^-lO'x%mO~Oa%mO!e#vO#^-lO'x%mO~Oa%mO!e#vO!n-nO#^-lO'x%mO(p'nO~O'}'vO(O'vO(P-uO~Ot-vO~O!W'Ua!Z'Ua~P!:TO!Y-zO!W'UX!Z'UX~P%[O!Z(TO!W(fa~O!W(fa~PGpO!Z([O!W(ta~O!Q%gO!Y.OO!]%hO(R%fO!W'[X!Z'[X~O#^.QO!Z(ra!i(raa(ra'x(ra~O!e#vO~P#,PO!Z(hO!i(qa~O!Q%gO!]%hO#h.UO(R%fO~On.ZO!Q%gO!Y.WO!]%hO!z]O#g.YO#h.WO(R%fO!Z'_X!i'_X~OR._O!j#xO~Oh%VOl.bO!]'^O%h.aO~Oa#ai!Z#ai'x#ai'u#ai!W#ai!i#ait#ai!]#ai%h#ai!e#ai~P!:TOl=|O!O)|O'w)}O(w$}O(x%PO~O#i#]aa#]a#^#]a'x#]a!Z#]a!i#]a!]#]a!W#]a~P#.{O#i(^XP(^XR(^X[(^Xa(^Xp(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X'x(^X(_(^X(p(^X!i(^X!W(^X'u(^Xt(^X!](^X%h(^X!e(^X~P!6YO!Z.oO!i(iX~P!:TO!i.rO~O!W.tO~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kia#kip#ki!Z#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#l#ki~P#2kO#l$OO~P#2kOP$[OR#zOp$aO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO[#kia#ki!Z#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#p#ki~P#5YO#p$QO~P#5YOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO(_VOa#ki!Z#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#u#ki~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO(_VO(x#}Oa#ki!Z#ki#y#ki#z#ki'x#ki(p#ki(w#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#w$UO~P#:_O#w#ki~P#:_O#u$SO~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO(_VO(w#|O(x#}Oa#ki!Z#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#y#ki~P#=TO#y$WO~P#=TOP]XR]X[]Xp]X!O]X!Q]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X!Z]X![]X~O#}]X~P#?rOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO#y<XO#z<YO(_VO(p$YO(w#|O(x#}O~O#}.vO~P#BPO#Q$dO#^<`O$P<`O#}(eX![(eX~P! dOa'ba!Z'ba'x'ba'u'ba!i'ba!W'bat'ba!]'ba%h'ba!e'ba~P!:TO[#kia#kip#ki!Z#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO(w#ki(x#ki~P#EROl=|O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P#ERO!Z.zOg(nX~P!0uOg.|O~Oa$Oi!Z$Oi'x$Oi'u$Oi!W$Oi!i$Oit$Oi!]$Oi%h$Oi!e$Oi~P!:TO$[.}O$^.}O~O$[/OO$^/OO~O!e)fO#^/PO!]$bX$Y$bX$[$bX$^$bX$e$bX~O!Y/QO~O!])iO$Y/SO$[)hO$^)hO$e/TO~O!Z<ZO![(dX~P#BPO![/UO~O!e)fO$e(yX~O$e/WO~Ot/XO~P!&iOv)wO(`)xO(a/[O~O!Q/_O~O(w$}Ol%`a!O%`a'w%`a(x%`a!Z%`a#^%`a~Og%`a#}%`a~P#LTO(x%POl%ba!O%ba'w%ba(w%ba!Z%ba#^%ba~Og%ba#}%ba~P#LvO!ZfX!efX!ifX!i$yX(pfX~P!/qO!Y/hO!Z([O(R/gO!W(tP!W(}P~P!1dOp*pO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO~Oq<oO!Q/iO!Y+XO![*mO(c<nO![(vP~P#NaO!i/jO~P#.{O!Z/kO!e#vO(p'nO!i(|X~O!i/pO~O!Q%gO!Y*[O!]%hO(R%fO!i(|P~O#i/rO~O!W$yX!Z$yX!e%QX~P!/qO!Z/sO!W(}X~P#.{O!e/uO~O!W/wO~OnkO(R/xO~P.iOh%VOp/}O!e#vO!j%dO(p'nO~O!e+fO~Oa%mO!Z0RO'x%mO~O![0TO~P!5WO!a0UO!b0UO(S!lO~P##hOq!nO!Q0VO(TTO(WUO(c!mO~O#Y0XO~Og%`a!Z%`a#^%`a#}%`a~P!0uOg%ba!Z%ba#^%ba#}%ba~P!0uOj%cO(R&XOg'kX!Z'kX~O!Z*vOg([a~Og0bO~OR0cO!O0cO!Q0dO#Q$dOl{a'w{a(w{a(x{a!Z{a#^{a~Og{a#}{a~P$&dO!O)|O'w)}Ol$ra(w$ra(x$ra!Z$ra#^$ra~Og$ra#}$ra~P$'`O!O)|O'w)}Ol$ta(w$ta(x$ta!Z$ta#^$ta~Og$ta#}$ta~P$(RO#i0gO~Og%Sa!Z%Sa#^%Sa#}%Sa~P!0uOl0iO#^0hOg(]a!Z(]a~O!e#vO~O#i0lO~O!Z+ZOa)Ra'x)Ra~OR#zO!O#yO!Q#{O!j#xO(_VOP!pi[!pip!pi!Z!pi!n!pi#P!pi#l!pi#m!pi#n!pi#o!pi#p!pi#q!pi#r!pi#s!pi#t!pi#u!pi#w!pi#y!pi#z!pi(p!pi(w!pi(x!pi~Oa!pi'x!pi'u!pi!W!pi!i!pit!pi!]!pi%h!pi!e!pi~P$*OOh%VOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~On0vO%[0wO(R0tO~P$,fO!e+fOa(Za!](Za'x(Za!Z(Za~O#i0|O~O[]X!ZfX![fX~O!Z0}O![)VX~O![1PO~O[1QO~Ob1SO(R+nO(TTO(WUO~O!]&OO(R%fO`'sX!Z'sX~O!Z+sO`)Ua~O!i1VO~P!:TO[1YO~O`1ZO~O#^1^O~Ol1aO!]$|O~O(c(zO![)SP~Oh%VOl1jO!]1gO%h1iO~O[1tO!Z1rO![)TX~O![1uO~O`1wOa%mO'x%mO~O(R#nO(TTO(WUO~O#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O#t1zO&Y1{Oa(eX~P$2PO#^$eO#t1zO&Y1{O~Oa1}O~P%[Oa2PO~O&c2SOP&aiQ&aiS&aiY&aia&aid&aie&aij&ain&aip&aiq&air&aix&aiz&ai|&ai!Q&ai!U&ai!V&ai!]&ai!g&ai!j&ai!m&ai!n&ai!o&ai!q&ai!s&ai!v&ai!z&ai$V&ai$m&ai%g&ai%i&ai%k&ai%l&ai%m&ai%p&ai%r&ai%u&ai%v&ai%x&ai&U&ai&[&ai&^&ai&`&ai&b&ai&e&ai&k&ai&q&ai&s&ai&u&ai&w&ai&y&ai'u&ai(R&ai(T&ai(W&ai(_&ai(m&ai![&aib&ai&h&ai~Ob2YO![2WO&h2XO~P`O!]XO!j2[O~O&o,vOP&jiQ&jiS&jiY&jia&jid&jie&jij&jin&jip&jiq&jir&jix&jiz&ji|&ji!Q&ji!U&ji!V&ji!]&ji!g&ji!j&ji!m&ji!n&ji!o&ji!q&ji!s&ji!v&ji!z&ji$V&ji$m&ji%g&ji%i&ji%k&ji%l&ji%m&ji%p&ji%r&ji%u&ji%v&ji%x&ji&U&ji&[&ji&^&ji&`&ji&b&ji&e&ji&k&ji&q&ji&s&ji&u&ji&w&ji&y&ji'u&ji(R&ji(T&ji(W&ji(_&ji(m&ji![&ji&c&jib&ji&h&ji~O!W2bO~O!Z!_a![!_a~P#BPOq!nO!Q!oO!Y2hO(c!mO!Z'VX!['VX~P@]O!Z-WO![(ga~O!Z']X![']X~P!9]O!Z-ZO![(va~O![2oO~P'_Oa%mO#^2xO'x%mO~Oa%mO!e#vO#^2xO'x%mO~Oa%mO!e#vO!n2|O#^2xO'x%mO(p'nO~Oa%mO'x%mO~P!:TO!Z$_Ot$pa~O!W'Ui!Z'Ui~P!:TO!Z(TO!W(fi~O!Z([O!W(ti~O!W(ui!Z(ui~P!:TO!Z(ri!i(ria(ri'x(ri~P!:TO#^3OO!Z(ri!i(ria(ri'x(ri~O!Z(hO!i(qi~O!Q%gO!]%hO!z]O#g3TO#h3SO(R%fO~O!Q%gO!]%hO#h3SO(R%fO~Ol3[O!]'^O%h3ZO~Oh%VOl3[O!]'^O%h3ZO~O#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`at%`a!]%`a%h%`a!e%`a~P#LTO#i%baP%baR%ba[%baa%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%bat%ba!]%ba%h%ba!e%ba~P#LvO#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!Z%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`a#^%`at%`a!]%`a%h%`a!e%`a~P#.{O#i%baP%baR%ba[%baa%bap%ba!Q%ba!Z%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%ba#^%bat%ba!]%ba%h%ba!e%ba~P#.{O#i{aP{a[{aa{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a'x{a(_{a(p{a!i{a!W{a'u{at{a!]{a%h{a!e{a~P$&dO#i$raP$raR$ra[$raa$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra'x$ra(_$ra(p$ra!i$ra!W$ra'u$rat$ra!]$ra%h$ra!e$ra~P$'`O#i$taP$taR$ta[$taa$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta'x$ta(_$ta(p$ta!i$ta!W$ta'u$tat$ta!]$ta%h$ta!e$ta~P$(RO#i%SaP%SaR%Sa[%Saa%Sap%Sa!Q%Sa!Z%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa'x%Sa(_%Sa(p%Sa!i%Sa!W%Sa'u%Sa#^%Sat%Sa!]%Sa%h%Sa!e%Sa~P#.{Oa#aq!Z#aq'x#aq'u#aq!W#aq!i#aqt#aq!]#aq%h#aq!e#aq~P!:TO!Y3dO!Z'WX!i'WX~P%[O!Z.oO!i(ia~O!Z.oO!i(ia~P!:TO!W3gO~O#}!la![!la~PKZO#}!ha!Z!ha![!ha~P#BPO#}!pa![!pa~P!<kO#}!ra![!ra~P!?ROg'ZX!Z'ZX~P!+rO!Z.zOg(na~OSfO!]3{O$c3|O~O![4QO~Ot4RO~P#.{Oa$lq!Z$lq'x$lq'u$lq!W$lq!i$lqt$lq!]$lq%h$lq!e$lq~P!:TO!W4TO~P!&iO!Q4UO~O!O)|O'w)}O(x%POl'ga(w'ga!Z'ga#^'ga~Og'ga#}'ga~P%+uO!O)|O'w)}Ol'ia(w'ia(x'ia!Z'ia#^'ia~Og'ia#}'ia~P%,hO(p$YO~P#.{O!WfX!W$yX!ZfX!Z$yX!e%QX#^fX~P!/qO(R<xO~P!1dO!Q%gO!Y4XO!]%hO(R%fO!Z'cX!i'cX~O!Z/kO!i(|a~O!Z/kO!e#vO!i(|a~O!Z/kO!e#vO(p'nO!i(|a~Og${i!Z${i#^${i#}${i~P!0uO!Y4aO!W'eX!Z'eX~P!3cO!Z/sO!W(}a~O!Z/sO!W(}a~P#.{OP]XR]X[]Xp]X!O]X!Q]X!W]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!e%XX#t%XX~P%0XO!e#vO#t4fO~Oh%VO!e#vO!j%dO~Oh%VOp4kO!j%dO(p'nO~Op4pO!e#vO(p'nO~Oq!nO!Q4qO(TTO(WUO(c!mO~O(w$}Ol%`i!O%`i'w%`i(x%`i!Z%`i#^%`i~Og%`i#}%`i~P%3xO(x%POl%bi!O%bi'w%bi(w%bi!Z%bi#^%bi~Og%bi#}%bi~P%4kOg(]i!Z(]i~P!0uO#^4wOg(]i!Z(]i~P!0uO!i4zO~Oa$nq!Z$nq'x$nq'u$nq!W$nq!i$nqt$nq!]$nq%h$nq!e$nq~P!:TO!W5QO~O!Z5RO!])OX~P#.{Oa]Xa$yX!]]X!]$yX%]]X'x]X'x$yX!Z]X!Z$yX~P!/qO%]5UOa%Za!]%Za'x%Za!Z%Za~OlmX!OmX'wmX(wmX(xmX~P%7nOn5VO(R#nO~Ob5]O%i5^O(R+nO(TTO(WUO!Z'rX!['rX~O!Z0}O![)Va~O[5bO~O`5cO~Oa%mO'x%mO~P#.{O!Z5kO#^5mO![)SX~O![5nO~Op5tOq!nO!Q*fO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!pO#U!pO#V!pO#Y5sO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O![5rO~P%:ROl5yO!]1gO%h5xO~Oh%VOl5yO!]1gO%h5xO~Ob6QO(R#nO(TTO(WUO!Z'qX!['qX~O!Z1rO![)Ta~O(TTO(WUO(c6SO~O`6WO~O#t6ZO&Y6[O~PMvO!i6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO![6dO&h2XO~P`O!e6fO~O!e6hOh(hi!Z(hi![(hi!e(hi!j(hip(hi(p(hi~O!Z#fi![#fi~P#BPO#^6iO!Z#fi![#fi~O!Z!_i![!_i~P#BPOa%mO#^6rO'x%mO~Oa%mO!e#vO#^6rO'x%mO~O!Z(rq!i(rqa(rq'x(rq~P!:TO!Z(hO!i(qq~O!Q%gO!]%hO#h6yO(R%fO~O!]'^O%h6|O~Ol7QO!]'^O%h6|O~O#i'gaP'gaR'ga['gaa'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga'x'ga(_'ga(p'ga!i'ga!W'ga'u'gat'ga!]'ga%h'ga!e'ga~P%+uO#i'iaP'iaR'ia['iaa'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia'x'ia(_'ia(p'ia!i'ia!W'ia'u'iat'ia!]'ia%h'ia!e'ia~P%,hO#i${iP${iR${i[${ia${ip${i!Q${i!Z${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i'x${i(_${i(p${i!i${i!W${i'u${i#^${it${i!]${i%h${i!e${i~P#.{O#i%`iP%`iR%`i[%`ia%`ip%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i'x%`i(_%`i(p%`i!i%`i!W%`i'u%`it%`i!]%`i%h%`i!e%`i~P%3xO#i%biP%biR%bi[%bia%bip%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi'x%bi(_%bi(p%bi!i%bi!W%bi'u%bit%bi!]%bi%h%bi!e%bi~P%4kO!Z'Wa!i'Wa~P!:TO!Z.oO!i(ii~O#}#ai!Z#ai![#ai~P#BPOP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kip#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#l#ki~P%MQO#l<PO~P%MQOP$[OR#zOp<]O!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO[#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#p#ki~P& YO#p<RO~P& YOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO(_VO#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#u#ki~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO(_VO(x#}O#y#ki#z#ki#}#ki(p#ki(w#ki!Z#ki![#ki~O#w<VO~P&%cO#w#ki~P&%cO#u<TO~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO(_VO(w#|O(x#}O#z#ki#}#ki(p#ki!Z#ki![#ki~O#y#ki~P&'rO#y<XO~P&'rOa#{y!Z#{y'x#{y'u#{y!W#{y!i#{yt#{y!]#{y%h#{y!e#{y~P!:TO[#kip#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki!Z#ki![#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO(w#ki(x#ki~P&*nOl=}O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P&*nO#Q$dOP(^XR(^X[(^Xl(^Xp(^X!O(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X#}(^X'w(^X(_(^X(p(^X(w(^X(x(^X!Z(^X![(^X~O#}$Oi!Z$Oi![$Oi~P#BPO#}!pi![!pi~P$*OOg'Za!Z'Za~P!0uO![7dO~O!Z'ba!['ba~P#BPO!W7eO~P#.{O!e#vO(p'nO!Z'ca!i'ca~O!Z/kO!i(|i~O!Z/kO!e#vO!i(|i~Og${q!Z${q#^${q#}${q~P!0uO!W'ea!Z'ea~P#.{O!e7lO~O!Z/sO!W(}i~P#.{O!Z/sO!W(}i~O!W7oO~Oh%VOp7tO!j%dO(p'nO~O!e#vO#t7vO~Op7yO!e#vO(p'nO~O!O)|O'w)}O(x%POl'ha(w'ha!Z'ha#^'ha~Og'ha#}'ha~P&3oO!O)|O'w)}Ol'ja(w'ja(x'ja!Z'ja#^'ja~Og'ja#}'ja~P&4bO!W7{O~Og$}q!Z$}q#^$}q#}$}q~P!0uOg(]q!Z(]q~P!0uO#^7|Og(]q!Z(]q~P!0uOa$ny!Z$ny'x$ny'u$ny!W$ny!i$nyt$ny!]$ny%h$ny!e$ny~P!:TO!e6hO~O!Z5RO!])Oa~O!]'^OP$SaR$Sa[$Sap$Sa!O$Sa!Q$Sa!Z$Sa!j$Sa!n$Sa#P$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#t$Sa#u$Sa#w$Sa#y$Sa#z$Sa(_$Sa(p$Sa(w$Sa(x$Sa~O%h6|O~P&7SO%]8QOa%Zi!]%Zi'x%Zi!Z%Zi~Oa#ay!Z#ay'x#ay'u#ay!W#ay!i#ayt#ay!]#ay%h#ay!e#ay~P!:TO[8SO~Ob8UO(R+nO(TTO(WUO~O!Z0}O![)Vi~O`8YO~O(c(zO!Z'nX!['nX~O!Z5kO![)Sa~O![8cO~P%:RO(m!sO~P$$oO#Y8dO~O!]1gO~O!]1gO%h8fO~Ol8iO!]1gO%h8fO~O[8nO!Z'qa!['qa~O!Z1rO![)Ti~O!i8rO~O!i8sO~O!i8vO~O!i8vO~P%[Oa8xO~O!e8yO~O!i8zO~O!Z(ui![(ui~P#BPOa%mO#^9SO'x%mO~O!Z(ry!i(rya(ry'x(ry~P!:TO!Z(hO!i(qy~O%h9VO~P&7SO!]'^O%h9VO~O#i${qP${qR${q[${qa${qp${q!Q${q!Z${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q'x${q(_${q(p${q!i${q!W${q'u${q#^${qt${q!]${q%h${q!e${q~P#.{O#i'haP'haR'ha['haa'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha'x'ha(_'ha(p'ha!i'ha!W'ha'u'hat'ha!]'ha%h'ha!e'ha~P&3oO#i'jaP'jaR'ja['jaa'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja'x'ja(_'ja(p'ja!i'ja!W'ja'u'jat'ja!]'ja%h'ja!e'ja~P&4bO#i$}qP$}qR$}q[$}qa$}qp$}q!Q$}q!Z$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q'x$}q(_$}q(p$}q!i$}q!W$}q'u$}q#^$}qt$}q!]$}q%h$}q!e$}q~P#.{O!Z'Wi!i'Wi~P!:TO#}#aq!Z#aq![#aq~P#BPO(w$}OP%`aR%`a[%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a#}%`a(_%`a(p%`a!Z%`a![%`a~Ol%`a!O%`a'w%`a(x%`a~P&HgO(x%POP%baR%ba[%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba#}%ba(_%ba(p%ba!Z%ba![%ba~Ol%ba!O%ba'w%ba(w%ba~P&JnOl=}O!O)|O'w)}O(x%PO~P&HgOl=}O!O)|O'w)}O(w$}O~P&JnOR0cO!O0cO!Q0dO#Q$dOP{a[{al{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a#}{a'w{a(_{a(p{a(w{a(x{a!Z{a![{a~O!O)|O'w)}OP$raR$ra[$ral$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra#}$ra(_$ra(p$ra(w$ra(x$ra!Z$ra![$ra~O!O)|O'w)}OP$taR$ta[$tal$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta#}$ta(_$ta(p$ta(w$ta(x$ta!Z$ta![$ta~Ol=}O!O)|O'w)}O(w$}O(x%PO~OP%SaR%Sa[%Sap%Sa!Q%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa#}%Sa(_%Sa(p%Sa!Z%Sa![%Sa~P'%sO#}$lq!Z$lq![$lq~P#BPO#}$nq!Z$nq![$nq~P#BPO![9dO~O#}9eO~P!0uO!e#vO!Z'ci!i'ci~O!e#vO(p'nO!Z'ci!i'ci~O!Z/kO!i(|q~O!W'ei!Z'ei~P#.{O!Z/sO!W(}q~Op9lO!e#vO(p'nO~O[9nO!W9mO~P#.{O!W9mO~O!e#vO#t9tO~Og(]y!Z(]y~P!0uO!Z'la!]'la~P#.{Oa%Zq!]%Zq'x%Zq!Z%Zq~P#.{O[9yO~O!Z0}O![)Vq~O#^9}O!Z'na!['na~O!Z5kO![)Si~P#BPO!Q:PO~O!]1gO%h:SO~O(TTO(WUO(c:XO~O!Z1rO![)Tq~O!i:[O~O!i:]O~O!i:^O~O!i:^O~P%[O#^:aO!Z#fy![#fy~O!Z#fy![#fy~P#BPO%h:fO~P&7SO!]'^O%h:fO~O#}#{y!Z#{y![#{y~P#BPOP${iR${i[${ip${i!Q${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i#}${i(_${i(p${i!Z${i![${i~P'%sO!O)|O'w)}O(x%POP'gaR'ga['gal'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga#}'ga(_'ga(p'ga(w'ga!Z'ga!['ga~O!O)|O'w)}OP'iaR'ia['ial'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia#}'ia(_'ia(p'ia(w'ia(x'ia!Z'ia!['ia~O(w$}OP%`iR%`i[%`il%`ip%`i!O%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i#}%`i'w%`i(_%`i(p%`i(x%`i!Z%`i![%`i~O(x%POP%biR%bi[%bil%bip%bi!O%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi#}%bi'w%bi(_%bi(p%bi(w%bi!Z%bi![%bi~O#}$ny!Z$ny![$ny~P#BPO#}#ay!Z#ay![#ay~P#BPO!e#vO!Z'cq!i'cq~O!Z/kO!i(|y~O!W'eq!Z'eq~P#.{Op:pO!e#vO(p'nO~O[:tO!W:sO~P#.{O!W:sO~Og(]!R!Z(]!R~P!0uOa%Zy!]%Zy'x%Zy!Z%Zy~P#.{O!Z0}O![)Vy~O!Z5kO![)Sq~O(R:zO~O!]1gO%h:}O~O!i;QO~O%h;VO~P&7SOP${qR${q[${qp${q!Q${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q#}${q(_${q(p${q!Z${q![${q~P'%sO!O)|O'w)}O(x%POP'haR'ha['hal'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha#}'ha(_'ha(p'ha(w'ha!Z'ha!['ha~O!O)|O'w)}OP'jaR'ja['jal'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja#}'ja(_'ja(p'ja(w'ja(x'ja!Z'ja!['ja~OP$}qR$}q[$}qp$}q!Q$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q#}$}q(_$}q(p$}q!Z$}q![$}q~P'%sOg%d!Z!Z%d!Z#^%d!Z#}%d!Z~P!0uO!W;ZO~P#.{Op;[O!e#vO(p'nO~O[;^O!W;ZO~P#.{O!Z'nq!['nq~P#BPO!Z#f!Z![#f!Z~P#BPO#i%d!ZP%d!ZR%d!Z[%d!Za%d!Zp%d!Z!Q%d!Z!Z%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z'x%d!Z(_%d!Z(p%d!Z!i%d!Z!W%d!Z'u%d!Z#^%d!Zt%d!Z!]%d!Z%h%d!Z!e%d!Z~P#.{Op;fO!e#vO(p'nO~O!W;gO~P#.{Op;nO!e#vO(p'nO~O!W;oO~P#.{OP%d!ZR%d!Z[%d!Zp%d!Z!Q%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z#}%d!Z(_%d!Z(p%d!Z!Z%d!Z![%d!Z~P'%sOp;rO!e#vO(p'nO~Ot(dX~P1qO!O%qO~P!(yO(S!lO~P!(yO!WfX!ZfX#^fX~P%0XOP]XR]X[]Xp]X!O]X!Q]X!Z]X!ZfX!j]X!n]X#P]X#Q]X#^]X#^fX#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!efX!i]X!ifX(pfX~P'JlOP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]XO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z<ZO![$pa~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<fO!Q${O!]$|O!g=wO!j$xO#h<lO$V%_O$s<hO$u<jO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Oj)bO~P( bOp!cX(p!cX~P# qOp(hX(p(hX~P#!dO![]X![fX~P'JlO!WfX!W$yX!ZfX!Z$yX#^fX~P!/qO#i<OO~O!e#vO#i<OO~O#^<`O~O#t<SO~O#^<pO!Z(uX![(uX~O#^<`O!Z(sX![(sX~O#i<qO~Og<sO~P!0uO#i<yO~O#i<zO~O!e#vO#i<{O~O!e#vO#i<qO~O#}<|O~P#BPO#i<}O~O#i=OO~O#i=TO~O#i=UO~O#i=VO~O#i=WO~O#}=XO~P!0uO#}=YO~P!0uO#Q#R#S#U#V#Y#g#h#s$m$s$u$x%[%]%g%h%i%p%r%u%v%x%z~'|T#m!V'z(S#nq#l#op!O'{$['{(R$^(c~",
  goto: "$8f)ZPPPPPP)[PP)_P)pP+Q/VPPPP6aPP6wPP<oP@cP@yP@yPPP@yPCRP@yP@yP@yPCVPC[PCyPHsPPPHwPPPPHwKzPPPLQLrPHwPHwPP! QHwPPPHwPHwP!#XHwP!&o!'t!'}P!(q!(u!(q!,SPPPPPPP!,s!'tPP!-T!.uP!2RHwHw!2W!5d!:Q!:Q!>PPPP!>XHwPPPPPPPPPP!AhP!BuPPHw!DWPHwPHwHwHwHwHwPHw!EjP!HtP!KzP!LO!LY!L^!L^P!HqP!Lb!LbP# hP# lHwPHw# r#$wCV@yP@yP@y@yP#&U@y@y#(h@y#+`@y#-l@y@y#.[#0p#0p#0u#1O#0p#1ZPP#0pP@y#1s@y#5r@y@y6aPPP#9wPPP#:b#:bP#:bP#:x#:bPP#;OP#:uP#:u#;c#:u#;}#<T#<W)_#<Z)_P#<b#<b#<bP)_P)_P)_P)_PP)_P#<h#<kP#<k)_P#<oP#<rP)_P)_P)_P)_P)_P)_)_PP#<x#=O#=Z#=a#=g#=m#=s#>R#>X#>c#>i#>s#>y#?Z#?a#@R#@e#@k#@q#AP#Af#CZ#Ci#Cp#E[#Ej#G[#Gj#Gp#Gv#G|#HW#H^#Hd#Hn#IQ#IWPPPPPPPPPPP#I^PPPPPPP#JR#MY#Nr#Ny$ RPPP$&mP$&v$)o$0Y$0]$0`$1_$1b$1i$1qP$1w$1zP$2h$2l$3d$4r$4w$5_PP$5d$5j$5n$5q$5u$5y$6u$7^$7u$7y$7|$8P$8V$8Y$8^$8bR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0u+fQ1S+rQ1y,fQ3W.bQ5V0wQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
  nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
  maxTerm: 378,
  context: trackNewline,
  nodeProps: [
    ["isolate", -8, 5, 6, 14, 35, 37, 49, 51, 53, ""],
    ["group", -26, 9, 17, 19, 66, 206, 210, 214, 215, 217, 220, 223, 233, 235, 241, 243, 245, 247, 250, 256, 262, 264, 266, 268, 270, 272, 273, "Statement", -34, 13, 14, 30, 33, 34, 40, 49, 52, 53, 55, 60, 68, 70, 74, 78, 80, 82, 83, 108, 109, 118, 119, 135, 138, 140, 141, 142, 143, 144, 146, 147, 166, 168, 170, "Expression", -23, 29, 31, 35, 39, 41, 43, 172, 174, 176, 177, 179, 180, 181, 183, 184, 185, 187, 188, 189, 200, 202, 204, 205, "Type", -3, 86, 101, 107, "ClassItem"],
    ["openedBy", 23, "<", 36, "InterpolationStart", 54, "[", 58, "{", 71, "(", 159, "JSXStartCloseTag"],
    ["closedBy", -2, 24, 167, ">", 38, "InterpolationEnd", 48, "]", 59, "}", 72, ")", 164, "JSXEndTag"]
  ],
  propSources: [jsHighlight],
  skippedNodes: [0, 5, 6, 276],
  repeatNodeCount: 37,
  tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Up(X!b'z0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(V#S$h&j'{0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Up(X!b'{0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!n),Q(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(T':f$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(X!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Up(X!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Up(X!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(X!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(X!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(UpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(UpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Up(X!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(m%1l(Up(X!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Up(X!b$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Up(X!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Up(X!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(x+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(W';W$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(UpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!j/.^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!i!Lf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Up(X!b(S%&f#o(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Up(X!b#l(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Up(X!bp+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Z+Jf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Up(X!b!O.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!Y!L^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Up(X!b#m(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(X!b!V7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!V7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!V7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!V7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!V7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(X!b!V7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(X!b!V7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(X!b!V7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(X!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(X!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Up!V7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Up!V7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Up!V7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Up!V7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(UpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(UpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Up(X!b!V7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Up(X!b!V7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Up(X!b!V7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Up(X!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Up(X!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Up(X!b'|0/l!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Up(X!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(X!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(X!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(UpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(UpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Up(X!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!e$b$h&j#})Lv(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#P-<U(Up(X!b$m7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#p(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#q(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#^*!Y$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#i(Cl$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#q(Ch$e#|$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#q(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(p(Ct$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!z$Ip$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!Q0,v$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!W#)l$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Up(X!b(_+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Up(X!b(R,2j$^#t(c$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Up(X!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!]#Hb(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(w+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_![(CdtBr$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!o7`$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Up(X!b'z0/l$[#t(R,2j(c$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Up(X!b'{0/l$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
  tokenizers: [noSemicolon, noSemicolonType, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOv~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!S~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(a~~", 141, 338), new LocalTokenGroup("j~RQYZXz{^~^O(O~~aP!P!Qd~iO(P~~", 25, 321)],
  topRules: { "Script": [0, 7], "SingleExpression": [1, 274], "SingleClassItem": [2, 275] },
  dialects: { jsx: 0, ts: 15091 },
  dynamicPrecedences: { "78": 1, "80": 1, "92": 1, "168": 1, "198": 1 },
  specialized: [{ term: 325, get: (value) => spec_identifier[value] || -1 }, { term: 341, get: (value) => spec_word[value] || -1 }, { term: 93, get: (value) => spec_LessThan[value] || -1 }],
  tokenPrec: 15116
});

// https://esm.sh/v135/@codemirror/lang-javascript@6.0.1/es2020/lang-javascript.development.mjs
var snippets = [
  /* @__PURE__ */ snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
    label: "function",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
    label: "for",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
    label: "for",
    detail: "of loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("do {\n	${}\n} while (${})", {
    label: "do",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("while (${}) {\n	${}\n}", {
    label: "while",
    detail: "loop",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
    label: "try",
    detail: "/ catch block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n}", {
    label: "if",
    detail: "block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n} else {\n	${}\n}", {
    label: "if",
    detail: "/ else block",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
    label: "class",
    detail: "definition",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion('import {${names}} from "${module}"\n${}', {
    label: "import",
    detail: "named",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion('import ${name} from "${module}"\n${}', {
    label: "import",
    detail: "default",
    type: "keyword"
  })
];
var cache = /* @__PURE__ */ new NodeWeakMap();
var ScopeNodes = /* @__PURE__ */ new Set([
  "Script",
  "Block",
  "FunctionExpression",
  "FunctionDeclaration",
  "ArrowFunction",
  "MethodDeclaration",
  "ForStatement"
]);
function defID(type) {
  return (node3, def) => {
    let id2 = node3.node.getChild("VariableDefinition");
    if (id2)
      def(id2, type);
    return true;
  };
}
var functionContext = ["FunctionDeclaration"];
var gatherCompletions = {
  FunctionDeclaration: /* @__PURE__ */ defID("function"),
  ClassDeclaration: /* @__PURE__ */ defID("class"),
  ClassExpression: () => true,
  EnumDeclaration: /* @__PURE__ */ defID("constant"),
  TypeAliasDeclaration: /* @__PURE__ */ defID("type"),
  NamespaceDeclaration: /* @__PURE__ */ defID("namespace"),
  VariableDefinition(node3, def) {
    if (!node3.matchContext(functionContext))
      def(node3, "variable");
  },
  TypeDefinition(node3, def) {
    def(node3, "type");
  },
  __proto__: null
};
function getScope(doc2, node3) {
  let cached = cache.get(node3);
  if (cached)
    return cached;
  let completions = [], top2 = true;
  function def(node22, type) {
    let name2 = doc2.sliceString(node22.from, node22.to);
    completions.push({ label: name2, type });
  }
  node3.cursor(IterMode.IncludeAnonymous).iterate((node22) => {
    if (top2) {
      top2 = false;
    } else if (node22.name) {
      let gather = gatherCompletions[node22.name];
      if (gather && gather(node22, def) || ScopeNodes.has(node22.name))
        return false;
    } else if (node22.to - node22.from > 8192) {
      for (let c2 of getScope(doc2, node22.node))
        completions.push(c2);
      return false;
    }
  });
  cache.set(node3, completions);
  return completions;
}
var Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
var dontComplete = [
  "TemplateString",
  "String",
  "RegExp",
  "LineComment",
  "BlockComment",
  "VariableDefinition",
  "TypeDefinition",
  "Label",
  "PropertyDefinition",
  "PropertyName",
  "PrivatePropertyDefinition",
  "PrivatePropertyName"
];
function localCompletionSource(context) {
  let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
  if (dontComplete.indexOf(inner.name) > -1)
    return null;
  let isWord = inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
  if (!isWord && !context.explicit)
    return null;
  let options = [];
  for (let pos = inner; pos; pos = pos.parent) {
    if (ScopeNodes.has(pos.name))
      options = options.concat(getScope(context.state.doc, pos));
  }
  return {
    options,
    from: isWord ? inner.from : context.pos,
    validFor: Identifier
  };
}
var javascriptLanguage = /* @__PURE__ */ LRLanguage.define({
  parser: /* @__PURE__ */ parser.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
        TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
        LabeledStatement: flatIndent,
        SwitchBody: (context) => {
          let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
          return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
        },
        Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
        ArrowFunction: (cx3) => cx3.baseIndent + cx3.unit,
        "TemplateString BlockComment": () => -1,
        "Statement Property": /* @__PURE__ */ continuedIndent({ except: /^{/ }),
        JSXElement(context) {
          let closed = /^\s*<\//.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        JSXEscape(context) {
          let closed = /\s*\}/.test(context.textAfter);
          return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
        },
        "JSXOpenTag JSXSelfClosingTag"(context) {
          return context.column(context.node.from) + context.unit;
        }
      }),
      /* @__PURE__ */ foldNodeProp.add({
        "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": foldInside,
        BlockComment(tree) {
          return { from: tree.from + 2, to: tree.to - 2 };
        }
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
    wordChars: "$"
  }
});
var typescriptLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "ts" });
var jsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "jsx" });
var tsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "jsx ts" });
var keywords = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map((kw) => ({ label: kw, type: "keyword" }));
function javascript(config2 = {}) {
  let lang = config2.jsx ? config2.typescript ? tsxLanguage : jsxLanguage : config2.typescript ? typescriptLanguage : javascriptLanguage;
  return new LanguageSupport(lang, [
    javascriptLanguage.data.of({
      autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))
    }),
    javascriptLanguage.data.of({
      autocomplete: localCompletionSource
    }),
    config2.jsx ? autoCloseTags : []
  ]);
}
function elementName(doc2, tree, max = doc2.length) {
  if (!tree)
    return "";
  let name2 = tree.getChild("JSXIdentifier");
  return name2 ? doc2.sliceString(name2.from, Math.min(name2.to, max)) : "";
}
var android2 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
var autoCloseTags = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to2, text) => {
  if ((android2 ? view.composing : view.compositionStarted) || view.state.readOnly || from3 != to2 || text != ">" && text != "/" || !javascriptLanguage.isActiveAt(view.state, from3, -1))
    return false;
  let { state } = view;
  let changes = state.changeByRange((range) => {
    var _a2, _b, _c;
    let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name2;
    if (around.name == "JSXStartTag")
      around = around.parent;
    if (text == ">" && around.name == "JSXFragmentTag") {
      return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `><>` } };
    } else if (text == ">" && around.name == "JSXIdentifier") {
      if (((_b = (_a2 = around.parent) === null || _a2 === void 0 ? void 0 : _a2.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "JSXEndTag" && (name2 = elementName(state.doc, around.parent, head)))
        return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name2}>` } };
    } else if (text == "/" && around.name == "JSXFragmentTag") {
      let empty2 = around.parent, base2 = empty2 === null || empty2 === void 0 ? void 0 : empty2.parent;
      if (empty2.from == head - 1 && ((_c = base2.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "JSXEndTag" && (name2 = elementName(state.doc, base2 === null || base2 === void 0 ? void 0 : base2.firstChild, head))) {
        let insert2 = `/${name2}>`;
        return { range: EditorSelection.cursor(head + insert2.length), changes: { from: head, insert: insert2 } };
      }
    }
    return { range };
  });
  if (changes.changes.empty)
    return false;
  view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
  return true;
});

// other/js_notebook/main.js
window.allKeys = allKeys;
window.EditorView = EditorView;
var { html: html3 } = Elemental({
  ...components,
  Editor,
  Cell
});
function Editor({ initialText, onChange, ...props } = {}) {
  const initContainer = document.createElement("div");
  let editor = new EditorView({
    // state: EditorState.create({
    //     doc: initialText,
    //     extensions: [
    //         // basicSetup,
    //             // javascript(),
    //         // 
    //         // onChange
    //         // 
    //         ...(onChange ? [
    //             EditorView.updateListener.of(onChange),
    //         ] : []),
    //         // 
    //         // Ctrl-Enter hook
    //         // 
    //             // Prec.high(keymap.of([{
    //             //     key: "Ctrl-Enter",
    //             //     run() { console.log("Here"); return true }
    //             // }])),
    //     ],
    // }),
    doc: initialText,
    extensions: [
      basicSetup,
      javascript(),
      ...onChange ? [
        EditorView.updateListener.of(onChange)
      ] : []
    ],
    parent: initContainer
  });
  const element2 = initContainer.children[0];
  passAlongProps(element2, props);
  element2.editor = editor;
  Object.defineProperties(element2, {
    code: { get() {
      return editor.state.doc.text.join("\n");
    } }
  });
  window.editor = editor;
  return element2;
}
function Cell() {
  return html3`
        <Column class="cell">
            <Editor
                initialText="console.log('howdy')"
                onChange=${(change) => {
  }}
                min-height=20rem min-width=20rem background-color=cornflowerblue
                >
            </Editor>
        </Column>
    `;
}
document.body = html3`
    <body font-size=15px background-color=whitesmoke overflow=scroll width=100vw>
        <Column>
            <Cell>
            </Cell>
        </Column>
    </body>
`;
/*! Bundled license information:

showdown/dist/showdown.js:
  (*! showdown v 2.1.0 - 21-04-2022 *)
*/
/*!
* Toastify js 1.12.0
* https://github.com/apvarun/toastify-js
* @license MIT licensed
*
* Copyright (C) 2018 Varun A P
*/
/*! Bundled license information:

@vue/shared/dist/shared.esm-bundler.js:
  (**
  * @vue/shared v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)
  (*! #__NO_SIDE_EFFECTS__ *)
*/
/*! Bundled license information:

@vue/reactivity/dist/reactivity.esm-bundler.js:
  (**
  * @vue/reactivity v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)
*/
/*! Bundled license information:

@vue/shared/dist/shared.esm-bundler.js:
  (**
  * @vue/shared v3.4.15
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)
*/
/*! Bundled license information:

@vue/reactivity/dist/reactivity.esm-bundler.js:
  (**
  * @vue/reactivity v3.4.15
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)
*/
